# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'MysqlAccountPrivilegeDatabase',
    'MysqlBackupDatastore',
    'MysqlInstanceAutoScaling',
    'MysqlInstanceAutoScalingScalingStrategy',
    'MysqlInstanceBackupStrategy',
    'MysqlInstanceDatastore',
    'MysqlInstanceNode',
    'MysqlInstanceParameter',
    'MysqlParameterTemplateCompareDifference',
    'MysqlProxyAccessControlIpList',
    'MysqlProxyMasterNodeWeight',
    'MysqlProxyNode',
    'MysqlProxyParameter',
    'MysqlProxyReadonlyNodesWeight',
    'MysqlTableRestoreRestoreTable',
    'MysqlTableRestoreRestoreTableTable',
    'GetInfluxInstancesInstanceResult',
    'GetInfluxInstancesInstanceBackupStrategyResult',
    'GetInfluxInstancesInstanceDatastoreResult',
    'GetInfluxInstancesInstanceGroupResult',
    'GetInfluxInstancesInstanceGroupNodeResult',
    'GetInfluxInstancesInstanceGroupVolumeResult',
    'GetMysqlAuditLogDownloadLinksLinkResult',
    'GetMysqlAutoScalingRecordsRecordResult',
    'GetMysqlBackupsBackupResult',
    'GetMysqlBackupsBackupDatastoreResult',
    'GetMysqlConfigurationsConfigurationResult',
    'GetMysqlDatabasesDatabaseResult',
    'GetMysqlDatabasesDatabaseUserResult',
    'GetMysqlDiagnosisInstancesInstanceInfoResult',
    'GetMysqlDiagnosisStatisticsDiagnosisInfoResult',
    'GetMysqlEngineVersionsDatastoreResult',
    'GetMysqlErrorLogsErrorLogListResult',
    'GetMysqlFlavorsFlavorResult',
    'GetMysqlIncrementalBackupsBackupResult',
    'GetMysqlInstanceBackupStrategyResult',
    'GetMysqlInstanceDatastoreResult',
    'GetMysqlInstanceNodeResult',
    'GetMysqlInstancesInstanceResult',
    'GetMysqlInstancesInstanceBackupStrategyResult',
    'GetMysqlInstancesInstanceDatastoreResult',
    'GetMysqlInstancesInstanceNodeResult',
    'GetMysqlInstantTasksJobResult',
    'GetMysqlProjectQuotasQuotaResult',
    'GetMysqlProjectQuotasQuotaResourceResult',
    'GetMysqlProxiesProxyListResult',
    'GetMysqlProxiesProxyListMasterNodeWeightResult',
    'GetMysqlProxiesProxyListNodeResult',
    'GetMysqlProxiesProxyListReadonlyNodesWeightResult',
    'GetMysqlProxyFlavorsFlavorGroupResult',
    'GetMysqlProxyFlavorsFlavorGroupFlavorResult',
    'GetMysqlPtApplicableInstancesInstanceResult',
    'GetMysqlPtApplyRecordsHistoryResult',
    'GetMysqlPtModifyRecordsHistoryResult',
    'GetMysqlRecyclingInstancesInstanceResult',
    'GetMysqlRestoreTimeRangesRestoreTimeResult',
    'GetMysqlRestoredTablesDatabaseResult',
    'GetMysqlRestoredTablesDatabaseTableResult',
    'GetMysqlScheduledTasksTaskResult',
    'GetMysqlSlowLogsSlowLogListResult',
]

@pulumi.output_type
class MysqlAccountPrivilegeDatabase(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 readonly: _builtins.bool):
        """
        :param _builtins.str name: Specifies the database name.
        :param _builtins.bool readonly: Specifies whether the database permission is read-only.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "readonly", readonly)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the database name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def readonly(self) -> _builtins.bool:
        """
        Specifies whether the database permission is read-only.
        """
        return pulumi.get(self, "readonly")


@pulumi.output_type
class MysqlBackupDatastore(dict):
    def __init__(__self__, *,
                 type: Optional[_builtins.str] = None,
                 version: Optional[_builtins.str] = None):
        """
        :param _builtins.str type: Indicates the database engine.
        :param _builtins.str version: Indicates the database version.
        """
        if type is not None:
            pulumi.set(__self__, "type", type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Indicates the database engine.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[_builtins.str]:
        """
        Indicates the database version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class MysqlInstanceAutoScaling(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scalingStrategy":
            suggest = "scaling_strategy"
        elif key == "enlargeThreshold":
            suggest = "enlarge_threshold"
        elif key == "maxFlavor":
            suggest = "max_flavor"
        elif key == "maxReadOnlyCount":
            suggest = "max_read_only_count"
        elif key == "minFlavor":
            suggest = "min_flavor"
        elif key == "minReadOnlyCount":
            suggest = "min_read_only_count"
        elif key == "monitorCycle":
            suggest = "monitor_cycle"
        elif key == "readOnlyWeight":
            suggest = "read_only_weight"
        elif key == "reduceEnabled":
            suggest = "reduce_enabled"
        elif key == "silenceCycle":
            suggest = "silence_cycle"
        elif key == "silenceStartAt":
            suggest = "silence_start_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MysqlInstanceAutoScaling. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MysqlInstanceAutoScaling.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MysqlInstanceAutoScaling.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 scaling_strategy: 'outputs.MysqlInstanceAutoScalingScalingStrategy',
                 status: _builtins.str,
                 enlarge_threshold: Optional[_builtins.int] = None,
                 id: Optional[_builtins.str] = None,
                 max_flavor: Optional[_builtins.str] = None,
                 max_read_only_count: Optional[_builtins.int] = None,
                 min_flavor: Optional[_builtins.str] = None,
                 min_read_only_count: Optional[_builtins.int] = None,
                 monitor_cycle: Optional[_builtins.int] = None,
                 read_only_weight: Optional[_builtins.int] = None,
                 reduce_enabled: Optional[_builtins.bool] = None,
                 silence_cycle: Optional[_builtins.int] = None,
                 silence_start_at: Optional[_builtins.str] = None):
        """
        :param 'MysqlInstanceAutoScalingScalingStrategyArgs' scaling_strategy: Specifies the auto-scaling policy.
               The scaling_strategy structure is documented below.
        :param _builtins.str status: Indicates the node status.
        :param _builtins.int enlarge_threshold: Specifies the average CPU usage (%). It is mandatory when `status` is set to
               **ON**. Value options: **50â€“100**.
        :param _builtins.str id: Indicates the ID of an auto-scaling policy.
        :param _builtins.str max_flavor: Specifies the maximum specifications. It is mandatory when the instance specifications
               are automatically scaled up or down.
        :param _builtins.int max_read_only_count: Specifies the maximum number of read replicas. It is mandatory when read
               replicas are automatically added or deleted.
        :param _builtins.str min_flavor: Indicates the minimum specifications.
        :param _builtins.int min_read_only_count: Indicates the minimum number of read replicas.
        :param _builtins.int monitor_cycle: Specifies the observation period, in seconds. During the entire observation period,
               if the average CPU usage is greater than or equal to the preset value, a scale-up is triggered. It is mandatory when
               `status` is set to **ON**. Value options: **300**, **600**, **900** or **1800**.
        :param _builtins.int read_only_weight: Specifies the read weights of read replicas. It is mandatory when read replicas
               are automatically added or deleted.
               
               <a name="scaling_strategy_struct"></a>
               The `scaling_strategy` block supports:
        :param _builtins.bool reduce_enabled: Specifies whether auto-down is enabled. It is mandatory when `status` is set to
               **ON**. Value options:
               + **true**: enabled.
               + **false**: disabled.
        :param _builtins.int silence_cycle: Specifies the silent period, in seconds. It indicates the minimum interval between
               two auto scale-up operations or two scale-down operations. It is mandatory when `status` is set to **ON**. Value
               options: **300**,  **600**, **1800**, **3600**, **7200**, **10800**, **86400** or **604800**.
        :param _builtins.str silence_start_at: Indicates the start time of the silent period.
        """
        pulumi.set(__self__, "scaling_strategy", scaling_strategy)
        pulumi.set(__self__, "status", status)
        if enlarge_threshold is not None:
            pulumi.set(__self__, "enlarge_threshold", enlarge_threshold)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if max_flavor is not None:
            pulumi.set(__self__, "max_flavor", max_flavor)
        if max_read_only_count is not None:
            pulumi.set(__self__, "max_read_only_count", max_read_only_count)
        if min_flavor is not None:
            pulumi.set(__self__, "min_flavor", min_flavor)
        if min_read_only_count is not None:
            pulumi.set(__self__, "min_read_only_count", min_read_only_count)
        if monitor_cycle is not None:
            pulumi.set(__self__, "monitor_cycle", monitor_cycle)
        if read_only_weight is not None:
            pulumi.set(__self__, "read_only_weight", read_only_weight)
        if reduce_enabled is not None:
            pulumi.set(__self__, "reduce_enabled", reduce_enabled)
        if silence_cycle is not None:
            pulumi.set(__self__, "silence_cycle", silence_cycle)
        if silence_start_at is not None:
            pulumi.set(__self__, "silence_start_at", silence_start_at)

    @_builtins.property
    @pulumi.getter(name="scalingStrategy")
    def scaling_strategy(self) -> 'outputs.MysqlInstanceAutoScalingScalingStrategy':
        """
        Specifies the auto-scaling policy.
        The scaling_strategy structure is documented below.
        """
        return pulumi.get(self, "scaling_strategy")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the node status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="enlargeThreshold")
    def enlarge_threshold(self) -> Optional[_builtins.int]:
        """
        Specifies the average CPU usage (%). It is mandatory when `status` is set to
        **ON**. Value options: **50â€“100**.
        """
        return pulumi.get(self, "enlarge_threshold")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Indicates the ID of an auto-scaling policy.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="maxFlavor")
    def max_flavor(self) -> Optional[_builtins.str]:
        """
        Specifies the maximum specifications. It is mandatory when the instance specifications
        are automatically scaled up or down.
        """
        return pulumi.get(self, "max_flavor")

    @_builtins.property
    @pulumi.getter(name="maxReadOnlyCount")
    def max_read_only_count(self) -> Optional[_builtins.int]:
        """
        Specifies the maximum number of read replicas. It is mandatory when read
        replicas are automatically added or deleted.
        """
        return pulumi.get(self, "max_read_only_count")

    @_builtins.property
    @pulumi.getter(name="minFlavor")
    def min_flavor(self) -> Optional[_builtins.str]:
        """
        Indicates the minimum specifications.
        """
        return pulumi.get(self, "min_flavor")

    @_builtins.property
    @pulumi.getter(name="minReadOnlyCount")
    def min_read_only_count(self) -> Optional[_builtins.int]:
        """
        Indicates the minimum number of read replicas.
        """
        return pulumi.get(self, "min_read_only_count")

    @_builtins.property
    @pulumi.getter(name="monitorCycle")
    def monitor_cycle(self) -> Optional[_builtins.int]:
        """
        Specifies the observation period, in seconds. During the entire observation period,
        if the average CPU usage is greater than or equal to the preset value, a scale-up is triggered. It is mandatory when
        `status` is set to **ON**. Value options: **300**, **600**, **900** or **1800**.
        """
        return pulumi.get(self, "monitor_cycle")

    @_builtins.property
    @pulumi.getter(name="readOnlyWeight")
    def read_only_weight(self) -> Optional[_builtins.int]:
        """
        Specifies the read weights of read replicas. It is mandatory when read replicas
        are automatically added or deleted.

        <a name="scaling_strategy_struct"></a>
        The `scaling_strategy` block supports:
        """
        return pulumi.get(self, "read_only_weight")

    @_builtins.property
    @pulumi.getter(name="reduceEnabled")
    def reduce_enabled(self) -> Optional[_builtins.bool]:
        """
        Specifies whether auto-down is enabled. It is mandatory when `status` is set to
        **ON**. Value options:
        + **true**: enabled.
        + **false**: disabled.
        """
        return pulumi.get(self, "reduce_enabled")

    @_builtins.property
    @pulumi.getter(name="silenceCycle")
    def silence_cycle(self) -> Optional[_builtins.int]:
        """
        Specifies the silent period, in seconds. It indicates the minimum interval between
        two auto scale-up operations or two scale-down operations. It is mandatory when `status` is set to **ON**. Value
        options: **300**,  **600**, **1800**, **3600**, **7200**, **10800**, **86400** or **604800**.
        """
        return pulumi.get(self, "silence_cycle")

    @_builtins.property
    @pulumi.getter(name="silenceStartAt")
    def silence_start_at(self) -> Optional[_builtins.str]:
        """
        Indicates the start time of the silent period.
        """
        return pulumi.get(self, "silence_start_at")


@pulumi.output_type
class MysqlInstanceAutoScalingScalingStrategy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "flavorSwitch":
            suggest = "flavor_switch"
        elif key == "readOnlySwitch":
            suggest = "read_only_switch"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MysqlInstanceAutoScalingScalingStrategy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MysqlInstanceAutoScalingScalingStrategy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MysqlInstanceAutoScalingScalingStrategy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 flavor_switch: _builtins.str,
                 read_only_switch: _builtins.str):
        """
        :param _builtins.str flavor_switch: Specifies whether instance specifications can be automatically scaled up or down.
               Value options:
               + **ON**: Yes
               + **OFF**: No
        :param _builtins.str read_only_switch: Specifies whether read replicas can be automatically added or deleted. To use
               this function, ensure that there is only one proxy instance.
               Value options:
               + **ON**: Yes
               + **OFF**: No
        """
        pulumi.set(__self__, "flavor_switch", flavor_switch)
        pulumi.set(__self__, "read_only_switch", read_only_switch)

    @_builtins.property
    @pulumi.getter(name="flavorSwitch")
    def flavor_switch(self) -> _builtins.str:
        """
        Specifies whether instance specifications can be automatically scaled up or down.
        Value options:
        + **ON**: Yes
        + **OFF**: No
        """
        return pulumi.get(self, "flavor_switch")

    @_builtins.property
    @pulumi.getter(name="readOnlySwitch")
    def read_only_switch(self) -> _builtins.str:
        """
        Specifies whether read replicas can be automatically added or deleted. To use
        this function, ensure that there is only one proxy instance.
        Value options:
        + **ON**: Yes
        + **OFF**: No
        """
        return pulumi.get(self, "read_only_switch")


@pulumi.output_type
class MysqlInstanceBackupStrategy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "startTime":
            suggest = "start_time"
        elif key == "keepDays":
            suggest = "keep_days"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MysqlInstanceBackupStrategy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MysqlInstanceBackupStrategy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MysqlInstanceBackupStrategy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 start_time: _builtins.str,
                 keep_days: Optional[_builtins.int] = None):
        """
        :param _builtins.str start_time: Specifies the backup time window. Automated backups will be triggered during the
               backup time window. It must be a valid value in the "hh:mm-HH:MM" format. The current time is in the UTC format. The
               HH value must be 1 greater than the hh value. The values of mm and MM must be the same and must be set to 00. Example
               value: **08:00-09:00**, **03:00-04:00**.
        :param _builtins.int keep_days: Specifies the number of days to retain the generated backup files.  
               The value ranges from `0` to `35`. If this parameter is set to `0`, the automated backup policy is not set.
               If this parameter is not transferred, the automated backup policy is enabled by default.
               Backup files are stored for seven days by default.
        """
        pulumi.set(__self__, "start_time", start_time)
        if keep_days is not None:
            pulumi.set(__self__, "keep_days", keep_days)

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        """
        Specifies the backup time window. Automated backups will be triggered during the
        backup time window. It must be a valid value in the "hh:mm-HH:MM" format. The current time is in the UTC format. The
        HH value must be 1 greater than the hh value. The values of mm and MM must be the same and must be set to 00. Example
        value: **08:00-09:00**, **03:00-04:00**.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter(name="keepDays")
    def keep_days(self) -> Optional[_builtins.int]:
        """
        Specifies the number of days to retain the generated backup files.  
        The value ranges from `0` to `35`. If this parameter is set to `0`, the automated backup policy is not set.
        If this parameter is not transferred, the automated backup policy is enabled by default.
        Backup files are stored for seven days by default.
        """
        return pulumi.get(self, "keep_days")


@pulumi.output_type
class MysqlInstanceDatastore(dict):
    def __init__(__self__, *,
                 engine: _builtins.str,
                 version: _builtins.str):
        """
        :param _builtins.str engine: Specifies the database engine. Only "gaussdb-mysql" is supported now.
               Changing this parameter will create a new resource.
        :param _builtins.str version: Specifies the database version. Only "8.0" is supported now.
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "engine", engine)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def engine(self) -> _builtins.str:
        """
        Specifies the database engine. Only "gaussdb-mysql" is supported now.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "engine")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        Specifies the database version. Only "8.0" is supported now.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class MysqlInstanceNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availabilityZone":
            suggest = "availability_zone"
        elif key == "privateReadIp":
            suggest = "private_read_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MysqlInstanceNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MysqlInstanceNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MysqlInstanceNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability_zone: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 private_read_ip: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None,
                 type: Optional[_builtins.str] = None):
        """
        :param _builtins.str availability_zone: Indicates the availability zone where the node resides.
        :param _builtins.str id: Indicates the ID of an auto-scaling policy.
        :param _builtins.str name: Specifies the instance name, which can be the same as an existing instance name.
               The value must be `4` to `64` characters in length and start with a letter.
               It is case-sensitive and can contain only letters, digits, hyphens (-), and underscores (_).
        :param _builtins.str private_read_ip: Indicates the private IP address of a node.
        :param _builtins.str status: Indicates the node status.
        :param _builtins.str type: Indicates the node type: master or slave.
        """
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_read_ip is not None:
            pulumi.set(__self__, "private_read_ip", private_read_ip)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[_builtins.str]:
        """
        Indicates the availability zone where the node resides.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Indicates the ID of an auto-scaling policy.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the instance name, which can be the same as an existing instance name.
        The value must be `4` to `64` characters in length and start with a letter.
        It is case-sensitive and can contain only letters, digits, hyphens (-), and underscores (_).
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="privateReadIp")
    def private_read_ip(self) -> Optional[_builtins.str]:
        """
        Indicates the private IP address of a node.
        """
        return pulumi.get(self, "private_read_ip")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Indicates the node status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Indicates the node type: master or slave.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class MysqlInstanceParameter(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str name: Specifies the instance name, which can be the same as an existing instance name.
               The value must be `4` to `64` characters in length and start with a letter.
               It is case-sensitive and can contain only letters, digits, hyphens (-), and underscores (_).
        :param _builtins.str value: Specifies the value of the parameter.
               
               <a name="auto_scaling_struct"></a>
               The `auto_scaling` block supports:
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the instance name, which can be the same as an existing instance name.
        The value must be `4` to `64` characters in length and start with a letter.
        It is case-sensitive and can contain only letters, digits, hyphens (-), and underscores (_).
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the value of the parameter.

        <a name="auto_scaling_struct"></a>
        The `auto_scaling` block supports:
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class MysqlParameterTemplateCompareDifference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "parameterName":
            suggest = "parameter_name"
        elif key == "sourceValue":
            suggest = "source_value"
        elif key == "targetValue":
            suggest = "target_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MysqlParameterTemplateCompareDifference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MysqlParameterTemplateCompareDifference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MysqlParameterTemplateCompareDifference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 parameter_name: Optional[_builtins.str] = None,
                 source_value: Optional[_builtins.str] = None,
                 target_value: Optional[_builtins.str] = None):
        """
        :param _builtins.str parameter_name: Indicates the parameter name.
        :param _builtins.str source_value: Indicates the parameter value in the source parameter template.
        :param _builtins.str target_value: Indicates the parameter value in the destination parameter template.
        """
        if parameter_name is not None:
            pulumi.set(__self__, "parameter_name", parameter_name)
        if source_value is not None:
            pulumi.set(__self__, "source_value", source_value)
        if target_value is not None:
            pulumi.set(__self__, "target_value", target_value)

    @_builtins.property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> Optional[_builtins.str]:
        """
        Indicates the parameter name.
        """
        return pulumi.get(self, "parameter_name")

    @_builtins.property
    @pulumi.getter(name="sourceValue")
    def source_value(self) -> Optional[_builtins.str]:
        """
        Indicates the parameter value in the source parameter template.
        """
        return pulumi.get(self, "source_value")

    @_builtins.property
    @pulumi.getter(name="targetValue")
    def target_value(self) -> Optional[_builtins.str]:
        """
        Indicates the parameter value in the destination parameter template.
        """
        return pulumi.get(self, "target_value")


@pulumi.output_type
class MysqlProxyAccessControlIpList(dict):
    def __init__(__self__, *,
                 ip: _builtins.str,
                 description: Optional[_builtins.str] = None):
        """
        :param _builtins.str ip: Specifies the IP address or CIDR block.
        :param _builtins.str description: Specifies the description.
               The description contains a maximum of `50` characters and the angle brackets (< and >) are not allowed.
        """
        pulumi.set(__self__, "ip", ip)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter
    def ip(self) -> _builtins.str:
        """
        Specifies the IP address or CIDR block.
        """
        return pulumi.get(self, "ip")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Specifies the description.
        The description contains a maximum of `50` characters and the angle brackets (< and >) are not allowed.
        """
        return pulumi.get(self, "description")


@pulumi.output_type
class MysqlProxyMasterNodeWeight(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 weight: _builtins.int):
        """
        :param _builtins.str id: Specifies the ID of the node.
        :param _builtins.int weight: Specifies the weight assigned to the node.
               + If `route_mode` is `0`, the value is `0` to `1,000`.
               + If `route_mode` is `1`, the value for the primary node is `0` and the value for read replicas is `0` or `1`.
               + If `route_mode` is `2`, the value for the primary node is `1` and the value for read replicas is `0` or `1`.
               
               <a name="parameters_struct"></a>
               The `parameters` block supports:
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Specifies the ID of the node.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> _builtins.int:
        """
        Specifies the weight assigned to the node.
        + If `route_mode` is `0`, the value is `0` to `1,000`.
        + If `route_mode` is `1`, the value for the primary node is `0` and the value for read replicas is `0` or `1`.
        + If `route_mode` is `2`, the value for the primary node is `1` and the value for read replicas is `0` or `1`.

        <a name="parameters_struct"></a>
        The `parameters` block supports:
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class MysqlProxyNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "azCode":
            suggest = "az_code"
        elif key == "frozenFlag":
            suggest = "frozen_flag"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MysqlProxyNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MysqlProxyNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MysqlProxyNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 az_code: Optional[_builtins.str] = None,
                 frozen_flag: Optional[_builtins.int] = None,
                 id: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 role: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None):
        """
        :param _builtins.str az_code: Indicates the proxy node AZ.
        :param _builtins.int frozen_flag: Indicates whether the proxy node is frozen. The values can be:
               + **0**: unfrozen.
               + **1**: frozen.
               + **2**: deleted after being frozen.
        :param _builtins.str id: Specifies the ID of the node.
        :param _builtins.str name: Specifies the name of the parameter.
        :param _builtins.str role: Indicates the proxy node role. The values can be:
               + **master**: primary node.
               + **slave**: read replica.
        :param _builtins.str status: Indicates the proxy node status. The values can be:
               + **ACTIVE**: The node is available.
               + **ABNORMAL**: The node is abnormal.
               + **FAILED**: The node fails.
               + **DELETED**: The node has been deleted.
        """
        if az_code is not None:
            pulumi.set(__self__, "az_code", az_code)
        if frozen_flag is not None:
            pulumi.set(__self__, "frozen_flag", frozen_flag)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="azCode")
    def az_code(self) -> Optional[_builtins.str]:
        """
        Indicates the proxy node AZ.
        """
        return pulumi.get(self, "az_code")

    @_builtins.property
    @pulumi.getter(name="frozenFlag")
    def frozen_flag(self) -> Optional[_builtins.int]:
        """
        Indicates whether the proxy node is frozen. The values can be:
        + **0**: unfrozen.
        + **1**: frozen.
        + **2**: deleted after being frozen.
        """
        return pulumi.get(self, "frozen_flag")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Specifies the ID of the node.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the name of the parameter.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def role(self) -> Optional[_builtins.str]:
        """
        Indicates the proxy node role. The values can be:
        + **master**: primary node.
        + **slave**: read replica.
        """
        return pulumi.get(self, "role")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Indicates the proxy node status. The values can be:
        + **ACTIVE**: The node is available.
        + **ABNORMAL**: The node is abnormal.
        + **FAILED**: The node fails.
        + **DELETED**: The node has been deleted.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class MysqlProxyParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "elemType":
            suggest = "elem_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MysqlProxyParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MysqlProxyParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MysqlProxyParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 elem_type: _builtins.str,
                 name: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str elem_type: Specifies the parent tag type of the parameter.
               
               <a name="access_control_ip_list_struct"></a>
               The `access_control_ip_list` block supports:
        :param _builtins.str name: Specifies the name of the parameter.
        :param _builtins.str value: Specifies the value of the parameter.
        """
        pulumi.set(__self__, "elem_type", elem_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="elemType")
    def elem_type(self) -> _builtins.str:
        """
        Specifies the parent tag type of the parameter.

        <a name="access_control_ip_list_struct"></a>
        The `access_control_ip_list` block supports:
        """
        return pulumi.get(self, "elem_type")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the parameter.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the value of the parameter.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class MysqlProxyReadonlyNodesWeight(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 weight: _builtins.int):
        """
        :param _builtins.str id: Specifies the ID of the node.
        :param _builtins.int weight: Specifies the weight assigned to the node.
               + If `route_mode` is `0`, the value is `0` to `1,000`.
               + If `route_mode` is `1`, the value for the primary node is `0` and the value for read replicas is `0` or `1`.
               + If `route_mode` is `2`, the value for the primary node is `1` and the value for read replicas is `0` or `1`.
               
               <a name="parameters_struct"></a>
               The `parameters` block supports:
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Specifies the ID of the node.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> _builtins.int:
        """
        Specifies the weight assigned to the node.
        + If `route_mode` is `0`, the value is `0` to `1,000`.
        + If `route_mode` is `1`, the value for the primary node is `0` and the value for read replicas is `0` or `1`.
        + If `route_mode` is `2`, the value for the primary node is `1` and the value for read replicas is `0` or `1`.

        <a name="parameters_struct"></a>
        The `parameters` block supports:
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class MysqlTableRestoreRestoreTable(dict):
    def __init__(__self__, *,
                 database: _builtins.str,
                 tables: Sequence['outputs.MysqlTableRestoreRestoreTableTable']):
        """
        :param _builtins.str database: Specifies the database name.
               
               Changing this creates a new resource.
        :param Sequence['MysqlTableRestoreRestoreTableTableArgs'] tables: Specifies the tables.
               The tables structure is documented below.
               
               Changing this creates a new resource.
               
               <a name="tables_struct"></a>
               The `tables` block supports:
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "tables", tables)

    @_builtins.property
    @pulumi.getter
    def database(self) -> _builtins.str:
        """
        Specifies the database name.

        Changing this creates a new resource.
        """
        return pulumi.get(self, "database")

    @_builtins.property
    @pulumi.getter
    def tables(self) -> Sequence['outputs.MysqlTableRestoreRestoreTableTable']:
        """
        Specifies the tables.
        The tables structure is documented below.

        Changing this creates a new resource.

        <a name="tables_struct"></a>
        The `tables` block supports:
        """
        return pulumi.get(self, "tables")


@pulumi.output_type
class MysqlTableRestoreRestoreTableTable(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "newName":
            suggest = "new_name"
        elif key == "oldName":
            suggest = "old_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MysqlTableRestoreRestoreTableTable. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MysqlTableRestoreRestoreTableTable.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MysqlTableRestoreRestoreTableTable.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 new_name: _builtins.str,
                 old_name: _builtins.str):
        """
        :param _builtins.str new_name: Specifies the name of the table after restoration.
               
               Changing this creates a new resource.
        :param _builtins.str old_name: Specifies the name of the table before restoration.
               
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "new_name", new_name)
        pulumi.set(__self__, "old_name", old_name)

    @_builtins.property
    @pulumi.getter(name="newName")
    def new_name(self) -> _builtins.str:
        """
        Specifies the name of the table after restoration.

        Changing this creates a new resource.
        """
        return pulumi.get(self, "new_name")

    @_builtins.property
    @pulumi.getter(name="oldName")
    def old_name(self) -> _builtins.str:
        """
        Specifies the name of the table before restoration.

        Changing this creates a new resource.
        """
        return pulumi.get(self, "old_name")


@pulumi.output_type
class GetInfluxInstancesInstanceResult(dict):
    def __init__(__self__, *,
                 actions: Sequence[_builtins.str],
                 availability_zone: _builtins.str,
                 backup_strategies: Sequence['outputs.GetInfluxInstancesInstanceBackupStrategyResult'],
                 created_at: _builtins.str,
                 datastores: Sequence['outputs.GetInfluxInstancesInstanceDatastoreResult'],
                 db_user_name: _builtins.str,
                 dedicated_resource_id: _builtins.str,
                 engine: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 groups: Sequence['outputs.GetInfluxInstancesInstanceGroupResult'],
                 id: _builtins.str,
                 lb_ip_address: _builtins.str,
                 lb_port: _builtins.str,
                 maintain_begin: _builtins.str,
                 maintain_end: _builtins.str,
                 mode: _builtins.str,
                 name: _builtins.str,
                 pay_mode: _builtins.str,
                 port: _builtins.str,
                 region: _builtins.str,
                 security_group_id: _builtins.str,
                 status: _builtins.str,
                 subnet_id: _builtins.str,
                 time_zone: _builtins.str,
                 updated_at: _builtins.str,
                 vpc_id: _builtins.str):
        """
        :param Sequence[_builtins.str] actions: Indicates the operation that is executed on the instance.
        :param _builtins.str availability_zone: Indicates the availability zone.
        :param Sequence['GetInfluxInstancesInstanceBackupStrategyArgs'] backup_strategies: Indicates the backup policy.
               The backup_strategy structure is documented below.
        :param _builtins.str created_at: Indicates the instance creation time.
        :param Sequence['GetInfluxInstancesInstanceDatastoreArgs'] datastores: Indicates the database information.
               The datastore structure is documented below.
        :param _builtins.str db_user_name: Indicates the default username. The value is **rwuser**.
        :param _builtins.str dedicated_resource_id: Indicates the dedicated resource ID. This parameter is returned only when the instance belongs
               to a dedicated resource pool.
        :param _builtins.str engine: Indicates the database engine.
        :param _builtins.str enterprise_project_id: Indicates the enterprise project ID.
        :param Sequence['GetInfluxInstancesInstanceGroupArgs'] groups: Indicates the group information.
               The groups structure is documented below.
        :param _builtins.str id: Indicates the node ID.
        :param _builtins.str lb_ip_address: Indicates the IP address bound to the load balancer. This parameter is returned only when an IP
               address is specified for the load balancer.
        :param _builtins.str lb_port: Indicates the load balancing port number. This parameter is returned only when there is a load balancer address.
        :param _builtins.str maintain_begin: Indicates the start time for a maintenance window.
        :param _builtins.str maintain_end: Indicates the end time for a maintenance window.
        :param _builtins.str mode: Specifies the instance type. Value options:
               + **Cluster**: indicating that the instance is a GeminiDB Influx instance.
               + **InfluxdbSingle**: indicating that the instance is a single-node GeminiDB Influx instance.
        :param _builtins.str name: Specifies the name of the instance. If you enter an instance name starting with an
               asterisk (*), fuzzy search results are returned. If you enter a valid instance name, an exact result is returned.
        :param _builtins.str pay_mode: Indicates the billing mode. The value can be:
               + **0**: indicates the instance is billed on a pay-per-use basis.
               + **1**: indicates the instance is billed on a yearly/monthly basis.
        :param _builtins.str port: Indicates the database port.
        :param _builtins.str region: The region in which to obtain the instances. If omitted, the provider-level region will
               be used.
        :param _builtins.str security_group_id: Indicates the security group ID.
        :param _builtins.str status: Indicates the node status. The value can be:
               + **normal**: indicating that the node is normal.
               + **abnormal**: indicating that the node is abnormal.
               + **creating**: indicating that the node is being created.
               + **createfail**: indicating that the node failed to be created.
               + **deleted**: indicating that the node has been deleted.
               + **resizefailed**: indicating that the node specifications failed to be changed.
               + **enlargefail**:  indicating nodes failed to be added.
        :param _builtins.str subnet_id: Specifies the network ID of a subnet.
        :param _builtins.str time_zone: Indicates the time zone.
        :param _builtins.str updated_at: Indicates the time when an instance is updated.
        :param _builtins.str vpc_id: Specifies the VPC ID.
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "backup_strategies", backup_strategies)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "datastores", datastores)
        pulumi.set(__self__, "db_user_name", db_user_name)
        pulumi.set(__self__, "dedicated_resource_id", dedicated_resource_id)
        pulumi.set(__self__, "engine", engine)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "groups", groups)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lb_ip_address", lb_ip_address)
        pulumi.set(__self__, "lb_port", lb_port)
        pulumi.set(__self__, "maintain_begin", maintain_begin)
        pulumi.set(__self__, "maintain_end", maintain_end)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "pay_mode", pay_mode)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "time_zone", time_zone)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter
    def actions(self) -> Sequence[_builtins.str]:
        """
        Indicates the operation that is executed on the instance.
        """
        return pulumi.get(self, "actions")

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> _builtins.str:
        """
        Indicates the availability zone.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter(name="backupStrategies")
    def backup_strategies(self) -> Sequence['outputs.GetInfluxInstancesInstanceBackupStrategyResult']:
        """
        Indicates the backup policy.
        The backup_strategy structure is documented below.
        """
        return pulumi.get(self, "backup_strategies")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Indicates the instance creation time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def datastores(self) -> Sequence['outputs.GetInfluxInstancesInstanceDatastoreResult']:
        """
        Indicates the database information.
        The datastore structure is documented below.
        """
        return pulumi.get(self, "datastores")

    @_builtins.property
    @pulumi.getter(name="dbUserName")
    def db_user_name(self) -> _builtins.str:
        """
        Indicates the default username. The value is **rwuser**.
        """
        return pulumi.get(self, "db_user_name")

    @_builtins.property
    @pulumi.getter(name="dedicatedResourceId")
    def dedicated_resource_id(self) -> _builtins.str:
        """
        Indicates the dedicated resource ID. This parameter is returned only when the instance belongs
        to a dedicated resource pool.
        """
        return pulumi.get(self, "dedicated_resource_id")

    @_builtins.property
    @pulumi.getter
    def engine(self) -> _builtins.str:
        """
        Indicates the database engine.
        """
        return pulumi.get(self, "engine")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Indicates the enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def groups(self) -> Sequence['outputs.GetInfluxInstancesInstanceGroupResult']:
        """
        Indicates the group information.
        The groups structure is documented below.
        """
        return pulumi.get(self, "groups")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the node ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lbIpAddress")
    def lb_ip_address(self) -> _builtins.str:
        """
        Indicates the IP address bound to the load balancer. This parameter is returned only when an IP
        address is specified for the load balancer.
        """
        return pulumi.get(self, "lb_ip_address")

    @_builtins.property
    @pulumi.getter(name="lbPort")
    def lb_port(self) -> _builtins.str:
        """
        Indicates the load balancing port number. This parameter is returned only when there is a load balancer address.
        """
        return pulumi.get(self, "lb_port")

    @_builtins.property
    @pulumi.getter(name="maintainBegin")
    def maintain_begin(self) -> _builtins.str:
        """
        Indicates the start time for a maintenance window.
        """
        return pulumi.get(self, "maintain_begin")

    @_builtins.property
    @pulumi.getter(name="maintainEnd")
    def maintain_end(self) -> _builtins.str:
        """
        Indicates the end time for a maintenance window.
        """
        return pulumi.get(self, "maintain_end")

    @_builtins.property
    @pulumi.getter
    def mode(self) -> _builtins.str:
        """
        Specifies the instance type. Value options:
        + **Cluster**: indicating that the instance is a GeminiDB Influx instance.
        + **InfluxdbSingle**: indicating that the instance is a single-node GeminiDB Influx instance.
        """
        return pulumi.get(self, "mode")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the instance. If you enter an instance name starting with an
        asterisk (*), fuzzy search results are returned. If you enter a valid instance name, an exact result is returned.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="payMode")
    def pay_mode(self) -> _builtins.str:
        """
        Indicates the billing mode. The value can be:
        + **0**: indicates the instance is billed on a pay-per-use basis.
        + **1**: indicates the instance is billed on a yearly/monthly basis.
        """
        return pulumi.get(self, "pay_mode")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.str:
        """
        Indicates the database port.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        The region in which to obtain the instances. If omitted, the provider-level region will
        be used.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> _builtins.str:
        """
        Indicates the security group ID.
        """
        return pulumi.get(self, "security_group_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the node status. The value can be:
        + **normal**: indicating that the node is normal.
        + **abnormal**: indicating that the node is abnormal.
        + **creating**: indicating that the node is being created.
        + **createfail**: indicating that the node failed to be created.
        + **deleted**: indicating that the node has been deleted.
        + **resizefailed**: indicating that the node specifications failed to be changed.
        + **enlargefail**:  indicating nodes failed to be added.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        Specifies the network ID of a subnet.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> _builtins.str:
        """
        Indicates the time zone.
        """
        return pulumi.get(self, "time_zone")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        Indicates the time when an instance is updated.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        """
        Specifies the VPC ID.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetInfluxInstancesInstanceBackupStrategyResult(dict):
    def __init__(__self__, *,
                 keep_days: _builtins.int,
                 start_time: _builtins.str):
        """
        :param _builtins.int keep_days: Indicates the number of days to retain the generated.
        :param _builtins.str start_time: Indicates the backup time window.
        """
        pulumi.set(__self__, "keep_days", keep_days)
        pulumi.set(__self__, "start_time", start_time)

    @_builtins.property
    @pulumi.getter(name="keepDays")
    def keep_days(self) -> _builtins.int:
        """
        Indicates the number of days to retain the generated.
        """
        return pulumi.get(self, "keep_days")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        """
        Indicates the backup time window.
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class GetInfluxInstancesInstanceDatastoreResult(dict):
    def __init__(__self__, *,
                 engine: _builtins.str,
                 patch_available: _builtins.bool,
                 version: _builtins.str):
        """
        :param _builtins.str engine: Indicates the database engine.
        :param _builtins.bool patch_available: Indicates the whether there is an available patch for upgrade. If **true** is returned, you can
               install a patch to upgrade the instance.
        :param _builtins.str version: Indicates the database version.
        """
        pulumi.set(__self__, "engine", engine)
        pulumi.set(__self__, "patch_available", patch_available)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def engine(self) -> _builtins.str:
        """
        Indicates the database engine.
        """
        return pulumi.get(self, "engine")

    @_builtins.property
    @pulumi.getter(name="patchAvailable")
    def patch_available(self) -> _builtins.bool:
        """
        Indicates the whether there is an available patch for upgrade. If **true** is returned, you can
        install a patch to upgrade the instance.
        """
        return pulumi.get(self, "patch_available")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        Indicates the database version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetInfluxInstancesInstanceGroupResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 nodes: Sequence['outputs.GetInfluxInstancesInstanceGroupNodeResult'],
                 status: _builtins.str,
                 volumes: Sequence['outputs.GetInfluxInstancesInstanceGroupVolumeResult']):
        """
        :param _builtins.str id: Indicates the node ID.
        :param Sequence['GetInfluxInstancesInstanceGroupNodeArgs'] nodes: Indicates the node information.
               The nodes structure is documented below.
        :param _builtins.str status: Indicates the node status. The value can be:
               + **normal**: indicating that the node is normal.
               + **abnormal**: indicating that the node is abnormal.
               + **creating**: indicating that the node is being created.
               + **createfail**: indicating that the node failed to be created.
               + **deleted**: indicating that the node has been deleted.
               + **resizefailed**: indicating that the node specifications failed to be changed.
               + **enlargefail**:  indicating nodes failed to be added.
        :param Sequence['GetInfluxInstancesInstanceGroupVolumeArgs'] volumes: Indicates the volume information.
               The volume structure is documented below.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "nodes", nodes)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "volumes", volumes)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the node ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.GetInfluxInstancesInstanceGroupNodeResult']:
        """
        Indicates the node information.
        The nodes structure is documented below.
        """
        return pulumi.get(self, "nodes")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the node status. The value can be:
        + **normal**: indicating that the node is normal.
        + **abnormal**: indicating that the node is abnormal.
        + **creating**: indicating that the node is being created.
        + **createfail**: indicating that the node failed to be created.
        + **deleted**: indicating that the node has been deleted.
        + **resizefailed**: indicating that the node specifications failed to be changed.
        + **enlargefail**:  indicating nodes failed to be added.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def volumes(self) -> Sequence['outputs.GetInfluxInstancesInstanceGroupVolumeResult']:
        """
        Indicates the volume information.
        The volume structure is documented below.
        """
        return pulumi.get(self, "volumes")


@pulumi.output_type
class GetInfluxInstancesInstanceGroupNodeResult(dict):
    def __init__(__self__, *,
                 availability_zone: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 private_ip: _builtins.str,
                 public_ip: _builtins.str,
                 spec_code: _builtins.str,
                 status: _builtins.str,
                 subnet_id: _builtins.str,
                 support_reduce: _builtins.bool):
        """
        :param _builtins.str availability_zone: Indicates the availability zone.
        :param _builtins.str id: Indicates the node ID.
        :param _builtins.str name: Specifies the name of the instance. If you enter an instance name starting with an
               asterisk (*), fuzzy search results are returned. If you enter a valid instance name, an exact result is returned.
        :param _builtins.str private_ip: Indicates the Private IP address of the node.
        :param _builtins.str public_ip: Indicates the bound EIP. This parameter is valid only for nodes bound with EIPs.
        :param _builtins.str spec_code: Indicates the resource specification code.
        :param _builtins.str status: Indicates the node status. The value can be:
               + **normal**: indicating that the node is normal.
               + **abnormal**: indicating that the node is abnormal.
               + **creating**: indicating that the node is being created.
               + **createfail**: indicating that the node failed to be created.
               + **deleted**: indicating that the node has been deleted.
               + **resizefailed**: indicating that the node specifications failed to be changed.
               + **enlargefail**:  indicating nodes failed to be added.
        :param _builtins.str subnet_id: Specifies the network ID of a subnet.
        :param _builtins.bool support_reduce: Indicates whether instance nodes can be deleted. The value can be:
               + **true**: indicating that instance nodes can be deleted.
               + **false**: indicating that instance nodes cannot be deleted.
        """
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "private_ip", private_ip)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "spec_code", spec_code)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "support_reduce", support_reduce)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> _builtins.str:
        """
        Indicates the availability zone.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the node ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the instance. If you enter an instance name starting with an
        asterisk (*), fuzzy search results are returned. If you enter a valid instance name, an exact result is returned.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> _builtins.str:
        """
        Indicates the Private IP address of the node.
        """
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> _builtins.str:
        """
        Indicates the bound EIP. This parameter is valid only for nodes bound with EIPs.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter(name="specCode")
    def spec_code(self) -> _builtins.str:
        """
        Indicates the resource specification code.
        """
        return pulumi.get(self, "spec_code")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the node status. The value can be:
        + **normal**: indicating that the node is normal.
        + **abnormal**: indicating that the node is abnormal.
        + **creating**: indicating that the node is being created.
        + **createfail**: indicating that the node failed to be created.
        + **deleted**: indicating that the node has been deleted.
        + **resizefailed**: indicating that the node specifications failed to be changed.
        + **enlargefail**:  indicating nodes failed to be added.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        Specifies the network ID of a subnet.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter(name="supportReduce")
    def support_reduce(self) -> _builtins.bool:
        """
        Indicates whether instance nodes can be deleted. The value can be:
        + **true**: indicating that instance nodes can be deleted.
        + **false**: indicating that instance nodes cannot be deleted.
        """
        return pulumi.get(self, "support_reduce")


@pulumi.output_type
class GetInfluxInstancesInstanceGroupVolumeResult(dict):
    def __init__(__self__, *,
                 size: _builtins.str,
                 used: _builtins.str):
        """
        :param _builtins.str size: Indicates the storage space, in GB.
        :param _builtins.str used: Indicates the used storage space, in GB.
        """
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "used", used)

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.str:
        """
        Indicates the storage space, in GB.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def used(self) -> _builtins.str:
        """
        Indicates the used storage space, in GB.
        """
        return pulumi.get(self, "used")


@pulumi.output_type
class GetMysqlAuditLogDownloadLinksLinkResult(dict):
    def __init__(__self__, *,
                 download_link: _builtins.str,
                 full_name: _builtins.str,
                 link_expired_time: _builtins.str,
                 name: _builtins.str,
                 size: _builtins.int,
                 updated_time: _builtins.str):
        """
        :param _builtins.str download_link: Indicates the link for downloading the file.
        :param _builtins.str full_name: Indicates the full name of the file.
        :param _builtins.str link_expired_time: Indicates the link expiration time.
        :param _builtins.str name: Indicates the name of the file.
        :param _builtins.int size: Indicates the file size, in KB.
        :param _builtins.str updated_time: Indicates the last modification time of the SQL file.
        """
        pulumi.set(__self__, "download_link", download_link)
        pulumi.set(__self__, "full_name", full_name)
        pulumi.set(__self__, "link_expired_time", link_expired_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "updated_time", updated_time)

    @_builtins.property
    @pulumi.getter(name="downloadLink")
    def download_link(self) -> _builtins.str:
        """
        Indicates the link for downloading the file.
        """
        return pulumi.get(self, "download_link")

    @_builtins.property
    @pulumi.getter(name="fullName")
    def full_name(self) -> _builtins.str:
        """
        Indicates the full name of the file.
        """
        return pulumi.get(self, "full_name")

    @_builtins.property
    @pulumi.getter(name="linkExpiredTime")
    def link_expired_time(self) -> _builtins.str:
        """
        Indicates the link expiration time.
        """
        return pulumi.get(self, "link_expired_time")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the name of the file.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        Indicates the file size, in KB.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> _builtins.str:
        """
        Indicates the last modification time of the SQL file.
        """
        return pulumi.get(self, "updated_time")


@pulumi.output_type
class GetMysqlAutoScalingRecordsRecordResult(dict):
    def __init__(__self__, *,
                 create_at: _builtins.str,
                 id: _builtins.str,
                 instance_id: _builtins.str,
                 instance_name: _builtins.str,
                 original_value: _builtins.str,
                 result: _builtins.str,
                 scaling_type: _builtins.str,
                 target_value: _builtins.str):
        """
        :param _builtins.str create_at: Indicates the scaling time.
        :param _builtins.str id: Indicates the record ID.
        :param _builtins.str instance_id: Specifies the instance ID.
        :param _builtins.str instance_name: Indicates the instance name.
        :param _builtins.str original_value: Indicates the original value.
        :param _builtins.str result: Indicates the scaling result.
        :param _builtins.str scaling_type: Indicates the scaling type.
        :param _builtins.str target_value: Indicates the target value.
        """
        pulumi.set(__self__, "create_at", create_at)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "original_value", original_value)
        pulumi.set(__self__, "result", result)
        pulumi.set(__self__, "scaling_type", scaling_type)
        pulumi.set(__self__, "target_value", target_value)

    @_builtins.property
    @pulumi.getter(name="createAt")
    def create_at(self) -> _builtins.str:
        """
        Indicates the scaling time.
        """
        return pulumi.get(self, "create_at")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the record ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        Specifies the instance ID.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> _builtins.str:
        """
        Indicates the instance name.
        """
        return pulumi.get(self, "instance_name")

    @_builtins.property
    @pulumi.getter(name="originalValue")
    def original_value(self) -> _builtins.str:
        """
        Indicates the original value.
        """
        return pulumi.get(self, "original_value")

    @_builtins.property
    @pulumi.getter
    def result(self) -> _builtins.str:
        """
        Indicates the scaling result.
        """
        return pulumi.get(self, "result")

    @_builtins.property
    @pulumi.getter(name="scalingType")
    def scaling_type(self) -> _builtins.str:
        """
        Indicates the scaling type.
        """
        return pulumi.get(self, "scaling_type")

    @_builtins.property
    @pulumi.getter(name="targetValue")
    def target_value(self) -> _builtins.str:
        """
        Indicates the target value.
        """
        return pulumi.get(self, "target_value")


@pulumi.output_type
class GetMysqlBackupsBackupResult(dict):
    def __init__(__self__, *,
                 begin_time: _builtins.str,
                 datastores: Sequence['outputs.GetMysqlBackupsBackupDatastoreResult'],
                 description: _builtins.str,
                 end_time: _builtins.str,
                 id: _builtins.str,
                 instance_id: _builtins.str,
                 instance_name: _builtins.str,
                 name: _builtins.str,
                 size: _builtins.int,
                 status: _builtins.str,
                 take_up_time: _builtins.int,
                 type: _builtins.str):
        """
        :param _builtins.str begin_time: Specifies the backup start time. The format is **yyyy-mm-ddThh:mm:ssZ**.
        :param Sequence['GetMysqlBackupsBackupDatastoreArgs'] datastores: Indicates the database information.
        :param _builtins.str description: Indicates the description of the backup.
        :param _builtins.str end_time: Specifies the backup end time.The format is **yyyy-mm-ddThh:mm:ssZ**.
               The end time must be later than the start time.
        :param _builtins.str id: Indicates the ID of the backup.
        :param _builtins.str instance_id: Specifies the ID of the GaussDB MySQL instance.
        :param _builtins.str instance_name: Specifies the instance name.
        :param _builtins.str name: Specifies the backup name.
        :param _builtins.int size: Indicates the backup size in MB.
        :param _builtins.str status: Specifies the backup type.
               Value options:
               + **BUILDING**: The backup is in progress.
               + **COMPLETED**: The backup is complete.
               + **FAILED**: The backup failed.
               + **AVAILABLE**: The backup is available.
        :param _builtins.int take_up_time: Indicates the backup duration in minutes.
        :param _builtins.str type: Indicates the database engine.
        """
        pulumi.set(__self__, "begin_time", begin_time)
        pulumi.set(__self__, "datastores", datastores)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "take_up_time", take_up_time)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="beginTime")
    def begin_time(self) -> _builtins.str:
        """
        Specifies the backup start time. The format is **yyyy-mm-ddThh:mm:ssZ**.
        """
        return pulumi.get(self, "begin_time")

    @_builtins.property
    @pulumi.getter
    def datastores(self) -> Sequence['outputs.GetMysqlBackupsBackupDatastoreResult']:
        """
        Indicates the database information.
        """
        return pulumi.get(self, "datastores")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Indicates the description of the backup.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.str:
        """
        Specifies the backup end time.The format is **yyyy-mm-ddThh:mm:ssZ**.
        The end time must be later than the start time.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the ID of the backup.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        Specifies the ID of the GaussDB MySQL instance.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> _builtins.str:
        """
        Specifies the instance name.
        """
        return pulumi.get(self, "instance_name")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the backup name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        Indicates the backup size in MB.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the backup type.
        Value options:
        + **BUILDING**: The backup is in progress.
        + **COMPLETED**: The backup is complete.
        + **FAILED**: The backup failed.
        + **AVAILABLE**: The backup is available.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="takeUpTime")
    def take_up_time(self) -> _builtins.int:
        """
        Indicates the backup duration in minutes.
        """
        return pulumi.get(self, "take_up_time")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the database engine.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetMysqlBackupsBackupDatastoreResult(dict):
    def __init__(__self__, *,
                 type: _builtins.str,
                 version: _builtins.str):
        """
        :param _builtins.str type: Indicates the database engine.
        :param _builtins.str version: Indicates the database version.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the database engine.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        Indicates the database version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetMysqlConfigurationsConfigurationResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 datastore_name: _builtins.str,
                 datastore_version_name: _builtins.str,
                 description: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 updated_at: _builtins.str,
                 user_defined: _builtins.bool):
        """
        :param _builtins.str created_at: Indicates the creation time in the **yyyy-MM-ddTHH:mm:ssZ** format.
        :param _builtins.str datastore_name: Indicates the engine name.
        :param _builtins.str datastore_version_name: Indicates the engine version.
        :param _builtins.str description: Indicates the description of parameter template.
        :param _builtins.str id: Indicates the ID of the parameter template.
        :param _builtins.str name: Indicates the  name of the parameter template.
        :param _builtins.str updated_at: Indicates the update time in the **yyyy-MM-ddTHH:mm:ssZ** format.
        :param _builtins.bool user_defined: Indicates whether the parameter template is a custom template.
               + **false**: default parameter template.
               + **true**: custom template.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "datastore_name", datastore_name)
        pulumi.set(__self__, "datastore_version_name", datastore_version_name)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "user_defined", user_defined)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Indicates the creation time in the **yyyy-MM-ddTHH:mm:ssZ** format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="datastoreName")
    def datastore_name(self) -> _builtins.str:
        """
        Indicates the engine name.
        """
        return pulumi.get(self, "datastore_name")

    @_builtins.property
    @pulumi.getter(name="datastoreVersionName")
    def datastore_version_name(self) -> _builtins.str:
        """
        Indicates the engine version.
        """
        return pulumi.get(self, "datastore_version_name")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Indicates the description of parameter template.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the ID of the parameter template.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the  name of the parameter template.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        Indicates the update time in the **yyyy-MM-ddTHH:mm:ssZ** format.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="userDefined")
    def user_defined(self) -> _builtins.bool:
        """
        Indicates whether the parameter template is a custom template.
        + **false**: default parameter template.
        + **true**: custom template.
        """
        return pulumi.get(self, "user_defined")


@pulumi.output_type
class GetMysqlDatabasesDatabaseResult(dict):
    def __init__(__self__, *,
                 character_set: _builtins.str,
                 description: _builtins.str,
                 name: _builtins.str,
                 users: Sequence['outputs.GetMysqlDatabasesDatabaseUserResult']):
        """
        :param _builtins.str character_set: Specifies the database character set,
               Value options: **utf8mb4**, **utf8**, **latin1**, **gbk**.
        :param _builtins.str description: Indicates the  database comment.
        :param _builtins.str name: Specifies the database name.
        :param Sequence['GetMysqlDatabasesDatabaseUserArgs'] users: Indicates the list of authorized database users.
        """
        pulumi.set(__self__, "character_set", character_set)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "users", users)

    @_builtins.property
    @pulumi.getter(name="characterSet")
    def character_set(self) -> _builtins.str:
        """
        Specifies the database character set,
        Value options: **utf8mb4**, **utf8**, **latin1**, **gbk**.
        """
        return pulumi.get(self, "character_set")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Indicates the  database comment.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the database name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def users(self) -> Sequence['outputs.GetMysqlDatabasesDatabaseUserResult']:
        """
        Indicates the list of authorized database users.
        """
        return pulumi.get(self, "users")


@pulumi.output_type
class GetMysqlDatabasesDatabaseUserResult(dict):
    def __init__(__self__, *,
                 host: _builtins.str,
                 name: _builtins.str,
                 readonly: _builtins.bool):
        """
        :param _builtins.str host: Indicates the  host IP address.
        :param _builtins.str name: Specifies the database name.
        :param _builtins.bool readonly: Indicates whether the database permission is read-only.
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "readonly", readonly)

    @_builtins.property
    @pulumi.getter
    def host(self) -> _builtins.str:
        """
        Indicates the  host IP address.
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the database name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def readonly(self) -> _builtins.bool:
        """
        Indicates whether the database permission is read-only.
        """
        return pulumi.get(self, "readonly")


@pulumi.output_type
class GetMysqlDiagnosisInstancesInstanceInfoResult(dict):
    def __init__(__self__, *,
                 instance_id: _builtins.str,
                 master_node_id: _builtins.str):
        """
        :param _builtins.str instance_id: Indicates the instance ID.
        :param _builtins.str master_node_id: Indicates the primary node ID.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "master_node_id", master_node_id)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        Indicates the instance ID.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="masterNodeId")
    def master_node_id(self) -> _builtins.str:
        """
        Indicates the primary node ID.
        """
        return pulumi.get(self, "master_node_id")


@pulumi.output_type
class GetMysqlDiagnosisStatisticsDiagnosisInfoResult(dict):
    def __init__(__self__, *,
                 count: _builtins.int,
                 metric_name: _builtins.str):
        """
        :param _builtins.int count: Specifies the number of instances.
        :param _builtins.str metric_name: Specifies the metric name.
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "metric_name", metric_name)

    @_builtins.property
    @pulumi.getter
    def count(self) -> _builtins.int:
        """
        Specifies the number of instances.
        """
        return pulumi.get(self, "count")

    @_builtins.property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> _builtins.str:
        """
        Specifies the metric name.
        """
        return pulumi.get(self, "metric_name")


@pulumi.output_type
class GetMysqlEngineVersionsDatastoreResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 kernel_version: _builtins.str,
                 name: _builtins.str,
                 version: _builtins.str):
        """
        :param _builtins.str id: Indicates the DB version ID.
        :param _builtins.str kernel_version: Indicates the DB version.
               A complete four-digit version is returned.
        :param _builtins.str name: Indicates the DB version number.
               Only the major version number with two digits is returned.
        :param _builtins.str version: Indicates the compatible open-source DB version.
               A three-digit open-source version is returned.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "kernel_version", kernel_version)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the DB version ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="kernelVersion")
    def kernel_version(self) -> _builtins.str:
        """
        Indicates the DB version.
        A complete four-digit version is returned.
        """
        return pulumi.get(self, "kernel_version")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the DB version number.
        Only the major version number with two digits is returned.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        Indicates the compatible open-source DB version.
        A three-digit open-source version is returned.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetMysqlErrorLogsErrorLogListResult(dict):
    def __init__(__self__, *,
                 content: _builtins.str,
                 level: _builtins.str,
                 node_id: _builtins.str,
                 time: _builtins.str):
        """
        :param _builtins.str content: Indicates the error log content.
        :param _builtins.str level: Specifies the log level. Value options: **ALL**, **INFO**, **LOG**, **WARNING**,
               **ERROR**, **FATAL**, **PANIC**, **NOTE**. Defaults to **ALL**.
        :param _builtins.str node_id: Specifies the ID of the GaussDB MySQL instance node
        :param _builtins.str time: Indicates the execution time.
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "node_id", node_id)
        pulumi.set(__self__, "time", time)

    @_builtins.property
    @pulumi.getter
    def content(self) -> _builtins.str:
        """
        Indicates the error log content.
        """
        return pulumi.get(self, "content")

    @_builtins.property
    @pulumi.getter
    def level(self) -> _builtins.str:
        """
        Specifies the log level. Value options: **ALL**, **INFO**, **LOG**, **WARNING**,
        **ERROR**, **FATAL**, **PANIC**, **NOTE**. Defaults to **ALL**.
        """
        return pulumi.get(self, "level")

    @_builtins.property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> _builtins.str:
        """
        Specifies the ID of the GaussDB MySQL instance node
        """
        return pulumi.get(self, "node_id")

    @_builtins.property
    @pulumi.getter
    def time(self) -> _builtins.str:
        """
        Indicates the execution time.
        """
        return pulumi.get(self, "time")


@pulumi.output_type
class GetMysqlFlavorsFlavorResult(dict):
    def __init__(__self__, *,
                 az_status: Mapping[str, _builtins.str],
                 memory: _builtins.str,
                 mode: _builtins.str,
                 name: _builtins.str,
                 type: _builtins.str,
                 vcpus: _builtins.str,
                 version: _builtins.str):
        """
        :param Mapping[str, _builtins.str] az_status: Indicates the flavor status in each availability zone.
        :param _builtins.str memory: Indicates the memory size in GB.
        :param _builtins.str mode: Indicates the database mode.
        :param _builtins.str name: The name of the gaussdb mysql flavor.
        :param _builtins.str type: Indicates the arch type of the flavor.
        :param _builtins.str vcpus: Indicates the CPU size.
        :param _builtins.str version: Specifies the database version. Only "8.0" is supported now.
        """
        pulumi.set(__self__, "az_status", az_status)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vcpus", vcpus)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="azStatus")
    def az_status(self) -> Mapping[str, _builtins.str]:
        """
        Indicates the flavor status in each availability zone.
        """
        return pulumi.get(self, "az_status")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> _builtins.str:
        """
        Indicates the memory size in GB.
        """
        return pulumi.get(self, "memory")

    @_builtins.property
    @pulumi.getter
    def mode(self) -> _builtins.str:
        """
        Indicates the database mode.
        """
        return pulumi.get(self, "mode")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the gaussdb mysql flavor.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the arch type of the flavor.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def vcpus(self) -> _builtins.str:
        """
        Indicates the CPU size.
        """
        return pulumi.get(self, "vcpus")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        Specifies the database version. Only "8.0" is supported now.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetMysqlIncrementalBackupsBackupResult(dict):
    def __init__(__self__, *,
                 begin_time: _builtins.str,
                 end_time: _builtins.str,
                 id: _builtins.str,
                 instance_id: _builtins.str,
                 name: _builtins.str,
                 size: _builtins.float):
        """
        :param _builtins.str begin_time: Specifies the query start time.
               The format is **yyyy-mm-ddThh:mm:ssZ**. It is mandatory when `end_time` is set.
        :param _builtins.str end_time: Specifies the query end time.
               The format is **yyyy-mm-ddThh:mm:ssZ** and the end time must be later than the start time.
               It is mandatory when `begin_time` is set.
        :param _builtins.str id: Indicates the backup ID.
        :param _builtins.str instance_id: Specifies the instance ID.
        :param _builtins.str name: Indicates the backup name.
        :param _builtins.float size: Indicates the backup size, in KB.
        """
        pulumi.set(__self__, "begin_time", begin_time)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "size", size)

    @_builtins.property
    @pulumi.getter(name="beginTime")
    def begin_time(self) -> _builtins.str:
        """
        Specifies the query start time.
        The format is **yyyy-mm-ddThh:mm:ssZ**. It is mandatory when `end_time` is set.
        """
        return pulumi.get(self, "begin_time")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.str:
        """
        Specifies the query end time.
        The format is **yyyy-mm-ddThh:mm:ssZ** and the end time must be later than the start time.
        It is mandatory when `begin_time` is set.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the backup ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        Specifies the instance ID.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the backup name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.float:
        """
        Indicates the backup size, in KB.
        """
        return pulumi.get(self, "size")


@pulumi.output_type
class GetMysqlInstanceBackupStrategyResult(dict):
    def __init__(__self__, *,
                 keep_days: _builtins.int,
                 start_time: _builtins.str):
        """
        :param _builtins.int keep_days: Indicates the number of days to retain the generated
        :param _builtins.str start_time: Indicates the backup time window.
        """
        pulumi.set(__self__, "keep_days", keep_days)
        pulumi.set(__self__, "start_time", start_time)

    @_builtins.property
    @pulumi.getter(name="keepDays")
    def keep_days(self) -> _builtins.int:
        """
        Indicates the number of days to retain the generated
        """
        return pulumi.get(self, "keep_days")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        """
        Indicates the backup time window.
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class GetMysqlInstanceDatastoreResult(dict):
    def __init__(__self__, *,
                 engine: _builtins.str,
                 version: _builtins.str):
        """
        :param _builtins.str engine: Indicates the database engine.
        :param _builtins.str version: Indicates the database version.
        """
        pulumi.set(__self__, "engine", engine)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def engine(self) -> _builtins.str:
        """
        Indicates the database engine.
        """
        return pulumi.get(self, "engine")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        Indicates the database version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetMysqlInstanceNodeResult(dict):
    def __init__(__self__, *,
                 availability_zone: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 private_read_ip: _builtins.str,
                 status: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str availability_zone: Indicates the availability zone where the node resides.
        :param _builtins.str id: Indicates the node ID.
        :param _builtins.str name: Specifies the name of the instance.
        :param _builtins.str private_read_ip: Indicates the private IP address of a node.
        :param _builtins.str status: Indicates the node status.
        :param _builtins.str type: Indicates the node type: master or slave.
        """
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "private_read_ip", private_read_ip)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> _builtins.str:
        """
        Indicates the availability zone where the node resides.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the node ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the instance.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="privateReadIp")
    def private_read_ip(self) -> _builtins.str:
        """
        Indicates the private IP address of a node.
        """
        return pulumi.get(self, "private_read_ip")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the node status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the node type: master or slave.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetMysqlInstancesInstanceResult(dict):
    def __init__(__self__, *,
                 availability_zone_mode: _builtins.str,
                 backup_strategies: Sequence['outputs.GetMysqlInstancesInstanceBackupStrategyResult'],
                 configuration_id: _builtins.str,
                 created_at: _builtins.str,
                 datastores: Sequence['outputs.GetMysqlInstancesInstanceDatastoreResult'],
                 db_user_name: _builtins.str,
                 description: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 flavor: _builtins.str,
                 id: _builtins.str,
                 maintain_begin: _builtins.str,
                 maintain_end: _builtins.str,
                 master_availability_zone: _builtins.str,
                 mode: _builtins.str,
                 name: _builtins.str,
                 nodes: Sequence['outputs.GetMysqlInstancesInstanceNodeResult'],
                 port: _builtins.int,
                 private_dns_name: _builtins.str,
                 private_dns_name_prefix: _builtins.str,
                 private_write_ip: _builtins.str,
                 read_replicas: _builtins.int,
                 region: _builtins.str,
                 security_group_id: _builtins.str,
                 status: _builtins.str,
                 subnet_id: _builtins.str,
                 time_zone: _builtins.str,
                 updated_at: _builtins.str,
                 vpc_id: _builtins.str):
        """
        :param _builtins.str availability_zone_mode: Indicates the availability zone mode: "single" or "multi".
        :param Sequence['GetMysqlInstancesInstanceBackupStrategyArgs'] backup_strategies: Indicates the advanced backup policy. Structure is documented below.
        :param _builtins.str configuration_id: Indicates the configuration ID.
        :param _builtins.str created_at: Indicates the creation time in the **yyyy-mm-ddThh:mm:ssZ** format.
        :param Sequence['GetMysqlInstancesInstanceDatastoreArgs'] datastores: Indicates the database information. Structure is documented below.
        :param _builtins.str db_user_name: Indicates the default username.
        :param _builtins.str description: Indicates the description of the instance.
        :param _builtins.str enterprise_project_id: Indicates the enterprise project id.
        :param _builtins.str flavor: Indicates the instance specifications.
        :param _builtins.str id: Indicates the node ID.
        :param _builtins.str maintain_begin: Indicates the start time for a maintenance window.
        :param _builtins.str maintain_end: Indicates the end time for a maintenance window.
        :param _builtins.str master_availability_zone: Indicates the availability zone where the master node resides.
        :param _builtins.str mode: Indicates the instance mode.
        :param _builtins.str name: Specifies the name of the instance.
        :param Sequence['GetMysqlInstancesInstanceNodeArgs'] nodes: Indicates the instance nodes information. Structure is documented below.
        :param _builtins.int port: Indicates the database port.
        :param _builtins.str private_dns_name: Indicates the private domain name.
        :param _builtins.str private_dns_name_prefix: Indicates the prefix of the private domain name.
        :param _builtins.str private_write_ip: Indicates the private IP address of the DB instance.
        :param _builtins.int read_replicas: Indicates the count of read replicas.
        :param _builtins.str region: The region in which to obtain the instances. If omitted, the provider-level region will
               be used.
        :param _builtins.str security_group_id: Indicates the security group ID.
        :param _builtins.str status: Indicates the node status.
        :param _builtins.str subnet_id: Specifies the network ID of a subnet.
        :param _builtins.str time_zone: Indicates the time zone.
        :param _builtins.str updated_at: Indicates the Update time in the **yyyy-mm-ddThh:mm:ssZ** format.
        :param _builtins.str vpc_id: Specifies the VPC ID.
        """
        pulumi.set(__self__, "availability_zone_mode", availability_zone_mode)
        pulumi.set(__self__, "backup_strategies", backup_strategies)
        pulumi.set(__self__, "configuration_id", configuration_id)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "datastores", datastores)
        pulumi.set(__self__, "db_user_name", db_user_name)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "flavor", flavor)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "maintain_begin", maintain_begin)
        pulumi.set(__self__, "maintain_end", maintain_end)
        pulumi.set(__self__, "master_availability_zone", master_availability_zone)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "nodes", nodes)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "private_dns_name", private_dns_name)
        pulumi.set(__self__, "private_dns_name_prefix", private_dns_name_prefix)
        pulumi.set(__self__, "private_write_ip", private_write_ip)
        pulumi.set(__self__, "read_replicas", read_replicas)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "time_zone", time_zone)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="availabilityZoneMode")
    def availability_zone_mode(self) -> _builtins.str:
        """
        Indicates the availability zone mode: "single" or "multi".
        """
        return pulumi.get(self, "availability_zone_mode")

    @_builtins.property
    @pulumi.getter(name="backupStrategies")
    def backup_strategies(self) -> Sequence['outputs.GetMysqlInstancesInstanceBackupStrategyResult']:
        """
        Indicates the advanced backup policy. Structure is documented below.
        """
        return pulumi.get(self, "backup_strategies")

    @_builtins.property
    @pulumi.getter(name="configurationId")
    def configuration_id(self) -> _builtins.str:
        """
        Indicates the configuration ID.
        """
        return pulumi.get(self, "configuration_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Indicates the creation time in the **yyyy-mm-ddThh:mm:ssZ** format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def datastores(self) -> Sequence['outputs.GetMysqlInstancesInstanceDatastoreResult']:
        """
        Indicates the database information. Structure is documented below.
        """
        return pulumi.get(self, "datastores")

    @_builtins.property
    @pulumi.getter(name="dbUserName")
    def db_user_name(self) -> _builtins.str:
        """
        Indicates the default username.
        """
        return pulumi.get(self, "db_user_name")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Indicates the description of the instance.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Indicates the enterprise project id.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> _builtins.str:
        """
        Indicates the instance specifications.
        """
        return pulumi.get(self, "flavor")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the node ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="maintainBegin")
    def maintain_begin(self) -> _builtins.str:
        """
        Indicates the start time for a maintenance window.
        """
        return pulumi.get(self, "maintain_begin")

    @_builtins.property
    @pulumi.getter(name="maintainEnd")
    def maintain_end(self) -> _builtins.str:
        """
        Indicates the end time for a maintenance window.
        """
        return pulumi.get(self, "maintain_end")

    @_builtins.property
    @pulumi.getter(name="masterAvailabilityZone")
    def master_availability_zone(self) -> _builtins.str:
        """
        Indicates the availability zone where the master node resides.
        """
        return pulumi.get(self, "master_availability_zone")

    @_builtins.property
    @pulumi.getter
    def mode(self) -> _builtins.str:
        """
        Indicates the instance mode.
        """
        return pulumi.get(self, "mode")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the instance.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.GetMysqlInstancesInstanceNodeResult']:
        """
        Indicates the instance nodes information. Structure is documented below.
        """
        return pulumi.get(self, "nodes")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        """
        Indicates the database port.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="privateDnsName")
    def private_dns_name(self) -> _builtins.str:
        """
        Indicates the private domain name.
        """
        return pulumi.get(self, "private_dns_name")

    @_builtins.property
    @pulumi.getter(name="privateDnsNamePrefix")
    def private_dns_name_prefix(self) -> _builtins.str:
        """
        Indicates the prefix of the private domain name.
        """
        return pulumi.get(self, "private_dns_name_prefix")

    @_builtins.property
    @pulumi.getter(name="privateWriteIp")
    def private_write_ip(self) -> _builtins.str:
        """
        Indicates the private IP address of the DB instance.
        """
        return pulumi.get(self, "private_write_ip")

    @_builtins.property
    @pulumi.getter(name="readReplicas")
    def read_replicas(self) -> _builtins.int:
        """
        Indicates the count of read replicas.
        """
        return pulumi.get(self, "read_replicas")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        The region in which to obtain the instances. If omitted, the provider-level region will
        be used.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> _builtins.str:
        """
        Indicates the security group ID.
        """
        return pulumi.get(self, "security_group_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the node status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        Specifies the network ID of a subnet.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> _builtins.str:
        """
        Indicates the time zone.
        """
        return pulumi.get(self, "time_zone")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        Indicates the Update time in the **yyyy-mm-ddThh:mm:ssZ** format.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        """
        Specifies the VPC ID.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetMysqlInstancesInstanceBackupStrategyResult(dict):
    def __init__(__self__, *,
                 keep_days: _builtins.int,
                 start_time: _builtins.str):
        """
        :param _builtins.int keep_days: Indicates the number of days to retain the generated
        :param _builtins.str start_time: Indicates the backup time window.
        """
        pulumi.set(__self__, "keep_days", keep_days)
        pulumi.set(__self__, "start_time", start_time)

    @_builtins.property
    @pulumi.getter(name="keepDays")
    def keep_days(self) -> _builtins.int:
        """
        Indicates the number of days to retain the generated
        """
        return pulumi.get(self, "keep_days")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        """
        Indicates the backup time window.
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class GetMysqlInstancesInstanceDatastoreResult(dict):
    def __init__(__self__, *,
                 engine: _builtins.str,
                 version: _builtins.str):
        """
        :param _builtins.str engine: Indicates the database engine.
        :param _builtins.str version: Indicates the database version.
        """
        pulumi.set(__self__, "engine", engine)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def engine(self) -> _builtins.str:
        """
        Indicates the database engine.
        """
        return pulumi.get(self, "engine")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        Indicates the database version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetMysqlInstancesInstanceNodeResult(dict):
    def __init__(__self__, *,
                 availability_zone: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 private_read_ip: _builtins.str,
                 status: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str availability_zone: Indicates the availability zone where the node resides.
        :param _builtins.str id: Indicates the node ID.
        :param _builtins.str name: Specifies the name of the instance.
        :param _builtins.str private_read_ip: Indicates the private IP address of a node.
        :param _builtins.str status: Indicates the node status.
        :param _builtins.str type: Indicates the node type: master or slave.
        """
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "private_read_ip", private_read_ip)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> _builtins.str:
        """
        Indicates the availability zone where the node resides.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the node ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the instance.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="privateReadIp")
    def private_read_ip(self) -> _builtins.str:
        """
        Indicates the private IP address of a node.
        """
        return pulumi.get(self, "private_read_ip")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the node status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the node type: master or slave.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetMysqlInstantTasksJobResult(dict):
    def __init__(__self__, *,
                 created_time: _builtins.str,
                 ended_time: _builtins.str,
                 fail_reason: _builtins.str,
                 instance_id: _builtins.str,
                 instance_name: _builtins.str,
                 instance_status: _builtins.str,
                 job_id: _builtins.str,
                 job_name: _builtins.str,
                 order_id: _builtins.str,
                 process: _builtins.str,
                 status: _builtins.str):
        """
        :param _builtins.str created_time: Indicates the task creation time in the **yyyy-mm-ddThh:mm:ssZ** format.
        :param _builtins.str ended_time: Indicates the task end time in the **yyyy-mm-ddThh:mm:ssZ** format.
        :param _builtins.str fail_reason: Indicates the task failure cause.
        :param _builtins.str instance_id: Indicates the instance ID.
        :param _builtins.str instance_name: Indicates the instance name.
        :param _builtins.str instance_status: Indicates the iInstance status. The value can be:
               + **createfail**: The instance failed to be created.
               + **creating**: The instance is being created.
               + **normal**: The instance is running properly.
               + **abnormal**: The instance is abnormal.
               + **deleted**: The instance has been deleted.
        :param _builtins.str job_id: Specifies the task ID.
        :param _builtins.str job_name: Specifies the task name. Value options:
               + **CreateGaussDBforMySQLInstance**: Creating a DB instance.
               + **RestoreGaussDBforMySQLNewInstance**: Restoring data to a new DB instance.
               + **AddGaussDBforMySQLNodes**: Adding nodes.
               + **DeleteGaussDBforMySQLNode**: Deleting nodes.
               + **RebootGaussDBforMySQLInstance**: Rebooting a DB instance.
               + **ModifyGaussDBforMySQLPort**: Changing a database port.
               + **ModifyGaussDBforMySQLSecurityGroup**: Changing a security group.
               + **ResizeGaussDBforMySQLFlavor**: Changing instance specifications.
               + **SwitchoverGaussDBforMySQLMasterNode**: Promoting a read replica to primary.
               + **GaussDBforMySQLBindEIP**: Binding an EIP.
               + **GaussDBforMySQLUnbindEIP**: Unbinding an EIP.
               + **RenameGaussDBforMySQLInstance**: Changing a DB instance name.
               + **DeleteGaussDBforMySQLInstance**: Deleting a DB instance.
               + **UpgradeGaussDBforMySQLDatabaseVersion**: Upgrading an instance version.
               + **EnlargeGaussDBforMySQLProxy**: Adding nodes for a database proxy.
               + **OpenGaussDBforMySQLProxy**: Enabling database proxy.
               + **CloseGaussDBforMySQLProxy**: Disabling database proxy.
               + **GaussdbforMySQLModifyProxyIp**: Changing the IP address of a database proxy.
               + **ScaleGaussDBforMySQLProxy**: Changing the node specifications of a database proxy.
               + **GaussDBforMySQLModifyInstanceMetricExtend**: Enabling or disabling Monitoring by Seconds.
               + **GaussDBforMySQLModifyInstanceDataVip**: Changing the private IP address.
               + **GaussDBforMySQLSwitchSSL**: Enabling or disabling SSL.
               + **GaussDBforMySQLModifyProxyConsist**: Changing the proxy consistency.
               + **GaussDBforMySQLModifyProxyWeight**: Changing the read weights of nodes.
        :param _builtins.str order_id: Indicates the order ID.
        :param _builtins.str process: Indicates the task progress.
        :param _builtins.str status: Specifies the task execution status. Value options:
               + **Running**: The task is being executed.
               + **Completed**: The task is successfully executed.
               + **Failed**: The task failed to be executed.
               + **Pending**: The task is not executed.
        """
        pulumi.set(__self__, "created_time", created_time)
        pulumi.set(__self__, "ended_time", ended_time)
        pulumi.set(__self__, "fail_reason", fail_reason)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "instance_status", instance_status)
        pulumi.set(__self__, "job_id", job_id)
        pulumi.set(__self__, "job_name", job_name)
        pulumi.set(__self__, "order_id", order_id)
        pulumi.set(__self__, "process", process)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> _builtins.str:
        """
        Indicates the task creation time in the **yyyy-mm-ddThh:mm:ssZ** format.
        """
        return pulumi.get(self, "created_time")

    @_builtins.property
    @pulumi.getter(name="endedTime")
    def ended_time(self) -> _builtins.str:
        """
        Indicates the task end time in the **yyyy-mm-ddThh:mm:ssZ** format.
        """
        return pulumi.get(self, "ended_time")

    @_builtins.property
    @pulumi.getter(name="failReason")
    def fail_reason(self) -> _builtins.str:
        """
        Indicates the task failure cause.
        """
        return pulumi.get(self, "fail_reason")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        Indicates the instance ID.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> _builtins.str:
        """
        Indicates the instance name.
        """
        return pulumi.get(self, "instance_name")

    @_builtins.property
    @pulumi.getter(name="instanceStatus")
    def instance_status(self) -> _builtins.str:
        """
        Indicates the iInstance status. The value can be:
        + **createfail**: The instance failed to be created.
        + **creating**: The instance is being created.
        + **normal**: The instance is running properly.
        + **abnormal**: The instance is abnormal.
        + **deleted**: The instance has been deleted.
        """
        return pulumi.get(self, "instance_status")

    @_builtins.property
    @pulumi.getter(name="jobId")
    def job_id(self) -> _builtins.str:
        """
        Specifies the task ID.
        """
        return pulumi.get(self, "job_id")

    @_builtins.property
    @pulumi.getter(name="jobName")
    def job_name(self) -> _builtins.str:
        """
        Specifies the task name. Value options:
        + **CreateGaussDBforMySQLInstance**: Creating a DB instance.
        + **RestoreGaussDBforMySQLNewInstance**: Restoring data to a new DB instance.
        + **AddGaussDBforMySQLNodes**: Adding nodes.
        + **DeleteGaussDBforMySQLNode**: Deleting nodes.
        + **RebootGaussDBforMySQLInstance**: Rebooting a DB instance.
        + **ModifyGaussDBforMySQLPort**: Changing a database port.
        + **ModifyGaussDBforMySQLSecurityGroup**: Changing a security group.
        + **ResizeGaussDBforMySQLFlavor**: Changing instance specifications.
        + **SwitchoverGaussDBforMySQLMasterNode**: Promoting a read replica to primary.
        + **GaussDBforMySQLBindEIP**: Binding an EIP.
        + **GaussDBforMySQLUnbindEIP**: Unbinding an EIP.
        + **RenameGaussDBforMySQLInstance**: Changing a DB instance name.
        + **DeleteGaussDBforMySQLInstance**: Deleting a DB instance.
        + **UpgradeGaussDBforMySQLDatabaseVersion**: Upgrading an instance version.
        + **EnlargeGaussDBforMySQLProxy**: Adding nodes for a database proxy.
        + **OpenGaussDBforMySQLProxy**: Enabling database proxy.
        + **CloseGaussDBforMySQLProxy**: Disabling database proxy.
        + **GaussdbforMySQLModifyProxyIp**: Changing the IP address of a database proxy.
        + **ScaleGaussDBforMySQLProxy**: Changing the node specifications of a database proxy.
        + **GaussDBforMySQLModifyInstanceMetricExtend**: Enabling or disabling Monitoring by Seconds.
        + **GaussDBforMySQLModifyInstanceDataVip**: Changing the private IP address.
        + **GaussDBforMySQLSwitchSSL**: Enabling or disabling SSL.
        + **GaussDBforMySQLModifyProxyConsist**: Changing the proxy consistency.
        + **GaussDBforMySQLModifyProxyWeight**: Changing the read weights of nodes.
        """
        return pulumi.get(self, "job_name")

    @_builtins.property
    @pulumi.getter(name="orderId")
    def order_id(self) -> _builtins.str:
        """
        Indicates the order ID.
        """
        return pulumi.get(self, "order_id")

    @_builtins.property
    @pulumi.getter
    def process(self) -> _builtins.str:
        """
        Indicates the task progress.
        """
        return pulumi.get(self, "process")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the task execution status. Value options:
        + **Running**: The task is being executed.
        + **Completed**: The task is successfully executed.
        + **Failed**: The task failed to be executed.
        + **Pending**: The task is not executed.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetMysqlProjectQuotasQuotaResult(dict):
    def __init__(__self__, *,
                 resources: Sequence['outputs.GetMysqlProjectQuotasQuotaResourceResult']):
        """
        :param Sequence['GetMysqlProjectQuotasQuotaResourceArgs'] resources: Indicates the resource list objects.
        """
        pulumi.set(__self__, "resources", resources)

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetMysqlProjectQuotasQuotaResourceResult']:
        """
        Indicates the resource list objects.
        """
        return pulumi.get(self, "resources")


@pulumi.output_type
class GetMysqlProjectQuotasQuotaResourceResult(dict):
    def __init__(__self__, *,
                 quota: _builtins.int,
                 type: _builtins.str,
                 used: _builtins.int):
        """
        :param _builtins.int quota: Indicates the maximum resource quota.
        :param _builtins.str type: Specifies the resource type used to filter quotas. Value options: **instance**.
        :param _builtins.int used: Indicates the number of created resources.
        """
        pulumi.set(__self__, "quota", quota)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "used", used)

    @_builtins.property
    @pulumi.getter
    def quota(self) -> _builtins.int:
        """
        Indicates the maximum resource quota.
        """
        return pulumi.get(self, "quota")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the resource type used to filter quotas. Value options: **instance**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def used(self) -> _builtins.int:
        """
        Indicates the number of created resources.
        """
        return pulumi.get(self, "used")


@pulumi.output_type
class GetMysqlProxiesProxyListResult(dict):
    def __init__(__self__, *,
                 address: _builtins.str,
                 balance_route_mode_enabled: _builtins.bool,
                 connection_pool_type: _builtins.str,
                 consistence_mode: _builtins.str,
                 delay_threshold_in_seconds: _builtins.int,
                 elb_vip: _builtins.str,
                 flavor: _builtins.str,
                 id: _builtins.str,
                 master_node_weights: Sequence['outputs.GetMysqlProxiesProxyListMasterNodeWeightResult'],
                 mode: _builtins.str,
                 name: _builtins.str,
                 new_node_auto_add_status: _builtins.str,
                 new_node_weight: _builtins.int,
                 node_num: _builtins.int,
                 nodes: Sequence['outputs.GetMysqlProxiesProxyListNodeResult'],
                 port: _builtins.int,
                 ram: _builtins.str,
                 readonly_nodes_weights: Sequence['outputs.GetMysqlProxiesProxyListReadonlyNodesWeightResult'],
                 route_mode: _builtins.int,
                 ssl_option: _builtins.str,
                 status: _builtins.str,
                 subnet_id: _builtins.str,
                 switch_connection_pool_type_enabled: _builtins.bool,
                 transaction_split: _builtins.str,
                 vcpus: _builtins.str):
        """
        :param _builtins.str address: Indicates the address of the proxy.
        :param _builtins.bool balance_route_mode_enabled: Indicates whether the proxy version supports load balancing.
        :param _builtins.str connection_pool_type: Indicates the connection pool type.
        :param _builtins.str consistence_mode: Indicates the consistency mode of the proxy.
        :param _builtins.int delay_threshold_in_seconds: Indicates the delay threshold in seconds.
        :param _builtins.str elb_vip: Indicates the virtual IP address in ELB mode.
        :param _builtins.str flavor: Indicates the flavor of the proxy.
        :param _builtins.str id: Indicates the node ID.
        :param Sequence['GetMysqlProxiesProxyListMasterNodeWeightArgs'] master_node_weights: Indicates the read weight of the master node.
        :param _builtins.str mode: Indicates the proxy mode.
        :param _builtins.str name: Indicates the node name.
        :param _builtins.str new_node_auto_add_status: Indicates whether new nodes are automatically associate with proxy.
        :param _builtins.int new_node_weight: Indicates the read weight of the new node.
        :param _builtins.int node_num: Indicates the number of proxy nodes.
        :param Sequence['GetMysqlProxiesProxyListNodeArgs'] nodes: Indicates the node information of the proxy.
        :param _builtins.int port: Indicates the proxy port.
        :param _builtins.str ram: Indicates the memory size of the proxy.
        :param Sequence['GetMysqlProxiesProxyListReadonlyNodesWeightArgs'] readonly_nodes_weights: Indicates the read weight of the read-only node.
        :param _builtins.int route_mode: Indicates the routing policy of the proxy instance.
        :param _builtins.str ssl_option: Indicates whether to enable or disable SSL.
        :param _builtins.str status: Indicates the proxy node status.
        :param _builtins.str subnet_id: Indicates the network ID of a subnet.
        :param _builtins.bool switch_connection_pool_type_enabled: Indicates whether the proxy version supports session-level connection pool.
        :param _builtins.str transaction_split: Indicates whether the proxy transaction splitting is enabled.
        :param _builtins.str vcpus: Indicates the number of vCPUs of the proxy.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "balance_route_mode_enabled", balance_route_mode_enabled)
        pulumi.set(__self__, "connection_pool_type", connection_pool_type)
        pulumi.set(__self__, "consistence_mode", consistence_mode)
        pulumi.set(__self__, "delay_threshold_in_seconds", delay_threshold_in_seconds)
        pulumi.set(__self__, "elb_vip", elb_vip)
        pulumi.set(__self__, "flavor", flavor)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "master_node_weights", master_node_weights)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "new_node_auto_add_status", new_node_auto_add_status)
        pulumi.set(__self__, "new_node_weight", new_node_weight)
        pulumi.set(__self__, "node_num", node_num)
        pulumi.set(__self__, "nodes", nodes)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "ram", ram)
        pulumi.set(__self__, "readonly_nodes_weights", readonly_nodes_weights)
        pulumi.set(__self__, "route_mode", route_mode)
        pulumi.set(__self__, "ssl_option", ssl_option)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "switch_connection_pool_type_enabled", switch_connection_pool_type_enabled)
        pulumi.set(__self__, "transaction_split", transaction_split)
        pulumi.set(__self__, "vcpus", vcpus)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        Indicates the address of the proxy.
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="balanceRouteModeEnabled")
    def balance_route_mode_enabled(self) -> _builtins.bool:
        """
        Indicates whether the proxy version supports load balancing.
        """
        return pulumi.get(self, "balance_route_mode_enabled")

    @_builtins.property
    @pulumi.getter(name="connectionPoolType")
    def connection_pool_type(self) -> _builtins.str:
        """
        Indicates the connection pool type.
        """
        return pulumi.get(self, "connection_pool_type")

    @_builtins.property
    @pulumi.getter(name="consistenceMode")
    def consistence_mode(self) -> _builtins.str:
        """
        Indicates the consistency mode of the proxy.
        """
        return pulumi.get(self, "consistence_mode")

    @_builtins.property
    @pulumi.getter(name="delayThresholdInSeconds")
    def delay_threshold_in_seconds(self) -> _builtins.int:
        """
        Indicates the delay threshold in seconds.
        """
        return pulumi.get(self, "delay_threshold_in_seconds")

    @_builtins.property
    @pulumi.getter(name="elbVip")
    def elb_vip(self) -> _builtins.str:
        """
        Indicates the virtual IP address in ELB mode.
        """
        return pulumi.get(self, "elb_vip")

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> _builtins.str:
        """
        Indicates the flavor of the proxy.
        """
        return pulumi.get(self, "flavor")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the node ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="masterNodeWeights")
    def master_node_weights(self) -> Sequence['outputs.GetMysqlProxiesProxyListMasterNodeWeightResult']:
        """
        Indicates the read weight of the master node.
        """
        return pulumi.get(self, "master_node_weights")

    @_builtins.property
    @pulumi.getter
    def mode(self) -> _builtins.str:
        """
        Indicates the proxy mode.
        """
        return pulumi.get(self, "mode")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the node name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="newNodeAutoAddStatus")
    def new_node_auto_add_status(self) -> _builtins.str:
        """
        Indicates whether new nodes are automatically associate with proxy.
        """
        return pulumi.get(self, "new_node_auto_add_status")

    @_builtins.property
    @pulumi.getter(name="newNodeWeight")
    def new_node_weight(self) -> _builtins.int:
        """
        Indicates the read weight of the new node.
        """
        return pulumi.get(self, "new_node_weight")

    @_builtins.property
    @pulumi.getter(name="nodeNum")
    def node_num(self) -> _builtins.int:
        """
        Indicates the number of proxy nodes.
        """
        return pulumi.get(self, "node_num")

    @_builtins.property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.GetMysqlProxiesProxyListNodeResult']:
        """
        Indicates the node information of the proxy.
        """
        return pulumi.get(self, "nodes")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        """
        Indicates the proxy port.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def ram(self) -> _builtins.str:
        """
        Indicates the memory size of the proxy.
        """
        return pulumi.get(self, "ram")

    @_builtins.property
    @pulumi.getter(name="readonlyNodesWeights")
    def readonly_nodes_weights(self) -> Sequence['outputs.GetMysqlProxiesProxyListReadonlyNodesWeightResult']:
        """
        Indicates the read weight of the read-only node.
        """
        return pulumi.get(self, "readonly_nodes_weights")

    @_builtins.property
    @pulumi.getter(name="routeMode")
    def route_mode(self) -> _builtins.int:
        """
        Indicates the routing policy of the proxy instance.
        """
        return pulumi.get(self, "route_mode")

    @_builtins.property
    @pulumi.getter(name="sslOption")
    def ssl_option(self) -> _builtins.str:
        """
        Indicates whether to enable or disable SSL.
        """
        return pulumi.get(self, "ssl_option")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the proxy node status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        Indicates the network ID of a subnet.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter(name="switchConnectionPoolTypeEnabled")
    def switch_connection_pool_type_enabled(self) -> _builtins.bool:
        """
        Indicates whether the proxy version supports session-level connection pool.
        """
        return pulumi.get(self, "switch_connection_pool_type_enabled")

    @_builtins.property
    @pulumi.getter(name="transactionSplit")
    def transaction_split(self) -> _builtins.str:
        """
        Indicates whether the proxy transaction splitting is enabled.
        """
        return pulumi.get(self, "transaction_split")

    @_builtins.property
    @pulumi.getter
    def vcpus(self) -> _builtins.str:
        """
        Indicates the number of vCPUs of the proxy.
        """
        return pulumi.get(self, "vcpus")


@pulumi.output_type
class GetMysqlProxiesProxyListMasterNodeWeightResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 name: _builtins.str,
                 weight: _builtins.int):
        """
        :param _builtins.str id: Indicates the node ID.
        :param _builtins.str name: Indicates the node name.
        :param _builtins.int weight: Indicates the weight assigned to the node.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the node ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the node name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> _builtins.int:
        """
        Indicates the weight assigned to the node.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetMysqlProxiesProxyListNodeResult(dict):
    def __init__(__self__, *,
                 az_code: _builtins.str,
                 frozen_flag: _builtins.int,
                 id: _builtins.str,
                 name: _builtins.str,
                 role: _builtins.str,
                 status: _builtins.str):
        """
        :param _builtins.str az_code: Indicates the proxy node AZ.
        :param _builtins.int frozen_flag: Indicates whether the proxy node is frozen.
        :param _builtins.str id: Indicates the node ID.
        :param _builtins.str name: Indicates the node name.
        :param _builtins.str role: Indicates the proxy node role.
        :param _builtins.str status: Indicates the proxy node status.
        """
        pulumi.set(__self__, "az_code", az_code)
        pulumi.set(__self__, "frozen_flag", frozen_flag)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="azCode")
    def az_code(self) -> _builtins.str:
        """
        Indicates the proxy node AZ.
        """
        return pulumi.get(self, "az_code")

    @_builtins.property
    @pulumi.getter(name="frozenFlag")
    def frozen_flag(self) -> _builtins.int:
        """
        Indicates whether the proxy node is frozen.
        """
        return pulumi.get(self, "frozen_flag")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the node ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the node name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def role(self) -> _builtins.str:
        """
        Indicates the proxy node role.
        """
        return pulumi.get(self, "role")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the proxy node status.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetMysqlProxiesProxyListReadonlyNodesWeightResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 name: _builtins.str,
                 weight: _builtins.int):
        """
        :param _builtins.str id: Indicates the node ID.
        :param _builtins.str name: Indicates the node name.
        :param _builtins.int weight: Indicates the weight assigned to the node.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the node ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the node name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> _builtins.int:
        """
        Indicates the weight assigned to the node.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetMysqlProxyFlavorsFlavorGroupResult(dict):
    def __init__(__self__, *,
                 flavors: Sequence['outputs.GetMysqlProxyFlavorsFlavorGroupFlavorResult'],
                 type: _builtins.str):
        """
        :param Sequence['GetMysqlProxyFlavorsFlavorGroupFlavorArgs'] flavors: Indicates the list of flavors.
        :param _builtins.str type: Indicates the group type. The value can be **arm** or **x86**.
        """
        pulumi.set(__self__, "flavors", flavors)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def flavors(self) -> Sequence['outputs.GetMysqlProxyFlavorsFlavorGroupFlavorResult']:
        """
        Indicates the list of flavors.
        """
        return pulumi.get(self, "flavors")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the group type. The value can be **arm** or **x86**.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetMysqlProxyFlavorsFlavorGroupFlavorResult(dict):
    def __init__(__self__, *,
                 az_status: Mapping[str, _builtins.str],
                 db_type: _builtins.str,
                 id: _builtins.str,
                 ram: _builtins.str,
                 spec_code: _builtins.str,
                 vcpus: _builtins.str):
        """
        :param Mapping[str, _builtins.str] az_status: Indicates the key/value pairs of the availability zone status.
               **key** indicates the AZ ID, and **value** indicates the specification status in the AZ.
        :param _builtins.str db_type: Indicates the database type.
        :param _builtins.str id: Indicates the ID of the proxy flavor.
        :param _builtins.str ram: Indicates the memory size in GB.
        :param _builtins.str spec_code: Indicates the proxy specification code.
        :param _builtins.str vcpus: Indicates the number of vCPUs.
        """
        pulumi.set(__self__, "az_status", az_status)
        pulumi.set(__self__, "db_type", db_type)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ram", ram)
        pulumi.set(__self__, "spec_code", spec_code)
        pulumi.set(__self__, "vcpus", vcpus)

    @_builtins.property
    @pulumi.getter(name="azStatus")
    def az_status(self) -> Mapping[str, _builtins.str]:
        """
        Indicates the key/value pairs of the availability zone status.
        **key** indicates the AZ ID, and **value** indicates the specification status in the AZ.
        """
        return pulumi.get(self, "az_status")

    @_builtins.property
    @pulumi.getter(name="dbType")
    def db_type(self) -> _builtins.str:
        """
        Indicates the database type.
        """
        return pulumi.get(self, "db_type")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the ID of the proxy flavor.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def ram(self) -> _builtins.str:
        """
        Indicates the memory size in GB.
        """
        return pulumi.get(self, "ram")

    @_builtins.property
    @pulumi.getter(name="specCode")
    def spec_code(self) -> _builtins.str:
        """
        Indicates the proxy specification code.
        """
        return pulumi.get(self, "spec_code")

    @_builtins.property
    @pulumi.getter
    def vcpus(self) -> _builtins.str:
        """
        Indicates the number of vCPUs.
        """
        return pulumi.get(self, "vcpus")


@pulumi.output_type
class GetMysqlPtApplicableInstancesInstanceResult(dict):
    def __init__(__self__, *,
                 instance_id: _builtins.str,
                 instance_name: _builtins.str):
        """
        :param _builtins.str instance_id: Indicates the instance ID.
        :param _builtins.str instance_name: Indicates the instance name.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_name", instance_name)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        Indicates the instance ID.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> _builtins.str:
        """
        Indicates the instance name.
        """
        return pulumi.get(self, "instance_name")


@pulumi.output_type
class GetMysqlPtApplyRecordsHistoryResult(dict):
    def __init__(__self__, *,
                 applied_at: _builtins.str,
                 apply_result: _builtins.str,
                 error_code: _builtins.str,
                 target_id: _builtins.str,
                 target_name: _builtins.str):
        """
        :param _builtins.str applied_at: Indicates the application time.
        :param _builtins.str apply_result: Indicates the application result.
        :param _builtins.str error_code: Indicates the error code.
        :param _builtins.str target_id: Indicates the ID of the instance.
        :param _builtins.str target_name: Indicates the name of the instance.
        """
        pulumi.set(__self__, "applied_at", applied_at)
        pulumi.set(__self__, "apply_result", apply_result)
        pulumi.set(__self__, "error_code", error_code)
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "target_name", target_name)

    @_builtins.property
    @pulumi.getter(name="appliedAt")
    def applied_at(self) -> _builtins.str:
        """
        Indicates the application time.
        """
        return pulumi.get(self, "applied_at")

    @_builtins.property
    @pulumi.getter(name="applyResult")
    def apply_result(self) -> _builtins.str:
        """
        Indicates the application result.
        """
        return pulumi.get(self, "apply_result")

    @_builtins.property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> _builtins.str:
        """
        Indicates the error code.
        """
        return pulumi.get(self, "error_code")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        Indicates the ID of the instance.
        """
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="targetName")
    def target_name(self) -> _builtins.str:
        """
        Indicates the name of the instance.
        """
        return pulumi.get(self, "target_name")


@pulumi.output_type
class GetMysqlPtModifyRecordsHistoryResult(dict):
    def __init__(__self__, *,
                 applied: _builtins.str,
                 is_applied: _builtins.bool,
                 new_value: _builtins.str,
                 old_value: _builtins.str,
                 parameter_name: _builtins.str,
                 update_result: _builtins.str,
                 updated: _builtins.str):
        """
        :param _builtins.str applied: Indicates the application time in the **yyyy-mm-ddThh:mm:ssZ** format.
        :param _builtins.bool is_applied: Indicates whether the parameter has been applied.
        :param _builtins.str new_value: Indicates the new parameter value.
        :param _builtins.str old_value: Indicates the old parameter value.
        :param _builtins.str parameter_name: Indicates the parameter name.
        :param _builtins.str update_result: Indicates the change status.
               The value can be **SUCCESS** or **FAILED**.
        :param _builtins.str updated: Indicates the modification time in the **yyyy-mm-ddThh:mm:ssZ** format.
        """
        pulumi.set(__self__, "applied", applied)
        pulumi.set(__self__, "is_applied", is_applied)
        pulumi.set(__self__, "new_value", new_value)
        pulumi.set(__self__, "old_value", old_value)
        pulumi.set(__self__, "parameter_name", parameter_name)
        pulumi.set(__self__, "update_result", update_result)
        pulumi.set(__self__, "updated", updated)

    @_builtins.property
    @pulumi.getter
    def applied(self) -> _builtins.str:
        """
        Indicates the application time in the **yyyy-mm-ddThh:mm:ssZ** format.
        """
        return pulumi.get(self, "applied")

    @_builtins.property
    @pulumi.getter(name="isApplied")
    def is_applied(self) -> _builtins.bool:
        """
        Indicates whether the parameter has been applied.
        """
        return pulumi.get(self, "is_applied")

    @_builtins.property
    @pulumi.getter(name="newValue")
    def new_value(self) -> _builtins.str:
        """
        Indicates the new parameter value.
        """
        return pulumi.get(self, "new_value")

    @_builtins.property
    @pulumi.getter(name="oldValue")
    def old_value(self) -> _builtins.str:
        """
        Indicates the old parameter value.
        """
        return pulumi.get(self, "old_value")

    @_builtins.property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> _builtins.str:
        """
        Indicates the parameter name.
        """
        return pulumi.get(self, "parameter_name")

    @_builtins.property
    @pulumi.getter(name="updateResult")
    def update_result(self) -> _builtins.str:
        """
        Indicates the change status.
        The value can be **SUCCESS** or **FAILED**.
        """
        return pulumi.get(self, "update_result")

    @_builtins.property
    @pulumi.getter
    def updated(self) -> _builtins.str:
        """
        Indicates the modification time in the **yyyy-mm-ddThh:mm:ssZ** format.
        """
        return pulumi.get(self, "updated")


@pulumi.output_type
class GetMysqlRecyclingInstancesInstanceResult(dict):
    def __init__(__self__, *,
                 backup_level: _builtins.str,
                 create_at: _builtins.int,
                 data_vip: _builtins.str,
                 data_vip_ipv6: _builtins.str,
                 deleted_at: _builtins.int,
                 engine_name: _builtins.str,
                 engine_version: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 enterprise_project_name: _builtins.str,
                 ha_mode: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 pay_model: _builtins.str,
                 recycle_backup_id: _builtins.str,
                 recycle_status: _builtins.str,
                 volume_size: _builtins.str,
                 volume_type: _builtins.str):
        """
        :param _builtins.str backup_level: Indicates the backup level.
        :param _builtins.int create_at: Indicates the creation time.
        :param _builtins.str data_vip: Indicates the virtual IP address of the data plane.
        :param _builtins.str data_vip_ipv6: Indicates the IPv6 address of the data plane.
        :param _builtins.int deleted_at: Indicates the deletion time.
        :param _builtins.str engine_name: Indicates the engine name.
        :param _builtins.str engine_version: Indicates the engine version.
        :param _builtins.str enterprise_project_id: Indicates the enterprise project ID.
        :param _builtins.str enterprise_project_name: Indicates the enterprise project name.
        :param _builtins.str ha_mode: Indicates the instance type.
        :param _builtins.str id: Indicates the instance ID.
        :param _builtins.str name: Indicates the instance name.
        :param _builtins.str pay_model: Indicates the billing mode.
        :param _builtins.str recycle_backup_id: Indicates the backup ID.
        :param _builtins.str recycle_status: Indicates the recycling status.
        :param _builtins.str volume_size: Indicates the storage space.
        :param _builtins.str volume_type: Indicates the storage type.
        """
        pulumi.set(__self__, "backup_level", backup_level)
        pulumi.set(__self__, "create_at", create_at)
        pulumi.set(__self__, "data_vip", data_vip)
        pulumi.set(__self__, "data_vip_ipv6", data_vip_ipv6)
        pulumi.set(__self__, "deleted_at", deleted_at)
        pulumi.set(__self__, "engine_name", engine_name)
        pulumi.set(__self__, "engine_version", engine_version)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "enterprise_project_name", enterprise_project_name)
        pulumi.set(__self__, "ha_mode", ha_mode)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "pay_model", pay_model)
        pulumi.set(__self__, "recycle_backup_id", recycle_backup_id)
        pulumi.set(__self__, "recycle_status", recycle_status)
        pulumi.set(__self__, "volume_size", volume_size)
        pulumi.set(__self__, "volume_type", volume_type)

    @_builtins.property
    @pulumi.getter(name="backupLevel")
    def backup_level(self) -> _builtins.str:
        """
        Indicates the backup level.
        """
        return pulumi.get(self, "backup_level")

    @_builtins.property
    @pulumi.getter(name="createAt")
    def create_at(self) -> _builtins.int:
        """
        Indicates the creation time.
        """
        return pulumi.get(self, "create_at")

    @_builtins.property
    @pulumi.getter(name="dataVip")
    def data_vip(self) -> _builtins.str:
        """
        Indicates the virtual IP address of the data plane.
        """
        return pulumi.get(self, "data_vip")

    @_builtins.property
    @pulumi.getter(name="dataVipIpv6")
    def data_vip_ipv6(self) -> _builtins.str:
        """
        Indicates the IPv6 address of the data plane.
        """
        return pulumi.get(self, "data_vip_ipv6")

    @_builtins.property
    @pulumi.getter(name="deletedAt")
    def deleted_at(self) -> _builtins.int:
        """
        Indicates the deletion time.
        """
        return pulumi.get(self, "deleted_at")

    @_builtins.property
    @pulumi.getter(name="engineName")
    def engine_name(self) -> _builtins.str:
        """
        Indicates the engine name.
        """
        return pulumi.get(self, "engine_name")

    @_builtins.property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> _builtins.str:
        """
        Indicates the engine version.
        """
        return pulumi.get(self, "engine_version")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Indicates the enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectName")
    def enterprise_project_name(self) -> _builtins.str:
        """
        Indicates the enterprise project name.
        """
        return pulumi.get(self, "enterprise_project_name")

    @_builtins.property
    @pulumi.getter(name="haMode")
    def ha_mode(self) -> _builtins.str:
        """
        Indicates the instance type.
        """
        return pulumi.get(self, "ha_mode")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the instance ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the instance name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="payModel")
    def pay_model(self) -> _builtins.str:
        """
        Indicates the billing mode.
        """
        return pulumi.get(self, "pay_model")

    @_builtins.property
    @pulumi.getter(name="recycleBackupId")
    def recycle_backup_id(self) -> _builtins.str:
        """
        Indicates the backup ID.
        """
        return pulumi.get(self, "recycle_backup_id")

    @_builtins.property
    @pulumi.getter(name="recycleStatus")
    def recycle_status(self) -> _builtins.str:
        """
        Indicates the recycling status.
        """
        return pulumi.get(self, "recycle_status")

    @_builtins.property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> _builtins.str:
        """
        Indicates the storage space.
        """
        return pulumi.get(self, "volume_size")

    @_builtins.property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> _builtins.str:
        """
        Indicates the storage type.
        """
        return pulumi.get(self, "volume_type")


@pulumi.output_type
class GetMysqlRestoreTimeRangesRestoreTimeResult(dict):
    def __init__(__self__, *,
                 end_time: _builtins.int,
                 start_time: _builtins.int):
        """
        :param _builtins.int end_time: Indicates the end time of the restoration time range in the UNIX timestamp format.
               The unit is millisecond and the time zone is UTC.
        :param _builtins.int start_time: Indicates the start time of the restoration time range in the UNIX timestamp format.
               The unit is millisecond and the time zone is UTC.
        """
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "start_time", start_time)

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.int:
        """
        Indicates the end time of the restoration time range in the UNIX timestamp format.
        The unit is millisecond and the time zone is UTC.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.int:
        """
        Indicates the start time of the restoration time range in the UNIX timestamp format.
        The unit is millisecond and the time zone is UTC.
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class GetMysqlRestoredTablesDatabaseResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 tables: Sequence['outputs.GetMysqlRestoredTablesDatabaseTableResult'],
                 total_tables: _builtins.int):
        """
        :param _builtins.str name: Indicates the table name.
        :param Sequence['GetMysqlRestoredTablesDatabaseTableArgs'] tables: Indicates the table information.
        :param _builtins.int total_tables: Indicates the total number of tables.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "tables", tables)
        pulumi.set(__self__, "total_tables", total_tables)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the table name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def tables(self) -> Sequence['outputs.GetMysqlRestoredTablesDatabaseTableResult']:
        """
        Indicates the table information.
        """
        return pulumi.get(self, "tables")

    @_builtins.property
    @pulumi.getter(name="totalTables")
    def total_tables(self) -> _builtins.int:
        """
        Indicates the total number of tables.
        """
        return pulumi.get(self, "total_tables")


@pulumi.output_type
class GetMysqlRestoredTablesDatabaseTableResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str):
        """
        :param _builtins.str name: Indicates the table name.
        """
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the table name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetMysqlScheduledTasksTaskResult(dict):
    def __init__(__self__, *,
                 create_time: _builtins.str,
                 datastore_type: _builtins.str,
                 end_time: _builtins.str,
                 instance_id: _builtins.str,
                 instance_name: _builtins.str,
                 instance_status: _builtins.str,
                 job_id: _builtins.str,
                 job_name: _builtins.str,
                 job_status: _builtins.str,
                 project_id: _builtins.str,
                 start_time: _builtins.str):
        """
        :param _builtins.str create_time: Indicates the task creation time in the **yyyy-mm-ddThh:mm:ssZ** format.
        :param _builtins.str datastore_type: Indicates the database type.
        :param _builtins.str end_time: Indicates the task end time in the **yyyy-mm-ddThh:mm:ssZ** format.
        :param _builtins.str instance_id: Indicates the instance ID.
        :param _builtins.str instance_name: Indicates the instance name.
        :param _builtins.str instance_status: Indicates the instance status.
        :param _builtins.str job_id: Specifies the task ID.
        :param _builtins.str job_name: Specifies the task scheduling type.
        :param _builtins.str job_status: Indicates the task execution status.
        :param _builtins.str project_id: Indicates the project ID of a tenant in a region.
        :param _builtins.str start_time: Indicates the task start time in the **yyyy-mm-ddThh:mm:ssZ** format.
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "datastore_type", datastore_type)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "instance_status", instance_status)
        pulumi.set(__self__, "job_id", job_id)
        pulumi.set(__self__, "job_name", job_name)
        pulumi.set(__self__, "job_status", job_status)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "start_time", start_time)

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.str:
        """
        Indicates the task creation time in the **yyyy-mm-ddThh:mm:ssZ** format.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter(name="datastoreType")
    def datastore_type(self) -> _builtins.str:
        """
        Indicates the database type.
        """
        return pulumi.get(self, "datastore_type")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.str:
        """
        Indicates the task end time in the **yyyy-mm-ddThh:mm:ssZ** format.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        Indicates the instance ID.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> _builtins.str:
        """
        Indicates the instance name.
        """
        return pulumi.get(self, "instance_name")

    @_builtins.property
    @pulumi.getter(name="instanceStatus")
    def instance_status(self) -> _builtins.str:
        """
        Indicates the instance status.
        """
        return pulumi.get(self, "instance_status")

    @_builtins.property
    @pulumi.getter(name="jobId")
    def job_id(self) -> _builtins.str:
        """
        Specifies the task ID.
        """
        return pulumi.get(self, "job_id")

    @_builtins.property
    @pulumi.getter(name="jobName")
    def job_name(self) -> _builtins.str:
        """
        Specifies the task scheduling type.
        """
        return pulumi.get(self, "job_name")

    @_builtins.property
    @pulumi.getter(name="jobStatus")
    def job_status(self) -> _builtins.str:
        """
        Indicates the task execution status.
        """
        return pulumi.get(self, "job_status")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        Indicates the project ID of a tenant in a region.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        """
        Indicates the task start time in the **yyyy-mm-ddThh:mm:ssZ** format.
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class GetMysqlSlowLogsSlowLogListResult(dict):
    def __init__(__self__, *,
                 client_ip: _builtins.str,
                 count: _builtins.str,
                 database: _builtins.str,
                 lock_time: _builtins.str,
                 node_id: _builtins.str,
                 query_sample: _builtins.str,
                 rows_examined: _builtins.str,
                 rows_sent: _builtins.str,
                 start_time: _builtins.str,
                 time: _builtins.str,
                 type: _builtins.str,
                 users: _builtins.str):
        """
        :param _builtins.str client_ip: Indicates the IP address of the client.
        :param _builtins.str count: Indicates the number of executions.
        :param _builtins.str database: Specifies the name of the database.
        :param _builtins.str lock_time: Indicates the lock wait time.
        :param _builtins.str node_id: Specifies the ID of the instance node.
        :param _builtins.str query_sample: Indicates the execution syntax.
        :param _builtins.str rows_examined: Indicates the number of scanned rows.
        :param _builtins.str rows_sent: Indicates the number of sent rows.
        :param _builtins.str start_time: Specifies the start time in the **yyyy-mm-ddThh:mm:ssZ** format.
        :param _builtins.str time: Indicates the execution time.
        :param _builtins.str type: Indicates the statement type.
        :param _builtins.str users: Indicates the name of the account.
        """
        pulumi.set(__self__, "client_ip", client_ip)
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "lock_time", lock_time)
        pulumi.set(__self__, "node_id", node_id)
        pulumi.set(__self__, "query_sample", query_sample)
        pulumi.set(__self__, "rows_examined", rows_examined)
        pulumi.set(__self__, "rows_sent", rows_sent)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "time", time)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "users", users)

    @_builtins.property
    @pulumi.getter(name="clientIp")
    def client_ip(self) -> _builtins.str:
        """
        Indicates the IP address of the client.
        """
        return pulumi.get(self, "client_ip")

    @_builtins.property
    @pulumi.getter
    def count(self) -> _builtins.str:
        """
        Indicates the number of executions.
        """
        return pulumi.get(self, "count")

    @_builtins.property
    @pulumi.getter
    def database(self) -> _builtins.str:
        """
        Specifies the name of the database.
        """
        return pulumi.get(self, "database")

    @_builtins.property
    @pulumi.getter(name="lockTime")
    def lock_time(self) -> _builtins.str:
        """
        Indicates the lock wait time.
        """
        return pulumi.get(self, "lock_time")

    @_builtins.property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> _builtins.str:
        """
        Specifies the ID of the instance node.
        """
        return pulumi.get(self, "node_id")

    @_builtins.property
    @pulumi.getter(name="querySample")
    def query_sample(self) -> _builtins.str:
        """
        Indicates the execution syntax.
        """
        return pulumi.get(self, "query_sample")

    @_builtins.property
    @pulumi.getter(name="rowsExamined")
    def rows_examined(self) -> _builtins.str:
        """
        Indicates the number of scanned rows.
        """
        return pulumi.get(self, "rows_examined")

    @_builtins.property
    @pulumi.getter(name="rowsSent")
    def rows_sent(self) -> _builtins.str:
        """
        Indicates the number of sent rows.
        """
        return pulumi.get(self, "rows_sent")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        """
        Specifies the start time in the **yyyy-mm-ddThh:mm:ssZ** format.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter
    def time(self) -> _builtins.str:
        """
        Indicates the execution time.
        """
        return pulumi.get(self, "time")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the statement type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def users(self) -> _builtins.str:
        """
        Indicates the name of the account.
        """
        return pulumi.get(self, "users")


