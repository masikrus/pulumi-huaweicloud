# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['MysqlInstanceRestartArgs', 'MysqlInstanceRestart']

@pulumi.input_type
class MysqlInstanceRestartArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[_builtins.str],
                 delay: Optional[pulumi.Input[_builtins.bool]] = None,
                 node_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a MysqlInstanceRestart resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the GaussDB MySQL instance. Changing this parameter
               will create a new resource.
        :param pulumi.Input[_builtins.bool] delay: Specifies whether the instance/node will be rebooted with a delay. Value options:
               + **true**: The instance/node will be rebooted during the specified maintenance window.
               + **false(default)**: The instance/node will be rebooted immediately.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] node_id: Specifies the node ID of the GaussDB MySQL instance. Changing this parameter
               will create a new resource.
               
               > **NOTE:** If `node_id` is not specified, then the GaussDB MySQL instance will be rebooted.
               <br/> If `node_id` is specified, then the node of the GaussDB MySQL instance will be rebooted.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        if delay is not None:
            pulumi.set(__self__, "delay", delay)
        if node_id is not None:
            pulumi.set(__self__, "node_id", node_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the GaussDB MySQL instance. Changing this parameter
        will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def delay(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the instance/node will be rebooted with a delay. Value options:
        + **true**: The instance/node will be rebooted during the specified maintenance window.
        + **false(default)**: The instance/node will be rebooted immediately.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "delay")

    @delay.setter
    def delay(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "delay", value)

    @_builtins.property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the node ID of the GaussDB MySQL instance. Changing this parameter
        will create a new resource.

        > **NOTE:** If `node_id` is not specified, then the GaussDB MySQL instance will be rebooted.
        <br/> If `node_id` is specified, then the node of the GaussDB MySQL instance will be rebooted.
        """
        return pulumi.get(self, "node_id")

    @node_id.setter
    def node_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "node_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _MysqlInstanceRestartState:
    def __init__(__self__, *,
                 delay: Optional[pulumi.Input[_builtins.bool]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 node_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering MysqlInstanceRestart resources.
        :param pulumi.Input[_builtins.bool] delay: Specifies whether the instance/node will be rebooted with a delay. Value options:
               + **true**: The instance/node will be rebooted during the specified maintenance window.
               + **false(default)**: The instance/node will be rebooted immediately.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the GaussDB MySQL instance. Changing this parameter
               will create a new resource.
        :param pulumi.Input[_builtins.str] node_id: Specifies the node ID of the GaussDB MySQL instance. Changing this parameter
               will create a new resource.
               
               > **NOTE:** If `node_id` is not specified, then the GaussDB MySQL instance will be rebooted.
               <br/> If `node_id` is specified, then the node of the GaussDB MySQL instance will be rebooted.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        if delay is not None:
            pulumi.set(__self__, "delay", delay)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if node_id is not None:
            pulumi.set(__self__, "node_id", node_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def delay(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the instance/node will be rebooted with a delay. Value options:
        + **true**: The instance/node will be rebooted during the specified maintenance window.
        + **false(default)**: The instance/node will be rebooted immediately.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "delay")

    @delay.setter
    def delay(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "delay", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the GaussDB MySQL instance. Changing this parameter
        will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the node ID of the GaussDB MySQL instance. Changing this parameter
        will create a new resource.

        > **NOTE:** If `node_id` is not specified, then the GaussDB MySQL instance will be rebooted.
        <br/> If `node_id` is specified, then the node of the GaussDB MySQL instance will be rebooted.
        """
        return pulumi.get(self, "node_id")

    @node_id.setter
    def node_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "node_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("huaweicloud:GaussDB/mysqlInstanceRestart:MysqlInstanceRestart")
class MysqlInstanceRestart(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 delay: Optional[pulumi.Input[_builtins.bool]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 node_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a GaussDB MySQL instance restart resource within HuaweiCloud.

        ## Example Usage

        ### Restart GaussDB MySQL instance

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        test = huaweicloud.gaussdb.MysqlInstanceRestart("test", instance_id=instance_id)
        ```

        ### Restart GaussDB MySQL instance node

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        node_id = config.require_object("nodeId")
        test = huaweicloud.gaussdb.MysqlInstanceRestart("test",
            instance_id=instance_id,
            node_id=node_id)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] delay: Specifies whether the instance/node will be rebooted with a delay. Value options:
               + **true**: The instance/node will be rebooted during the specified maintenance window.
               + **false(default)**: The instance/node will be rebooted immediately.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the GaussDB MySQL instance. Changing this parameter
               will create a new resource.
        :param pulumi.Input[_builtins.str] node_id: Specifies the node ID of the GaussDB MySQL instance. Changing this parameter
               will create a new resource.
               
               > **NOTE:** If `node_id` is not specified, then the GaussDB MySQL instance will be rebooted.
               <br/> If `node_id` is specified, then the node of the GaussDB MySQL instance will be rebooted.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MysqlInstanceRestartArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a GaussDB MySQL instance restart resource within HuaweiCloud.

        ## Example Usage

        ### Restart GaussDB MySQL instance

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        test = huaweicloud.gaussdb.MysqlInstanceRestart("test", instance_id=instance_id)
        ```

        ### Restart GaussDB MySQL instance node

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        node_id = config.require_object("nodeId")
        test = huaweicloud.gaussdb.MysqlInstanceRestart("test",
            instance_id=instance_id,
            node_id=node_id)
        ```

        :param str resource_name: The name of the resource.
        :param MysqlInstanceRestartArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MysqlInstanceRestartArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 delay: Optional[pulumi.Input[_builtins.bool]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 node_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MysqlInstanceRestartArgs.__new__(MysqlInstanceRestartArgs)

            __props__.__dict__["delay"] = delay
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["node_id"] = node_id
            __props__.__dict__["region"] = region
        super(MysqlInstanceRestart, __self__).__init__(
            'huaweicloud:GaussDB/mysqlInstanceRestart:MysqlInstanceRestart',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            delay: Optional[pulumi.Input[_builtins.bool]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            node_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'MysqlInstanceRestart':
        """
        Get an existing MysqlInstanceRestart resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] delay: Specifies whether the instance/node will be rebooted with a delay. Value options:
               + **true**: The instance/node will be rebooted during the specified maintenance window.
               + **false(default)**: The instance/node will be rebooted immediately.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the GaussDB MySQL instance. Changing this parameter
               will create a new resource.
        :param pulumi.Input[_builtins.str] node_id: Specifies the node ID of the GaussDB MySQL instance. Changing this parameter
               will create a new resource.
               
               > **NOTE:** If `node_id` is not specified, then the GaussDB MySQL instance will be rebooted.
               <br/> If `node_id` is specified, then the node of the GaussDB MySQL instance will be rebooted.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MysqlInstanceRestartState.__new__(_MysqlInstanceRestartState)

        __props__.__dict__["delay"] = delay
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["node_id"] = node_id
        __props__.__dict__["region"] = region
        return MysqlInstanceRestart(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def delay(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether the instance/node will be rebooted with a delay. Value options:
        + **true**: The instance/node will be rebooted during the specified maintenance window.
        + **false(default)**: The instance/node will be rebooted immediately.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "delay")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the GaussDB MySQL instance. Changing this parameter
        will create a new resource.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the node ID of the GaussDB MySQL instance. Changing this parameter
        will create a new resource.

        > **NOTE:** If `node_id` is not specified, then the GaussDB MySQL instance will be rebooted.
        <br/> If `node_id` is specified, then the node of the GaussDB MySQL instance will be rebooted.
        """
        return pulumi.get(self, "node_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

