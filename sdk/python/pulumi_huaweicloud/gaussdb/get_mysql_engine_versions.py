# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetMysqlEngineVersionsResult',
    'AwaitableGetMysqlEngineVersionsResult',
    'get_mysql_engine_versions',
    'get_mysql_engine_versions_output',
]

@pulumi.output_type
class GetMysqlEngineVersionsResult:
    """
    A collection of values returned by getMysqlEngineVersions.
    """
    def __init__(__self__, database_name=None, datastores=None, id=None, region=None):
        if database_name and not isinstance(database_name, str):
            raise TypeError("Expected argument 'database_name' to be a str")
        pulumi.set(__self__, "database_name", database_name)
        if datastores and not isinstance(datastores, list):
            raise TypeError("Expected argument 'datastores' to be a list")
        pulumi.set(__self__, "datastores", datastores)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> _builtins.str:
        return pulumi.get(self, "database_name")

    @_builtins.property
    @pulumi.getter
    def datastores(self) -> Sequence['outputs.GetMysqlEngineVersionsDatastoreResult']:
        """
        Indicates the DB version list.
        """
        return pulumi.get(self, "datastores")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetMysqlEngineVersionsResult(GetMysqlEngineVersionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMysqlEngineVersionsResult(
            database_name=self.database_name,
            datastores=self.datastores,
            id=self.id,
            region=self.region)


def get_mysql_engine_versions(database_name: Optional[_builtins.str] = None,
                              region: Optional[_builtins.str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMysqlEngineVersionsResult:
    """
    Use this data source to get the database specifications of a specified DB engine.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.GaussDB.get_mysql_engine_versions(database_name="gaussdb-mysql")
    ```


    :param _builtins.str database_name: Specifies the DB engine.
           Value options: **gaussdb-mysql**.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['databaseName'] = database_name
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:GaussDB/getMysqlEngineVersions:getMysqlEngineVersions', __args__, opts=opts, typ=GetMysqlEngineVersionsResult).value

    return AwaitableGetMysqlEngineVersionsResult(
        database_name=pulumi.get(__ret__, 'database_name'),
        datastores=pulumi.get(__ret__, 'datastores'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'))
def get_mysql_engine_versions_output(database_name: Optional[pulumi.Input[_builtins.str]] = None,
                                     region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetMysqlEngineVersionsResult]:
    """
    Use this data source to get the database specifications of a specified DB engine.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.GaussDB.get_mysql_engine_versions(database_name="gaussdb-mysql")
    ```


    :param _builtins.str database_name: Specifies the DB engine.
           Value options: **gaussdb-mysql**.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['databaseName'] = database_name
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:GaussDB/getMysqlEngineVersions:getMysqlEngineVersions', __args__, opts=opts, typ=GetMysqlEngineVersionsResult)
    return __ret__.apply(lambda __response__: GetMysqlEngineVersionsResult(
        database_name=pulumi.get(__response__, 'database_name'),
        datastores=pulumi.get(__response__, 'datastores'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region')))
