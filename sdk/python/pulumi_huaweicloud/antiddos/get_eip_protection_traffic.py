# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetEipProtectionTrafficResult',
    'AwaitableGetEipProtectionTrafficResult',
    'get_eip_protection_traffic',
    'get_eip_protection_traffic_output',
]

@pulumi.output_type
class GetEipProtectionTrafficResult:
    """
    A collection of values returned by getEipProtectionTraffic.
    """
    def __init__(__self__, datas=None, floating_ip_id=None, id=None, ip=None, region=None):
        if datas and not isinstance(datas, list):
            raise TypeError("Expected argument 'datas' to be a list")
        pulumi.set(__self__, "datas", datas)
        if floating_ip_id and not isinstance(floating_ip_id, str):
            raise TypeError("Expected argument 'floating_ip_id' to be a str")
        pulumi.set(__self__, "floating_ip_id", floating_ip_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip and not isinstance(ip, str):
            raise TypeError("Expected argument 'ip' to be a str")
        pulumi.set(__self__, "ip", ip)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def datas(self) -> Sequence['outputs.GetEipProtectionTrafficDataResult']:
        """
        The list of EIP protection traffic. The data structure is documented below.
        """
        return pulumi.get(self, "datas")

    @_builtins.property
    @pulumi.getter(name="floatingIpId")
    def floating_ip_id(self) -> _builtins.str:
        return pulumi.get(self, "floating_ip_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def ip(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "ip")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetEipProtectionTrafficResult(GetEipProtectionTrafficResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEipProtectionTrafficResult(
            datas=self.datas,
            floating_ip_id=self.floating_ip_id,
            id=self.id,
            ip=self.ip,
            region=self.region)


def get_eip_protection_traffic(floating_ip_id: Optional[_builtins.str] = None,
                               ip: Optional[_builtins.str] = None,
                               region: Optional[_builtins.str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEipProtectionTrafficResult:
    """
    Use this data source to query the EIP protection traffic of a specified EIP within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    floating_ip_id = config.require_object("floatingIpId")
    eip_address = config.require_object("eipAddress")
    test = huaweicloud.AntiDDos.get_eip_protection_traffic(floating_ip_id=floating_ip_id,
        ip=eip_address)
    ```


    :param _builtins.str floating_ip_id: Specifies the ID of the EIP.
    :param _builtins.str ip: Specifies the EIP address.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['floatingIpId'] = floating_ip_id
    __args__['ip'] = ip
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:AntiDDos/getEipProtectionTraffic:getEipProtectionTraffic', __args__, opts=opts, typ=GetEipProtectionTrafficResult).value

    return AwaitableGetEipProtectionTrafficResult(
        datas=pulumi.get(__ret__, 'datas'),
        floating_ip_id=pulumi.get(__ret__, 'floating_ip_id'),
        id=pulumi.get(__ret__, 'id'),
        ip=pulumi.get(__ret__, 'ip'),
        region=pulumi.get(__ret__, 'region'))
def get_eip_protection_traffic_output(floating_ip_id: Optional[pulumi.Input[_builtins.str]] = None,
                                      ip: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                      region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetEipProtectionTrafficResult]:
    """
    Use this data source to query the EIP protection traffic of a specified EIP within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    floating_ip_id = config.require_object("floatingIpId")
    eip_address = config.require_object("eipAddress")
    test = huaweicloud.AntiDDos.get_eip_protection_traffic(floating_ip_id=floating_ip_id,
        ip=eip_address)
    ```


    :param _builtins.str floating_ip_id: Specifies the ID of the EIP.
    :param _builtins.str ip: Specifies the EIP address.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['floatingIpId'] = floating_ip_id
    __args__['ip'] = ip
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:AntiDDos/getEipProtectionTraffic:getEipProtectionTraffic', __args__, opts=opts, typ=GetEipProtectionTrafficResult)
    return __ret__.apply(lambda __response__: GetEipProtectionTrafficResult(
        datas=pulumi.get(__response__, 'datas'),
        floating_ip_id=pulumi.get(__response__, 'floating_ip_id'),
        id=pulumi.get(__response__, 'id'),
        ip=pulumi.get(__response__, 'ip'),
        region=pulumi.get(__response__, 'region')))
