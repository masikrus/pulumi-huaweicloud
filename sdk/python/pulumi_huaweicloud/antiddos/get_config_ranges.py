# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetConfigRangesResult',
    'AwaitableGetConfigRangesResult',
    'get_config_ranges',
    'get_config_ranges_output',
]

@pulumi.output_type
class GetConfigRangesResult:
    """
    A collection of values returned by getConfigRanges.
    """
    def __init__(__self__, connection_limited_lists=None, extend_ddos_configs=None, http_limited_lists=None, id=None, region=None, traffic_limited_lists=None):
        if connection_limited_lists and not isinstance(connection_limited_lists, list):
            raise TypeError("Expected argument 'connection_limited_lists' to be a list")
        pulumi.set(__self__, "connection_limited_lists", connection_limited_lists)
        if extend_ddos_configs and not isinstance(extend_ddos_configs, list):
            raise TypeError("Expected argument 'extend_ddos_configs' to be a list")
        pulumi.set(__self__, "extend_ddos_configs", extend_ddos_configs)
        if http_limited_lists and not isinstance(http_limited_lists, list):
            raise TypeError("Expected argument 'http_limited_lists' to be a list")
        pulumi.set(__self__, "http_limited_lists", http_limited_lists)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if traffic_limited_lists and not isinstance(traffic_limited_lists, list):
            raise TypeError("Expected argument 'traffic_limited_lists' to be a list")
        pulumi.set(__self__, "traffic_limited_lists", traffic_limited_lists)

    @_builtins.property
    @pulumi.getter(name="connectionLimitedLists")
    def connection_limited_lists(self) -> Sequence['outputs.GetConfigRangesConnectionLimitedListResult']:
        """
        The list of limits of numbers of connections.
        """
        return pulumi.get(self, "connection_limited_lists")

    @_builtins.property
    @pulumi.getter(name="extendDdosConfigs")
    def extend_ddos_configs(self) -> Sequence['outputs.GetConfigRangesExtendDdosConfigResult']:
        """
        The list of extend ddos limits.
        """
        return pulumi.get(self, "extend_ddos_configs")

    @_builtins.property
    @pulumi.getter(name="httpLimitedLists")
    def http_limited_lists(self) -> Sequence['outputs.GetConfigRangesHttpLimitedListResult']:
        """
        The list of HTTP limits.
        """
        return pulumi.get(self, "http_limited_lists")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="trafficLimitedLists")
    def traffic_limited_lists(self) -> Sequence['outputs.GetConfigRangesTrafficLimitedListResult']:
        """
        The list of traffic limits.
        """
        return pulumi.get(self, "traffic_limited_lists")


class AwaitableGetConfigRangesResult(GetConfigRangesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetConfigRangesResult(
            connection_limited_lists=self.connection_limited_lists,
            extend_ddos_configs=self.extend_ddos_configs,
            http_limited_lists=self.http_limited_lists,
            id=self.id,
            region=self.region,
            traffic_limited_lists=self.traffic_limited_lists)


def get_config_ranges(region: Optional[_builtins.str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetConfigRangesResult:
    """
    Use this data source to query Cloud Native Anti-DDos config ranges within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.AntiDDos.get_config_ranges()
    ```


    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:AntiDDos/getConfigRanges:getConfigRanges', __args__, opts=opts, typ=GetConfigRangesResult).value

    return AwaitableGetConfigRangesResult(
        connection_limited_lists=pulumi.get(__ret__, 'connection_limited_lists'),
        extend_ddos_configs=pulumi.get(__ret__, 'extend_ddos_configs'),
        http_limited_lists=pulumi.get(__ret__, 'http_limited_lists'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'),
        traffic_limited_lists=pulumi.get(__ret__, 'traffic_limited_lists'))
def get_config_ranges_output(region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetConfigRangesResult]:
    """
    Use this data source to query Cloud Native Anti-DDos config ranges within HuaweiCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.AntiDDos.get_config_ranges()
    ```


    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:AntiDDos/getConfigRanges:getConfigRanges', __args__, opts=opts, typ=GetConfigRangesResult)
    return __ret__.apply(lambda __response__: GetConfigRangesResult(
        connection_limited_lists=pulumi.get(__response__, 'connection_limited_lists'),
        extend_ddos_configs=pulumi.get(__response__, 'extend_ddos_configs'),
        http_limited_lists=pulumi.get(__response__, 'http_limited_lists'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region'),
        traffic_limited_lists=pulumi.get(__response__, 'traffic_limited_lists')))
