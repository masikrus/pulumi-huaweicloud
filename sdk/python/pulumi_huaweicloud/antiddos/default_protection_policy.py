# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['DefaultProtectionPolicyArgs', 'DefaultProtectionPolicy']

@pulumi.input_type
class DefaultProtectionPolicyArgs:
    def __init__(__self__, *,
                 traffic_threshold: pulumi.Input[_builtins.int],
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a DefaultProtectionPolicy resource.
        :param pulumi.Input[_builtins.int] traffic_threshold: Specifies the traffic cleaning threshold in Mbps.
               The value can be `10`, `30`, `50`, `70`, `100`, `120`, `150`, `200`, `250`, `300`, `1,000` Mbps.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        pulumi.set(__self__, "traffic_threshold", traffic_threshold)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="trafficThreshold")
    def traffic_threshold(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the traffic cleaning threshold in Mbps.
        The value can be `10`, `30`, `50`, `70`, `100`, `120`, `150`, `200`, `250`, `300`, `1,000` Mbps.
        """
        return pulumi.get(self, "traffic_threshold")

    @traffic_threshold.setter
    def traffic_threshold(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "traffic_threshold", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _DefaultProtectionPolicyState:
    def __init__(__self__, *,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 traffic_threshold: Optional[pulumi.Input[_builtins.int]] = None):
        """
        Input properties used for looking up and filtering DefaultProtectionPolicy resources.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[_builtins.int] traffic_threshold: Specifies the traffic cleaning threshold in Mbps.
               The value can be `10`, `30`, `50`, `70`, `100`, `120`, `150`, `200`, `250`, `300`, `1,000` Mbps.
        """
        if region is not None:
            pulumi.set(__self__, "region", region)
        if traffic_threshold is not None:
            pulumi.set(__self__, "traffic_threshold", traffic_threshold)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="trafficThreshold")
    def traffic_threshold(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the traffic cleaning threshold in Mbps.
        The value can be `10`, `30`, `50`, `70`, `100`, `120`, `150`, `200`, `250`, `300`, `1,000` Mbps.
        """
        return pulumi.get(self, "traffic_threshold")

    @traffic_threshold.setter
    def traffic_threshold(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "traffic_threshold", value)


@pulumi.type_token("huaweicloud:AntiDDos/defaultProtectionPolicy:DefaultProtectionPolicy")
class DefaultProtectionPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 traffic_threshold: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        """
        Manages Cloud Native Anti-DDos default protection policy resource within HuaweiCloud.

        > Destroying the resource actually sets the field `traffic_threshold` to 120 Mbps.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.antiddos.DefaultProtectionPolicy("test", traffic_threshold=150)
        ```

        ## Import

        Cloud Native Anti-DDos default protection policy resource can be imported using `id`. e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:AntiDDos/defaultProtectionPolicy:DefaultProtectionPolicy test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[_builtins.int] traffic_threshold: Specifies the traffic cleaning threshold in Mbps.
               The value can be `10`, `30`, `50`, `70`, `100`, `120`, `150`, `200`, `250`, `300`, `1,000` Mbps.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DefaultProtectionPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages Cloud Native Anti-DDos default protection policy resource within HuaweiCloud.

        > Destroying the resource actually sets the field `traffic_threshold` to 120 Mbps.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.antiddos.DefaultProtectionPolicy("test", traffic_threshold=150)
        ```

        ## Import

        Cloud Native Anti-DDos default protection policy resource can be imported using `id`. e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:AntiDDos/defaultProtectionPolicy:DefaultProtectionPolicy test <id>
        ```

        :param str resource_name: The name of the resource.
        :param DefaultProtectionPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DefaultProtectionPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 traffic_threshold: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DefaultProtectionPolicyArgs.__new__(DefaultProtectionPolicyArgs)

            __props__.__dict__["region"] = region
            if traffic_threshold is None and not opts.urn:
                raise TypeError("Missing required property 'traffic_threshold'")
            __props__.__dict__["traffic_threshold"] = traffic_threshold
        super(DefaultProtectionPolicy, __self__).__init__(
            'huaweicloud:AntiDDos/defaultProtectionPolicy:DefaultProtectionPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            traffic_threshold: Optional[pulumi.Input[_builtins.int]] = None) -> 'DefaultProtectionPolicy':
        """
        Get an existing DefaultProtectionPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[_builtins.int] traffic_threshold: Specifies the traffic cleaning threshold in Mbps.
               The value can be `10`, `30`, `50`, `70`, `100`, `120`, `150`, `200`, `250`, `300`, `1,000` Mbps.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DefaultProtectionPolicyState.__new__(_DefaultProtectionPolicyState)

        __props__.__dict__["region"] = region
        __props__.__dict__["traffic_threshold"] = traffic_threshold
        return DefaultProtectionPolicy(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="trafficThreshold")
    def traffic_threshold(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the traffic cleaning threshold in Mbps.
        The value can be `10`, `30`, `50`, `70`, `100`, `120`, `150`, `200`, `250`, `300`, `1,000` Mbps.
        """
        return pulumi.get(self, "traffic_threshold")

