# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetConfigRangesConnectionLimitedListResult',
    'GetConfigRangesExtendDdosConfigResult',
    'GetConfigRangesHttpLimitedListResult',
    'GetConfigRangesTrafficLimitedListResult',
    'GetEipDefenseStatusesDdosStatusResult',
    'GetEipDefenseStatusesV2DdosStatusResult',
    'GetEipExceptionEventsLogResult',
    'GetEipProtectionTrafficDataResult',
    'GetWeeklyProtectionStatisticsTop10Result',
    'GetWeeklyProtectionStatisticsWeekdataResult',
]

@pulumi.output_type
class GetConfigRangesConnectionLimitedListResult(dict):
    def __init__(__self__, *,
                 cleaning_access_pos_id: _builtins.int,
                 new_connection_limited: _builtins.int,
                 total_connection_limited: _builtins.int):
        """
        :param _builtins.int cleaning_access_pos_id: The position ID of access limit during cleaning.
        :param _builtins.int new_connection_limited: The number of new connections of a source IP address.
        :param _builtins.int total_connection_limited: The total number of connections of a source IP address.
        """
        pulumi.set(__self__, "cleaning_access_pos_id", cleaning_access_pos_id)
        pulumi.set(__self__, "new_connection_limited", new_connection_limited)
        pulumi.set(__self__, "total_connection_limited", total_connection_limited)

    @_builtins.property
    @pulumi.getter(name="cleaningAccessPosId")
    def cleaning_access_pos_id(self) -> _builtins.int:
        """
        The position ID of access limit during cleaning.
        """
        return pulumi.get(self, "cleaning_access_pos_id")

    @_builtins.property
    @pulumi.getter(name="newConnectionLimited")
    def new_connection_limited(self) -> _builtins.int:
        """
        The number of new connections of a source IP address.
        """
        return pulumi.get(self, "new_connection_limited")

    @_builtins.property
    @pulumi.getter(name="totalConnectionLimited")
    def total_connection_limited(self) -> _builtins.int:
        """
        The total number of connections of a source IP address.
        """
        return pulumi.get(self, "total_connection_limited")


@pulumi.output_type
class GetConfigRangesExtendDdosConfigResult(dict):
    def __init__(__self__, *,
                 http_packet_per_second: _builtins.int,
                 new_connection_limited: _builtins.int,
                 packet_per_second: _builtins.int,
                 set_id: _builtins.int,
                 total_connection_limited: _builtins.int,
                 traffic_per_second: _builtins.int):
        """
        :param _builtins.int http_packet_per_second: The threshold of number of HTTP requests per second.
        :param _builtins.int new_connection_limited: The number of new connections of a source IP address.
        :param _builtins.int packet_per_second: The threshold of number of packets per second.
        :param _builtins.int set_id: The position ID of config.
        :param _builtins.int total_connection_limited: The total number of connections of a source IP address.
        :param _builtins.int traffic_per_second: The threshold of traffic per second (Mbit/s).
        """
        pulumi.set(__self__, "http_packet_per_second", http_packet_per_second)
        pulumi.set(__self__, "new_connection_limited", new_connection_limited)
        pulumi.set(__self__, "packet_per_second", packet_per_second)
        pulumi.set(__self__, "set_id", set_id)
        pulumi.set(__self__, "total_connection_limited", total_connection_limited)
        pulumi.set(__self__, "traffic_per_second", traffic_per_second)

    @_builtins.property
    @pulumi.getter(name="httpPacketPerSecond")
    def http_packet_per_second(self) -> _builtins.int:
        """
        The threshold of number of HTTP requests per second.
        """
        return pulumi.get(self, "http_packet_per_second")

    @_builtins.property
    @pulumi.getter(name="newConnectionLimited")
    def new_connection_limited(self) -> _builtins.int:
        """
        The number of new connections of a source IP address.
        """
        return pulumi.get(self, "new_connection_limited")

    @_builtins.property
    @pulumi.getter(name="packetPerSecond")
    def packet_per_second(self) -> _builtins.int:
        """
        The threshold of number of packets per second.
        """
        return pulumi.get(self, "packet_per_second")

    @_builtins.property
    @pulumi.getter(name="setId")
    def set_id(self) -> _builtins.int:
        """
        The position ID of config.
        """
        return pulumi.get(self, "set_id")

    @_builtins.property
    @pulumi.getter(name="totalConnectionLimited")
    def total_connection_limited(self) -> _builtins.int:
        """
        The total number of connections of a source IP address.
        """
        return pulumi.get(self, "total_connection_limited")

    @_builtins.property
    @pulumi.getter(name="trafficPerSecond")
    def traffic_per_second(self) -> _builtins.int:
        """
        The threshold of traffic per second (Mbit/s).
        """
        return pulumi.get(self, "traffic_per_second")


@pulumi.output_type
class GetConfigRangesHttpLimitedListResult(dict):
    def __init__(__self__, *,
                 http_packet_per_second: _builtins.int,
                 http_request_pos_id: _builtins.int):
        """
        :param _builtins.int http_packet_per_second: The threshold of number of HTTP requests per second.
        :param _builtins.int http_request_pos_id: The position ID of number of HTTP requests.
        """
        pulumi.set(__self__, "http_packet_per_second", http_packet_per_second)
        pulumi.set(__self__, "http_request_pos_id", http_request_pos_id)

    @_builtins.property
    @pulumi.getter(name="httpPacketPerSecond")
    def http_packet_per_second(self) -> _builtins.int:
        """
        The threshold of number of HTTP requests per second.
        """
        return pulumi.get(self, "http_packet_per_second")

    @_builtins.property
    @pulumi.getter(name="httpRequestPosId")
    def http_request_pos_id(self) -> _builtins.int:
        """
        The position ID of number of HTTP requests.
        """
        return pulumi.get(self, "http_request_pos_id")


@pulumi.output_type
class GetConfigRangesTrafficLimitedListResult(dict):
    def __init__(__self__, *,
                 packet_per_second: _builtins.int,
                 traffic_per_second: _builtins.int,
                 traffic_pos_id: _builtins.int):
        """
        :param _builtins.int packet_per_second: The threshold of number of packets per second.
        :param _builtins.int traffic_per_second: The threshold of traffic per second (Mbit/s).
        :param _builtins.int traffic_pos_id: The position ID of traffic.
        """
        pulumi.set(__self__, "packet_per_second", packet_per_second)
        pulumi.set(__self__, "traffic_per_second", traffic_per_second)
        pulumi.set(__self__, "traffic_pos_id", traffic_pos_id)

    @_builtins.property
    @pulumi.getter(name="packetPerSecond")
    def packet_per_second(self) -> _builtins.int:
        """
        The threshold of number of packets per second.
        """
        return pulumi.get(self, "packet_per_second")

    @_builtins.property
    @pulumi.getter(name="trafficPerSecond")
    def traffic_per_second(self) -> _builtins.int:
        """
        The threshold of traffic per second (Mbit/s).
        """
        return pulumi.get(self, "traffic_per_second")

    @_builtins.property
    @pulumi.getter(name="trafficPosId")
    def traffic_pos_id(self) -> _builtins.int:
        """
        The position ID of traffic.
        """
        return pulumi.get(self, "traffic_pos_id")


@pulumi.output_type
class GetEipDefenseStatusesDdosStatusResult(dict):
    def __init__(__self__, *,
                 blackhole_endtime: _builtins.int,
                 eip_id: _builtins.str,
                 http_threshold: _builtins.int,
                 network_type: _builtins.str,
                 protect_type: _builtins.str,
                 public_ip: _builtins.str,
                 status: _builtins.str,
                 traffic_threshold: _builtins.int):
        """
        :param _builtins.int blackhole_endtime: The end time of black hole.
        :param _builtins.str eip_id: The ID of an EIP.
        :param _builtins.int http_threshold: The threshold of http traffic.
        :param _builtins.str network_type: The EIP type. Valid values are:
               + **EIP**: EIP bound or not bound to ECS.
               + **ELB**: EIP bound to ELB.
        :param _builtins.str protect_type: The protect type.
        :param _builtins.str public_ip: The public address of the EIP.
        :param _builtins.str status: Specifies the defense status. Valid values are **normal**, **configging**, **notConfig**,
               **packetcleaning**, and **packetdropping**. Query all by default.
        :param _builtins.int traffic_threshold: The traffic cleaning threshold in Mbps.
        """
        pulumi.set(__self__, "blackhole_endtime", blackhole_endtime)
        pulumi.set(__self__, "eip_id", eip_id)
        pulumi.set(__self__, "http_threshold", http_threshold)
        pulumi.set(__self__, "network_type", network_type)
        pulumi.set(__self__, "protect_type", protect_type)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "traffic_threshold", traffic_threshold)

    @_builtins.property
    @pulumi.getter(name="blackholeEndtime")
    def blackhole_endtime(self) -> _builtins.int:
        """
        The end time of black hole.
        """
        return pulumi.get(self, "blackhole_endtime")

    @_builtins.property
    @pulumi.getter(name="eipId")
    def eip_id(self) -> _builtins.str:
        """
        The ID of an EIP.
        """
        return pulumi.get(self, "eip_id")

    @_builtins.property
    @pulumi.getter(name="httpThreshold")
    def http_threshold(self) -> _builtins.int:
        """
        The threshold of http traffic.
        """
        return pulumi.get(self, "http_threshold")

    @_builtins.property
    @pulumi.getter(name="networkType")
    def network_type(self) -> _builtins.str:
        """
        The EIP type. Valid values are:
        + **EIP**: EIP bound or not bound to ECS.
        + **ELB**: EIP bound to ELB.
        """
        return pulumi.get(self, "network_type")

    @_builtins.property
    @pulumi.getter(name="protectType")
    def protect_type(self) -> _builtins.str:
        """
        The protect type.
        """
        return pulumi.get(self, "protect_type")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> _builtins.str:
        """
        The public address of the EIP.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the defense status. Valid values are **normal**, **configging**, **notConfig**,
        **packetcleaning**, and **packetdropping**. Query all by default.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="trafficThreshold")
    def traffic_threshold(self) -> _builtins.int:
        """
        The traffic cleaning threshold in Mbps.
        """
        return pulumi.get(self, "traffic_threshold")


@pulumi.output_type
class GetEipDefenseStatusesV2DdosStatusResult(dict):
    def __init__(__self__, *,
                 block_threshold: _builtins.str,
                 clean_threshold: _builtins.int,
                 floating_ip_address: _builtins.str,
                 floating_ip_id: _builtins.str,
                 product_type: _builtins.str,
                 status: _builtins.str):
        """
        :param _builtins.str block_threshold: The blackhole threshold.
        :param _builtins.int clean_threshold: The cleaning threshold.
        :param _builtins.str floating_ip_address: The IP address of the EIP.
        :param _builtins.str floating_ip_id: The ID of the EIP.
        :param _builtins.str product_type: The type of the EIP protection service. Options are:
               + **Anti-DDoS**: EIP belongs to Anti-DDoS traffic cleaning.
               + **CNAD**: EIP belongs to DDoS native advanced protection.
        :param _builtins.str status: Specifies the protection status of the EIP. Options are:
               + **normal**: Normal.
               + **configging**: Configuring.
               + **notConfig**: Not configured.
               + **packetcleaning**: Packet cleaning.
               + **packetdropping**: Packet dropping.
        """
        pulumi.set(__self__, "block_threshold", block_threshold)
        pulumi.set(__self__, "clean_threshold", clean_threshold)
        pulumi.set(__self__, "floating_ip_address", floating_ip_address)
        pulumi.set(__self__, "floating_ip_id", floating_ip_id)
        pulumi.set(__self__, "product_type", product_type)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="blockThreshold")
    def block_threshold(self) -> _builtins.str:
        """
        The blackhole threshold.
        """
        return pulumi.get(self, "block_threshold")

    @_builtins.property
    @pulumi.getter(name="cleanThreshold")
    def clean_threshold(self) -> _builtins.int:
        """
        The cleaning threshold.
        """
        return pulumi.get(self, "clean_threshold")

    @_builtins.property
    @pulumi.getter(name="floatingIpAddress")
    def floating_ip_address(self) -> _builtins.str:
        """
        The IP address of the EIP.
        """
        return pulumi.get(self, "floating_ip_address")

    @_builtins.property
    @pulumi.getter(name="floatingIpId")
    def floating_ip_id(self) -> _builtins.str:
        """
        The ID of the EIP.
        """
        return pulumi.get(self, "floating_ip_id")

    @_builtins.property
    @pulumi.getter(name="productType")
    def product_type(self) -> _builtins.str:
        """
        The type of the EIP protection service. Options are:
        + **Anti-DDoS**: EIP belongs to Anti-DDoS traffic cleaning.
        + **CNAD**: EIP belongs to DDoS native advanced protection.
        """
        return pulumi.get(self, "product_type")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the protection status of the EIP. Options are:
        + **normal**: Normal.
        + **configging**: Configuring.
        + **notConfig**: Not configured.
        + **packetcleaning**: Packet cleaning.
        + **packetdropping**: Packet dropping.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetEipExceptionEventsLogResult(dict):
    def __init__(__self__, *,
                 end_time: _builtins.int,
                 start_time: _builtins.int,
                 status: _builtins.int,
                 trigger_bps: _builtins.int,
                 trigger_http_pps: _builtins.int,
                 trigger_pps: _builtins.int):
        """
        :param _builtins.int end_time: The end time of the exception event.
        :param _builtins.int start_time: The start time of the exception event.
        :param _builtins.int status: The protection status. The valid values are:
        :param _builtins.int trigger_bps: The traffic when the exception event is triggered, in bit/s.
        :param _builtins.int trigger_http_pps: The HTTP request rate when the exception event is triggered, in pps.
        :param _builtins.int trigger_pps: The packet rate when the exception event is triggered, in pps.
        """
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "trigger_bps", trigger_bps)
        pulumi.set(__self__, "trigger_http_pps", trigger_http_pps)
        pulumi.set(__self__, "trigger_pps", trigger_pps)

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.int:
        """
        The end time of the exception event.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.int:
        """
        The start time of the exception event.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.int:
        """
        The protection status. The valid values are:
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="triggerBps")
    def trigger_bps(self) -> _builtins.int:
        """
        The traffic when the exception event is triggered, in bit/s.
        """
        return pulumi.get(self, "trigger_bps")

    @_builtins.property
    @pulumi.getter(name="triggerHttpPps")
    def trigger_http_pps(self) -> _builtins.int:
        """
        The HTTP request rate when the exception event is triggered, in pps.
        """
        return pulumi.get(self, "trigger_http_pps")

    @_builtins.property
    @pulumi.getter(name="triggerPps")
    def trigger_pps(self) -> _builtins.int:
        """
        The packet rate when the exception event is triggered, in pps.
        """
        return pulumi.get(self, "trigger_pps")


@pulumi.output_type
class GetEipProtectionTrafficDataResult(dict):
    def __init__(__self__, *,
                 bps_attack: _builtins.int,
                 bps_in: _builtins.int,
                 period_start: _builtins.int,
                 pps_attack: _builtins.int,
                 pps_in: _builtins.int,
                 total_bps: _builtins.int,
                 total_pps: _builtins.int):
        """
        :param _builtins.int bps_attack: The attack traffic rate, in bit/s.
        :param _builtins.int bps_in: The inbound traffic rate, in bit/s.
        :param _builtins.int period_start: The start time of the statistics period.
        :param _builtins.int pps_attack: The attack packet rate, in packets per second (pps).
        :param _builtins.int pps_in: The inbound packet rate, in packets per second (pps).
        :param _builtins.int total_bps: The total traffic rate, in bit/s.
        :param _builtins.int total_pps: The total packet rate, in packets per second (pps).
        """
        pulumi.set(__self__, "bps_attack", bps_attack)
        pulumi.set(__self__, "bps_in", bps_in)
        pulumi.set(__self__, "period_start", period_start)
        pulumi.set(__self__, "pps_attack", pps_attack)
        pulumi.set(__self__, "pps_in", pps_in)
        pulumi.set(__self__, "total_bps", total_bps)
        pulumi.set(__self__, "total_pps", total_pps)

    @_builtins.property
    @pulumi.getter(name="bpsAttack")
    def bps_attack(self) -> _builtins.int:
        """
        The attack traffic rate, in bit/s.
        """
        return pulumi.get(self, "bps_attack")

    @_builtins.property
    @pulumi.getter(name="bpsIn")
    def bps_in(self) -> _builtins.int:
        """
        The inbound traffic rate, in bit/s.
        """
        return pulumi.get(self, "bps_in")

    @_builtins.property
    @pulumi.getter(name="periodStart")
    def period_start(self) -> _builtins.int:
        """
        The start time of the statistics period.
        """
        return pulumi.get(self, "period_start")

    @_builtins.property
    @pulumi.getter(name="ppsAttack")
    def pps_attack(self) -> _builtins.int:
        """
        The attack packet rate, in packets per second (pps).
        """
        return pulumi.get(self, "pps_attack")

    @_builtins.property
    @pulumi.getter(name="ppsIn")
    def pps_in(self) -> _builtins.int:
        """
        The inbound packet rate, in packets per second (pps).
        """
        return pulumi.get(self, "pps_in")

    @_builtins.property
    @pulumi.getter(name="totalBps")
    def total_bps(self) -> _builtins.int:
        """
        The total traffic rate, in bit/s.
        """
        return pulumi.get(self, "total_bps")

    @_builtins.property
    @pulumi.getter(name="totalPps")
    def total_pps(self) -> _builtins.int:
        """
        The total packet rate, in packets per second (pps).
        """
        return pulumi.get(self, "total_pps")


@pulumi.output_type
class GetWeeklyProtectionStatisticsTop10Result(dict):
    def __init__(__self__, *,
                 floating_ip_address: _builtins.str,
                 times: _builtins.int):
        """
        :param _builtins.str floating_ip_address: The Elastic IP address.
        :param _builtins.int times: The number of DDoS attacks blocked, including scrubbing and black holes.
        """
        pulumi.set(__self__, "floating_ip_address", floating_ip_address)
        pulumi.set(__self__, "times", times)

    @_builtins.property
    @pulumi.getter(name="floatingIpAddress")
    def floating_ip_address(self) -> _builtins.str:
        """
        The Elastic IP address.
        """
        return pulumi.get(self, "floating_ip_address")

    @_builtins.property
    @pulumi.getter
    def times(self) -> _builtins.int:
        """
        The number of DDoS attacks blocked, including scrubbing and black holes.
        """
        return pulumi.get(self, "times")


@pulumi.output_type
class GetWeeklyProtectionStatisticsWeekdataResult(dict):
    def __init__(__self__, *,
                 ddos_blackhole_times: _builtins.int,
                 ddos_intercept_times: _builtins.int,
                 max_attack_bps: _builtins.int,
                 max_attack_conns: _builtins.int,
                 period_start_date: _builtins.int):
        """
        :param _builtins.int ddos_blackhole_times: The number of DDoS black holes.
        :param _builtins.int ddos_intercept_times: The number of DDoS attacks blocked.
        :param _builtins.int max_attack_bps: The maximum attack traffic.
        :param _builtins.int max_attack_conns: The maximum number of attack connections.
        :param _builtins.int period_start_date: Specifies the start date of the seven-day period, the value is a timestamp
               in milliseconds.
        """
        pulumi.set(__self__, "ddos_blackhole_times", ddos_blackhole_times)
        pulumi.set(__self__, "ddos_intercept_times", ddos_intercept_times)
        pulumi.set(__self__, "max_attack_bps", max_attack_bps)
        pulumi.set(__self__, "max_attack_conns", max_attack_conns)
        pulumi.set(__self__, "period_start_date", period_start_date)

    @_builtins.property
    @pulumi.getter(name="ddosBlackholeTimes")
    def ddos_blackhole_times(self) -> _builtins.int:
        """
        The number of DDoS black holes.
        """
        return pulumi.get(self, "ddos_blackhole_times")

    @_builtins.property
    @pulumi.getter(name="ddosInterceptTimes")
    def ddos_intercept_times(self) -> _builtins.int:
        """
        The number of DDoS attacks blocked.
        """
        return pulumi.get(self, "ddos_intercept_times")

    @_builtins.property
    @pulumi.getter(name="maxAttackBps")
    def max_attack_bps(self) -> _builtins.int:
        """
        The maximum attack traffic.
        """
        return pulumi.get(self, "max_attack_bps")

    @_builtins.property
    @pulumi.getter(name="maxAttackConns")
    def max_attack_conns(self) -> _builtins.int:
        """
        The maximum number of attack connections.
        """
        return pulumi.get(self, "max_attack_conns")

    @_builtins.property
    @pulumi.getter(name="periodStartDate")
    def period_start_date(self) -> _builtins.int:
        """
        Specifies the start date of the seven-day period, the value is a timestamp
        in milliseconds.
        """
        return pulumi.get(self, "period_start_date")


