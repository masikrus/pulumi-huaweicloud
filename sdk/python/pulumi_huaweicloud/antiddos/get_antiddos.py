# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetAntiddosResult',
    'AwaitableGetAntiddosResult',
    'get_antiddos',
    'get_antiddos_output',
]

@pulumi.output_type
class GetAntiddosResult:
    """
    A collection of values returned by getAntiddos.
    """
    def __init__(__self__, bps_attacks=None, bps_ins=None, end_times=None, floating_ip_address=None, floating_ip_id=None, id=None, network_type=None, period_starts=None, pps_attacks=None, pps_ins=None, region=None, start_times=None, status=None, total_bps=None, total_pps=None, traffic_cleaning_statuses=None, trigger_bps=None, trigger_http_pps=None, trigger_pps=None):
        if bps_attacks and not isinstance(bps_attacks, list):
            raise TypeError("Expected argument 'bps_attacks' to be a list")
        pulumi.set(__self__, "bps_attacks", bps_attacks)
        if bps_ins and not isinstance(bps_ins, list):
            raise TypeError("Expected argument 'bps_ins' to be a list")
        pulumi.set(__self__, "bps_ins", bps_ins)
        if end_times and not isinstance(end_times, list):
            raise TypeError("Expected argument 'end_times' to be a list")
        pulumi.set(__self__, "end_times", end_times)
        if floating_ip_address and not isinstance(floating_ip_address, str):
            raise TypeError("Expected argument 'floating_ip_address' to be a str")
        pulumi.set(__self__, "floating_ip_address", floating_ip_address)
        if floating_ip_id and not isinstance(floating_ip_id, str):
            raise TypeError("Expected argument 'floating_ip_id' to be a str")
        pulumi.set(__self__, "floating_ip_id", floating_ip_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if network_type and not isinstance(network_type, str):
            raise TypeError("Expected argument 'network_type' to be a str")
        pulumi.set(__self__, "network_type", network_type)
        if period_starts and not isinstance(period_starts, list):
            raise TypeError("Expected argument 'period_starts' to be a list")
        pulumi.set(__self__, "period_starts", period_starts)
        if pps_attacks and not isinstance(pps_attacks, list):
            raise TypeError("Expected argument 'pps_attacks' to be a list")
        pulumi.set(__self__, "pps_attacks", pps_attacks)
        if pps_ins and not isinstance(pps_ins, list):
            raise TypeError("Expected argument 'pps_ins' to be a list")
        pulumi.set(__self__, "pps_ins", pps_ins)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if start_times and not isinstance(start_times, list):
            raise TypeError("Expected argument 'start_times' to be a list")
        pulumi.set(__self__, "start_times", start_times)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if total_bps and not isinstance(total_bps, list):
            raise TypeError("Expected argument 'total_bps' to be a list")
        pulumi.set(__self__, "total_bps", total_bps)
        if total_pps and not isinstance(total_pps, list):
            raise TypeError("Expected argument 'total_pps' to be a list")
        pulumi.set(__self__, "total_pps", total_pps)
        if traffic_cleaning_statuses and not isinstance(traffic_cleaning_statuses, list):
            raise TypeError("Expected argument 'traffic_cleaning_statuses' to be a list")
        pulumi.set(__self__, "traffic_cleaning_statuses", traffic_cleaning_statuses)
        if trigger_bps and not isinstance(trigger_bps, list):
            raise TypeError("Expected argument 'trigger_bps' to be a list")
        pulumi.set(__self__, "trigger_bps", trigger_bps)
        if trigger_http_pps and not isinstance(trigger_http_pps, list):
            raise TypeError("Expected argument 'trigger_http_pps' to be a list")
        pulumi.set(__self__, "trigger_http_pps", trigger_http_pps)
        if trigger_pps and not isinstance(trigger_pps, list):
            raise TypeError("Expected argument 'trigger_pps' to be a list")
        pulumi.set(__self__, "trigger_pps", trigger_pps)

    @_builtins.property
    @pulumi.getter(name="bpsAttacks")
    def bps_attacks(self) -> Sequence[_builtins.int]:
        """
        The Attack traffic in (bit/s).
        """
        return pulumi.get(self, "bps_attacks")

    @_builtins.property
    @pulumi.getter(name="bpsIns")
    def bps_ins(self) -> Sequence[_builtins.int]:
        """
        The inbound traffic in (bit/s).
        """
        return pulumi.get(self, "bps_ins")

    @_builtins.property
    @pulumi.getter(name="endTimes")
    def end_times(self) -> Sequence[_builtins.int]:
        """
        The end time of cleaning and blackhole event.
        """
        return pulumi.get(self, "end_times")

    @_builtins.property
    @pulumi.getter(name="floatingIpAddress")
    def floating_ip_address(self) -> _builtins.str:
        return pulumi.get(self, "floating_ip_address")

    @_builtins.property
    @pulumi.getter(name="floatingIpId")
    def floating_ip_id(self) -> _builtins.str:
        return pulumi.get(self, "floating_ip_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="networkType")
    def network_type(self) -> _builtins.str:
        """
        The EIP type.
        """
        return pulumi.get(self, "network_type")

    @_builtins.property
    @pulumi.getter(name="periodStarts")
    def period_starts(self) -> Sequence[_builtins.int]:
        """
        The Start time.
        """
        return pulumi.get(self, "period_starts")

    @_builtins.property
    @pulumi.getter(name="ppsAttacks")
    def pps_attacks(self) -> Sequence[_builtins.int]:
        """
        The attack packet rate (number of packets per second).
        """
        return pulumi.get(self, "pps_attacks")

    @_builtins.property
    @pulumi.getter(name="ppsIns")
    def pps_ins(self) -> Sequence[_builtins.int]:
        """
        The inbound packet rate (number of packets per second).
        """
        return pulumi.get(self, "pps_ins")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="startTimes")
    def start_times(self) -> Sequence[_builtins.int]:
        """
        The start time of cleaning and blackhole event.
        """
        return pulumi.get(self, "start_times")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="totalBps")
    def total_bps(self) -> Sequence[_builtins.int]:
        """
        The total traffic.
        """
        return pulumi.get(self, "total_bps")

    @_builtins.property
    @pulumi.getter(name="totalPps")
    def total_pps(self) -> Sequence[_builtins.int]:
        """
        The total packet rate.
        """
        return pulumi.get(self, "total_pps")

    @_builtins.property
    @pulumi.getter(name="trafficCleaningStatuses")
    def traffic_cleaning_statuses(self) -> Sequence[_builtins.int]:
        """
        The traffic cleaning status.
        """
        return pulumi.get(self, "traffic_cleaning_statuses")

    @_builtins.property
    @pulumi.getter(name="triggerBps")
    def trigger_bps(self) -> Sequence[_builtins.int]:
        """
        The traffic at the triggering point.
        """
        return pulumi.get(self, "trigger_bps")

    @_builtins.property
    @pulumi.getter(name="triggerHttpPps")
    def trigger_http_pps(self) -> Sequence[_builtins.int]:
        """
        The HTTP request rate at the triggering point.
        """
        return pulumi.get(self, "trigger_http_pps")

    @_builtins.property
    @pulumi.getter(name="triggerPps")
    def trigger_pps(self) -> Sequence[_builtins.int]:
        """
        The packet rate at the triggering point.
        """
        return pulumi.get(self, "trigger_pps")


class AwaitableGetAntiddosResult(GetAntiddosResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAntiddosResult(
            bps_attacks=self.bps_attacks,
            bps_ins=self.bps_ins,
            end_times=self.end_times,
            floating_ip_address=self.floating_ip_address,
            floating_ip_id=self.floating_ip_id,
            id=self.id,
            network_type=self.network_type,
            period_starts=self.period_starts,
            pps_attacks=self.pps_attacks,
            pps_ins=self.pps_ins,
            region=self.region,
            start_times=self.start_times,
            status=self.status,
            total_bps=self.total_bps,
            total_pps=self.total_pps,
            traffic_cleaning_statuses=self.traffic_cleaning_statuses,
            trigger_bps=self.trigger_bps,
            trigger_http_pps=self.trigger_http_pps,
            trigger_pps=self.trigger_pps)


def get_antiddos(floating_ip_address: Optional[_builtins.str] = None,
                 floating_ip_id: Optional[_builtins.str] = None,
                 region: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAntiddosResult:
    """
    !> **WARNING:** It has been deprecated.

    Query the Anti-DDos resource.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    eip_id = config.require_object("eipId")
    antiddos = huaweicloud.AntiDDos.get_antiddos(floating_ip_id=eip_id)
    ```


    :param _builtins.str floating_ip_address: The Elastic IP address.
    :param _builtins.str floating_ip_id: The Elastic IP ID.
    :param _builtins.str region: The region in which to obtain the Antiddos client. If omitted, the provider-level region
           will be used.
    :param _builtins.str status: The defense status.
    """
    __args__ = dict()
    __args__['floatingIpAddress'] = floating_ip_address
    __args__['floatingIpId'] = floating_ip_id
    __args__['region'] = region
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:AntiDDos/getAntiddos:getAntiddos', __args__, opts=opts, typ=GetAntiddosResult).value

    return AwaitableGetAntiddosResult(
        bps_attacks=pulumi.get(__ret__, 'bps_attacks'),
        bps_ins=pulumi.get(__ret__, 'bps_ins'),
        end_times=pulumi.get(__ret__, 'end_times'),
        floating_ip_address=pulumi.get(__ret__, 'floating_ip_address'),
        floating_ip_id=pulumi.get(__ret__, 'floating_ip_id'),
        id=pulumi.get(__ret__, 'id'),
        network_type=pulumi.get(__ret__, 'network_type'),
        period_starts=pulumi.get(__ret__, 'period_starts'),
        pps_attacks=pulumi.get(__ret__, 'pps_attacks'),
        pps_ins=pulumi.get(__ret__, 'pps_ins'),
        region=pulumi.get(__ret__, 'region'),
        start_times=pulumi.get(__ret__, 'start_times'),
        status=pulumi.get(__ret__, 'status'),
        total_bps=pulumi.get(__ret__, 'total_bps'),
        total_pps=pulumi.get(__ret__, 'total_pps'),
        traffic_cleaning_statuses=pulumi.get(__ret__, 'traffic_cleaning_statuses'),
        trigger_bps=pulumi.get(__ret__, 'trigger_bps'),
        trigger_http_pps=pulumi.get(__ret__, 'trigger_http_pps'),
        trigger_pps=pulumi.get(__ret__, 'trigger_pps'))
def get_antiddos_output(floating_ip_address: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        floating_ip_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAntiddosResult]:
    """
    !> **WARNING:** It has been deprecated.

    Query the Anti-DDos resource.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    eip_id = config.require_object("eipId")
    antiddos = huaweicloud.AntiDDos.get_antiddos(floating_ip_id=eip_id)
    ```


    :param _builtins.str floating_ip_address: The Elastic IP address.
    :param _builtins.str floating_ip_id: The Elastic IP ID.
    :param _builtins.str region: The region in which to obtain the Antiddos client. If omitted, the provider-level region
           will be used.
    :param _builtins.str status: The defense status.
    """
    __args__ = dict()
    __args__['floatingIpAddress'] = floating_ip_address
    __args__['floatingIpId'] = floating_ip_id
    __args__['region'] = region
    __args__['status'] = status
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:AntiDDos/getAntiddos:getAntiddos', __args__, opts=opts, typ=GetAntiddosResult)
    return __ret__.apply(lambda __response__: GetAntiddosResult(
        bps_attacks=pulumi.get(__response__, 'bps_attacks'),
        bps_ins=pulumi.get(__response__, 'bps_ins'),
        end_times=pulumi.get(__response__, 'end_times'),
        floating_ip_address=pulumi.get(__response__, 'floating_ip_address'),
        floating_ip_id=pulumi.get(__response__, 'floating_ip_id'),
        id=pulumi.get(__response__, 'id'),
        network_type=pulumi.get(__response__, 'network_type'),
        period_starts=pulumi.get(__response__, 'period_starts'),
        pps_attacks=pulumi.get(__response__, 'pps_attacks'),
        pps_ins=pulumi.get(__response__, 'pps_ins'),
        region=pulumi.get(__response__, 'region'),
        start_times=pulumi.get(__response__, 'start_times'),
        status=pulumi.get(__response__, 'status'),
        total_bps=pulumi.get(__response__, 'total_bps'),
        total_pps=pulumi.get(__response__, 'total_pps'),
        traffic_cleaning_statuses=pulumi.get(__response__, 'traffic_cleaning_statuses'),
        trigger_bps=pulumi.get(__response__, 'trigger_bps'),
        trigger_http_pps=pulumi.get(__response__, 'trigger_http_pps'),
        trigger_pps=pulumi.get(__response__, 'trigger_pps')))
