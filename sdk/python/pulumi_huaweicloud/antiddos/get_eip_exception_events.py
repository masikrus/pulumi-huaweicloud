# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetEipExceptionEventsResult',
    'AwaitableGetEipExceptionEventsResult',
    'get_eip_exception_events',
    'get_eip_exception_events_output',
]

@pulumi.output_type
class GetEipExceptionEventsResult:
    """
    A collection of values returned by getEipExceptionEvents.
    """
    def __init__(__self__, floating_ip_id=None, id=None, ip=None, logs=None, region=None, sort_dir=None):
        if floating_ip_id and not isinstance(floating_ip_id, str):
            raise TypeError("Expected argument 'floating_ip_id' to be a str")
        pulumi.set(__self__, "floating_ip_id", floating_ip_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip and not isinstance(ip, str):
            raise TypeError("Expected argument 'ip' to be a str")
        pulumi.set(__self__, "ip", ip)
        if logs and not isinstance(logs, list):
            raise TypeError("Expected argument 'logs' to be a list")
        pulumi.set(__self__, "logs", logs)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if sort_dir and not isinstance(sort_dir, str):
            raise TypeError("Expected argument 'sort_dir' to be a str")
        pulumi.set(__self__, "sort_dir", sort_dir)

    @_builtins.property
    @pulumi.getter(name="floatingIpId")
    def floating_ip_id(self) -> _builtins.str:
        return pulumi.get(self, "floating_ip_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def ip(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "ip")

    @_builtins.property
    @pulumi.getter
    def logs(self) -> Sequence['outputs.GetEipExceptionEventsLogResult']:
        """
        The list of exception events.
        The logs structure is documented below.
        """
        return pulumi.get(self, "logs")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="sortDir")
    def sort_dir(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sort_dir")


class AwaitableGetEipExceptionEventsResult(GetEipExceptionEventsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEipExceptionEventsResult(
            floating_ip_id=self.floating_ip_id,
            id=self.id,
            ip=self.ip,
            logs=self.logs,
            region=self.region,
            sort_dir=self.sort_dir)


def get_eip_exception_events(floating_ip_id: Optional[_builtins.str] = None,
                             ip: Optional[_builtins.str] = None,
                             region: Optional[_builtins.str] = None,
                             sort_dir: Optional[_builtins.str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEipExceptionEventsResult:
    """
    Use this data source to query the exception events of an EIP protected by Anti-DDoS.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    floating_ip_id = config.require_object("floatingIpId")
    eip_address = config.require_object("eipAddress")
    test = huaweicloud.AntiDDos.get_eip_exception_events(floating_ip_id=floating_ip_id,
        ip=eip_address)
    ```


    :param _builtins.str floating_ip_id: Specifies the ID of the EIP.
    :param _builtins.str ip: Specifies the EIP address.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str sort_dir: Specifies the sort direction. The value can be **asc** or **desc**.
           Defaults to **desc**.
    """
    __args__ = dict()
    __args__['floatingIpId'] = floating_ip_id
    __args__['ip'] = ip
    __args__['region'] = region
    __args__['sortDir'] = sort_dir
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:AntiDDos/getEipExceptionEvents:getEipExceptionEvents', __args__, opts=opts, typ=GetEipExceptionEventsResult).value

    return AwaitableGetEipExceptionEventsResult(
        floating_ip_id=pulumi.get(__ret__, 'floating_ip_id'),
        id=pulumi.get(__ret__, 'id'),
        ip=pulumi.get(__ret__, 'ip'),
        logs=pulumi.get(__ret__, 'logs'),
        region=pulumi.get(__ret__, 'region'),
        sort_dir=pulumi.get(__ret__, 'sort_dir'))
def get_eip_exception_events_output(floating_ip_id: Optional[pulumi.Input[_builtins.str]] = None,
                                    ip: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    sort_dir: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetEipExceptionEventsResult]:
    """
    Use this data source to query the exception events of an EIP protected by Anti-DDoS.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    floating_ip_id = config.require_object("floatingIpId")
    eip_address = config.require_object("eipAddress")
    test = huaweicloud.AntiDDos.get_eip_exception_events(floating_ip_id=floating_ip_id,
        ip=eip_address)
    ```


    :param _builtins.str floating_ip_id: Specifies the ID of the EIP.
    :param _builtins.str ip: Specifies the EIP address.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str sort_dir: Specifies the sort direction. The value can be **asc** or **desc**.
           Defaults to **desc**.
    """
    __args__ = dict()
    __args__['floatingIpId'] = floating_ip_id
    __args__['ip'] = ip
    __args__['region'] = region
    __args__['sortDir'] = sort_dir
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:AntiDDos/getEipExceptionEvents:getEipExceptionEvents', __args__, opts=opts, typ=GetEipExceptionEventsResult)
    return __ret__.apply(lambda __response__: GetEipExceptionEventsResult(
        floating_ip_id=pulumi.get(__response__, 'floating_ip_id'),
        id=pulumi.get(__response__, 'id'),
        ip=pulumi.get(__response__, 'ip'),
        logs=pulumi.get(__response__, 'logs'),
        region=pulumi.get(__response__, 'region'),
        sort_dir=pulumi.get(__response__, 'sort_dir')))
