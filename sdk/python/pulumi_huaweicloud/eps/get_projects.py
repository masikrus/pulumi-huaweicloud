# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetProjectsResult',
    'AwaitableGetProjectsResult',
    'get_projects',
    'get_projects_output',
]

@pulumi.output_type
class GetProjectsResult:
    """
    A collection of values returned by getProjects.
    """
    def __init__(__self__, enterprise_project_id=None, enterprise_projects=None, id=None, name=None, status=None, type=None):
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if enterprise_projects and not isinstance(enterprise_projects, list):
            raise TypeError("Expected argument 'enterprise_projects' to be a list")
        pulumi.set(__self__, "enterprise_projects", enterprise_projects)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if status and not isinstance(status, int):
            raise TypeError("Expected argument 'status' to be a int")
        pulumi.set(__self__, "status", status)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjects")
    def enterprise_projects(self) -> Sequence['outputs.GetProjectsEnterpriseProjectResult']:
        """
        All projects that match the filter parameters.
        The enterprise_projects structure is documented below.
        """
        return pulumi.get(self, "enterprise_projects")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the enterprise project.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.int]:
        """
        The status of the enterprise project.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The type of the enterprise project.
        """
        return pulumi.get(self, "type")


class AwaitableGetProjectsResult(GetProjectsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetProjectsResult(
            enterprise_project_id=self.enterprise_project_id,
            enterprise_projects=self.enterprise_projects,
            id=self.id,
            name=self.name,
            status=self.status,
            type=self.type)


def get_projects(enterprise_project_id: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 status: Optional[_builtins.int] = None,
                 type: Optional[_builtins.str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetProjectsResult:
    """
    Use this data source to get the list of EPS enterprise projects.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    name = config.require_object("name")
    test = huaweicloud.Eps.get_projects(name=name)
    ```


    :param _builtins.str enterprise_project_id: Specifies the ID of an enterprise project.
           The value **0** indicates enterprise project default.
    :param _builtins.str name: Specifies the enterprise project name. Fuzzy search is supported.
    :param _builtins.int status: Specifies the status of an enterprise project. The valid values are as follows:
           + **1**: Enabled.
           + **2**: Disabled.
    :param _builtins.str type: Specifies the type of an enterprise project. The valid values are as follows:
           + **prod**: Commercial project.
           + **poc**: Test project.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['name'] = name
    __args__['status'] = status
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:Eps/getProjects:getProjects', __args__, opts=opts, typ=GetProjectsResult).value

    return AwaitableGetProjectsResult(
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        enterprise_projects=pulumi.get(__ret__, 'enterprise_projects'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        status=pulumi.get(__ret__, 'status'),
        type=pulumi.get(__ret__, 'type'))
def get_projects_output(enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        status: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                        type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetProjectsResult]:
    """
    Use this data source to get the list of EPS enterprise projects.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    name = config.require_object("name")
    test = huaweicloud.Eps.get_projects(name=name)
    ```


    :param _builtins.str enterprise_project_id: Specifies the ID of an enterprise project.
           The value **0** indicates enterprise project default.
    :param _builtins.str name: Specifies the enterprise project name. Fuzzy search is supported.
    :param _builtins.int status: Specifies the status of an enterprise project. The valid values are as follows:
           + **1**: Enabled.
           + **2**: Disabled.
    :param _builtins.str type: Specifies the type of an enterprise project. The valid values are as follows:
           + **prod**: Commercial project.
           + **poc**: Test project.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['name'] = name
    __args__['status'] = status
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:Eps/getProjects:getProjects', __args__, opts=opts, typ=GetProjectsResult)
    return __ret__.apply(lambda __response__: GetProjectsResult(
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        enterprise_projects=pulumi.get(__response__, 'enterprise_projects'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        status=pulumi.get(__response__, 'status'),
        type=pulumi.get(__response__, 'type')))
