# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetImagesImageResult',
    'GetOsVersionsOsVersionResult',
    'GetOsVersionsOsVersionVersionResult',
    'GetQuotasQuotaResult',
    'GetQuotasQuotaResourceResult',
    'GetTagsTagResult',
]

@pulumi.output_type
class GetImagesImageResult(dict):
    def __init__(__self__, *,
                 __support_agent_list: _builtins.str,
                 active_at: _builtins.str,
                 architecture: _builtins.str,
                 backup_id: _builtins.str,
                 container_format: _builtins.str,
                 created_at: _builtins.str,
                 data_origin: _builtins.str,
                 description: _builtins.str,
                 disk_format: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 file: _builtins.str,
                 id: _builtins.str,
                 image_type: _builtins.str,
                 max_ram_mb: _builtins.int,
                 min_disk_gb: _builtins.int,
                 min_ram_mb: _builtins.int,
                 name: _builtins.str,
                 os: _builtins.str,
                 os_version: _builtins.str,
                 owner: _builtins.str,
                 protected: _builtins.bool,
                 schema: _builtins.str,
                 size_bytes: _builtins.int,
                 status: _builtins.str,
                 updated_at: _builtins.str,
                 visibility: _builtins.str):
        """
        :param _builtins.str __support_agent_list: Specifies whether the image supports host security or host monitoring.
               The valid values are as follows:
               + **hss**: Host security.
               + **ces**: Host monitoring.
               + **hss,ces**: Both support.
        :param _builtins.str active_at: The time when the image status changes to active, in RFC3339 format.
        :param _builtins.str architecture: Specifies the image architecture type. The value can be **x86** or **arm**.
        :param _builtins.str backup_id: The backup ID of the whole image in the CBR vault.
        :param _builtins.str container_format: The format of the image's container.
        :param _builtins.str created_at: The creation time of the image, in RFC3339 format.
        :param _builtins.str data_origin: The image source. The format is **server_backup,backup_id**,  **instance,instance_id**,
               **server_backup,vault_id**,  **volume,volume_id**, **file,image_url**, or **image,region,image_id**.
        :param _builtins.str description: The description of the image.
        :param _builtins.str disk_format: The image format. The value can be **zvhd2**, **vhd**, **zvhd**, **raw**, **qcow2**, or **iso**.
        :param _builtins.str enterprise_project_id: Specifies the enterprise project ID of the image.
               For enterprise users, if omitted, will query the images under all enterprise projects.
        :param _builtins.str file: The image file download and upload links.
        :param _builtins.str id: The ID of the image
        :param _builtins.str image_type: Specifies the environment where the image is used.
               The valid values are as follows:
               + **FusionCompute**: Cloud server image, also known as system disk image.
               + **DataImage**: Data disk image.
               + **Ironic**: Bare metal server image.
               + **IsoImage**: ISO image.
        :param _builtins.int max_ram_mb: The maximum memory supported by the image, in MB unit.
        :param _builtins.int min_disk_gb: The minimum disk space required to run an image, in GB unit.
               + When the operating system is Linux, the value ranges from `10` to `1,024`.
               + When the operating system is Windows, the value ranges from `20` to `1,024`.
        :param _builtins.int min_ram_mb: The minimum memory required to run an image, in MB unit.
        :param _builtins.str name: Specifies the name of the image. Cannot be used simultaneously with `name_regex`.
        :param _builtins.str os: Specifies the image OS type. The value can be **Windows**, **Ubuntu**, **RedHat**, **SUSE**,
               **CentOS**, **Debian**, **OpenSUSE**, **Oracle Linux**, **Fedora**, **Other**, **CoreOS**, or **EulerOS**.
        :param _builtins.str os_version: The operating system version of the image.
        :param _builtins.str owner: Specifies the owner (UUID) of the image.
        :param _builtins.bool protected: Indicates whether the image is protected, protected images cannot be deleted.
               The valid value is **true** or **false**.
        :param _builtins.str schema: The image view.
        :param _builtins.int size_bytes: The size of the image file, in bytes unit.
        :param _builtins.str status: The status of the image. The valid value is **active**.
        :param _builtins.str updated_at: The last update time of the image, in RFC3339 format.
        :param _builtins.str visibility: Specifies the visibility of the image. Must be one of **public**, **private**,
               **market** or **shared**.
        """
        pulumi.set(__self__, "__support_agent_list", __support_agent_list)
        pulumi.set(__self__, "active_at", active_at)
        pulumi.set(__self__, "architecture", architecture)
        pulumi.set(__self__, "backup_id", backup_id)
        pulumi.set(__self__, "container_format", container_format)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "data_origin", data_origin)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "disk_format", disk_format)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "file", file)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "image_type", image_type)
        pulumi.set(__self__, "max_ram_mb", max_ram_mb)
        pulumi.set(__self__, "min_disk_gb", min_disk_gb)
        pulumi.set(__self__, "min_ram_mb", min_ram_mb)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "os", os)
        pulumi.set(__self__, "os_version", os_version)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "protected", protected)
        pulumi.set(__self__, "schema", schema)
        pulumi.set(__self__, "size_bytes", size_bytes)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "visibility", visibility)

    @_builtins.property
    @pulumi.getter(name="__supportAgentList")
    def __support_agent_list(self) -> _builtins.str:
        """
        Specifies whether the image supports host security or host monitoring.
        The valid values are as follows:
        + **hss**: Host security.
        + **ces**: Host monitoring.
        + **hss,ces**: Both support.
        """
        return pulumi.get(self, "__support_agent_list")

    @_builtins.property
    @pulumi.getter(name="activeAt")
    def active_at(self) -> _builtins.str:
        """
        The time when the image status changes to active, in RFC3339 format.
        """
        return pulumi.get(self, "active_at")

    @_builtins.property
    @pulumi.getter
    def architecture(self) -> _builtins.str:
        """
        Specifies the image architecture type. The value can be **x86** or **arm**.
        """
        return pulumi.get(self, "architecture")

    @_builtins.property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> _builtins.str:
        """
        The backup ID of the whole image in the CBR vault.
        """
        return pulumi.get(self, "backup_id")

    @_builtins.property
    @pulumi.getter(name="containerFormat")
    def container_format(self) -> _builtins.str:
        """
        The format of the image's container.
        """
        return pulumi.get(self, "container_format")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the image, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="dataOrigin")
    def data_origin(self) -> _builtins.str:
        """
        The image source. The format is **server_backup,backup_id**,  **instance,instance_id**,
        **server_backup,vault_id**,  **volume,volume_id**, **file,image_url**, or **image,region,image_id**.
        """
        return pulumi.get(self, "data_origin")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the image.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="diskFormat")
    def disk_format(self) -> _builtins.str:
        """
        The image format. The value can be **zvhd2**, **vhd**, **zvhd**, **raw**, **qcow2**, or **iso**.
        """
        return pulumi.get(self, "disk_format")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the enterprise project ID of the image.
        For enterprise users, if omitted, will query the images under all enterprise projects.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def file(self) -> _builtins.str:
        """
        The image file download and upload links.
        """
        return pulumi.get(self, "file")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the image
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="imageType")
    def image_type(self) -> _builtins.str:
        """
        Specifies the environment where the image is used.
        The valid values are as follows:
        + **FusionCompute**: Cloud server image, also known as system disk image.
        + **DataImage**: Data disk image.
        + **Ironic**: Bare metal server image.
        + **IsoImage**: ISO image.
        """
        return pulumi.get(self, "image_type")

    @_builtins.property
    @pulumi.getter(name="maxRamMb")
    def max_ram_mb(self) -> _builtins.int:
        """
        The maximum memory supported by the image, in MB unit.
        """
        return pulumi.get(self, "max_ram_mb")

    @_builtins.property
    @pulumi.getter(name="minDiskGb")
    def min_disk_gb(self) -> _builtins.int:
        """
        The minimum disk space required to run an image, in GB unit.
        + When the operating system is Linux, the value ranges from `10` to `1,024`.
        + When the operating system is Windows, the value ranges from `20` to `1,024`.
        """
        return pulumi.get(self, "min_disk_gb")

    @_builtins.property
    @pulumi.getter(name="minRamMb")
    def min_ram_mb(self) -> _builtins.int:
        """
        The minimum memory required to run an image, in MB unit.
        """
        return pulumi.get(self, "min_ram_mb")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the image. Cannot be used simultaneously with `name_regex`.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def os(self) -> _builtins.str:
        """
        Specifies the image OS type. The value can be **Windows**, **Ubuntu**, **RedHat**, **SUSE**,
        **CentOS**, **Debian**, **OpenSUSE**, **Oracle Linux**, **Fedora**, **Other**, **CoreOS**, or **EulerOS**.
        """
        return pulumi.get(self, "os")

    @_builtins.property
    @pulumi.getter(name="osVersion")
    def os_version(self) -> _builtins.str:
        """
        The operating system version of the image.
        """
        return pulumi.get(self, "os_version")

    @_builtins.property
    @pulumi.getter
    def owner(self) -> _builtins.str:
        """
        Specifies the owner (UUID) of the image.
        """
        return pulumi.get(self, "owner")

    @_builtins.property
    @pulumi.getter
    def protected(self) -> _builtins.bool:
        """
        Indicates whether the image is protected, protected images cannot be deleted.
        The valid value is **true** or **false**.
        """
        return pulumi.get(self, "protected")

    @_builtins.property
    @pulumi.getter
    def schema(self) -> _builtins.str:
        """
        The image view.
        """
        return pulumi.get(self, "schema")

    @_builtins.property
    @pulumi.getter(name="sizeBytes")
    def size_bytes(self) -> _builtins.int:
        """
        The size of the image file, in bytes unit.
        """
        return pulumi.get(self, "size_bytes")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the image. The valid value is **active**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The last update time of the image, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter
    def visibility(self) -> _builtins.str:
        """
        Specifies the visibility of the image. Must be one of **public**, **private**,
        **market** or **shared**.
        """
        return pulumi.get(self, "visibility")


@pulumi.output_type
class GetOsVersionsOsVersionResult(dict):
    def __init__(__self__, *,
                 platform: _builtins.str,
                 versions: Sequence['outputs.GetOsVersionsOsVersionVersionResult']):
        """
        :param _builtins.str platform: The operating system platform.
        :param Sequence['GetOsVersionsOsVersionVersionArgs'] versions: The operating system details.
        """
        pulumi.set(__self__, "platform", platform)
        pulumi.set(__self__, "versions", versions)

    @_builtins.property
    @pulumi.getter
    def platform(self) -> _builtins.str:
        """
        The operating system platform.
        """
        return pulumi.get(self, "platform")

    @_builtins.property
    @pulumi.getter
    def versions(self) -> Sequence['outputs.GetOsVersionsOsVersionVersionResult']:
        """
        The operating system details.
        """
        return pulumi.get(self, "versions")


@pulumi.output_type
class GetOsVersionsOsVersionVersionResult(dict):
    def __init__(__self__, *,
                 os_bit: _builtins.int,
                 os_type: _builtins.str,
                 os_version: _builtins.str,
                 os_version_key: _builtins.str,
                 platform: _builtins.str):
        """
        :param _builtins.int os_bit: The number of bits for the operating system.
        :param _builtins.str os_type: The type of operating system.
        :param _builtins.str os_version: The complete information of the operating system.
        :param _builtins.str os_version_key: The operating system key value.
               By default, the value of `os_version` is taken as the `os_version_key` value.
        :param _builtins.str platform: The operating system platform.
        """
        pulumi.set(__self__, "os_bit", os_bit)
        pulumi.set(__self__, "os_type", os_type)
        pulumi.set(__self__, "os_version", os_version)
        pulumi.set(__self__, "os_version_key", os_version_key)
        pulumi.set(__self__, "platform", platform)

    @_builtins.property
    @pulumi.getter(name="osBit")
    def os_bit(self) -> _builtins.int:
        """
        The number of bits for the operating system.
        """
        return pulumi.get(self, "os_bit")

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> _builtins.str:
        """
        The type of operating system.
        """
        return pulumi.get(self, "os_type")

    @_builtins.property
    @pulumi.getter(name="osVersion")
    def os_version(self) -> _builtins.str:
        """
        The complete information of the operating system.
        """
        return pulumi.get(self, "os_version")

    @_builtins.property
    @pulumi.getter(name="osVersionKey")
    def os_version_key(self) -> _builtins.str:
        """
        The operating system key value.
        By default, the value of `os_version` is taken as the `os_version_key` value.
        """
        return pulumi.get(self, "os_version_key")

    @_builtins.property
    @pulumi.getter
    def platform(self) -> _builtins.str:
        """
        The operating system platform.
        """
        return pulumi.get(self, "platform")


@pulumi.output_type
class GetQuotasQuotaResult(dict):
    def __init__(__self__, *,
                 resources: Sequence['outputs.GetQuotasQuotaResourceResult']):
        """
        :param Sequence['GetQuotasQuotaResourceArgs'] resources: The quota resources.
        """
        pulumi.set(__self__, "resources", resources)

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetQuotasQuotaResourceResult']:
        """
        The quota resources.
        """
        return pulumi.get(self, "resources")


@pulumi.output_type
class GetQuotasQuotaResourceResult(dict):
    def __init__(__self__, *,
                 max: _builtins.int,
                 min: _builtins.int,
                 quota: _builtins.int,
                 type: _builtins.str,
                 used: _builtins.int):
        """
        :param _builtins.int max: The maximum quota of resources.
        :param _builtins.int min: The minimum quota of resources.
        :param _builtins.int quota: The total quota of resources.
        :param _builtins.str type: The resource type. The valid value is **image**.
        :param _builtins.int used: The number of resource quotas already in use.
        """
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)
        pulumi.set(__self__, "quota", quota)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "used", used)

    @_builtins.property
    @pulumi.getter
    def max(self) -> _builtins.int:
        """
        The maximum quota of resources.
        """
        return pulumi.get(self, "max")

    @_builtins.property
    @pulumi.getter
    def min(self) -> _builtins.int:
        """
        The minimum quota of resources.
        """
        return pulumi.get(self, "min")

    @_builtins.property
    @pulumi.getter
    def quota(self) -> _builtins.int:
        """
        The total quota of resources.
        """
        return pulumi.get(self, "quota")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The resource type. The valid value is **image**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def used(self) -> _builtins.int:
        """
        The number of resource quotas already in use.
        """
        return pulumi.get(self, "used")


@pulumi.output_type
class GetTagsTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: The key of the tag.
        :param Sequence[_builtins.str] values: The value list of the tag. If the tag has only a key, it appears as an empty string in the value list.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        The value list of the tag. If the tag has only a key, it appears as an empty string in the value list.
        """
        return pulumi.get(self, "values")


