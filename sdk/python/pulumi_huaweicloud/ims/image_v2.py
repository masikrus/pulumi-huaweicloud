# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['ImageV2Args', 'ImageV2']

@pulumi.input_type
class ImageV2Args:
    def __init__(__self__, *,
                 container_format: pulumi.Input[_builtins.str],
                 disk_format: pulumi.Input[_builtins.str],
                 image_cache_path: Optional[pulumi.Input[_builtins.str]] = None,
                 image_source_url: Optional[pulumi.Input[_builtins.str]] = None,
                 local_file_path: Optional[pulumi.Input[_builtins.str]] = None,
                 min_disk_gb: Optional[pulumi.Input[_builtins.int]] = None,
                 min_ram_mb: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 protected: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 visibility: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ImageV2 resource.
        :param pulumi.Input[_builtins.str] container_format: The container format. Must be "bare".
        :param pulumi.Input[_builtins.str] disk_format: The disk format. Must be one of "qcow2", "vhd".
        :param pulumi.Input[_builtins.str] image_source_url: This is the url of the raw image that will be downloaded in the `image_cache_path`
               before being uploaded to Glance. Glance is able to download image from internet but the `golangsdk` library does not
               yet provide a way to do so. Conflicts with `local_file_path`.
        :param pulumi.Input[_builtins.str] local_file_path: This is the filepath of the raw image file that will be uploaded to Glance. Conflicts
               with `image_source_url`.
        :param pulumi.Input[_builtins.int] min_disk_gb: Amount of disk space (in GB) required to boot image. Defaults to 0.
        :param pulumi.Input[_builtins.int] min_ram_mb: Amount of ram (in MB) required to boot image. Defaults to 0.
        :param pulumi.Input[_builtins.str] name: The name of the image.
        :param pulumi.Input[_builtins.bool] protected: If true, image will not be deletable. Defaults to false.
        :param pulumi.Input[_builtins.str] region: The region in which to create the V2 Glance client. A Glance client is needed to create an Image
               that can be used with a compute instance. If omitted, the `region` argument of the provider is used. Changing this
               creates a new Image.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: The tags of the image. It must be a list of strings. At this time, it is not possible to delete
               all tags of an image.
        :param pulumi.Input[_builtins.str] visibility: The visibility of the image. Must be "private". The ability to set the visibility depends
               upon the configuration of the HuaweiCloud cloud.
               
               Note: The `properties` attribute handling in the golangsdk library is currently buggy and needs to be fixed before being
               implemented in this resource.
        """
        pulumi.set(__self__, "container_format", container_format)
        pulumi.set(__self__, "disk_format", disk_format)
        if image_cache_path is not None:
            pulumi.set(__self__, "image_cache_path", image_cache_path)
        if image_source_url is not None:
            pulumi.set(__self__, "image_source_url", image_source_url)
        if local_file_path is not None:
            pulumi.set(__self__, "local_file_path", local_file_path)
        if min_disk_gb is not None:
            pulumi.set(__self__, "min_disk_gb", min_disk_gb)
        if min_ram_mb is not None:
            pulumi.set(__self__, "min_ram_mb", min_ram_mb)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protected is not None:
            pulumi.set(__self__, "protected", protected)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @_builtins.property
    @pulumi.getter(name="containerFormat")
    def container_format(self) -> pulumi.Input[_builtins.str]:
        """
        The container format. Must be "bare".
        """
        return pulumi.get(self, "container_format")

    @container_format.setter
    def container_format(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "container_format", value)

    @_builtins.property
    @pulumi.getter(name="diskFormat")
    def disk_format(self) -> pulumi.Input[_builtins.str]:
        """
        The disk format. Must be one of "qcow2", "vhd".
        """
        return pulumi.get(self, "disk_format")

    @disk_format.setter
    def disk_format(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "disk_format", value)

    @_builtins.property
    @pulumi.getter(name="imageCachePath")
    def image_cache_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "image_cache_path")

    @image_cache_path.setter
    def image_cache_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_cache_path", value)

    @_builtins.property
    @pulumi.getter(name="imageSourceUrl")
    def image_source_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        This is the url of the raw image that will be downloaded in the `image_cache_path`
        before being uploaded to Glance. Glance is able to download image from internet but the `golangsdk` library does not
        yet provide a way to do so. Conflicts with `local_file_path`.
        """
        return pulumi.get(self, "image_source_url")

    @image_source_url.setter
    def image_source_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_source_url", value)

    @_builtins.property
    @pulumi.getter(name="localFilePath")
    def local_file_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        This is the filepath of the raw image file that will be uploaded to Glance. Conflicts
        with `image_source_url`.
        """
        return pulumi.get(self, "local_file_path")

    @local_file_path.setter
    def local_file_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "local_file_path", value)

    @_builtins.property
    @pulumi.getter(name="minDiskGb")
    def min_disk_gb(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Amount of disk space (in GB) required to boot image. Defaults to 0.
        """
        return pulumi.get(self, "min_disk_gb")

    @min_disk_gb.setter
    def min_disk_gb(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "min_disk_gb", value)

    @_builtins.property
    @pulumi.getter(name="minRamMb")
    def min_ram_mb(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Amount of ram (in MB) required to boot image. Defaults to 0.
        """
        return pulumi.get(self, "min_ram_mb")

    @min_ram_mb.setter
    def min_ram_mb(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "min_ram_mb", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the image.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def protected(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If true, image will not be deletable. Defaults to false.
        """
        return pulumi.get(self, "protected")

    @protected.setter
    def protected(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "protected", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the V2 Glance client. A Glance client is needed to create an Image
        that can be used with a compute instance. If omitted, the `region` argument of the provider is used. Changing this
        creates a new Image.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The tags of the image. It must be a list of strings. At this time, it is not possible to delete
        all tags of an image.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The visibility of the image. Must be "private". The ability to set the visibility depends
        upon the configuration of the HuaweiCloud cloud.

        Note: The `properties` attribute handling in the golangsdk library is currently buggy and needs to be fixed before being
        implemented in this resource.
        """
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class _ImageV2State:
    def __init__(__self__, *,
                 checksum: Optional[pulumi.Input[_builtins.str]] = None,
                 container_format: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 disk_format: Optional[pulumi.Input[_builtins.str]] = None,
                 file: Optional[pulumi.Input[_builtins.str]] = None,
                 image_cache_path: Optional[pulumi.Input[_builtins.str]] = None,
                 image_source_url: Optional[pulumi.Input[_builtins.str]] = None,
                 local_file_path: Optional[pulumi.Input[_builtins.str]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 min_disk_gb: Optional[pulumi.Input[_builtins.int]] = None,
                 min_ram_mb: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 owner: Optional[pulumi.Input[_builtins.str]] = None,
                 protected: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 schema: Optional[pulumi.Input[_builtins.str]] = None,
                 size_bytes: Optional[pulumi.Input[_builtins.int]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 update_at: Optional[pulumi.Input[_builtins.str]] = None,
                 visibility: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ImageV2 resources.
        :param pulumi.Input[_builtins.str] checksum: The checksum of the data associated with the image.
        :param pulumi.Input[_builtins.str] container_format: The container format. Must be "bare".
        :param pulumi.Input[_builtins.str] created_at: The date the image was created.
        :param pulumi.Input[_builtins.str] disk_format: The disk format. Must be one of "qcow2", "vhd".
        :param pulumi.Input[_builtins.str] file: the trailing path after the glance endpoint that represent the location of the image or the path to retrieve
               it.
        :param pulumi.Input[_builtins.str] image_source_url: This is the url of the raw image that will be downloaded in the `image_cache_path`
               before being uploaded to Glance. Glance is able to download image from internet but the `golangsdk` library does not
               yet provide a way to do so. Conflicts with `local_file_path`.
        :param pulumi.Input[_builtins.str] local_file_path: This is the filepath of the raw image file that will be uploaded to Glance. Conflicts
               with `image_source_url`.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] metadata: The metadata associated with the image.
               Image metadata allow for meaningfully define the image properties and tags.
               See [metadata reference](http://docs.openstack.org/developer/glance/metadefs-concepts.html).
        :param pulumi.Input[_builtins.int] min_disk_gb: Amount of disk space (in GB) required to boot image. Defaults to 0.
        :param pulumi.Input[_builtins.int] min_ram_mb: Amount of ram (in MB) required to boot image. Defaults to 0.
        :param pulumi.Input[_builtins.str] name: The name of the image.
        :param pulumi.Input[_builtins.str] owner: The id of the HuaweiCloud user who owns the image.
        :param pulumi.Input[_builtins.bool] protected: If true, image will not be deletable. Defaults to false.
        :param pulumi.Input[_builtins.str] region: The region in which to create the V2 Glance client. A Glance client is needed to create an Image
               that can be used with a compute instance. If omitted, the `region` argument of the provider is used. Changing this
               creates a new Image.
        :param pulumi.Input[_builtins.str] schema: The path to the JSON-schema that represent the image or image
        :param pulumi.Input[_builtins.int] size_bytes: The size in bytes of the data associated with the image.
        :param pulumi.Input[_builtins.str] status: The status of the image. It can be "queued", "active"
               or "saving".
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: The tags of the image. It must be a list of strings. At this time, it is not possible to delete
               all tags of an image.
        :param pulumi.Input[_builtins.str] update_at: The date the image was last updated.
        :param pulumi.Input[_builtins.str] visibility: The visibility of the image. Must be "private". The ability to set the visibility depends
               upon the configuration of the HuaweiCloud cloud.
               
               Note: The `properties` attribute handling in the golangsdk library is currently buggy and needs to be fixed before being
               implemented in this resource.
        """
        if checksum is not None:
            pulumi.set(__self__, "checksum", checksum)
        if container_format is not None:
            pulumi.set(__self__, "container_format", container_format)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if disk_format is not None:
            pulumi.set(__self__, "disk_format", disk_format)
        if file is not None:
            pulumi.set(__self__, "file", file)
        if image_cache_path is not None:
            pulumi.set(__self__, "image_cache_path", image_cache_path)
        if image_source_url is not None:
            pulumi.set(__self__, "image_source_url", image_source_url)
        if local_file_path is not None:
            pulumi.set(__self__, "local_file_path", local_file_path)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if min_disk_gb is not None:
            pulumi.set(__self__, "min_disk_gb", min_disk_gb)
        if min_ram_mb is not None:
            pulumi.set(__self__, "min_ram_mb", min_ram_mb)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if protected is not None:
            pulumi.set(__self__, "protected", protected)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)
        if size_bytes is not None:
            pulumi.set(__self__, "size_bytes", size_bytes)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if update_at is not None:
            pulumi.set(__self__, "update_at", update_at)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @_builtins.property
    @pulumi.getter
    def checksum(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The checksum of the data associated with the image.
        """
        return pulumi.get(self, "checksum")

    @checksum.setter
    def checksum(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "checksum", value)

    @_builtins.property
    @pulumi.getter(name="containerFormat")
    def container_format(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The container format. Must be "bare".
        """
        return pulumi.get(self, "container_format")

    @container_format.setter
    def container_format(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "container_format", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date the image was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="diskFormat")
    def disk_format(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The disk format. Must be one of "qcow2", "vhd".
        """
        return pulumi.get(self, "disk_format")

    @disk_format.setter
    def disk_format(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "disk_format", value)

    @_builtins.property
    @pulumi.getter
    def file(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        the trailing path after the glance endpoint that represent the location of the image or the path to retrieve
        it.
        """
        return pulumi.get(self, "file")

    @file.setter
    def file(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "file", value)

    @_builtins.property
    @pulumi.getter(name="imageCachePath")
    def image_cache_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "image_cache_path")

    @image_cache_path.setter
    def image_cache_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_cache_path", value)

    @_builtins.property
    @pulumi.getter(name="imageSourceUrl")
    def image_source_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        This is the url of the raw image that will be downloaded in the `image_cache_path`
        before being uploaded to Glance. Glance is able to download image from internet but the `golangsdk` library does not
        yet provide a way to do so. Conflicts with `local_file_path`.
        """
        return pulumi.get(self, "image_source_url")

    @image_source_url.setter
    def image_source_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_source_url", value)

    @_builtins.property
    @pulumi.getter(name="localFilePath")
    def local_file_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        This is the filepath of the raw image file that will be uploaded to Glance. Conflicts
        with `image_source_url`.
        """
        return pulumi.get(self, "local_file_path")

    @local_file_path.setter
    def local_file_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "local_file_path", value)

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        The metadata associated with the image.
        Image metadata allow for meaningfully define the image properties and tags.
        See [metadata reference](http://docs.openstack.org/developer/glance/metadefs-concepts.html).
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "metadata", value)

    @_builtins.property
    @pulumi.getter(name="minDiskGb")
    def min_disk_gb(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Amount of disk space (in GB) required to boot image. Defaults to 0.
        """
        return pulumi.get(self, "min_disk_gb")

    @min_disk_gb.setter
    def min_disk_gb(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "min_disk_gb", value)

    @_builtins.property
    @pulumi.getter(name="minRamMb")
    def min_ram_mb(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Amount of ram (in MB) required to boot image. Defaults to 0.
        """
        return pulumi.get(self, "min_ram_mb")

    @min_ram_mb.setter
    def min_ram_mb(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "min_ram_mb", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the image.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The id of the HuaweiCloud user who owns the image.
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "owner", value)

    @_builtins.property
    @pulumi.getter
    def protected(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If true, image will not be deletable. Defaults to false.
        """
        return pulumi.get(self, "protected")

    @protected.setter
    def protected(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "protected", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the V2 Glance client. A Glance client is needed to create an Image
        that can be used with a compute instance. If omitted, the `region` argument of the provider is used. Changing this
        creates a new Image.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def schema(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The path to the JSON-schema that represent the image or image
        """
        return pulumi.get(self, "schema")

    @schema.setter
    def schema(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "schema", value)

    @_builtins.property
    @pulumi.getter(name="sizeBytes")
    def size_bytes(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The size in bytes of the data associated with the image.
        """
        return pulumi.get(self, "size_bytes")

    @size_bytes.setter
    def size_bytes(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "size_bytes", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the image. It can be "queued", "active"
        or "saving".
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The tags of the image. It must be a list of strings. At this time, it is not possible to delete
        all tags of an image.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="updateAt")
    def update_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date the image was last updated.
        """
        return pulumi.get(self, "update_at")

    @update_at.setter
    def update_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "update_at", value)

    @_builtins.property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The visibility of the image. Must be "private". The ability to set the visibility depends
        upon the configuration of the HuaweiCloud cloud.

        Note: The `properties` attribute handling in the golangsdk library is currently buggy and needs to be fixed before being
        implemented in this resource.
        """
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "visibility", value)


@pulumi.type_token("huaweicloud:Ims/imageV2:ImageV2")
class ImageV2(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 container_format: Optional[pulumi.Input[_builtins.str]] = None,
                 disk_format: Optional[pulumi.Input[_builtins.str]] = None,
                 image_cache_path: Optional[pulumi.Input[_builtins.str]] = None,
                 image_source_url: Optional[pulumi.Input[_builtins.str]] = None,
                 local_file_path: Optional[pulumi.Input[_builtins.str]] = None,
                 min_disk_gb: Optional[pulumi.Input[_builtins.int]] = None,
                 min_ram_mb: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 protected: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 visibility: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a Image resource within HuaweiCloud IMS.

        !> **WARNING:** It has been deprecated, please use `Ims.Image` instead.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        rancheros = huaweicloud.ims.ImageV2("rancheros",
            name="RancherOS",
            image_source_url="https://releases.rancher.com/os/latest/rancheros-openstack.img",
            container_format="bare",
            disk_format="qcow2",
            tags=[
                "foo.bar",
                "tag.value",
            ])
        ```

        ## Import

        Images can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Ims/imageV2:ImageV2 rancheros 89c60255-9bd6-460c-822a-e2b959ede9d2
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] container_format: The container format. Must be "bare".
        :param pulumi.Input[_builtins.str] disk_format: The disk format. Must be one of "qcow2", "vhd".
        :param pulumi.Input[_builtins.str] image_source_url: This is the url of the raw image that will be downloaded in the `image_cache_path`
               before being uploaded to Glance. Glance is able to download image from internet but the `golangsdk` library does not
               yet provide a way to do so. Conflicts with `local_file_path`.
        :param pulumi.Input[_builtins.str] local_file_path: This is the filepath of the raw image file that will be uploaded to Glance. Conflicts
               with `image_source_url`.
        :param pulumi.Input[_builtins.int] min_disk_gb: Amount of disk space (in GB) required to boot image. Defaults to 0.
        :param pulumi.Input[_builtins.int] min_ram_mb: Amount of ram (in MB) required to boot image. Defaults to 0.
        :param pulumi.Input[_builtins.str] name: The name of the image.
        :param pulumi.Input[_builtins.bool] protected: If true, image will not be deletable. Defaults to false.
        :param pulumi.Input[_builtins.str] region: The region in which to create the V2 Glance client. A Glance client is needed to create an Image
               that can be used with a compute instance. If omitted, the `region` argument of the provider is used. Changing this
               creates a new Image.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: The tags of the image. It must be a list of strings. At this time, it is not possible to delete
               all tags of an image.
        :param pulumi.Input[_builtins.str] visibility: The visibility of the image. Must be "private". The ability to set the visibility depends
               upon the configuration of the HuaweiCloud cloud.
               
               Note: The `properties` attribute handling in the golangsdk library is currently buggy and needs to be fixed before being
               implemented in this resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ImageV2Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a Image resource within HuaweiCloud IMS.

        !> **WARNING:** It has been deprecated, please use `Ims.Image` instead.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        rancheros = huaweicloud.ims.ImageV2("rancheros",
            name="RancherOS",
            image_source_url="https://releases.rancher.com/os/latest/rancheros-openstack.img",
            container_format="bare",
            disk_format="qcow2",
            tags=[
                "foo.bar",
                "tag.value",
            ])
        ```

        ## Import

        Images can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Ims/imageV2:ImageV2 rancheros 89c60255-9bd6-460c-822a-e2b959ede9d2
        ```

        :param str resource_name: The name of the resource.
        :param ImageV2Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ImageV2Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 container_format: Optional[pulumi.Input[_builtins.str]] = None,
                 disk_format: Optional[pulumi.Input[_builtins.str]] = None,
                 image_cache_path: Optional[pulumi.Input[_builtins.str]] = None,
                 image_source_url: Optional[pulumi.Input[_builtins.str]] = None,
                 local_file_path: Optional[pulumi.Input[_builtins.str]] = None,
                 min_disk_gb: Optional[pulumi.Input[_builtins.int]] = None,
                 min_ram_mb: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 protected: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 visibility: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ImageV2Args.__new__(ImageV2Args)

            if container_format is None and not opts.urn:
                raise TypeError("Missing required property 'container_format'")
            __props__.__dict__["container_format"] = container_format
            if disk_format is None and not opts.urn:
                raise TypeError("Missing required property 'disk_format'")
            __props__.__dict__["disk_format"] = disk_format
            __props__.__dict__["image_cache_path"] = image_cache_path
            __props__.__dict__["image_source_url"] = image_source_url
            __props__.__dict__["local_file_path"] = local_file_path
            __props__.__dict__["min_disk_gb"] = min_disk_gb
            __props__.__dict__["min_ram_mb"] = min_ram_mb
            __props__.__dict__["name"] = name
            __props__.__dict__["protected"] = protected
            __props__.__dict__["region"] = region
            __props__.__dict__["tags"] = tags
            __props__.__dict__["visibility"] = visibility
            __props__.__dict__["checksum"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["file"] = None
            __props__.__dict__["metadata"] = None
            __props__.__dict__["owner"] = None
            __props__.__dict__["schema"] = None
            __props__.__dict__["size_bytes"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["update_at"] = None
        super(ImageV2, __self__).__init__(
            'huaweicloud:Ims/imageV2:ImageV2',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            checksum: Optional[pulumi.Input[_builtins.str]] = None,
            container_format: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            disk_format: Optional[pulumi.Input[_builtins.str]] = None,
            file: Optional[pulumi.Input[_builtins.str]] = None,
            image_cache_path: Optional[pulumi.Input[_builtins.str]] = None,
            image_source_url: Optional[pulumi.Input[_builtins.str]] = None,
            local_file_path: Optional[pulumi.Input[_builtins.str]] = None,
            metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            min_disk_gb: Optional[pulumi.Input[_builtins.int]] = None,
            min_ram_mb: Optional[pulumi.Input[_builtins.int]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            owner: Optional[pulumi.Input[_builtins.str]] = None,
            protected: Optional[pulumi.Input[_builtins.bool]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            schema: Optional[pulumi.Input[_builtins.str]] = None,
            size_bytes: Optional[pulumi.Input[_builtins.int]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            update_at: Optional[pulumi.Input[_builtins.str]] = None,
            visibility: Optional[pulumi.Input[_builtins.str]] = None) -> 'ImageV2':
        """
        Get an existing ImageV2 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] checksum: The checksum of the data associated with the image.
        :param pulumi.Input[_builtins.str] container_format: The container format. Must be "bare".
        :param pulumi.Input[_builtins.str] created_at: The date the image was created.
        :param pulumi.Input[_builtins.str] disk_format: The disk format. Must be one of "qcow2", "vhd".
        :param pulumi.Input[_builtins.str] file: the trailing path after the glance endpoint that represent the location of the image or the path to retrieve
               it.
        :param pulumi.Input[_builtins.str] image_source_url: This is the url of the raw image that will be downloaded in the `image_cache_path`
               before being uploaded to Glance. Glance is able to download image from internet but the `golangsdk` library does not
               yet provide a way to do so. Conflicts with `local_file_path`.
        :param pulumi.Input[_builtins.str] local_file_path: This is the filepath of the raw image file that will be uploaded to Glance. Conflicts
               with `image_source_url`.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] metadata: The metadata associated with the image.
               Image metadata allow for meaningfully define the image properties and tags.
               See [metadata reference](http://docs.openstack.org/developer/glance/metadefs-concepts.html).
        :param pulumi.Input[_builtins.int] min_disk_gb: Amount of disk space (in GB) required to boot image. Defaults to 0.
        :param pulumi.Input[_builtins.int] min_ram_mb: Amount of ram (in MB) required to boot image. Defaults to 0.
        :param pulumi.Input[_builtins.str] name: The name of the image.
        :param pulumi.Input[_builtins.str] owner: The id of the HuaweiCloud user who owns the image.
        :param pulumi.Input[_builtins.bool] protected: If true, image will not be deletable. Defaults to false.
        :param pulumi.Input[_builtins.str] region: The region in which to create the V2 Glance client. A Glance client is needed to create an Image
               that can be used with a compute instance. If omitted, the `region` argument of the provider is used. Changing this
               creates a new Image.
        :param pulumi.Input[_builtins.str] schema: The path to the JSON-schema that represent the image or image
        :param pulumi.Input[_builtins.int] size_bytes: The size in bytes of the data associated with the image.
        :param pulumi.Input[_builtins.str] status: The status of the image. It can be "queued", "active"
               or "saving".
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: The tags of the image. It must be a list of strings. At this time, it is not possible to delete
               all tags of an image.
        :param pulumi.Input[_builtins.str] update_at: The date the image was last updated.
        :param pulumi.Input[_builtins.str] visibility: The visibility of the image. Must be "private". The ability to set the visibility depends
               upon the configuration of the HuaweiCloud cloud.
               
               Note: The `properties` attribute handling in the golangsdk library is currently buggy and needs to be fixed before being
               implemented in this resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ImageV2State.__new__(_ImageV2State)

        __props__.__dict__["checksum"] = checksum
        __props__.__dict__["container_format"] = container_format
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["disk_format"] = disk_format
        __props__.__dict__["file"] = file
        __props__.__dict__["image_cache_path"] = image_cache_path
        __props__.__dict__["image_source_url"] = image_source_url
        __props__.__dict__["local_file_path"] = local_file_path
        __props__.__dict__["metadata"] = metadata
        __props__.__dict__["min_disk_gb"] = min_disk_gb
        __props__.__dict__["min_ram_mb"] = min_ram_mb
        __props__.__dict__["name"] = name
        __props__.__dict__["owner"] = owner
        __props__.__dict__["protected"] = protected
        __props__.__dict__["region"] = region
        __props__.__dict__["schema"] = schema
        __props__.__dict__["size_bytes"] = size_bytes
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["update_at"] = update_at
        __props__.__dict__["visibility"] = visibility
        return ImageV2(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def checksum(self) -> pulumi.Output[_builtins.str]:
        """
        The checksum of the data associated with the image.
        """
        return pulumi.get(self, "checksum")

    @_builtins.property
    @pulumi.getter(name="containerFormat")
    def container_format(self) -> pulumi.Output[_builtins.str]:
        """
        The container format. Must be "bare".
        """
        return pulumi.get(self, "container_format")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date the image was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="diskFormat")
    def disk_format(self) -> pulumi.Output[_builtins.str]:
        """
        The disk format. Must be one of "qcow2", "vhd".
        """
        return pulumi.get(self, "disk_format")

    @_builtins.property
    @pulumi.getter
    def file(self) -> pulumi.Output[_builtins.str]:
        """
        the trailing path after the glance endpoint that represent the location of the image or the path to retrieve
        it.
        """
        return pulumi.get(self, "file")

    @_builtins.property
    @pulumi.getter(name="imageCachePath")
    def image_cache_path(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "image_cache_path")

    @_builtins.property
    @pulumi.getter(name="imageSourceUrl")
    def image_source_url(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        This is the url of the raw image that will be downloaded in the `image_cache_path`
        before being uploaded to Glance. Glance is able to download image from internet but the `golangsdk` library does not
        yet provide a way to do so. Conflicts with `local_file_path`.
        """
        return pulumi.get(self, "image_source_url")

    @_builtins.property
    @pulumi.getter(name="localFilePath")
    def local_file_path(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        This is the filepath of the raw image file that will be uploaded to Glance. Conflicts
        with `image_source_url`.
        """
        return pulumi.get(self, "local_file_path")

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        The metadata associated with the image.
        Image metadata allow for meaningfully define the image properties and tags.
        See [metadata reference](http://docs.openstack.org/developer/glance/metadefs-concepts.html).
        """
        return pulumi.get(self, "metadata")

    @_builtins.property
    @pulumi.getter(name="minDiskGb")
    def min_disk_gb(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Amount of disk space (in GB) required to boot image. Defaults to 0.
        """
        return pulumi.get(self, "min_disk_gb")

    @_builtins.property
    @pulumi.getter(name="minRamMb")
    def min_ram_mb(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Amount of ram (in MB) required to boot image. Defaults to 0.
        """
        return pulumi.get(self, "min_ram_mb")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the image.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def owner(self) -> pulumi.Output[_builtins.str]:
        """
        The id of the HuaweiCloud user who owns the image.
        """
        return pulumi.get(self, "owner")

    @_builtins.property
    @pulumi.getter
    def protected(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        If true, image will not be deletable. Defaults to false.
        """
        return pulumi.get(self, "protected")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region in which to create the V2 Glance client. A Glance client is needed to create an Image
        that can be used with a compute instance. If omitted, the `region` argument of the provider is used. Changing this
        creates a new Image.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def schema(self) -> pulumi.Output[_builtins.str]:
        """
        The path to the JSON-schema that represent the image or image
        """
        return pulumi.get(self, "schema")

    @_builtins.property
    @pulumi.getter(name="sizeBytes")
    def size_bytes(self) -> pulumi.Output[_builtins.int]:
        """
        The size in bytes of the data associated with the image.
        """
        return pulumi.get(self, "size_bytes")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the image. It can be "queued", "active"
        or "saving".
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        The tags of the image. It must be a list of strings. At this time, it is not possible to delete
        all tags of an image.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="updateAt")
    def update_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date the image was last updated.
        """
        return pulumi.get(self, "update_at")

    @_builtins.property
    @pulumi.getter
    def visibility(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The visibility of the image. Must be "private". The ability to set the visibility depends
        upon the configuration of the HuaweiCloud cloud.

        Note: The `properties` attribute handling in the golangsdk library is currently buggy and needs to be fixed before being
        implemented in this resource.
        """
        return pulumi.get(self, "visibility")

