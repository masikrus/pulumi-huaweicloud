# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['ObsSystemImageArgs', 'ObsSystemImage']

@pulumi.input_type
class ObsSystemImageArgs:
    def __init__(__self__, *,
                 image_url: pulumi.Input[_builtins.str],
                 min_disk: pulumi.Input[_builtins.int],
                 architecture: Optional[pulumi.Input[_builtins.str]] = None,
                 cmk_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 is_config: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_quick_import: Optional[pulumi.Input[_builtins.bool]] = None,
                 max_ram: Optional[pulumi.Input[_builtins.int]] = None,
                 min_ram: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 os_type: Optional[pulumi.Input[_builtins.str]] = None,
                 os_version: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ObsSystemImage resource.
        :param pulumi.Input[_builtins.str] image_url: Specifies the URL of the external image file in the OBS bucket, the format
               is **OBS bucket name:image file name**. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] min_disk: Specifies the minimum size of the system disk, in GB unit.
               Changing this parameter will create a new resource.
               + When the operating system is Linux, the value ranges from `10` to `1,024`.
               + When the operating system is Windows, the value ranges from `20` to `1,024`.
        :param pulumi.Input[_builtins.str] architecture: Specifies the schema type of the image. The value can be **x86** or
               **arm**. Defaults to **x86**. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] cmk_id: Specifies the custom key for creating encrypted image.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the image.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the IMS image belongs.
               For enterprise users, if omitted, default enterprise project will be used.
        :param pulumi.Input[_builtins.bool] is_config: Specifies whether to automatically configure. The value can be **true** or
               **false**. Defaults to **false**. Changing this parameter will create a new resource.
               About the content of automatic backend configuration, please refer to
               [API docs](https://support.huaweicloud.com/intl/en-us/ims_faq/ims_faq_0020.html).
        :param pulumi.Input[_builtins.bool] is_quick_import: Specifies whether to use the image file quick import method to create
               an image. The value can be **true** or **false**. Changing this parameter will create a new resource.
               For constraints and limitations on fast import of image files,
               please refer to [API docs](https://support.huaweicloud.com/intl/en-us/api-ims/ims_03_0605.html).
               
               > 1. When the `is_quick_import` set to **true**, IMS will not parse the specified external image file, so the
               `os_type`, `os_version`, and `architecture` parameters is based on the specified value.
               <br/>2. When ignoring the `is_quick_import` or set to **false** , IMS will parse the external image file and confirm
               the `os_type`, `os_version`, and `architecture` of the image, if parsing fails, the specified value shall prevail.
        :param pulumi.Input[_builtins.int] max_ram: Specifies the maximum memory of the image, in MB unit.
        :param pulumi.Input[_builtins.int] min_ram: Specifies the minimum memory of the image, in MB unit.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the image.
               The valid length is limited from `1` to `128` characters.
               The first and last letters of the name cannot be spaces.
               The name can contain uppercase letters, lowercase letters, numbers, spaces, chinese, and special characters (-._).
        :param pulumi.Input[_builtins.str] os_type: Specifies the operating system type of the image. The value can be
               **Windows** or **Linux**. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] os_version: Specifies the operating system version of the image. This field is
               required when `is_quick_import` set to **true**. Changing this parameter will create a new resource.
               For its values, see [API docs](https://support.huaweicloud.com/intl/en-us/api-ims/ims_03_0910.html).
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the image.
        :param pulumi.Input[_builtins.str] type: Specifies the image type. The value can be **ECS**, **FusionCompute**, **BMS**,
               or **Ironic**. Defaults to **ECS**. Changing this parameter will create a new resource.
               + Set to **ECS** or **FusionCompute** represent the creation of ECS server image.
               + Set to **BMS** or **Ironic** represent the creation of BMS server image.
        """
        pulumi.set(__self__, "image_url", image_url)
        pulumi.set(__self__, "min_disk", min_disk)
        if architecture is not None:
            pulumi.set(__self__, "architecture", architecture)
        if cmk_id is not None:
            pulumi.set(__self__, "cmk_id", cmk_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if is_config is not None:
            pulumi.set(__self__, "is_config", is_config)
        if is_quick_import is not None:
            pulumi.set(__self__, "is_quick_import", is_quick_import)
        if max_ram is not None:
            pulumi.set(__self__, "max_ram", max_ram)
        if min_ram is not None:
            pulumi.set(__self__, "min_ram", min_ram)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)
        if os_version is not None:
            pulumi.set(__self__, "os_version", os_version)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the URL of the external image file in the OBS bucket, the format
        is **OBS bucket name:image file name**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "image_url", value)

    @_builtins.property
    @pulumi.getter(name="minDisk")
    def min_disk(self) -> pulumi.Input[_builtins.int]:
        """
        Specifies the minimum size of the system disk, in GB unit.
        Changing this parameter will create a new resource.
        + When the operating system is Linux, the value ranges from `10` to `1,024`.
        + When the operating system is Windows, the value ranges from `20` to `1,024`.
        """
        return pulumi.get(self, "min_disk")

    @min_disk.setter
    def min_disk(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "min_disk", value)

    @_builtins.property
    @pulumi.getter
    def architecture(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the schema type of the image. The value can be **x86** or
        **arm**. Defaults to **x86**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "architecture")

    @architecture.setter
    def architecture(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "architecture", value)

    @_builtins.property
    @pulumi.getter(name="cmkId")
    def cmk_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the custom key for creating encrypted image.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cmk_id")

    @cmk_id.setter
    def cmk_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cmk_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the image.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID to which the IMS image belongs.
        For enterprise users, if omitted, default enterprise project will be used.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="isConfig")
    def is_config(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to automatically configure. The value can be **true** or
        **false**. Defaults to **false**. Changing this parameter will create a new resource.
        About the content of automatic backend configuration, please refer to
        [API docs](https://support.huaweicloud.com/intl/en-us/ims_faq/ims_faq_0020.html).
        """
        return pulumi.get(self, "is_config")

    @is_config.setter
    def is_config(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_config", value)

    @_builtins.property
    @pulumi.getter(name="isQuickImport")
    def is_quick_import(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to use the image file quick import method to create
        an image. The value can be **true** or **false**. Changing this parameter will create a new resource.
        For constraints and limitations on fast import of image files,
        please refer to [API docs](https://support.huaweicloud.com/intl/en-us/api-ims/ims_03_0605.html).

        > 1. When the `is_quick_import` set to **true**, IMS will not parse the specified external image file, so the
        `os_type`, `os_version`, and `architecture` parameters is based on the specified value.
        <br/>2. When ignoring the `is_quick_import` or set to **false** , IMS will parse the external image file and confirm
        the `os_type`, `os_version`, and `architecture` of the image, if parsing fails, the specified value shall prevail.
        """
        return pulumi.get(self, "is_quick_import")

    @is_quick_import.setter
    def is_quick_import(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_quick_import", value)

    @_builtins.property
    @pulumi.getter(name="maxRam")
    def max_ram(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the maximum memory of the image, in MB unit.
        """
        return pulumi.get(self, "max_ram")

    @max_ram.setter
    def max_ram(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "max_ram", value)

    @_builtins.property
    @pulumi.getter(name="minRam")
    def min_ram(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the minimum memory of the image, in MB unit.
        """
        return pulumi.get(self, "min_ram")

    @min_ram.setter
    def min_ram(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "min_ram", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the image.
        The valid length is limited from `1` to `128` characters.
        The first and last letters of the name cannot be spaces.
        The name can contain uppercase letters, lowercase letters, numbers, spaces, chinese, and special characters (-._).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the operating system type of the image. The value can be
        **Windows** or **Linux**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "os_type")

    @os_type.setter
    def os_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "os_type", value)

    @_builtins.property
    @pulumi.getter(name="osVersion")
    def os_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the operating system version of the image. This field is
        required when `is_quick_import` set to **true**. Changing this parameter will create a new resource.
        For its values, see [API docs](https://support.huaweicloud.com/intl/en-us/api-ims/ims_03_0910.html).
        """
        return pulumi.get(self, "os_version")

    @os_version.setter
    def os_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "os_version", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value pairs to associate with the image.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the image type. The value can be **ECS**, **FusionCompute**, **BMS**,
        or **Ironic**. Defaults to **ECS**. Changing this parameter will create a new resource.
        + Set to **ECS** or **FusionCompute** represent the creation of ECS server image.
        + Set to **BMS** or **Ironic** represent the creation of BMS server image.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _ObsSystemImageState:
    def __init__(__self__, *,
                 __account_code: Optional[pulumi.Input[_builtins.str]] = None,
                 __backup_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __image_displayname: Optional[pulumi.Input[_builtins.str]] = None,
                 __image_source_type: Optional[pulumi.Input[_builtins.str]] = None,
                 __imagetype: Optional[pulumi.Input[_builtins.str]] = None,
                 __is_offshelved: Optional[pulumi.Input[_builtins.str]] = None,
                 __isregistered: Optional[pulumi.Input[_builtins.str]] = None,
                 __lazyloading: Optional[pulumi.Input[_builtins.str]] = None,
                 __originalimagename: Optional[pulumi.Input[_builtins.str]] = None,
                 __os_bit: Optional[pulumi.Input[_builtins.str]] = None,
                 __os_feature_list: Optional[pulumi.Input[_builtins.str]] = None,
                 __platform: Optional[pulumi.Input[_builtins.str]] = None,
                 __productcode: Optional[pulumi.Input[_builtins.str]] = None,
                 __root_origin: Optional[pulumi.Input[_builtins.str]] = None,
                 __sequence_num: Optional[pulumi.Input[_builtins.str]] = None,
                 __support_agent_list: Optional[pulumi.Input[_builtins.str]] = None,
                 __support_amd: Optional[pulumi.Input[_builtins.str]] = None,
                 __support_arm: Optional[pulumi.Input[_builtins.str]] = None,
                 __support_diskintensive: Optional[pulumi.Input[_builtins.str]] = None,
                 __support_fc_inject: Optional[pulumi.Input[_builtins.str]] = None,
                 __support_highperformance: Optional[pulumi.Input[_builtins.str]] = None,
                 __support_kvm: Optional[pulumi.Input[_builtins.str]] = None,
                 __support_kvm_gpu_type: Optional[pulumi.Input[_builtins.str]] = None,
                 __support_kvm_hi1822_hisriov: Optional[pulumi.Input[_builtins.str]] = None,
                 __support_kvm_hi1822_hivirtionet: Optional[pulumi.Input[_builtins.str]] = None,
                 __support_kvm_infiniband: Optional[pulumi.Input[_builtins.str]] = None,
                 __support_largememory: Optional[pulumi.Input[_builtins.str]] = None,
                 __support_xen: Optional[pulumi.Input[_builtins.str]] = None,
                 __support_xen_gpu_type: Optional[pulumi.Input[_builtins.str]] = None,
                 __support_xen_hana: Optional[pulumi.Input[_builtins.str]] = None,
                 __system_support_market: Optional[pulumi.Input[_builtins.bool]] = None,
                 active_at: Optional[pulumi.Input[_builtins.str]] = None,
                 architecture: Optional[pulumi.Input[_builtins.str]] = None,
                 cmk_id: Optional[pulumi.Input[_builtins.str]] = None,
                 container_format: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 data_origin: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 disk_format: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 file: Optional[pulumi.Input[_builtins.str]] = None,
                 hw_firmware_type: Optional[pulumi.Input[_builtins.str]] = None,
                 hw_vif_multiqueue_enabled: Optional[pulumi.Input[_builtins.str]] = None,
                 image_size: Optional[pulumi.Input[_builtins.str]] = None,
                 image_url: Optional[pulumi.Input[_builtins.str]] = None,
                 is_config: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_quick_import: Optional[pulumi.Input[_builtins.bool]] = None,
                 max_ram: Optional[pulumi.Input[_builtins.int]] = None,
                 min_disk: Optional[pulumi.Input[_builtins.int]] = None,
                 min_ram: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 os_shutdown_timeout: Optional[pulumi.Input[_builtins.str]] = None,
                 os_type: Optional[pulumi.Input[_builtins.str]] = None,
                 os_version: Optional[pulumi.Input[_builtins.str]] = None,
                 protected: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 schema: Optional[pulumi.Input[_builtins.str]] = None,
                 self: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 virtual_env_type: Optional[pulumi.Input[_builtins.str]] = None,
                 visibility: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ObsSystemImage resources.
        :param pulumi.Input[_builtins.str] __account_code: The charging identifier for the image.
        :param pulumi.Input[_builtins.str] __backup_id: The backup ID. If the image is not created by backup, the value is empty.
        :param pulumi.Input[_builtins.str] __image_displayname: The name for external display.
        :param pulumi.Input[_builtins.str] __image_source_type: The image backend storage type, currently supports **uds**.
        :param pulumi.Input[_builtins.str] __imagetype: The image type. Currently supporting **gold**, **private**, **shared**, and **market**.
        :param pulumi.Input[_builtins.str] __is_offshelved: Whether the KooGallery image has been taken offline.
               The valid values are as follows:
               + **true**: Removed.
               + **false**: Not taken down.
        :param pulumi.Input[_builtins.str] __isregistered: Is it a registered image with a value of **true** or **false**.
        :param pulumi.Input[_builtins.str] __lazyloading: Whether the image supports lazy loading. The value can be **true**, **false**, **True**,
               or **False**.
        :param pulumi.Input[_builtins.str] __originalimagename: The father image ID. Public image or private image created through files, value is empty.
        :param pulumi.Input[_builtins.str] __os_bit: The number of bits in the operating system is usually set to `32` or `64`.
        :param pulumi.Input[_builtins.str] __os_feature_list: The additional attributes of the image. The value is a list (in JSON format) of advanced
               features supported by the image.
        :param pulumi.Input[_builtins.str] __platform: The classification of image platforms, includes **Windows**, **Ubuntu**, **Red Hat**, **SUSE**,
               **CentOS**, **Debian**, **OpenSUSE**, **Oracle Linux**, **Fedora**, **Other**, **CoreOS**, and **Euler OS**.
        :param pulumi.Input[_builtins.str] __productcode: The product ID of the market image.
        :param pulumi.Input[_builtins.str] __root_origin: Indicates that the current image source is imported from an external source.
               The value is *file**.
        :param pulumi.Input[_builtins.str] __sequence_num: Indicates the system disk slot position of the cloud server corresponding to the current image.
        :param pulumi.Input[_builtins.str] __support_agent_list: The agents configured for the image.
               The valid values are as follows:
               + **hss**: Server security.
               + **ces**: The host monitoring agent is configured for the image.
        :param pulumi.Input[_builtins.str] __support_amd: Whether the image uses AMD's x86 architecture. The value can be **true** or **false**.
        :param pulumi.Input[_builtins.str] __support_arm: Whether the image uses the Arm architecture. The value can be **true** or **false**.
        :param pulumi.Input[_builtins.str] __support_diskintensive: Whether the image supports disk-intensive ECSs. If yes, the value is **true**.
        :param pulumi.Input[_builtins.str] __support_fc_inject: Whether the image supports password/private key injection using Cloud-Init.
               If the value is **true**, password/private key injection using Cloud-Init is not supported.
        :param pulumi.Input[_builtins.str] __support_highperformance: Whether the image supports high-performance ECSs. If yes, the value is **true**.
        :param pulumi.Input[_builtins.str] __support_kvm: Whether the image supports KVM. If yes, the value is **true**.
        :param pulumi.Input[_builtins.str] __support_kvm_gpu_type: Whether the image supports GPU-accelerated ECSs on the KVM platform.
               Please refer to the document link for its value
               [reference](https://support.huaweicloud.com/intl/en-us/api-ims/ims_03_0910.html#ims_03_0910__table282523154017).
        :param pulumi.Input[_builtins.str] __support_kvm_hi1822_hisriov: Whether SR-IOV is supported. If supported, the value is **true**.
        :param pulumi.Input[_builtins.str] __support_kvm_hi1822_hivirtionet: Whether Virtio-Net is supported. If supported, the value is **true**.
        :param pulumi.Input[_builtins.str] __support_kvm_infiniband: Whether the image supports ECSs with InfiniBand NICs on the KVM platform. If yes, the
               value is **true**. This attribute cannot co-exist with `__support_xen`.
        :param pulumi.Input[_builtins.str] __support_largememory: Whether the image supports large-memory ECSs. If yes, the value is **true**.
        :param pulumi.Input[_builtins.str] __support_xen: Whether the image supports Xen. If yes, the value is **true**.
        :param pulumi.Input[_builtins.str] __support_xen_gpu_type: Whether the image supports GPU-accelerated ECSs on the Xen platform.
               Please refer to the document link for its value
               [reference](https://support.huaweicloud.com/intl/en-us/api-ims/ims_03_0910.html#ims_03_0910__table65768383152758).
        :param pulumi.Input[_builtins.str] __support_xen_hana: Whether the image supports HANA ECSs on the Xen platform. If yes, the value is **true**.
               This attribute cannot co-exist with `__support_xen` and `__support_kvm`.
        :param pulumi.Input[_builtins.bool] __system_support_market: Whether an image can be published in KooGallery.
               The valid values are as follows:
               + **true**: Support.
               + **false**: Not support.
        :param pulumi.Input[_builtins.str] active_at: The time when the image status became active.
        :param pulumi.Input[_builtins.str] architecture: Specifies the schema type of the image. The value can be **x86** or
               **arm**. Defaults to **x86**. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] cmk_id: Specifies the custom key for creating encrypted image.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] container_format: The container format.
        :param pulumi.Input[_builtins.str] created_at: The creation time, in UTC format.
        :param pulumi.Input[_builtins.str] data_origin: The image source. The format is **file,image_url**.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the image.
        :param pulumi.Input[_builtins.str] disk_format: The image format. The value can be **zvhd2**, **vhd**, **zvhd**, **raw**, **qcow2**, or **iso**.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the IMS image belongs.
               For enterprise users, if omitted, default enterprise project will be used.
        :param pulumi.Input[_builtins.str] file: The image file download and upload links.
        :param pulumi.Input[_builtins.str] hw_firmware_type: The ECS boot mode.
               The valid values are as follows:
               + **bios**: Indicates the BIOS boot mode.
               + **uefi**: Indicates the UEFI boot mode.
        :param pulumi.Input[_builtins.str] hw_vif_multiqueue_enabled: Whether the image supports NIC multi-queue. The value can be **true** or **false**.
        :param pulumi.Input[_builtins.str] image_size: The size of the image file, in bytes unit.
        :param pulumi.Input[_builtins.str] image_url: Specifies the URL of the external image file in the OBS bucket, the format
               is **OBS bucket name:image file name**. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] is_config: Specifies whether to automatically configure. The value can be **true** or
               **false**. Defaults to **false**. Changing this parameter will create a new resource.
               About the content of automatic backend configuration, please refer to
               [API docs](https://support.huaweicloud.com/intl/en-us/ims_faq/ims_faq_0020.html).
        :param pulumi.Input[_builtins.bool] is_quick_import: Specifies whether to use the image file quick import method to create
               an image. The value can be **true** or **false**. Changing this parameter will create a new resource.
               For constraints and limitations on fast import of image files,
               please refer to [API docs](https://support.huaweicloud.com/intl/en-us/api-ims/ims_03_0605.html).
               
               > 1. When the `is_quick_import` set to **true**, IMS will not parse the specified external image file, so the
               `os_type`, `os_version`, and `architecture` parameters is based on the specified value.
               <br/>2. When ignoring the `is_quick_import` or set to **false** , IMS will parse the external image file and confirm
               the `os_type`, `os_version`, and `architecture` of the image, if parsing fails, the specified value shall prevail.
        :param pulumi.Input[_builtins.int] max_ram: Specifies the maximum memory of the image, in MB unit.
        :param pulumi.Input[_builtins.int] min_disk: Specifies the minimum size of the system disk, in GB unit.
               Changing this parameter will create a new resource.
               + When the operating system is Linux, the value ranges from `10` to `1,024`.
               + When the operating system is Windows, the value ranges from `20` to `1,024`.
        :param pulumi.Input[_builtins.int] min_ram: Specifies the minimum memory of the image, in MB unit.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the image.
               The valid length is limited from `1` to `128` characters.
               The first and last letters of the name cannot be spaces.
               The name can contain uppercase letters, lowercase letters, numbers, spaces, chinese, and special characters (-._).
        :param pulumi.Input[_builtins.str] os_shutdown_timeout: The timeout duration for a graceful shutdown.
               The value is an integer ranging from `60` to `300`, in seconds. The default value is `60`.
        :param pulumi.Input[_builtins.str] os_type: Specifies the operating system type of the image. The value can be
               **Windows** or **Linux**. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] os_version: Specifies the operating system version of the image. This field is
               required when `is_quick_import` set to **true**. Changing this parameter will create a new resource.
               For its values, see [API docs](https://support.huaweicloud.com/intl/en-us/api-ims/ims_03_0910.html).
        :param pulumi.Input[_builtins.bool] protected: Whether the image is protected, and the protected image cannot be deleted. The value can be **true**
               or **false**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] schema: The image view.
        :param pulumi.Input[_builtins.str] self: The image link information.
        :param pulumi.Input[_builtins.str] status: The image status.  
               The valid values are as follows:
               + **queued**: Indicates that the image has been successfully created and is waiting to upload the image file.
               + **saving**: Indicates that the image is uploading files to the backend storage.
               + **deleted**: Indicates that the image has been deleted.
               + **killed**: Indicates an image upload error.
               + **active**: Indicates that the image can be used normally.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the image.
        :param pulumi.Input[_builtins.str] type: Specifies the image type. The value can be **ECS**, **FusionCompute**, **BMS**,
               or **Ironic**. Defaults to **ECS**. Changing this parameter will create a new resource.
               + Set to **ECS** or **FusionCompute** represent the creation of ECS server image.
               + Set to **BMS** or **Ironic** represent the creation of BMS server image.
        :param pulumi.Input[_builtins.str] updated_at: The last update time, in UTC format.
        :param pulumi.Input[_builtins.str] virtual_env_type: The image usage environment type.
               + If it is a cloud server image, the value is **FusionCompute**.
               + If it is a data disk image, the value is **DataImage**.
               + If it is a bare metal server image, the value is **Ironic**.
               + If it is an ISO image, the value is **IsoImage**.
        :param pulumi.Input[_builtins.str] visibility: Whether other tenants are visible.  
               The valid values are as follows:
               + **private**: Indicates private image.
               + **public**: Indicates public image.
               + **shared**: Indicates shared image.
        """
        if __account_code is not None:
            pulumi.set(__self__, "__account_code", __account_code)
        if __backup_id is not None:
            pulumi.set(__self__, "__backup_id", __backup_id)
        if __image_displayname is not None:
            pulumi.set(__self__, "__image_displayname", __image_displayname)
        if __image_source_type is not None:
            pulumi.set(__self__, "__image_source_type", __image_source_type)
        if __imagetype is not None:
            pulumi.set(__self__, "__imagetype", __imagetype)
        if __is_offshelved is not None:
            pulumi.set(__self__, "__is_offshelved", __is_offshelved)
        if __isregistered is not None:
            pulumi.set(__self__, "__isregistered", __isregistered)
        if __lazyloading is not None:
            pulumi.set(__self__, "__lazyloading", __lazyloading)
        if __originalimagename is not None:
            pulumi.set(__self__, "__originalimagename", __originalimagename)
        if __os_bit is not None:
            pulumi.set(__self__, "__os_bit", __os_bit)
        if __os_feature_list is not None:
            pulumi.set(__self__, "__os_feature_list", __os_feature_list)
        if __platform is not None:
            pulumi.set(__self__, "__platform", __platform)
        if __productcode is not None:
            pulumi.set(__self__, "__productcode", __productcode)
        if __root_origin is not None:
            pulumi.set(__self__, "__root_origin", __root_origin)
        if __sequence_num is not None:
            pulumi.set(__self__, "__sequence_num", __sequence_num)
        if __support_agent_list is not None:
            pulumi.set(__self__, "__support_agent_list", __support_agent_list)
        if __support_amd is not None:
            pulumi.set(__self__, "__support_amd", __support_amd)
        if __support_arm is not None:
            pulumi.set(__self__, "__support_arm", __support_arm)
        if __support_diskintensive is not None:
            pulumi.set(__self__, "__support_diskintensive", __support_diskintensive)
        if __support_fc_inject is not None:
            pulumi.set(__self__, "__support_fc_inject", __support_fc_inject)
        if __support_highperformance is not None:
            pulumi.set(__self__, "__support_highperformance", __support_highperformance)
        if __support_kvm is not None:
            pulumi.set(__self__, "__support_kvm", __support_kvm)
        if __support_kvm_gpu_type is not None:
            pulumi.set(__self__, "__support_kvm_gpu_type", __support_kvm_gpu_type)
        if __support_kvm_hi1822_hisriov is not None:
            pulumi.set(__self__, "__support_kvm_hi1822_hisriov", __support_kvm_hi1822_hisriov)
        if __support_kvm_hi1822_hivirtionet is not None:
            pulumi.set(__self__, "__support_kvm_hi1822_hivirtionet", __support_kvm_hi1822_hivirtionet)
        if __support_kvm_infiniband is not None:
            pulumi.set(__self__, "__support_kvm_infiniband", __support_kvm_infiniband)
        if __support_largememory is not None:
            pulumi.set(__self__, "__support_largememory", __support_largememory)
        if __support_xen is not None:
            pulumi.set(__self__, "__support_xen", __support_xen)
        if __support_xen_gpu_type is not None:
            pulumi.set(__self__, "__support_xen_gpu_type", __support_xen_gpu_type)
        if __support_xen_hana is not None:
            pulumi.set(__self__, "__support_xen_hana", __support_xen_hana)
        if __system_support_market is not None:
            pulumi.set(__self__, "__system_support_market", __system_support_market)
        if active_at is not None:
            pulumi.set(__self__, "active_at", active_at)
        if architecture is not None:
            pulumi.set(__self__, "architecture", architecture)
        if cmk_id is not None:
            pulumi.set(__self__, "cmk_id", cmk_id)
        if container_format is not None:
            pulumi.set(__self__, "container_format", container_format)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if data_origin is not None:
            pulumi.set(__self__, "data_origin", data_origin)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disk_format is not None:
            pulumi.set(__self__, "disk_format", disk_format)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if file is not None:
            pulumi.set(__self__, "file", file)
        if hw_firmware_type is not None:
            pulumi.set(__self__, "hw_firmware_type", hw_firmware_type)
        if hw_vif_multiqueue_enabled is not None:
            pulumi.set(__self__, "hw_vif_multiqueue_enabled", hw_vif_multiqueue_enabled)
        if image_size is not None:
            pulumi.set(__self__, "image_size", image_size)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if is_config is not None:
            pulumi.set(__self__, "is_config", is_config)
        if is_quick_import is not None:
            pulumi.set(__self__, "is_quick_import", is_quick_import)
        if max_ram is not None:
            pulumi.set(__self__, "max_ram", max_ram)
        if min_disk is not None:
            pulumi.set(__self__, "min_disk", min_disk)
        if min_ram is not None:
            pulumi.set(__self__, "min_ram", min_ram)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if os_shutdown_timeout is not None:
            pulumi.set(__self__, "os_shutdown_timeout", os_shutdown_timeout)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)
        if os_version is not None:
            pulumi.set(__self__, "os_version", os_version)
        if protected is not None:
            pulumi.set(__self__, "protected", protected)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)
        if self is not None:
            pulumi.set(__self__, "self", self)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if virtual_env_type is not None:
            pulumi.set(__self__, "virtual_env_type", virtual_env_type)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @_builtins.property
    @pulumi.getter(name="__accountCode")
    def __account_code(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The charging identifier for the image.
        """
        return pulumi.get(self, "__account_code")

    @__account_code.setter
    def __account_code(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "__account_code", value)

    @_builtins.property
    @pulumi.getter(name="__backupId")
    def __backup_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The backup ID. If the image is not created by backup, the value is empty.
        """
        return pulumi.get(self, "__backup_id")

    @__backup_id.setter
    def __backup_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "__backup_id", value)

    @_builtins.property
    @pulumi.getter(name="__imageDisplayname")
    def __image_displayname(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name for external display.
        """
        return pulumi.get(self, "__image_displayname")

    @__image_displayname.setter
    def __image_displayname(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "__image_displayname", value)

    @_builtins.property
    @pulumi.getter(name="__imageSourceType")
    def __image_source_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The image backend storage type, currently supports **uds**.
        """
        return pulumi.get(self, "__image_source_type")

    @__image_source_type.setter
    def __image_source_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "__image_source_type", value)

    @_builtins.property
    @pulumi.getter
    def __imagetype(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The image type. Currently supporting **gold**, **private**, **shared**, and **market**.
        """
        return pulumi.get(self, "__imagetype")

    @__imagetype.setter
    def __imagetype(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "__imagetype", value)

    @_builtins.property
    @pulumi.getter(name="__isOffshelved")
    def __is_offshelved(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Whether the KooGallery image has been taken offline.
        The valid values are as follows:
        + **true**: Removed.
        + **false**: Not taken down.
        """
        return pulumi.get(self, "__is_offshelved")

    @__is_offshelved.setter
    def __is_offshelved(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "__is_offshelved", value)

    @_builtins.property
    @pulumi.getter
    def __isregistered(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Is it a registered image with a value of **true** or **false**.
        """
        return pulumi.get(self, "__isregistered")

    @__isregistered.setter
    def __isregistered(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "__isregistered", value)

    @_builtins.property
    @pulumi.getter
    def __lazyloading(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Whether the image supports lazy loading. The value can be **true**, **false**, **True**,
        or **False**.
        """
        return pulumi.get(self, "__lazyloading")

    @__lazyloading.setter
    def __lazyloading(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "__lazyloading", value)

    @_builtins.property
    @pulumi.getter
    def __originalimagename(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The father image ID. Public image or private image created through files, value is empty.
        """
        return pulumi.get(self, "__originalimagename")

    @__originalimagename.setter
    def __originalimagename(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "__originalimagename", value)

    @_builtins.property
    @pulumi.getter(name="__osBit")
    def __os_bit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The number of bits in the operating system is usually set to `32` or `64`.
        """
        return pulumi.get(self, "__os_bit")

    @__os_bit.setter
    def __os_bit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "__os_bit", value)

    @_builtins.property
    @pulumi.getter(name="__osFeatureList")
    def __os_feature_list(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The additional attributes of the image. The value is a list (in JSON format) of advanced
        features supported by the image.
        """
        return pulumi.get(self, "__os_feature_list")

    @__os_feature_list.setter
    def __os_feature_list(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "__os_feature_list", value)

    @_builtins.property
    @pulumi.getter
    def __platform(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The classification of image platforms, includes **Windows**, **Ubuntu**, **Red Hat**, **SUSE**,
        **CentOS**, **Debian**, **OpenSUSE**, **Oracle Linux**, **Fedora**, **Other**, **CoreOS**, and **Euler OS**.
        """
        return pulumi.get(self, "__platform")

    @__platform.setter
    def __platform(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "__platform", value)

    @_builtins.property
    @pulumi.getter
    def __productcode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The product ID of the market image.
        """
        return pulumi.get(self, "__productcode")

    @__productcode.setter
    def __productcode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "__productcode", value)

    @_builtins.property
    @pulumi.getter(name="__rootOrigin")
    def __root_origin(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates that the current image source is imported from an external source.
        The value is *file**.
        """
        return pulumi.get(self, "__root_origin")

    @__root_origin.setter
    def __root_origin(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "__root_origin", value)

    @_builtins.property
    @pulumi.getter(name="__sequenceNum")
    def __sequence_num(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the system disk slot position of the cloud server corresponding to the current image.
        """
        return pulumi.get(self, "__sequence_num")

    @__sequence_num.setter
    def __sequence_num(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "__sequence_num", value)

    @_builtins.property
    @pulumi.getter(name="__supportAgentList")
    def __support_agent_list(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The agents configured for the image.
        The valid values are as follows:
        + **hss**: Server security.
        + **ces**: The host monitoring agent is configured for the image.
        """
        return pulumi.get(self, "__support_agent_list")

    @__support_agent_list.setter
    def __support_agent_list(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "__support_agent_list", value)

    @_builtins.property
    @pulumi.getter(name="__supportAmd")
    def __support_amd(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Whether the image uses AMD's x86 architecture. The value can be **true** or **false**.
        """
        return pulumi.get(self, "__support_amd")

    @__support_amd.setter
    def __support_amd(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "__support_amd", value)

    @_builtins.property
    @pulumi.getter(name="__supportArm")
    def __support_arm(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Whether the image uses the Arm architecture. The value can be **true** or **false**.
        """
        return pulumi.get(self, "__support_arm")

    @__support_arm.setter
    def __support_arm(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "__support_arm", value)

    @_builtins.property
    @pulumi.getter(name="__supportDiskintensive")
    def __support_diskintensive(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Whether the image supports disk-intensive ECSs. If yes, the value is **true**.
        """
        return pulumi.get(self, "__support_diskintensive")

    @__support_diskintensive.setter
    def __support_diskintensive(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "__support_diskintensive", value)

    @_builtins.property
    @pulumi.getter(name="__supportFcInject")
    def __support_fc_inject(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Whether the image supports password/private key injection using Cloud-Init.
        If the value is **true**, password/private key injection using Cloud-Init is not supported.
        """
        return pulumi.get(self, "__support_fc_inject")

    @__support_fc_inject.setter
    def __support_fc_inject(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "__support_fc_inject", value)

    @_builtins.property
    @pulumi.getter(name="__supportHighperformance")
    def __support_highperformance(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Whether the image supports high-performance ECSs. If yes, the value is **true**.
        """
        return pulumi.get(self, "__support_highperformance")

    @__support_highperformance.setter
    def __support_highperformance(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "__support_highperformance", value)

    @_builtins.property
    @pulumi.getter(name="__supportKvm")
    def __support_kvm(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Whether the image supports KVM. If yes, the value is **true**.
        """
        return pulumi.get(self, "__support_kvm")

    @__support_kvm.setter
    def __support_kvm(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "__support_kvm", value)

    @_builtins.property
    @pulumi.getter(name="__supportKvmGpuType")
    def __support_kvm_gpu_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Whether the image supports GPU-accelerated ECSs on the KVM platform.
        Please refer to the document link for its value
        [reference](https://support.huaweicloud.com/intl/en-us/api-ims/ims_03_0910.html#ims_03_0910__table282523154017).
        """
        return pulumi.get(self, "__support_kvm_gpu_type")

    @__support_kvm_gpu_type.setter
    def __support_kvm_gpu_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "__support_kvm_gpu_type", value)

    @_builtins.property
    @pulumi.getter(name="__supportKvmHi1822Hisriov")
    def __support_kvm_hi1822_hisriov(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Whether SR-IOV is supported. If supported, the value is **true**.
        """
        return pulumi.get(self, "__support_kvm_hi1822_hisriov")

    @__support_kvm_hi1822_hisriov.setter
    def __support_kvm_hi1822_hisriov(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "__support_kvm_hi1822_hisriov", value)

    @_builtins.property
    @pulumi.getter(name="__supportKvmHi1822Hivirtionet")
    def __support_kvm_hi1822_hivirtionet(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Whether Virtio-Net is supported. If supported, the value is **true**.
        """
        return pulumi.get(self, "__support_kvm_hi1822_hivirtionet")

    @__support_kvm_hi1822_hivirtionet.setter
    def __support_kvm_hi1822_hivirtionet(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "__support_kvm_hi1822_hivirtionet", value)

    @_builtins.property
    @pulumi.getter(name="__supportKvmInfiniband")
    def __support_kvm_infiniband(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Whether the image supports ECSs with InfiniBand NICs on the KVM platform. If yes, the
        value is **true**. This attribute cannot co-exist with `__support_xen`.
        """
        return pulumi.get(self, "__support_kvm_infiniband")

    @__support_kvm_infiniband.setter
    def __support_kvm_infiniband(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "__support_kvm_infiniband", value)

    @_builtins.property
    @pulumi.getter(name="__supportLargememory")
    def __support_largememory(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Whether the image supports large-memory ECSs. If yes, the value is **true**.
        """
        return pulumi.get(self, "__support_largememory")

    @__support_largememory.setter
    def __support_largememory(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "__support_largememory", value)

    @_builtins.property
    @pulumi.getter(name="__supportXen")
    def __support_xen(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Whether the image supports Xen. If yes, the value is **true**.
        """
        return pulumi.get(self, "__support_xen")

    @__support_xen.setter
    def __support_xen(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "__support_xen", value)

    @_builtins.property
    @pulumi.getter(name="__supportXenGpuType")
    def __support_xen_gpu_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Whether the image supports GPU-accelerated ECSs on the Xen platform.
        Please refer to the document link for its value
        [reference](https://support.huaweicloud.com/intl/en-us/api-ims/ims_03_0910.html#ims_03_0910__table65768383152758).
        """
        return pulumi.get(self, "__support_xen_gpu_type")

    @__support_xen_gpu_type.setter
    def __support_xen_gpu_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "__support_xen_gpu_type", value)

    @_builtins.property
    @pulumi.getter(name="__supportXenHana")
    def __support_xen_hana(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Whether the image supports HANA ECSs on the Xen platform. If yes, the value is **true**.
        This attribute cannot co-exist with `__support_xen` and `__support_kvm`.
        """
        return pulumi.get(self, "__support_xen_hana")

    @__support_xen_hana.setter
    def __support_xen_hana(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "__support_xen_hana", value)

    @_builtins.property
    @pulumi.getter(name="__systemSupportMarket")
    def __system_support_market(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether an image can be published in KooGallery.
        The valid values are as follows:
        + **true**: Support.
        + **false**: Not support.
        """
        return pulumi.get(self, "__system_support_market")

    @__system_support_market.setter
    def __system_support_market(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "__system_support_market", value)

    @_builtins.property
    @pulumi.getter(name="activeAt")
    def active_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The time when the image status became active.
        """
        return pulumi.get(self, "active_at")

    @active_at.setter
    def active_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "active_at", value)

    @_builtins.property
    @pulumi.getter
    def architecture(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the schema type of the image. The value can be **x86** or
        **arm**. Defaults to **x86**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "architecture")

    @architecture.setter
    def architecture(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "architecture", value)

    @_builtins.property
    @pulumi.getter(name="cmkId")
    def cmk_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the custom key for creating encrypted image.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cmk_id")

    @cmk_id.setter
    def cmk_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cmk_id", value)

    @_builtins.property
    @pulumi.getter(name="containerFormat")
    def container_format(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The container format.
        """
        return pulumi.get(self, "container_format")

    @container_format.setter
    def container_format(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "container_format", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time, in UTC format.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="dataOrigin")
    def data_origin(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The image source. The format is **file,image_url**.
        """
        return pulumi.get(self, "data_origin")

    @data_origin.setter
    def data_origin(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "data_origin", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the image.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="diskFormat")
    def disk_format(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The image format. The value can be **zvhd2**, **vhd**, **zvhd**, **raw**, **qcow2**, or **iso**.
        """
        return pulumi.get(self, "disk_format")

    @disk_format.setter
    def disk_format(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "disk_format", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID to which the IMS image belongs.
        For enterprise users, if omitted, default enterprise project will be used.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter
    def file(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The image file download and upload links.
        """
        return pulumi.get(self, "file")

    @file.setter
    def file(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "file", value)

    @_builtins.property
    @pulumi.getter(name="hwFirmwareType")
    def hw_firmware_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ECS boot mode.
        The valid values are as follows:
        + **bios**: Indicates the BIOS boot mode.
        + **uefi**: Indicates the UEFI boot mode.
        """
        return pulumi.get(self, "hw_firmware_type")

    @hw_firmware_type.setter
    def hw_firmware_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hw_firmware_type", value)

    @_builtins.property
    @pulumi.getter(name="hwVifMultiqueueEnabled")
    def hw_vif_multiqueue_enabled(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Whether the image supports NIC multi-queue. The value can be **true** or **false**.
        """
        return pulumi.get(self, "hw_vif_multiqueue_enabled")

    @hw_vif_multiqueue_enabled.setter
    def hw_vif_multiqueue_enabled(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hw_vif_multiqueue_enabled", value)

    @_builtins.property
    @pulumi.getter(name="imageSize")
    def image_size(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The size of the image file, in bytes unit.
        """
        return pulumi.get(self, "image_size")

    @image_size.setter
    def image_size(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_size", value)

    @_builtins.property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the URL of the external image file in the OBS bucket, the format
        is **OBS bucket name:image file name**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_url", value)

    @_builtins.property
    @pulumi.getter(name="isConfig")
    def is_config(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to automatically configure. The value can be **true** or
        **false**. Defaults to **false**. Changing this parameter will create a new resource.
        About the content of automatic backend configuration, please refer to
        [API docs](https://support.huaweicloud.com/intl/en-us/ims_faq/ims_faq_0020.html).
        """
        return pulumi.get(self, "is_config")

    @is_config.setter
    def is_config(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_config", value)

    @_builtins.property
    @pulumi.getter(name="isQuickImport")
    def is_quick_import(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to use the image file quick import method to create
        an image. The value can be **true** or **false**. Changing this parameter will create a new resource.
        For constraints and limitations on fast import of image files,
        please refer to [API docs](https://support.huaweicloud.com/intl/en-us/api-ims/ims_03_0605.html).

        > 1. When the `is_quick_import` set to **true**, IMS will not parse the specified external image file, so the
        `os_type`, `os_version`, and `architecture` parameters is based on the specified value.
        <br/>2. When ignoring the `is_quick_import` or set to **false** , IMS will parse the external image file and confirm
        the `os_type`, `os_version`, and `architecture` of the image, if parsing fails, the specified value shall prevail.
        """
        return pulumi.get(self, "is_quick_import")

    @is_quick_import.setter
    def is_quick_import(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_quick_import", value)

    @_builtins.property
    @pulumi.getter(name="maxRam")
    def max_ram(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the maximum memory of the image, in MB unit.
        """
        return pulumi.get(self, "max_ram")

    @max_ram.setter
    def max_ram(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "max_ram", value)

    @_builtins.property
    @pulumi.getter(name="minDisk")
    def min_disk(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the minimum size of the system disk, in GB unit.
        Changing this parameter will create a new resource.
        + When the operating system is Linux, the value ranges from `10` to `1,024`.
        + When the operating system is Windows, the value ranges from `20` to `1,024`.
        """
        return pulumi.get(self, "min_disk")

    @min_disk.setter
    def min_disk(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "min_disk", value)

    @_builtins.property
    @pulumi.getter(name="minRam")
    def min_ram(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the minimum memory of the image, in MB unit.
        """
        return pulumi.get(self, "min_ram")

    @min_ram.setter
    def min_ram(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "min_ram", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the image.
        The valid length is limited from `1` to `128` characters.
        The first and last letters of the name cannot be spaces.
        The name can contain uppercase letters, lowercase letters, numbers, spaces, chinese, and special characters (-._).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="osShutdownTimeout")
    def os_shutdown_timeout(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The timeout duration for a graceful shutdown.
        The value is an integer ranging from `60` to `300`, in seconds. The default value is `60`.
        """
        return pulumi.get(self, "os_shutdown_timeout")

    @os_shutdown_timeout.setter
    def os_shutdown_timeout(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "os_shutdown_timeout", value)

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the operating system type of the image. The value can be
        **Windows** or **Linux**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "os_type")

    @os_type.setter
    def os_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "os_type", value)

    @_builtins.property
    @pulumi.getter(name="osVersion")
    def os_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the operating system version of the image. This field is
        required when `is_quick_import` set to **true**. Changing this parameter will create a new resource.
        For its values, see [API docs](https://support.huaweicloud.com/intl/en-us/api-ims/ims_03_0910.html).
        """
        return pulumi.get(self, "os_version")

    @os_version.setter
    def os_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "os_version", value)

    @_builtins.property
    @pulumi.getter
    def protected(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether the image is protected, and the protected image cannot be deleted. The value can be **true**
        or **false**.
        """
        return pulumi.get(self, "protected")

    @protected.setter
    def protected(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "protected", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def schema(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The image view.
        """
        return pulumi.get(self, "schema")

    @schema.setter
    def schema(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "schema", value)

    @_builtins.property
    @pulumi.getter
    def self(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The image link information.
        """
        return pulumi.get(self, "self")

    @self.setter
    def self(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "self", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The image status.  
        The valid values are as follows:
        + **queued**: Indicates that the image has been successfully created and is waiting to upload the image file.
        + **saving**: Indicates that the image is uploading files to the backend storage.
        + **deleted**: Indicates that the image has been deleted.
        + **killed**: Indicates an image upload error.
        + **active**: Indicates that the image can be used normally.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value pairs to associate with the image.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the image type. The value can be **ECS**, **FusionCompute**, **BMS**,
        or **Ironic**. Defaults to **ECS**. Changing this parameter will create a new resource.
        + Set to **ECS** or **FusionCompute** represent the creation of ECS server image.
        + Set to **BMS** or **Ironic** represent the creation of BMS server image.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The last update time, in UTC format.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter(name="virtualEnvType")
    def virtual_env_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The image usage environment type.
        + If it is a cloud server image, the value is **FusionCompute**.
        + If it is a data disk image, the value is **DataImage**.
        + If it is a bare metal server image, the value is **Ironic**.
        + If it is an ISO image, the value is **IsoImage**.
        """
        return pulumi.get(self, "virtual_env_type")

    @virtual_env_type.setter
    def virtual_env_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "virtual_env_type", value)

    @_builtins.property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Whether other tenants are visible.  
        The valid values are as follows:
        + **private**: Indicates private image.
        + **public**: Indicates public image.
        + **shared**: Indicates shared image.
        """
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "visibility", value)


@pulumi.type_token("huaweicloud:Ims/obsSystemImage:ObsSystemImage")
class ObsSystemImage(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 architecture: Optional[pulumi.Input[_builtins.str]] = None,
                 cmk_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 image_url: Optional[pulumi.Input[_builtins.str]] = None,
                 is_config: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_quick_import: Optional[pulumi.Input[_builtins.bool]] = None,
                 max_ram: Optional[pulumi.Input[_builtins.int]] = None,
                 min_disk: Optional[pulumi.Input[_builtins.int]] = None,
                 min_ram: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 os_type: Optional[pulumi.Input[_builtins.str]] = None,
                 os_version: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an IMS system image resource created from external image file in the OBS bucket within HuaweiCloud.

        ## Example Usage

        ### Creating an IMS system image from an external image file in the OBS bucket

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        image_url = config.require_object("imageUrl")
        min_disk = config.require_object("minDisk")
        test = huaweicloud.ims.ObsSystemImage("test",
            name=name,
            image_url=image_url,
            min_disk=min_disk)
        ```

        ## Import

        The IMS OBS system image resource can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Ims/obsSystemImage:ObsSystemImage test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `type`, `is_config`, `is_quick_import`.

        It is generally recommended running `pulumi preview` after importing the resource. You can then decide if changes should

        be applied to the resource, or the resource definition should be updated to align with the image. Also, you can ignore

        changes as below.

        resource "huaweicloud_ims_obs_system_image" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              type, is_config, is_quick_import,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] architecture: Specifies the schema type of the image. The value can be **x86** or
               **arm**. Defaults to **x86**. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] cmk_id: Specifies the custom key for creating encrypted image.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the image.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the IMS image belongs.
               For enterprise users, if omitted, default enterprise project will be used.
        :param pulumi.Input[_builtins.str] image_url: Specifies the URL of the external image file in the OBS bucket, the format
               is **OBS bucket name:image file name**. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] is_config: Specifies whether to automatically configure. The value can be **true** or
               **false**. Defaults to **false**. Changing this parameter will create a new resource.
               About the content of automatic backend configuration, please refer to
               [API docs](https://support.huaweicloud.com/intl/en-us/ims_faq/ims_faq_0020.html).
        :param pulumi.Input[_builtins.bool] is_quick_import: Specifies whether to use the image file quick import method to create
               an image. The value can be **true** or **false**. Changing this parameter will create a new resource.
               For constraints and limitations on fast import of image files,
               please refer to [API docs](https://support.huaweicloud.com/intl/en-us/api-ims/ims_03_0605.html).
               
               > 1. When the `is_quick_import` set to **true**, IMS will not parse the specified external image file, so the
               `os_type`, `os_version`, and `architecture` parameters is based on the specified value.
               <br/>2. When ignoring the `is_quick_import` or set to **false** , IMS will parse the external image file and confirm
               the `os_type`, `os_version`, and `architecture` of the image, if parsing fails, the specified value shall prevail.
        :param pulumi.Input[_builtins.int] max_ram: Specifies the maximum memory of the image, in MB unit.
        :param pulumi.Input[_builtins.int] min_disk: Specifies the minimum size of the system disk, in GB unit.
               Changing this parameter will create a new resource.
               + When the operating system is Linux, the value ranges from `10` to `1,024`.
               + When the operating system is Windows, the value ranges from `20` to `1,024`.
        :param pulumi.Input[_builtins.int] min_ram: Specifies the minimum memory of the image, in MB unit.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the image.
               The valid length is limited from `1` to `128` characters.
               The first and last letters of the name cannot be spaces.
               The name can contain uppercase letters, lowercase letters, numbers, spaces, chinese, and special characters (-._).
        :param pulumi.Input[_builtins.str] os_type: Specifies the operating system type of the image. The value can be
               **Windows** or **Linux**. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] os_version: Specifies the operating system version of the image. This field is
               required when `is_quick_import` set to **true**. Changing this parameter will create a new resource.
               For its values, see [API docs](https://support.huaweicloud.com/intl/en-us/api-ims/ims_03_0910.html).
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the image.
        :param pulumi.Input[_builtins.str] type: Specifies the image type. The value can be **ECS**, **FusionCompute**, **BMS**,
               or **Ironic**. Defaults to **ECS**. Changing this parameter will create a new resource.
               + Set to **ECS** or **FusionCompute** represent the creation of ECS server image.
               + Set to **BMS** or **Ironic** represent the creation of BMS server image.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ObsSystemImageArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an IMS system image resource created from external image file in the OBS bucket within HuaweiCloud.

        ## Example Usage

        ### Creating an IMS system image from an external image file in the OBS bucket

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        image_url = config.require_object("imageUrl")
        min_disk = config.require_object("minDisk")
        test = huaweicloud.ims.ObsSystemImage("test",
            name=name,
            image_url=image_url,
            min_disk=min_disk)
        ```

        ## Import

        The IMS OBS system image resource can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Ims/obsSystemImage:ObsSystemImage test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `type`, `is_config`, `is_quick_import`.

        It is generally recommended running `pulumi preview` after importing the resource. You can then decide if changes should

        be applied to the resource, or the resource definition should be updated to align with the image. Also, you can ignore

        changes as below.

        resource "huaweicloud_ims_obs_system_image" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              type, is_config, is_quick_import,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param ObsSystemImageArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ObsSystemImageArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 architecture: Optional[pulumi.Input[_builtins.str]] = None,
                 cmk_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 image_url: Optional[pulumi.Input[_builtins.str]] = None,
                 is_config: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_quick_import: Optional[pulumi.Input[_builtins.bool]] = None,
                 max_ram: Optional[pulumi.Input[_builtins.int]] = None,
                 min_disk: Optional[pulumi.Input[_builtins.int]] = None,
                 min_ram: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 os_type: Optional[pulumi.Input[_builtins.str]] = None,
                 os_version: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ObsSystemImageArgs.__new__(ObsSystemImageArgs)

            __props__.__dict__["architecture"] = architecture
            __props__.__dict__["cmk_id"] = cmk_id
            __props__.__dict__["description"] = description
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            if image_url is None and not opts.urn:
                raise TypeError("Missing required property 'image_url'")
            __props__.__dict__["image_url"] = image_url
            __props__.__dict__["is_config"] = is_config
            __props__.__dict__["is_quick_import"] = is_quick_import
            __props__.__dict__["max_ram"] = max_ram
            if min_disk is None and not opts.urn:
                raise TypeError("Missing required property 'min_disk'")
            __props__.__dict__["min_disk"] = min_disk
            __props__.__dict__["min_ram"] = min_ram
            __props__.__dict__["name"] = name
            __props__.__dict__["os_type"] = os_type
            __props__.__dict__["os_version"] = os_version
            __props__.__dict__["region"] = region
            __props__.__dict__["tags"] = tags
            __props__.__dict__["type"] = type
            __props__.__dict__["__account_code"] = None
            __props__.__dict__["__backup_id"] = None
            __props__.__dict__["__image_displayname"] = None
            __props__.__dict__["__image_source_type"] = None
            __props__.__dict__["__imagetype"] = None
            __props__.__dict__["__is_offshelved"] = None
            __props__.__dict__["__isregistered"] = None
            __props__.__dict__["__lazyloading"] = None
            __props__.__dict__["__originalimagename"] = None
            __props__.__dict__["__os_bit"] = None
            __props__.__dict__["__os_feature_list"] = None
            __props__.__dict__["__platform"] = None
            __props__.__dict__["__productcode"] = None
            __props__.__dict__["__root_origin"] = None
            __props__.__dict__["__sequence_num"] = None
            __props__.__dict__["__support_agent_list"] = None
            __props__.__dict__["__support_amd"] = None
            __props__.__dict__["__support_arm"] = None
            __props__.__dict__["__support_diskintensive"] = None
            __props__.__dict__["__support_fc_inject"] = None
            __props__.__dict__["__support_highperformance"] = None
            __props__.__dict__["__support_kvm"] = None
            __props__.__dict__["__support_kvm_gpu_type"] = None
            __props__.__dict__["__support_kvm_hi1822_hisriov"] = None
            __props__.__dict__["__support_kvm_hi1822_hivirtionet"] = None
            __props__.__dict__["__support_kvm_infiniband"] = None
            __props__.__dict__["__support_largememory"] = None
            __props__.__dict__["__support_xen"] = None
            __props__.__dict__["__support_xen_gpu_type"] = None
            __props__.__dict__["__support_xen_hana"] = None
            __props__.__dict__["__system_support_market"] = None
            __props__.__dict__["active_at"] = None
            __props__.__dict__["container_format"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["data_origin"] = None
            __props__.__dict__["disk_format"] = None
            __props__.__dict__["file"] = None
            __props__.__dict__["hw_firmware_type"] = None
            __props__.__dict__["hw_vif_multiqueue_enabled"] = None
            __props__.__dict__["image_size"] = None
            __props__.__dict__["os_shutdown_timeout"] = None
            __props__.__dict__["protected"] = None
            __props__.__dict__["schema"] = None
            __props__.__dict__["self"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["updated_at"] = None
            __props__.__dict__["virtual_env_type"] = None
            __props__.__dict__["visibility"] = None
        super(ObsSystemImage, __self__).__init__(
            'huaweicloud:Ims/obsSystemImage:ObsSystemImage',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            __account_code: Optional[pulumi.Input[_builtins.str]] = None,
            __backup_id: Optional[pulumi.Input[_builtins.str]] = None,
            __image_displayname: Optional[pulumi.Input[_builtins.str]] = None,
            __image_source_type: Optional[pulumi.Input[_builtins.str]] = None,
            __imagetype: Optional[pulumi.Input[_builtins.str]] = None,
            __is_offshelved: Optional[pulumi.Input[_builtins.str]] = None,
            __isregistered: Optional[pulumi.Input[_builtins.str]] = None,
            __lazyloading: Optional[pulumi.Input[_builtins.str]] = None,
            __originalimagename: Optional[pulumi.Input[_builtins.str]] = None,
            __os_bit: Optional[pulumi.Input[_builtins.str]] = None,
            __os_feature_list: Optional[pulumi.Input[_builtins.str]] = None,
            __platform: Optional[pulumi.Input[_builtins.str]] = None,
            __productcode: Optional[pulumi.Input[_builtins.str]] = None,
            __root_origin: Optional[pulumi.Input[_builtins.str]] = None,
            __sequence_num: Optional[pulumi.Input[_builtins.str]] = None,
            __support_agent_list: Optional[pulumi.Input[_builtins.str]] = None,
            __support_amd: Optional[pulumi.Input[_builtins.str]] = None,
            __support_arm: Optional[pulumi.Input[_builtins.str]] = None,
            __support_diskintensive: Optional[pulumi.Input[_builtins.str]] = None,
            __support_fc_inject: Optional[pulumi.Input[_builtins.str]] = None,
            __support_highperformance: Optional[pulumi.Input[_builtins.str]] = None,
            __support_kvm: Optional[pulumi.Input[_builtins.str]] = None,
            __support_kvm_gpu_type: Optional[pulumi.Input[_builtins.str]] = None,
            __support_kvm_hi1822_hisriov: Optional[pulumi.Input[_builtins.str]] = None,
            __support_kvm_hi1822_hivirtionet: Optional[pulumi.Input[_builtins.str]] = None,
            __support_kvm_infiniband: Optional[pulumi.Input[_builtins.str]] = None,
            __support_largememory: Optional[pulumi.Input[_builtins.str]] = None,
            __support_xen: Optional[pulumi.Input[_builtins.str]] = None,
            __support_xen_gpu_type: Optional[pulumi.Input[_builtins.str]] = None,
            __support_xen_hana: Optional[pulumi.Input[_builtins.str]] = None,
            __system_support_market: Optional[pulumi.Input[_builtins.bool]] = None,
            active_at: Optional[pulumi.Input[_builtins.str]] = None,
            architecture: Optional[pulumi.Input[_builtins.str]] = None,
            cmk_id: Optional[pulumi.Input[_builtins.str]] = None,
            container_format: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            data_origin: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            disk_format: Optional[pulumi.Input[_builtins.str]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            file: Optional[pulumi.Input[_builtins.str]] = None,
            hw_firmware_type: Optional[pulumi.Input[_builtins.str]] = None,
            hw_vif_multiqueue_enabled: Optional[pulumi.Input[_builtins.str]] = None,
            image_size: Optional[pulumi.Input[_builtins.str]] = None,
            image_url: Optional[pulumi.Input[_builtins.str]] = None,
            is_config: Optional[pulumi.Input[_builtins.bool]] = None,
            is_quick_import: Optional[pulumi.Input[_builtins.bool]] = None,
            max_ram: Optional[pulumi.Input[_builtins.int]] = None,
            min_disk: Optional[pulumi.Input[_builtins.int]] = None,
            min_ram: Optional[pulumi.Input[_builtins.int]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            os_shutdown_timeout: Optional[pulumi.Input[_builtins.str]] = None,
            os_type: Optional[pulumi.Input[_builtins.str]] = None,
            os_version: Optional[pulumi.Input[_builtins.str]] = None,
            protected: Optional[pulumi.Input[_builtins.bool]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            schema: Optional[pulumi.Input[_builtins.str]] = None,
            self: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            virtual_env_type: Optional[pulumi.Input[_builtins.str]] = None,
            visibility: Optional[pulumi.Input[_builtins.str]] = None) -> 'ObsSystemImage':
        """
        Get an existing ObsSystemImage resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] __account_code: The charging identifier for the image.
        :param pulumi.Input[_builtins.str] __backup_id: The backup ID. If the image is not created by backup, the value is empty.
        :param pulumi.Input[_builtins.str] __image_displayname: The name for external display.
        :param pulumi.Input[_builtins.str] __image_source_type: The image backend storage type, currently supports **uds**.
        :param pulumi.Input[_builtins.str] __imagetype: The image type. Currently supporting **gold**, **private**, **shared**, and **market**.
        :param pulumi.Input[_builtins.str] __is_offshelved: Whether the KooGallery image has been taken offline.
               The valid values are as follows:
               + **true**: Removed.
               + **false**: Not taken down.
        :param pulumi.Input[_builtins.str] __isregistered: Is it a registered image with a value of **true** or **false**.
        :param pulumi.Input[_builtins.str] __lazyloading: Whether the image supports lazy loading. The value can be **true**, **false**, **True**,
               or **False**.
        :param pulumi.Input[_builtins.str] __originalimagename: The father image ID. Public image or private image created through files, value is empty.
        :param pulumi.Input[_builtins.str] __os_bit: The number of bits in the operating system is usually set to `32` or `64`.
        :param pulumi.Input[_builtins.str] __os_feature_list: The additional attributes of the image. The value is a list (in JSON format) of advanced
               features supported by the image.
        :param pulumi.Input[_builtins.str] __platform: The classification of image platforms, includes **Windows**, **Ubuntu**, **Red Hat**, **SUSE**,
               **CentOS**, **Debian**, **OpenSUSE**, **Oracle Linux**, **Fedora**, **Other**, **CoreOS**, and **Euler OS**.
        :param pulumi.Input[_builtins.str] __productcode: The product ID of the market image.
        :param pulumi.Input[_builtins.str] __root_origin: Indicates that the current image source is imported from an external source.
               The value is *file**.
        :param pulumi.Input[_builtins.str] __sequence_num: Indicates the system disk slot position of the cloud server corresponding to the current image.
        :param pulumi.Input[_builtins.str] __support_agent_list: The agents configured for the image.
               The valid values are as follows:
               + **hss**: Server security.
               + **ces**: The host monitoring agent is configured for the image.
        :param pulumi.Input[_builtins.str] __support_amd: Whether the image uses AMD's x86 architecture. The value can be **true** or **false**.
        :param pulumi.Input[_builtins.str] __support_arm: Whether the image uses the Arm architecture. The value can be **true** or **false**.
        :param pulumi.Input[_builtins.str] __support_diskintensive: Whether the image supports disk-intensive ECSs. If yes, the value is **true**.
        :param pulumi.Input[_builtins.str] __support_fc_inject: Whether the image supports password/private key injection using Cloud-Init.
               If the value is **true**, password/private key injection using Cloud-Init is not supported.
        :param pulumi.Input[_builtins.str] __support_highperformance: Whether the image supports high-performance ECSs. If yes, the value is **true**.
        :param pulumi.Input[_builtins.str] __support_kvm: Whether the image supports KVM. If yes, the value is **true**.
        :param pulumi.Input[_builtins.str] __support_kvm_gpu_type: Whether the image supports GPU-accelerated ECSs on the KVM platform.
               Please refer to the document link for its value
               [reference](https://support.huaweicloud.com/intl/en-us/api-ims/ims_03_0910.html#ims_03_0910__table282523154017).
        :param pulumi.Input[_builtins.str] __support_kvm_hi1822_hisriov: Whether SR-IOV is supported. If supported, the value is **true**.
        :param pulumi.Input[_builtins.str] __support_kvm_hi1822_hivirtionet: Whether Virtio-Net is supported. If supported, the value is **true**.
        :param pulumi.Input[_builtins.str] __support_kvm_infiniband: Whether the image supports ECSs with InfiniBand NICs on the KVM platform. If yes, the
               value is **true**. This attribute cannot co-exist with `__support_xen`.
        :param pulumi.Input[_builtins.str] __support_largememory: Whether the image supports large-memory ECSs. If yes, the value is **true**.
        :param pulumi.Input[_builtins.str] __support_xen: Whether the image supports Xen. If yes, the value is **true**.
        :param pulumi.Input[_builtins.str] __support_xen_gpu_type: Whether the image supports GPU-accelerated ECSs on the Xen platform.
               Please refer to the document link for its value
               [reference](https://support.huaweicloud.com/intl/en-us/api-ims/ims_03_0910.html#ims_03_0910__table65768383152758).
        :param pulumi.Input[_builtins.str] __support_xen_hana: Whether the image supports HANA ECSs on the Xen platform. If yes, the value is **true**.
               This attribute cannot co-exist with `__support_xen` and `__support_kvm`.
        :param pulumi.Input[_builtins.bool] __system_support_market: Whether an image can be published in KooGallery.
               The valid values are as follows:
               + **true**: Support.
               + **false**: Not support.
        :param pulumi.Input[_builtins.str] active_at: The time when the image status became active.
        :param pulumi.Input[_builtins.str] architecture: Specifies the schema type of the image. The value can be **x86** or
               **arm**. Defaults to **x86**. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] cmk_id: Specifies the custom key for creating encrypted image.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] container_format: The container format.
        :param pulumi.Input[_builtins.str] created_at: The creation time, in UTC format.
        :param pulumi.Input[_builtins.str] data_origin: The image source. The format is **file,image_url**.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the image.
        :param pulumi.Input[_builtins.str] disk_format: The image format. The value can be **zvhd2**, **vhd**, **zvhd**, **raw**, **qcow2**, or **iso**.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the IMS image belongs.
               For enterprise users, if omitted, default enterprise project will be used.
        :param pulumi.Input[_builtins.str] file: The image file download and upload links.
        :param pulumi.Input[_builtins.str] hw_firmware_type: The ECS boot mode.
               The valid values are as follows:
               + **bios**: Indicates the BIOS boot mode.
               + **uefi**: Indicates the UEFI boot mode.
        :param pulumi.Input[_builtins.str] hw_vif_multiqueue_enabled: Whether the image supports NIC multi-queue. The value can be **true** or **false**.
        :param pulumi.Input[_builtins.str] image_size: The size of the image file, in bytes unit.
        :param pulumi.Input[_builtins.str] image_url: Specifies the URL of the external image file in the OBS bucket, the format
               is **OBS bucket name:image file name**. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.bool] is_config: Specifies whether to automatically configure. The value can be **true** or
               **false**. Defaults to **false**. Changing this parameter will create a new resource.
               About the content of automatic backend configuration, please refer to
               [API docs](https://support.huaweicloud.com/intl/en-us/ims_faq/ims_faq_0020.html).
        :param pulumi.Input[_builtins.bool] is_quick_import: Specifies whether to use the image file quick import method to create
               an image. The value can be **true** or **false**. Changing this parameter will create a new resource.
               For constraints and limitations on fast import of image files,
               please refer to [API docs](https://support.huaweicloud.com/intl/en-us/api-ims/ims_03_0605.html).
               
               > 1. When the `is_quick_import` set to **true**, IMS will not parse the specified external image file, so the
               `os_type`, `os_version`, and `architecture` parameters is based on the specified value.
               <br/>2. When ignoring the `is_quick_import` or set to **false** , IMS will parse the external image file and confirm
               the `os_type`, `os_version`, and `architecture` of the image, if parsing fails, the specified value shall prevail.
        :param pulumi.Input[_builtins.int] max_ram: Specifies the maximum memory of the image, in MB unit.
        :param pulumi.Input[_builtins.int] min_disk: Specifies the minimum size of the system disk, in GB unit.
               Changing this parameter will create a new resource.
               + When the operating system is Linux, the value ranges from `10` to `1,024`.
               + When the operating system is Windows, the value ranges from `20` to `1,024`.
        :param pulumi.Input[_builtins.int] min_ram: Specifies the minimum memory of the image, in MB unit.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the image.
               The valid length is limited from `1` to `128` characters.
               The first and last letters of the name cannot be spaces.
               The name can contain uppercase letters, lowercase letters, numbers, spaces, chinese, and special characters (-._).
        :param pulumi.Input[_builtins.str] os_shutdown_timeout: The timeout duration for a graceful shutdown.
               The value is an integer ranging from `60` to `300`, in seconds. The default value is `60`.
        :param pulumi.Input[_builtins.str] os_type: Specifies the operating system type of the image. The value can be
               **Windows** or **Linux**. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] os_version: Specifies the operating system version of the image. This field is
               required when `is_quick_import` set to **true**. Changing this parameter will create a new resource.
               For its values, see [API docs](https://support.huaweicloud.com/intl/en-us/api-ims/ims_03_0910.html).
        :param pulumi.Input[_builtins.bool] protected: Whether the image is protected, and the protected image cannot be deleted. The value can be **true**
               or **false**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] schema: The image view.
        :param pulumi.Input[_builtins.str] self: The image link information.
        :param pulumi.Input[_builtins.str] status: The image status.  
               The valid values are as follows:
               + **queued**: Indicates that the image has been successfully created and is waiting to upload the image file.
               + **saving**: Indicates that the image is uploading files to the backend storage.
               + **deleted**: Indicates that the image has been deleted.
               + **killed**: Indicates an image upload error.
               + **active**: Indicates that the image can be used normally.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the image.
        :param pulumi.Input[_builtins.str] type: Specifies the image type. The value can be **ECS**, **FusionCompute**, **BMS**,
               or **Ironic**. Defaults to **ECS**. Changing this parameter will create a new resource.
               + Set to **ECS** or **FusionCompute** represent the creation of ECS server image.
               + Set to **BMS** or **Ironic** represent the creation of BMS server image.
        :param pulumi.Input[_builtins.str] updated_at: The last update time, in UTC format.
        :param pulumi.Input[_builtins.str] virtual_env_type: The image usage environment type.
               + If it is a cloud server image, the value is **FusionCompute**.
               + If it is a data disk image, the value is **DataImage**.
               + If it is a bare metal server image, the value is **Ironic**.
               + If it is an ISO image, the value is **IsoImage**.
        :param pulumi.Input[_builtins.str] visibility: Whether other tenants are visible.  
               The valid values are as follows:
               + **private**: Indicates private image.
               + **public**: Indicates public image.
               + **shared**: Indicates shared image.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ObsSystemImageState.__new__(_ObsSystemImageState)

        __props__.__dict__["__account_code"] = __account_code
        __props__.__dict__["__backup_id"] = __backup_id
        __props__.__dict__["__image_displayname"] = __image_displayname
        __props__.__dict__["__image_source_type"] = __image_source_type
        __props__.__dict__["__imagetype"] = __imagetype
        __props__.__dict__["__is_offshelved"] = __is_offshelved
        __props__.__dict__["__isregistered"] = __isregistered
        __props__.__dict__["__lazyloading"] = __lazyloading
        __props__.__dict__["__originalimagename"] = __originalimagename
        __props__.__dict__["__os_bit"] = __os_bit
        __props__.__dict__["__os_feature_list"] = __os_feature_list
        __props__.__dict__["__platform"] = __platform
        __props__.__dict__["__productcode"] = __productcode
        __props__.__dict__["__root_origin"] = __root_origin
        __props__.__dict__["__sequence_num"] = __sequence_num
        __props__.__dict__["__support_agent_list"] = __support_agent_list
        __props__.__dict__["__support_amd"] = __support_amd
        __props__.__dict__["__support_arm"] = __support_arm
        __props__.__dict__["__support_diskintensive"] = __support_diskintensive
        __props__.__dict__["__support_fc_inject"] = __support_fc_inject
        __props__.__dict__["__support_highperformance"] = __support_highperformance
        __props__.__dict__["__support_kvm"] = __support_kvm
        __props__.__dict__["__support_kvm_gpu_type"] = __support_kvm_gpu_type
        __props__.__dict__["__support_kvm_hi1822_hisriov"] = __support_kvm_hi1822_hisriov
        __props__.__dict__["__support_kvm_hi1822_hivirtionet"] = __support_kvm_hi1822_hivirtionet
        __props__.__dict__["__support_kvm_infiniband"] = __support_kvm_infiniband
        __props__.__dict__["__support_largememory"] = __support_largememory
        __props__.__dict__["__support_xen"] = __support_xen
        __props__.__dict__["__support_xen_gpu_type"] = __support_xen_gpu_type
        __props__.__dict__["__support_xen_hana"] = __support_xen_hana
        __props__.__dict__["__system_support_market"] = __system_support_market
        __props__.__dict__["active_at"] = active_at
        __props__.__dict__["architecture"] = architecture
        __props__.__dict__["cmk_id"] = cmk_id
        __props__.__dict__["container_format"] = container_format
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["data_origin"] = data_origin
        __props__.__dict__["description"] = description
        __props__.__dict__["disk_format"] = disk_format
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["file"] = file
        __props__.__dict__["hw_firmware_type"] = hw_firmware_type
        __props__.__dict__["hw_vif_multiqueue_enabled"] = hw_vif_multiqueue_enabled
        __props__.__dict__["image_size"] = image_size
        __props__.__dict__["image_url"] = image_url
        __props__.__dict__["is_config"] = is_config
        __props__.__dict__["is_quick_import"] = is_quick_import
        __props__.__dict__["max_ram"] = max_ram
        __props__.__dict__["min_disk"] = min_disk
        __props__.__dict__["min_ram"] = min_ram
        __props__.__dict__["name"] = name
        __props__.__dict__["os_shutdown_timeout"] = os_shutdown_timeout
        __props__.__dict__["os_type"] = os_type
        __props__.__dict__["os_version"] = os_version
        __props__.__dict__["protected"] = protected
        __props__.__dict__["region"] = region
        __props__.__dict__["schema"] = schema
        __props__.__dict__["self"] = self
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["type"] = type
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["virtual_env_type"] = virtual_env_type
        __props__.__dict__["visibility"] = visibility
        return ObsSystemImage(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="__accountCode")
    def __account_code(self) -> pulumi.Output[_builtins.str]:
        """
        The charging identifier for the image.
        """
        return pulumi.get(self, "__account_code")

    @_builtins.property
    @pulumi.getter(name="__backupId")
    def __backup_id(self) -> pulumi.Output[_builtins.str]:
        """
        The backup ID. If the image is not created by backup, the value is empty.
        """
        return pulumi.get(self, "__backup_id")

    @_builtins.property
    @pulumi.getter(name="__imageDisplayname")
    def __image_displayname(self) -> pulumi.Output[_builtins.str]:
        """
        The name for external display.
        """
        return pulumi.get(self, "__image_displayname")

    @_builtins.property
    @pulumi.getter(name="__imageSourceType")
    def __image_source_type(self) -> pulumi.Output[_builtins.str]:
        """
        The image backend storage type, currently supports **uds**.
        """
        return pulumi.get(self, "__image_source_type")

    @_builtins.property
    @pulumi.getter
    def __imagetype(self) -> pulumi.Output[_builtins.str]:
        """
        The image type. Currently supporting **gold**, **private**, **shared**, and **market**.
        """
        return pulumi.get(self, "__imagetype")

    @_builtins.property
    @pulumi.getter(name="__isOffshelved")
    def __is_offshelved(self) -> pulumi.Output[_builtins.str]:
        """
        Whether the KooGallery image has been taken offline.
        The valid values are as follows:
        + **true**: Removed.
        + **false**: Not taken down.
        """
        return pulumi.get(self, "__is_offshelved")

    @_builtins.property
    @pulumi.getter
    def __isregistered(self) -> pulumi.Output[_builtins.str]:
        """
        Is it a registered image with a value of **true** or **false**.
        """
        return pulumi.get(self, "__isregistered")

    @_builtins.property
    @pulumi.getter
    def __lazyloading(self) -> pulumi.Output[_builtins.str]:
        """
        Whether the image supports lazy loading. The value can be **true**, **false**, **True**,
        or **False**.
        """
        return pulumi.get(self, "__lazyloading")

    @_builtins.property
    @pulumi.getter
    def __originalimagename(self) -> pulumi.Output[_builtins.str]:
        """
        The father image ID. Public image or private image created through files, value is empty.
        """
        return pulumi.get(self, "__originalimagename")

    @_builtins.property
    @pulumi.getter(name="__osBit")
    def __os_bit(self) -> pulumi.Output[_builtins.str]:
        """
        The number of bits in the operating system is usually set to `32` or `64`.
        """
        return pulumi.get(self, "__os_bit")

    @_builtins.property
    @pulumi.getter(name="__osFeatureList")
    def __os_feature_list(self) -> pulumi.Output[_builtins.str]:
        """
        The additional attributes of the image. The value is a list (in JSON format) of advanced
        features supported by the image.
        """
        return pulumi.get(self, "__os_feature_list")

    @_builtins.property
    @pulumi.getter
    def __platform(self) -> pulumi.Output[_builtins.str]:
        """
        The classification of image platforms, includes **Windows**, **Ubuntu**, **Red Hat**, **SUSE**,
        **CentOS**, **Debian**, **OpenSUSE**, **Oracle Linux**, **Fedora**, **Other**, **CoreOS**, and **Euler OS**.
        """
        return pulumi.get(self, "__platform")

    @_builtins.property
    @pulumi.getter
    def __productcode(self) -> pulumi.Output[_builtins.str]:
        """
        The product ID of the market image.
        """
        return pulumi.get(self, "__productcode")

    @_builtins.property
    @pulumi.getter(name="__rootOrigin")
    def __root_origin(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates that the current image source is imported from an external source.
        The value is *file**.
        """
        return pulumi.get(self, "__root_origin")

    @_builtins.property
    @pulumi.getter(name="__sequenceNum")
    def __sequence_num(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the system disk slot position of the cloud server corresponding to the current image.
        """
        return pulumi.get(self, "__sequence_num")

    @_builtins.property
    @pulumi.getter(name="__supportAgentList")
    def __support_agent_list(self) -> pulumi.Output[_builtins.str]:
        """
        The agents configured for the image.
        The valid values are as follows:
        + **hss**: Server security.
        + **ces**: The host monitoring agent is configured for the image.
        """
        return pulumi.get(self, "__support_agent_list")

    @_builtins.property
    @pulumi.getter(name="__supportAmd")
    def __support_amd(self) -> pulumi.Output[_builtins.str]:
        """
        Whether the image uses AMD's x86 architecture. The value can be **true** or **false**.
        """
        return pulumi.get(self, "__support_amd")

    @_builtins.property
    @pulumi.getter(name="__supportArm")
    def __support_arm(self) -> pulumi.Output[_builtins.str]:
        """
        Whether the image uses the Arm architecture. The value can be **true** or **false**.
        """
        return pulumi.get(self, "__support_arm")

    @_builtins.property
    @pulumi.getter(name="__supportDiskintensive")
    def __support_diskintensive(self) -> pulumi.Output[_builtins.str]:
        """
        Whether the image supports disk-intensive ECSs. If yes, the value is **true**.
        """
        return pulumi.get(self, "__support_diskintensive")

    @_builtins.property
    @pulumi.getter(name="__supportFcInject")
    def __support_fc_inject(self) -> pulumi.Output[_builtins.str]:
        """
        Whether the image supports password/private key injection using Cloud-Init.
        If the value is **true**, password/private key injection using Cloud-Init is not supported.
        """
        return pulumi.get(self, "__support_fc_inject")

    @_builtins.property
    @pulumi.getter(name="__supportHighperformance")
    def __support_highperformance(self) -> pulumi.Output[_builtins.str]:
        """
        Whether the image supports high-performance ECSs. If yes, the value is **true**.
        """
        return pulumi.get(self, "__support_highperformance")

    @_builtins.property
    @pulumi.getter(name="__supportKvm")
    def __support_kvm(self) -> pulumi.Output[_builtins.str]:
        """
        Whether the image supports KVM. If yes, the value is **true**.
        """
        return pulumi.get(self, "__support_kvm")

    @_builtins.property
    @pulumi.getter(name="__supportKvmGpuType")
    def __support_kvm_gpu_type(self) -> pulumi.Output[_builtins.str]:
        """
        Whether the image supports GPU-accelerated ECSs on the KVM platform.
        Please refer to the document link for its value
        [reference](https://support.huaweicloud.com/intl/en-us/api-ims/ims_03_0910.html#ims_03_0910__table282523154017).
        """
        return pulumi.get(self, "__support_kvm_gpu_type")

    @_builtins.property
    @pulumi.getter(name="__supportKvmHi1822Hisriov")
    def __support_kvm_hi1822_hisriov(self) -> pulumi.Output[_builtins.str]:
        """
        Whether SR-IOV is supported. If supported, the value is **true**.
        """
        return pulumi.get(self, "__support_kvm_hi1822_hisriov")

    @_builtins.property
    @pulumi.getter(name="__supportKvmHi1822Hivirtionet")
    def __support_kvm_hi1822_hivirtionet(self) -> pulumi.Output[_builtins.str]:
        """
        Whether Virtio-Net is supported. If supported, the value is **true**.
        """
        return pulumi.get(self, "__support_kvm_hi1822_hivirtionet")

    @_builtins.property
    @pulumi.getter(name="__supportKvmInfiniband")
    def __support_kvm_infiniband(self) -> pulumi.Output[_builtins.str]:
        """
        Whether the image supports ECSs with InfiniBand NICs on the KVM platform. If yes, the
        value is **true**. This attribute cannot co-exist with `__support_xen`.
        """
        return pulumi.get(self, "__support_kvm_infiniband")

    @_builtins.property
    @pulumi.getter(name="__supportLargememory")
    def __support_largememory(self) -> pulumi.Output[_builtins.str]:
        """
        Whether the image supports large-memory ECSs. If yes, the value is **true**.
        """
        return pulumi.get(self, "__support_largememory")

    @_builtins.property
    @pulumi.getter(name="__supportXen")
    def __support_xen(self) -> pulumi.Output[_builtins.str]:
        """
        Whether the image supports Xen. If yes, the value is **true**.
        """
        return pulumi.get(self, "__support_xen")

    @_builtins.property
    @pulumi.getter(name="__supportXenGpuType")
    def __support_xen_gpu_type(self) -> pulumi.Output[_builtins.str]:
        """
        Whether the image supports GPU-accelerated ECSs on the Xen platform.
        Please refer to the document link for its value
        [reference](https://support.huaweicloud.com/intl/en-us/api-ims/ims_03_0910.html#ims_03_0910__table65768383152758).
        """
        return pulumi.get(self, "__support_xen_gpu_type")

    @_builtins.property
    @pulumi.getter(name="__supportXenHana")
    def __support_xen_hana(self) -> pulumi.Output[_builtins.str]:
        """
        Whether the image supports HANA ECSs on the Xen platform. If yes, the value is **true**.
        This attribute cannot co-exist with `__support_xen` and `__support_kvm`.
        """
        return pulumi.get(self, "__support_xen_hana")

    @_builtins.property
    @pulumi.getter(name="__systemSupportMarket")
    def __system_support_market(self) -> pulumi.Output[_builtins.bool]:
        """
        Whether an image can be published in KooGallery.
        The valid values are as follows:
        + **true**: Support.
        + **false**: Not support.
        """
        return pulumi.get(self, "__system_support_market")

    @_builtins.property
    @pulumi.getter(name="activeAt")
    def active_at(self) -> pulumi.Output[_builtins.str]:
        """
        The time when the image status became active.
        """
        return pulumi.get(self, "active_at")

    @_builtins.property
    @pulumi.getter
    def architecture(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the schema type of the image. The value can be **x86** or
        **arm**. Defaults to **x86**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "architecture")

    @_builtins.property
    @pulumi.getter(name="cmkId")
    def cmk_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the custom key for creating encrypted image.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cmk_id")

    @_builtins.property
    @pulumi.getter(name="containerFormat")
    def container_format(self) -> pulumi.Output[_builtins.str]:
        """
        The container format.
        """
        return pulumi.get(self, "container_format")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The creation time, in UTC format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="dataOrigin")
    def data_origin(self) -> pulumi.Output[_builtins.str]:
        """
        The image source. The format is **file,image_url**.
        """
        return pulumi.get(self, "data_origin")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of the image.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="diskFormat")
    def disk_format(self) -> pulumi.Output[_builtins.str]:
        """
        The image format. The value can be **zvhd2**, **vhd**, **zvhd**, **raw**, **qcow2**, or **iso**.
        """
        return pulumi.get(self, "disk_format")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the enterprise project ID to which the IMS image belongs.
        For enterprise users, if omitted, default enterprise project will be used.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def file(self) -> pulumi.Output[_builtins.str]:
        """
        The image file download and upload links.
        """
        return pulumi.get(self, "file")

    @_builtins.property
    @pulumi.getter(name="hwFirmwareType")
    def hw_firmware_type(self) -> pulumi.Output[_builtins.str]:
        """
        The ECS boot mode.
        The valid values are as follows:
        + **bios**: Indicates the BIOS boot mode.
        + **uefi**: Indicates the UEFI boot mode.
        """
        return pulumi.get(self, "hw_firmware_type")

    @_builtins.property
    @pulumi.getter(name="hwVifMultiqueueEnabled")
    def hw_vif_multiqueue_enabled(self) -> pulumi.Output[_builtins.str]:
        """
        Whether the image supports NIC multi-queue. The value can be **true** or **false**.
        """
        return pulumi.get(self, "hw_vif_multiqueue_enabled")

    @_builtins.property
    @pulumi.getter(name="imageSize")
    def image_size(self) -> pulumi.Output[_builtins.str]:
        """
        The size of the image file, in bytes unit.
        """
        return pulumi.get(self, "image_size")

    @_builtins.property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the URL of the external image file in the OBS bucket, the format
        is **OBS bucket name:image file name**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "image_url")

    @_builtins.property
    @pulumi.getter(name="isConfig")
    def is_config(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to automatically configure. The value can be **true** or
        **false**. Defaults to **false**. Changing this parameter will create a new resource.
        About the content of automatic backend configuration, please refer to
        [API docs](https://support.huaweicloud.com/intl/en-us/ims_faq/ims_faq_0020.html).
        """
        return pulumi.get(self, "is_config")

    @_builtins.property
    @pulumi.getter(name="isQuickImport")
    def is_quick_import(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to use the image file quick import method to create
        an image. The value can be **true** or **false**. Changing this parameter will create a new resource.
        For constraints and limitations on fast import of image files,
        please refer to [API docs](https://support.huaweicloud.com/intl/en-us/api-ims/ims_03_0605.html).

        > 1. When the `is_quick_import` set to **true**, IMS will not parse the specified external image file, so the
        `os_type`, `os_version`, and `architecture` parameters is based on the specified value.
        <br/>2. When ignoring the `is_quick_import` or set to **false** , IMS will parse the external image file and confirm
        the `os_type`, `os_version`, and `architecture` of the image, if parsing fails, the specified value shall prevail.
        """
        return pulumi.get(self, "is_quick_import")

    @_builtins.property
    @pulumi.getter(name="maxRam")
    def max_ram(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the maximum memory of the image, in MB unit.
        """
        return pulumi.get(self, "max_ram")

    @_builtins.property
    @pulumi.getter(name="minDisk")
    def min_disk(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the minimum size of the system disk, in GB unit.
        Changing this parameter will create a new resource.
        + When the operating system is Linux, the value ranges from `10` to `1,024`.
        + When the operating system is Windows, the value ranges from `20` to `1,024`.
        """
        return pulumi.get(self, "min_disk")

    @_builtins.property
    @pulumi.getter(name="minRam")
    def min_ram(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the minimum memory of the image, in MB unit.
        """
        return pulumi.get(self, "min_ram")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the image.
        The valid length is limited from `1` to `128` characters.
        The first and last letters of the name cannot be spaces.
        The name can contain uppercase letters, lowercase letters, numbers, spaces, chinese, and special characters (-._).
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="osShutdownTimeout")
    def os_shutdown_timeout(self) -> pulumi.Output[_builtins.str]:
        """
        The timeout duration for a graceful shutdown.
        The value is an integer ranging from `60` to `300`, in seconds. The default value is `60`.
        """
        return pulumi.get(self, "os_shutdown_timeout")

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the operating system type of the image. The value can be
        **Windows** or **Linux**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "os_type")

    @_builtins.property
    @pulumi.getter(name="osVersion")
    def os_version(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the operating system version of the image. This field is
        required when `is_quick_import` set to **true**. Changing this parameter will create a new resource.
        For its values, see [API docs](https://support.huaweicloud.com/intl/en-us/api-ims/ims_03_0910.html).
        """
        return pulumi.get(self, "os_version")

    @_builtins.property
    @pulumi.getter
    def protected(self) -> pulumi.Output[_builtins.bool]:
        """
        Whether the image is protected, and the protected image cannot be deleted. The value can be **true**
        or **false**.
        """
        return pulumi.get(self, "protected")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def schema(self) -> pulumi.Output[_builtins.str]:
        """
        The image view.
        """
        return pulumi.get(self, "schema")

    @_builtins.property
    @pulumi.getter
    def self(self) -> pulumi.Output[_builtins.str]:
        """
        The image link information.
        """
        return pulumi.get(self, "self")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The image status.  
        The valid values are as follows:
        + **queued**: Indicates that the image has been successfully created and is waiting to upload the image file.
        + **saving**: Indicates that the image is uploading files to the backend storage.
        + **deleted**: Indicates that the image has been deleted.
        + **killed**: Indicates an image upload error.
        + **active**: Indicates that the image can be used normally.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Specifies the key/value pairs to associate with the image.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the image type. The value can be **ECS**, **FusionCompute**, **BMS**,
        or **Ironic**. Defaults to **ECS**. Changing this parameter will create a new resource.
        + Set to **ECS** or **FusionCompute** represent the creation of ECS server image.
        + Set to **BMS** or **Ironic** represent the creation of BMS server image.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The last update time, in UTC format.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="virtualEnvType")
    def virtual_env_type(self) -> pulumi.Output[_builtins.str]:
        """
        The image usage environment type.
        + If it is a cloud server image, the value is **FusionCompute**.
        + If it is a data disk image, the value is **DataImage**.
        + If it is a bare metal server image, the value is **Ironic**.
        + If it is an ISO image, the value is **IsoImage**.
        """
        return pulumi.get(self, "virtual_env_type")

    @_builtins.property
    @pulumi.getter
    def visibility(self) -> pulumi.Output[_builtins.str]:
        """
        Whether other tenants are visible.  
        The valid values are as follows:
        + **private**: Indicates private image.
        + **public**: Indicates public image.
        + **shared**: Indicates shared image.
        """
        return pulumi.get(self, "visibility")

