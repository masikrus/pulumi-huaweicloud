# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['ImageArgs', 'Image']

@pulumi.input_type
class ImageArgs:
    def __init__(__self__, *,
                 backup_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cmk_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 image_url: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 is_config: Optional[pulumi.Input[_builtins.bool]] = None,
                 max_ram: Optional[pulumi.Input[_builtins.int]] = None,
                 min_disk: Optional[pulumi.Input[_builtins.int]] = None,
                 min_ram: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 os_version: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 vault_id: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Image resource.
        :param pulumi.Input[_builtins.str] backup_id: Specifies the ID of the CBR backup that needs to be converted into an
               image. This parameter is valid and mandatory only when you create a private whole image from a CBR backup.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] cmk_id: Specifies the master key used for encrypting an image.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the image.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the IMS image
               belongs. For enterprise users, if omitted, default enterprise project will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] image_url: Specifies the URL of the external image file in the OBS bucket, the format
               is **OBS bucket name:Image file name**, e.g. **obs_bucket_name:image_test.vhd**. The storage category for OBS bucket
               and image file must be OBS standard storage. This parameter is valid and mandatory when you create a private system
               image from an external file uploaded to an OBS bucket, and this parameter can only be used with `min_disk`.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the ECS that needs to be converted into an image.
               This parameter is valid and mandatory only when you create a private system image or a private whole image from an
               ECS instance. Changing this parameter will create a new resource.
               + If the value of `vault_id` is empty, then a private system image will be created.
               + If the value of `vault_id` is not empty, then a private whole image will be created.
               
               > Exactly one of `instance_id`, `backup_id`, `volume_id` or `image_url` must be set.
        :param pulumi.Input[_builtins.bool] is_config: Specifies whether to automatically configure. If automatic backend
               configuration is required, set the value to **true**, Otherwise, set it to **false**. The default value is **false**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] max_ram: Specifies the maximum memory of the image in the unit of MB.
        :param pulumi.Input[_builtins.int] min_disk: Specifies the minimum size of the system disk in the unit of GB. This parameter
               is valid and mandatory when you create a private system image from an external file uploaded to an OBS bucket.
               Changing this parameter will create a new resource.
               + When the operating system is Linux, the value ranges from `10` to `1,024`.
               + When the operating system is Windows, the value ranges from `20` to `1,024`.
        :param pulumi.Input[_builtins.int] min_ram: Specifies the minimum memory of the image in the unit of MB. The default value is `0`,
               indicating that the memory is not restricted.
               
               > When creating a private data image using `volume_id`, the `min_ram` and `max_ram` parameters do not take effect,
               please ignore them when creating. You can update them after the image is successfully created.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the image.
        :param pulumi.Input[_builtins.str] os_version: Specifies the OS version.
               Changing this parameter will create a new resource.
               For its values, see [API docs](https://support.huaweicloud.com/intl/en-us/api-ims/ims_03_0910.html).
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the image.
        :param pulumi.Input[_builtins.str] type: Specifies the image type. The value can be **ECS**, **FusionCompute**, **BMS**,
               or **Ironic**. Changing this parameter will create a new resource.
               
               > The `os_version`, `is_config`, `cmk_id`, and `type` parameters are valid only when you create a private system image
               from an external file uploaded to an OBS bucket.
        :param pulumi.Input[_builtins.str] vault_id: Specifies the ID of the vault to which an ECS instance is to be added or has
               been added. This parameter can only be used with `instance_id`. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] volume_id: Specifies the ID of the data disk. This parameter is valid and mandatory
               when you create a private data image from an ECS instance, and the data disk must be bound to the ECS instance.
               Changing this parameter will create a new resource.
        """
        if backup_id is not None:
            pulumi.set(__self__, "backup_id", backup_id)
        if cmk_id is not None:
            pulumi.set(__self__, "cmk_id", cmk_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if is_config is not None:
            pulumi.set(__self__, "is_config", is_config)
        if max_ram is not None:
            pulumi.set(__self__, "max_ram", max_ram)
        if min_disk is not None:
            pulumi.set(__self__, "min_disk", min_disk)
        if min_ram is not None:
            pulumi.set(__self__, "min_ram", min_ram)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if os_version is not None:
            pulumi.set(__self__, "os_version", os_version)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vault_id is not None:
            pulumi.set(__self__, "vault_id", vault_id)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)

    @_builtins.property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the CBR backup that needs to be converted into an
        image. This parameter is valid and mandatory only when you create a private whole image from a CBR backup.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "backup_id")

    @backup_id.setter
    def backup_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backup_id", value)

    @_builtins.property
    @pulumi.getter(name="cmkId")
    def cmk_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the master key used for encrypting an image.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cmk_id")

    @cmk_id.setter
    def cmk_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cmk_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the image.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID to which the IMS image
        belongs. For enterprise users, if omitted, default enterprise project will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the URL of the external image file in the OBS bucket, the format
        is **OBS bucket name:Image file name**, e.g. **obs_bucket_name:image_test.vhd**. The storage category for OBS bucket
        and image file must be OBS standard storage. This parameter is valid and mandatory when you create a private system
        image from an external file uploaded to an OBS bucket, and this parameter can only be used with `min_disk`.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_url", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the ECS that needs to be converted into an image.
        This parameter is valid and mandatory only when you create a private system image or a private whole image from an
        ECS instance. Changing this parameter will create a new resource.
        + If the value of `vault_id` is empty, then a private system image will be created.
        + If the value of `vault_id` is not empty, then a private whole image will be created.

        > Exactly one of `instance_id`, `backup_id`, `volume_id` or `image_url` must be set.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="isConfig")
    def is_config(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to automatically configure. If automatic backend
        configuration is required, set the value to **true**, Otherwise, set it to **false**. The default value is **false**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "is_config")

    @is_config.setter
    def is_config(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_config", value)

    @_builtins.property
    @pulumi.getter(name="maxRam")
    def max_ram(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the maximum memory of the image in the unit of MB.
        """
        return pulumi.get(self, "max_ram")

    @max_ram.setter
    def max_ram(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "max_ram", value)

    @_builtins.property
    @pulumi.getter(name="minDisk")
    def min_disk(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the minimum size of the system disk in the unit of GB. This parameter
        is valid and mandatory when you create a private system image from an external file uploaded to an OBS bucket.
        Changing this parameter will create a new resource.
        + When the operating system is Linux, the value ranges from `10` to `1,024`.
        + When the operating system is Windows, the value ranges from `20` to `1,024`.
        """
        return pulumi.get(self, "min_disk")

    @min_disk.setter
    def min_disk(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "min_disk", value)

    @_builtins.property
    @pulumi.getter(name="minRam")
    def min_ram(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the minimum memory of the image in the unit of MB. The default value is `0`,
        indicating that the memory is not restricted.

        > When creating a private data image using `volume_id`, the `min_ram` and `max_ram` parameters do not take effect,
        please ignore them when creating. You can update them after the image is successfully created.
        """
        return pulumi.get(self, "min_ram")

    @min_ram.setter
    def min_ram(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "min_ram", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the image.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="osVersion")
    def os_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the OS version.
        Changing this parameter will create a new resource.
        For its values, see [API docs](https://support.huaweicloud.com/intl/en-us/api-ims/ims_03_0910.html).
        """
        return pulumi.get(self, "os_version")

    @os_version.setter
    def os_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "os_version", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value pairs to associate with the image.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the image type. The value can be **ECS**, **FusionCompute**, **BMS**,
        or **Ironic**. Changing this parameter will create a new resource.

        > The `os_version`, `is_config`, `cmk_id`, and `type` parameters are valid only when you create a private system image
        from an external file uploaded to an OBS bucket.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the vault to which an ECS instance is to be added or has
        been added. This parameter can only be used with `instance_id`. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "vault_id")

    @vault_id.setter
    def vault_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vault_id", value)

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the data disk. This parameter is valid and mandatory
        when you create a private data image from an ECS instance, and the data disk must be bound to the ECS instance.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "volume_id", value)


@pulumi.input_type
class _ImageState:
    def __init__(__self__, *,
                 backup_id: Optional[pulumi.Input[_builtins.str]] = None,
                 checksum: Optional[pulumi.Input[_builtins.str]] = None,
                 cmk_id: Optional[pulumi.Input[_builtins.str]] = None,
                 data_origin: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 disk_format: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 image_size: Optional[pulumi.Input[_builtins.str]] = None,
                 image_url: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 is_config: Optional[pulumi.Input[_builtins.bool]] = None,
                 max_ram: Optional[pulumi.Input[_builtins.int]] = None,
                 min_disk: Optional[pulumi.Input[_builtins.int]] = None,
                 min_ram: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 os_version: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 vault_id: Optional[pulumi.Input[_builtins.str]] = None,
                 visibility: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Image resources.
        :param pulumi.Input[_builtins.str] backup_id: Specifies the ID of the CBR backup that needs to be converted into an
               image. This parameter is valid and mandatory only when you create a private whole image from a CBR backup.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] checksum: The checksum of the data associated with the image.
        :param pulumi.Input[_builtins.str] cmk_id: Specifies the master key used for encrypting an image.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] data_origin: The image resource. The pattern can be **server_backup,backup_id**, **instance,instance_id**,
               **file,image_url**, or **volume,volume_id**.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the image.
        :param pulumi.Input[_builtins.str] disk_format: The image file format. The value can be **vhd**, **zvhd**, **raw**, **zvhd2**, or **qcow2**.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the IMS image
               belongs. For enterprise users, if omitted, default enterprise project will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] image_size: The size(bytes) of the image file format.
        :param pulumi.Input[_builtins.str] image_url: Specifies the URL of the external image file in the OBS bucket, the format
               is **OBS bucket name:Image file name**, e.g. **obs_bucket_name:image_test.vhd**. The storage category for OBS bucket
               and image file must be OBS standard storage. This parameter is valid and mandatory when you create a private system
               image from an external file uploaded to an OBS bucket, and this parameter can only be used with `min_disk`.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the ECS that needs to be converted into an image.
               This parameter is valid and mandatory only when you create a private system image or a private whole image from an
               ECS instance. Changing this parameter will create a new resource.
               + If the value of `vault_id` is empty, then a private system image will be created.
               + If the value of `vault_id` is not empty, then a private whole image will be created.
               
               > Exactly one of `instance_id`, `backup_id`, `volume_id` or `image_url` must be set.
        :param pulumi.Input[_builtins.bool] is_config: Specifies whether to automatically configure. If automatic backend
               configuration is required, set the value to **true**, Otherwise, set it to **false**. The default value is **false**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] max_ram: Specifies the maximum memory of the image in the unit of MB.
        :param pulumi.Input[_builtins.int] min_disk: Specifies the minimum size of the system disk in the unit of GB. This parameter
               is valid and mandatory when you create a private system image from an external file uploaded to an OBS bucket.
               Changing this parameter will create a new resource.
               + When the operating system is Linux, the value ranges from `10` to `1,024`.
               + When the operating system is Windows, the value ranges from `20` to `1,024`.
        :param pulumi.Input[_builtins.int] min_ram: Specifies the minimum memory of the image in the unit of MB. The default value is `0`,
               indicating that the memory is not restricted.
               
               > When creating a private data image using `volume_id`, the `min_ram` and `max_ram` parameters do not take effect,
               please ignore them when creating. You can update them after the image is successfully created.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the image.
        :param pulumi.Input[_builtins.str] os_version: Specifies the OS version.
               Changing this parameter will create a new resource.
               For its values, see [API docs](https://support.huaweicloud.com/intl/en-us/api-ims/ims_03_0910.html).
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: The status of the image.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the image.
        :param pulumi.Input[_builtins.str] type: Specifies the image type. The value can be **ECS**, **FusionCompute**, **BMS**,
               or **Ironic**. Changing this parameter will create a new resource.
               
               > The `os_version`, `is_config`, `cmk_id`, and `type` parameters are valid only when you create a private system image
               from an external file uploaded to an OBS bucket.
        :param pulumi.Input[_builtins.str] vault_id: Specifies the ID of the vault to which an ECS instance is to be added or has
               been added. This parameter can only be used with `instance_id`. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] visibility: Whether the image is visible to other tenants.
        :param pulumi.Input[_builtins.str] volume_id: Specifies the ID of the data disk. This parameter is valid and mandatory
               when you create a private data image from an ECS instance, and the data disk must be bound to the ECS instance.
               Changing this parameter will create a new resource.
        """
        if backup_id is not None:
            pulumi.set(__self__, "backup_id", backup_id)
        if checksum is not None:
            pulumi.set(__self__, "checksum", checksum)
        if cmk_id is not None:
            pulumi.set(__self__, "cmk_id", cmk_id)
        if data_origin is not None:
            pulumi.set(__self__, "data_origin", data_origin)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disk_format is not None:
            pulumi.set(__self__, "disk_format", disk_format)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if image_size is not None:
            pulumi.set(__self__, "image_size", image_size)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if is_config is not None:
            pulumi.set(__self__, "is_config", is_config)
        if max_ram is not None:
            pulumi.set(__self__, "max_ram", max_ram)
        if min_disk is not None:
            pulumi.set(__self__, "min_disk", min_disk)
        if min_ram is not None:
            pulumi.set(__self__, "min_ram", min_ram)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if os_version is not None:
            pulumi.set(__self__, "os_version", os_version)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vault_id is not None:
            pulumi.set(__self__, "vault_id", vault_id)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)

    @_builtins.property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the CBR backup that needs to be converted into an
        image. This parameter is valid and mandatory only when you create a private whole image from a CBR backup.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "backup_id")

    @backup_id.setter
    def backup_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backup_id", value)

    @_builtins.property
    @pulumi.getter
    def checksum(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The checksum of the data associated with the image.
        """
        return pulumi.get(self, "checksum")

    @checksum.setter
    def checksum(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "checksum", value)

    @_builtins.property
    @pulumi.getter(name="cmkId")
    def cmk_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the master key used for encrypting an image.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cmk_id")

    @cmk_id.setter
    def cmk_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cmk_id", value)

    @_builtins.property
    @pulumi.getter(name="dataOrigin")
    def data_origin(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The image resource. The pattern can be **server_backup,backup_id**, **instance,instance_id**,
        **file,image_url**, or **volume,volume_id**.
        """
        return pulumi.get(self, "data_origin")

    @data_origin.setter
    def data_origin(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "data_origin", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the image.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="diskFormat")
    def disk_format(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The image file format. The value can be **vhd**, **zvhd**, **raw**, **zvhd2**, or **qcow2**.
        """
        return pulumi.get(self, "disk_format")

    @disk_format.setter
    def disk_format(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "disk_format", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the enterprise project ID to which the IMS image
        belongs. For enterprise users, if omitted, default enterprise project will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="imageSize")
    def image_size(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The size(bytes) of the image file format.
        """
        return pulumi.get(self, "image_size")

    @image_size.setter
    def image_size(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_size", value)

    @_builtins.property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the URL of the external image file in the OBS bucket, the format
        is **OBS bucket name:Image file name**, e.g. **obs_bucket_name:image_test.vhd**. The storage category for OBS bucket
        and image file must be OBS standard storage. This parameter is valid and mandatory when you create a private system
        image from an external file uploaded to an OBS bucket, and this parameter can only be used with `min_disk`.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_url", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the ECS that needs to be converted into an image.
        This parameter is valid and mandatory only when you create a private system image or a private whole image from an
        ECS instance. Changing this parameter will create a new resource.
        + If the value of `vault_id` is empty, then a private system image will be created.
        + If the value of `vault_id` is not empty, then a private whole image will be created.

        > Exactly one of `instance_id`, `backup_id`, `volume_id` or `image_url` must be set.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="isConfig")
    def is_config(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to automatically configure. If automatic backend
        configuration is required, set the value to **true**, Otherwise, set it to **false**. The default value is **false**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "is_config")

    @is_config.setter
    def is_config(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_config", value)

    @_builtins.property
    @pulumi.getter(name="maxRam")
    def max_ram(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the maximum memory of the image in the unit of MB.
        """
        return pulumi.get(self, "max_ram")

    @max_ram.setter
    def max_ram(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "max_ram", value)

    @_builtins.property
    @pulumi.getter(name="minDisk")
    def min_disk(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the minimum size of the system disk in the unit of GB. This parameter
        is valid and mandatory when you create a private system image from an external file uploaded to an OBS bucket.
        Changing this parameter will create a new resource.
        + When the operating system is Linux, the value ranges from `10` to `1,024`.
        + When the operating system is Windows, the value ranges from `20` to `1,024`.
        """
        return pulumi.get(self, "min_disk")

    @min_disk.setter
    def min_disk(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "min_disk", value)

    @_builtins.property
    @pulumi.getter(name="minRam")
    def min_ram(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the minimum memory of the image in the unit of MB. The default value is `0`,
        indicating that the memory is not restricted.

        > When creating a private data image using `volume_id`, the `min_ram` and `max_ram` parameters do not take effect,
        please ignore them when creating. You can update them after the image is successfully created.
        """
        return pulumi.get(self, "min_ram")

    @min_ram.setter
    def min_ram(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "min_ram", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the image.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="osVersion")
    def os_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the OS version.
        Changing this parameter will create a new resource.
        For its values, see [API docs](https://support.huaweicloud.com/intl/en-us/api-ims/ims_03_0910.html).
        """
        return pulumi.get(self, "os_version")

    @os_version.setter
    def os_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "os_version", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the image.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value pairs to associate with the image.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the image type. The value can be **ECS**, **FusionCompute**, **BMS**,
        or **Ironic**. Changing this parameter will create a new resource.

        > The `os_version`, `is_config`, `cmk_id`, and `type` parameters are valid only when you create a private system image
        from an external file uploaded to an OBS bucket.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the vault to which an ECS instance is to be added or has
        been added. This parameter can only be used with `instance_id`. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "vault_id")

    @vault_id.setter
    def vault_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vault_id", value)

    @_builtins.property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Whether the image is visible to other tenants.
        """
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "visibility", value)

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the data disk. This parameter is valid and mandatory
        when you create a private data image from an ECS instance, and the data disk must be bound to the ECS instance.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "volume_id", value)


@pulumi.type_token("huaweicloud:Ims/image:Image")
class Image(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cmk_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 image_url: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 is_config: Optional[pulumi.Input[_builtins.bool]] = None,
                 max_ram: Optional[pulumi.Input[_builtins.int]] = None,
                 min_disk: Optional[pulumi.Input[_builtins.int]] = None,
                 min_ram: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 os_version: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 vault_id: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        !> **WARNING:** It has been deprecated, please select the corresponding resource replacement based on the image type and
        creation method, please use resources named in `huaweicloud_ims_xxx_xxx_image` format instead.

        Manages an IMS image resource within HuaweiCloud.

        ## Example Usage

        ### Creating a system image from an existing ECS instance

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        instance_id = config.require_object("instanceId")
        test = huaweicloud.ims.Image("test",
            name=name,
            instance_id=instance_id,
            tags={
                "foo": "bar",
                "key": "value",
            })
        ```

        ### Creating a system image from OBS bucket

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        image_url = config.require_object("imageUrl")
        min_disk = config.require_object("minDisk")
        test = huaweicloud.ims.Image("test",
            name=name,
            image_url=image_url,
            min_disk=min_disk)
        ```

        ### Creating a whole image from an existing ECS instance

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        instance_id = config.require_object("instanceId")
        vault_id = config.require_object("vaultId")
        test = huaweicloud.ims.Image("test",
            name=name,
            instance_id=instance_id,
            vault_id=vault_id)
        ```

        ### Creating a whole image from CBR backup

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        backup_id = config.require_object("backupId")
        test = huaweicloud.ims.Image("test",
            name=name,
            backup_id=backup_id)
        ```

        ### Creating a data image from the data disk bound to the ECS instance

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        volume_id = config.require_object("volumeId")
        test = huaweicloud.ims.Image("test",
            name=name,
            volume_id=volume_id)
        ```

        ## Import

        Image can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Ims/image:Image test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response. The missing attributes include: `vault_id`. It is generally recommended running `pulumi preview` after

        importing the image. You can then decide if changes should be applied to the image, or the resource

        definition should be updated to align with the image. Also, you can ignore changes as below.

        hcl

        resource "huaweicloud_images_image" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              vault_id,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] backup_id: Specifies the ID of the CBR backup that needs to be converted into an
               image. This parameter is valid and mandatory only when you create a private whole image from a CBR backup.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] cmk_id: Specifies the master key used for encrypting an image.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the image.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the IMS image
               belongs. For enterprise users, if omitted, default enterprise project will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] image_url: Specifies the URL of the external image file in the OBS bucket, the format
               is **OBS bucket name:Image file name**, e.g. **obs_bucket_name:image_test.vhd**. The storage category for OBS bucket
               and image file must be OBS standard storage. This parameter is valid and mandatory when you create a private system
               image from an external file uploaded to an OBS bucket, and this parameter can only be used with `min_disk`.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the ECS that needs to be converted into an image.
               This parameter is valid and mandatory only when you create a private system image or a private whole image from an
               ECS instance. Changing this parameter will create a new resource.
               + If the value of `vault_id` is empty, then a private system image will be created.
               + If the value of `vault_id` is not empty, then a private whole image will be created.
               
               > Exactly one of `instance_id`, `backup_id`, `volume_id` or `image_url` must be set.
        :param pulumi.Input[_builtins.bool] is_config: Specifies whether to automatically configure. If automatic backend
               configuration is required, set the value to **true**, Otherwise, set it to **false**. The default value is **false**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] max_ram: Specifies the maximum memory of the image in the unit of MB.
        :param pulumi.Input[_builtins.int] min_disk: Specifies the minimum size of the system disk in the unit of GB. This parameter
               is valid and mandatory when you create a private system image from an external file uploaded to an OBS bucket.
               Changing this parameter will create a new resource.
               + When the operating system is Linux, the value ranges from `10` to `1,024`.
               + When the operating system is Windows, the value ranges from `20` to `1,024`.
        :param pulumi.Input[_builtins.int] min_ram: Specifies the minimum memory of the image in the unit of MB. The default value is `0`,
               indicating that the memory is not restricted.
               
               > When creating a private data image using `volume_id`, the `min_ram` and `max_ram` parameters do not take effect,
               please ignore them when creating. You can update them after the image is successfully created.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the image.
        :param pulumi.Input[_builtins.str] os_version: Specifies the OS version.
               Changing this parameter will create a new resource.
               For its values, see [API docs](https://support.huaweicloud.com/intl/en-us/api-ims/ims_03_0910.html).
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the image.
        :param pulumi.Input[_builtins.str] type: Specifies the image type. The value can be **ECS**, **FusionCompute**, **BMS**,
               or **Ironic**. Changing this parameter will create a new resource.
               
               > The `os_version`, `is_config`, `cmk_id`, and `type` parameters are valid only when you create a private system image
               from an external file uploaded to an OBS bucket.
        :param pulumi.Input[_builtins.str] vault_id: Specifies the ID of the vault to which an ECS instance is to be added or has
               been added. This parameter can only be used with `instance_id`. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] volume_id: Specifies the ID of the data disk. This parameter is valid and mandatory
               when you create a private data image from an ECS instance, and the data disk must be bound to the ECS instance.
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ImageArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        !> **WARNING:** It has been deprecated, please select the corresponding resource replacement based on the image type and
        creation method, please use resources named in `huaweicloud_ims_xxx_xxx_image` format instead.

        Manages an IMS image resource within HuaweiCloud.

        ## Example Usage

        ### Creating a system image from an existing ECS instance

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        instance_id = config.require_object("instanceId")
        test = huaweicloud.ims.Image("test",
            name=name,
            instance_id=instance_id,
            tags={
                "foo": "bar",
                "key": "value",
            })
        ```

        ### Creating a system image from OBS bucket

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        image_url = config.require_object("imageUrl")
        min_disk = config.require_object("minDisk")
        test = huaweicloud.ims.Image("test",
            name=name,
            image_url=image_url,
            min_disk=min_disk)
        ```

        ### Creating a whole image from an existing ECS instance

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        instance_id = config.require_object("instanceId")
        vault_id = config.require_object("vaultId")
        test = huaweicloud.ims.Image("test",
            name=name,
            instance_id=instance_id,
            vault_id=vault_id)
        ```

        ### Creating a whole image from CBR backup

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        backup_id = config.require_object("backupId")
        test = huaweicloud.ims.Image("test",
            name=name,
            backup_id=backup_id)
        ```

        ### Creating a data image from the data disk bound to the ECS instance

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        name = config.require_object("name")
        volume_id = config.require_object("volumeId")
        test = huaweicloud.ims.Image("test",
            name=name,
            volume_id=volume_id)
        ```

        ## Import

        Image can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:Ims/image:Image test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response. The missing attributes include: `vault_id`. It is generally recommended running `pulumi preview` after

        importing the image. You can then decide if changes should be applied to the image, or the resource

        definition should be updated to align with the image. Also, you can ignore changes as below.

        hcl

        resource "huaweicloud_images_image" "test" {

          ...

          lifecycle {

            ignore_changes = [
            
              vault_id,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param ImageArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ImageArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cmk_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 image_url: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 is_config: Optional[pulumi.Input[_builtins.bool]] = None,
                 max_ram: Optional[pulumi.Input[_builtins.int]] = None,
                 min_disk: Optional[pulumi.Input[_builtins.int]] = None,
                 min_ram: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 os_version: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 vault_id: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ImageArgs.__new__(ImageArgs)

            __props__.__dict__["backup_id"] = backup_id
            __props__.__dict__["cmk_id"] = cmk_id
            __props__.__dict__["description"] = description
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            __props__.__dict__["image_url"] = image_url
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["is_config"] = is_config
            __props__.__dict__["max_ram"] = max_ram
            __props__.__dict__["min_disk"] = min_disk
            __props__.__dict__["min_ram"] = min_ram
            __props__.__dict__["name"] = name
            __props__.__dict__["os_version"] = os_version
            __props__.__dict__["region"] = region
            __props__.__dict__["tags"] = tags
            __props__.__dict__["type"] = type
            __props__.__dict__["vault_id"] = vault_id
            __props__.__dict__["volume_id"] = volume_id
            __props__.__dict__["checksum"] = None
            __props__.__dict__["data_origin"] = None
            __props__.__dict__["disk_format"] = None
            __props__.__dict__["image_size"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["visibility"] = None
        super(Image, __self__).__init__(
            'huaweicloud:Ims/image:Image',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            backup_id: Optional[pulumi.Input[_builtins.str]] = None,
            checksum: Optional[pulumi.Input[_builtins.str]] = None,
            cmk_id: Optional[pulumi.Input[_builtins.str]] = None,
            data_origin: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            disk_format: Optional[pulumi.Input[_builtins.str]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            image_size: Optional[pulumi.Input[_builtins.str]] = None,
            image_url: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            is_config: Optional[pulumi.Input[_builtins.bool]] = None,
            max_ram: Optional[pulumi.Input[_builtins.int]] = None,
            min_disk: Optional[pulumi.Input[_builtins.int]] = None,
            min_ram: Optional[pulumi.Input[_builtins.int]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            os_version: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            vault_id: Optional[pulumi.Input[_builtins.str]] = None,
            visibility: Optional[pulumi.Input[_builtins.str]] = None,
            volume_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'Image':
        """
        Get an existing Image resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] backup_id: Specifies the ID of the CBR backup that needs to be converted into an
               image. This parameter is valid and mandatory only when you create a private whole image from a CBR backup.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] checksum: The checksum of the data associated with the image.
        :param pulumi.Input[_builtins.str] cmk_id: Specifies the master key used for encrypting an image.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] data_origin: The image resource. The pattern can be **server_backup,backup_id**, **instance,instance_id**,
               **file,image_url**, or **volume,volume_id**.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the image.
        :param pulumi.Input[_builtins.str] disk_format: The image file format. The value can be **vhd**, **zvhd**, **raw**, **zvhd2**, or **qcow2**.
        :param pulumi.Input[_builtins.str] enterprise_project_id: Specifies the enterprise project ID to which the IMS image
               belongs. For enterprise users, if omitted, default enterprise project will be used.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] image_size: The size(bytes) of the image file format.
        :param pulumi.Input[_builtins.str] image_url: Specifies the URL of the external image file in the OBS bucket, the format
               is **OBS bucket name:Image file name**, e.g. **obs_bucket_name:image_test.vhd**. The storage category for OBS bucket
               and image file must be OBS standard storage. This parameter is valid and mandatory when you create a private system
               image from an external file uploaded to an OBS bucket, and this parameter can only be used with `min_disk`.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the ECS that needs to be converted into an image.
               This parameter is valid and mandatory only when you create a private system image or a private whole image from an
               ECS instance. Changing this parameter will create a new resource.
               + If the value of `vault_id` is empty, then a private system image will be created.
               + If the value of `vault_id` is not empty, then a private whole image will be created.
               
               > Exactly one of `instance_id`, `backup_id`, `volume_id` or `image_url` must be set.
        :param pulumi.Input[_builtins.bool] is_config: Specifies whether to automatically configure. If automatic backend
               configuration is required, set the value to **true**, Otherwise, set it to **false**. The default value is **false**.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.int] max_ram: Specifies the maximum memory of the image in the unit of MB.
        :param pulumi.Input[_builtins.int] min_disk: Specifies the minimum size of the system disk in the unit of GB. This parameter
               is valid and mandatory when you create a private system image from an external file uploaded to an OBS bucket.
               Changing this parameter will create a new resource.
               + When the operating system is Linux, the value ranges from `10` to `1,024`.
               + When the operating system is Windows, the value ranges from `20` to `1,024`.
        :param pulumi.Input[_builtins.int] min_ram: Specifies the minimum memory of the image in the unit of MB. The default value is `0`,
               indicating that the memory is not restricted.
               
               > When creating a private data image using `volume_id`, the `min_ram` and `max_ram` parameters do not take effect,
               please ignore them when creating. You can update them after the image is successfully created.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the image.
        :param pulumi.Input[_builtins.str] os_version: Specifies the OS version.
               Changing this parameter will create a new resource.
               For its values, see [API docs](https://support.huaweicloud.com/intl/en-us/api-ims/ims_03_0910.html).
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] status: The status of the image.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the image.
        :param pulumi.Input[_builtins.str] type: Specifies the image type. The value can be **ECS**, **FusionCompute**, **BMS**,
               or **Ironic**. Changing this parameter will create a new resource.
               
               > The `os_version`, `is_config`, `cmk_id`, and `type` parameters are valid only when you create a private system image
               from an external file uploaded to an OBS bucket.
        :param pulumi.Input[_builtins.str] vault_id: Specifies the ID of the vault to which an ECS instance is to be added or has
               been added. This parameter can only be used with `instance_id`. Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] visibility: Whether the image is visible to other tenants.
        :param pulumi.Input[_builtins.str] volume_id: Specifies the ID of the data disk. This parameter is valid and mandatory
               when you create a private data image from an ECS instance, and the data disk must be bound to the ECS instance.
               Changing this parameter will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ImageState.__new__(_ImageState)

        __props__.__dict__["backup_id"] = backup_id
        __props__.__dict__["checksum"] = checksum
        __props__.__dict__["cmk_id"] = cmk_id
        __props__.__dict__["data_origin"] = data_origin
        __props__.__dict__["description"] = description
        __props__.__dict__["disk_format"] = disk_format
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["image_size"] = image_size
        __props__.__dict__["image_url"] = image_url
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["is_config"] = is_config
        __props__.__dict__["max_ram"] = max_ram
        __props__.__dict__["min_disk"] = min_disk
        __props__.__dict__["min_ram"] = min_ram
        __props__.__dict__["name"] = name
        __props__.__dict__["os_version"] = os_version
        __props__.__dict__["region"] = region
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["type"] = type
        __props__.__dict__["vault_id"] = vault_id
        __props__.__dict__["visibility"] = visibility
        __props__.__dict__["volume_id"] = volume_id
        return Image(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the CBR backup that needs to be converted into an
        image. This parameter is valid and mandatory only when you create a private whole image from a CBR backup.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "backup_id")

    @_builtins.property
    @pulumi.getter
    def checksum(self) -> pulumi.Output[_builtins.str]:
        """
        The checksum of the data associated with the image.
        """
        return pulumi.get(self, "checksum")

    @_builtins.property
    @pulumi.getter(name="cmkId")
    def cmk_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the master key used for encrypting an image.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cmk_id")

    @_builtins.property
    @pulumi.getter(name="dataOrigin")
    def data_origin(self) -> pulumi.Output[_builtins.str]:
        """
        The image resource. The pattern can be **server_backup,backup_id**, **instance,instance_id**,
        **file,image_url**, or **volume,volume_id**.
        """
        return pulumi.get(self, "data_origin")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of the image.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="diskFormat")
    def disk_format(self) -> pulumi.Output[_builtins.str]:
        """
        The image file format. The value can be **vhd**, **zvhd**, **raw**, **zvhd2**, or **qcow2**.
        """
        return pulumi.get(self, "disk_format")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the enterprise project ID to which the IMS image
        belongs. For enterprise users, if omitted, default enterprise project will be used.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="imageSize")
    def image_size(self) -> pulumi.Output[_builtins.str]:
        """
        The size(bytes) of the image file format.
        """
        return pulumi.get(self, "image_size")

    @_builtins.property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the URL of the external image file in the OBS bucket, the format
        is **OBS bucket name:Image file name**, e.g. **obs_bucket_name:image_test.vhd**. The storage category for OBS bucket
        and image file must be OBS standard storage. This parameter is valid and mandatory when you create a private system
        image from an external file uploaded to an OBS bucket, and this parameter can only be used with `min_disk`.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "image_url")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the ECS that needs to be converted into an image.
        This parameter is valid and mandatory only when you create a private system image or a private whole image from an
        ECS instance. Changing this parameter will create a new resource.
        + If the value of `vault_id` is empty, then a private system image will be created.
        + If the value of `vault_id` is not empty, then a private whole image will be created.

        > Exactly one of `instance_id`, `backup_id`, `volume_id` or `image_url` must be set.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="isConfig")
    def is_config(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether to automatically configure. If automatic backend
        configuration is required, set the value to **true**, Otherwise, set it to **false**. The default value is **false**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "is_config")

    @_builtins.property
    @pulumi.getter(name="maxRam")
    def max_ram(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the maximum memory of the image in the unit of MB.
        """
        return pulumi.get(self, "max_ram")

    @_builtins.property
    @pulumi.getter(name="minDisk")
    def min_disk(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Specifies the minimum size of the system disk in the unit of GB. This parameter
        is valid and mandatory when you create a private system image from an external file uploaded to an OBS bucket.
        Changing this parameter will create a new resource.
        + When the operating system is Linux, the value ranges from `10` to `1,024`.
        + When the operating system is Windows, the value ranges from `20` to `1,024`.
        """
        return pulumi.get(self, "min_disk")

    @_builtins.property
    @pulumi.getter(name="minRam")
    def min_ram(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the minimum memory of the image in the unit of MB. The default value is `0`,
        indicating that the memory is not restricted.

        > When creating a private data image using `volume_id`, the `min_ram` and `max_ram` parameters do not take effect,
        please ignore them when creating. You can update them after the image is successfully created.
        """
        return pulumi.get(self, "min_ram")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the image.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="osVersion")
    def os_version(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the OS version.
        Changing this parameter will create a new resource.
        For its values, see [API docs](https://support.huaweicloud.com/intl/en-us/api-ims/ims_03_0910.html).
        """
        return pulumi.get(self, "os_version")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the image.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Specifies the key/value pairs to associate with the image.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the image type. The value can be **ECS**, **FusionCompute**, **BMS**,
        or **Ironic**. Changing this parameter will create a new resource.

        > The `os_version`, `is_config`, `cmk_id`, and `type` parameters are valid only when you create a private system image
        from an external file uploaded to an OBS bucket.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the ID of the vault to which an ECS instance is to be added or has
        been added. This parameter can only be used with `instance_id`. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "vault_id")

    @_builtins.property
    @pulumi.getter
    def visibility(self) -> pulumi.Output[_builtins.str]:
        """
        Whether the image is visible to other tenants.
        """
        return pulumi.get(self, "visibility")

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the data disk. This parameter is valid and mandatory
        when you create a private data image from an ECS instance, and the data disk must be bound to the ECS instance.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "volume_id")

