# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetResourceAggregatorSourceStatusesResult',
    'AwaitableGetResourceAggregatorSourceStatusesResult',
    'get_resource_aggregator_source_statuses',
    'get_resource_aggregator_source_statuses_output',
]

@pulumi.output_type
class GetResourceAggregatorSourceStatusesResult:
    """
    A collection of values returned by getResourceAggregatorSourceStatuses.
    """
    def __init__(__self__, aggregated_source_statuses=None, aggregator_id=None, id=None, status=None):
        if aggregated_source_statuses and not isinstance(aggregated_source_statuses, list):
            raise TypeError("Expected argument 'aggregated_source_statuses' to be a list")
        pulumi.set(__self__, "aggregated_source_statuses", aggregated_source_statuses)
        if aggregator_id and not isinstance(aggregator_id, str):
            raise TypeError("Expected argument 'aggregator_id' to be a str")
        pulumi.set(__self__, "aggregator_id", aggregator_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="aggregatedSourceStatuses")
    def aggregated_source_statuses(self) -> Sequence['outputs.GetResourceAggregatorSourceStatusesAggregatedSourceStatusResult']:
        """
        The list of source statuses
        """
        return pulumi.get(self, "aggregated_source_statuses")

    @_builtins.property
    @pulumi.getter(name="aggregatorId")
    def aggregator_id(self) -> _builtins.str:
        return pulumi.get(self, "aggregator_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "status")


class AwaitableGetResourceAggregatorSourceStatusesResult(GetResourceAggregatorSourceStatusesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetResourceAggregatorSourceStatusesResult(
            aggregated_source_statuses=self.aggregated_source_statuses,
            aggregator_id=self.aggregator_id,
            id=self.id,
            status=self.status)


def get_resource_aggregator_source_statuses(aggregator_id: Optional[_builtins.str] = None,
                                            status: Optional[_builtins.str] = None,
                                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetResourceAggregatorSourceStatusesResult:
    """
    Use this data source to get the list of RMS aggregator source statuses.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    aggregator_id = config.require_object("aggregatorId")
    test = huaweicloud.rms.get_resource_aggregator_source_statuses(aggregator_id=aggregator_id)
    ```


    :param _builtins.str aggregator_id: Specifies the resource aggregator ID.
    :param _builtins.str status: Specifies the status of the aggregated source account.
    """
    __args__ = dict()
    __args__['aggregatorId'] = aggregator_id
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:rms/getResourceAggregatorSourceStatuses:getResourceAggregatorSourceStatuses', __args__, opts=opts, typ=GetResourceAggregatorSourceStatusesResult).value

    return AwaitableGetResourceAggregatorSourceStatusesResult(
        aggregated_source_statuses=pulumi.get(__ret__, 'aggregated_source_statuses'),
        aggregator_id=pulumi.get(__ret__, 'aggregator_id'),
        id=pulumi.get(__ret__, 'id'),
        status=pulumi.get(__ret__, 'status'))
def get_resource_aggregator_source_statuses_output(aggregator_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                   status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetResourceAggregatorSourceStatusesResult]:
    """
    Use this data source to get the list of RMS aggregator source statuses.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    aggregator_id = config.require_object("aggregatorId")
    test = huaweicloud.rms.get_resource_aggregator_source_statuses(aggregator_id=aggregator_id)
    ```


    :param _builtins.str aggregator_id: Specifies the resource aggregator ID.
    :param _builtins.str status: Specifies the status of the aggregated source account.
    """
    __args__ = dict()
    __args__['aggregatorId'] = aggregator_id
    __args__['status'] = status
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:rms/getResourceAggregatorSourceStatuses:getResourceAggregatorSourceStatuses', __args__, opts=opts, typ=GetResourceAggregatorSourceStatusesResult)
    return __ret__.apply(lambda __response__: GetResourceAggregatorSourceStatusesResult(
        aggregated_source_statuses=pulumi.get(__response__, 'aggregated_source_statuses'),
        aggregator_id=pulumi.get(__response__, 'aggregator_id'),
        id=pulumi.get(__response__, 'id'),
        status=pulumi.get(__response__, 'status')))
