# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetResourceAggregatorPolicyAssignmentDetailResult',
    'AwaitableGetResourceAggregatorPolicyAssignmentDetailResult',
    'get_resource_aggregator_policy_assignment_detail',
    'get_resource_aggregator_policy_assignment_detail_output',
]

@pulumi.output_type
class GetResourceAggregatorPolicyAssignmentDetailResult:
    """
    A collection of values returned by getResourceAggregatorPolicyAssignmentDetail.
    """
    def __init__(__self__, account_id=None, aggregator_id=None, created=None, created_by=None, custom_policies=None, description=None, id=None, name=None, parameters=None, period=None, policy_assignment_id=None, policy_assignment_type=None, policy_definition_id=None, policy_filter_v2s=None, policy_filters=None, state=None, tags=None, target_id=None, target_type=None, updated=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if aggregator_id and not isinstance(aggregator_id, str):
            raise TypeError("Expected argument 'aggregator_id' to be a str")
        pulumi.set(__self__, "aggregator_id", aggregator_id)
        if created and not isinstance(created, str):
            raise TypeError("Expected argument 'created' to be a str")
        pulumi.set(__self__, "created", created)
        if created_by and not isinstance(created_by, str):
            raise TypeError("Expected argument 'created_by' to be a str")
        pulumi.set(__self__, "created_by", created_by)
        if custom_policies and not isinstance(custom_policies, list):
            raise TypeError("Expected argument 'custom_policies' to be a list")
        pulumi.set(__self__, "custom_policies", custom_policies)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if parameters and not isinstance(parameters, dict):
            raise TypeError("Expected argument 'parameters' to be a dict")
        pulumi.set(__self__, "parameters", parameters)
        if period and not isinstance(period, str):
            raise TypeError("Expected argument 'period' to be a str")
        pulumi.set(__self__, "period", period)
        if policy_assignment_id and not isinstance(policy_assignment_id, str):
            raise TypeError("Expected argument 'policy_assignment_id' to be a str")
        pulumi.set(__self__, "policy_assignment_id", policy_assignment_id)
        if policy_assignment_type and not isinstance(policy_assignment_type, str):
            raise TypeError("Expected argument 'policy_assignment_type' to be a str")
        pulumi.set(__self__, "policy_assignment_type", policy_assignment_type)
        if policy_definition_id and not isinstance(policy_definition_id, str):
            raise TypeError("Expected argument 'policy_definition_id' to be a str")
        pulumi.set(__self__, "policy_definition_id", policy_definition_id)
        if policy_filter_v2s and not isinstance(policy_filter_v2s, list):
            raise TypeError("Expected argument 'policy_filter_v2s' to be a list")
        pulumi.set(__self__, "policy_filter_v2s", policy_filter_v2s)
        if policy_filters and not isinstance(policy_filters, list):
            raise TypeError("Expected argument 'policy_filters' to be a list")
        pulumi.set(__self__, "policy_filters", policy_filters)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if target_id and not isinstance(target_id, str):
            raise TypeError("Expected argument 'target_id' to be a str")
        pulumi.set(__self__, "target_id", target_id)
        if target_type and not isinstance(target_type, str):
            raise TypeError("Expected argument 'target_type' to be a str")
        pulumi.set(__self__, "target_type", target_type)
        if updated and not isinstance(updated, str):
            raise TypeError("Expected argument 'updated' to be a str")
        pulumi.set(__self__, "updated", updated)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="aggregatorId")
    def aggregator_id(self) -> _builtins.str:
        return pulumi.get(self, "aggregator_id")

    @_builtins.property
    @pulumi.getter
    def created(self) -> _builtins.str:
        """
        Indicates the time when the rule was added.
        """
        return pulumi.get(self, "created")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> _builtins.str:
        """
        Indicates the rule creator.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter(name="customPolicies")
    def custom_policies(self) -> Sequence['outputs.GetResourceAggregatorPolicyAssignmentDetailCustomPolicyResult']:
        """
        Indicates the custom rule.
        The custom_policy structure is documented below.
        """
        return pulumi.get(self, "custom_policies")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Indicates the rule description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the rule name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Mapping[str, _builtins.str]:
        """
        Indicates rule parameters.
        """
        return pulumi.get(self, "parameters")

    @_builtins.property
    @pulumi.getter
    def period(self) -> _builtins.str:
        """
        Indicates how often the rule is triggered, which can be **One_Hour**, **Three_Hours**, **Six_Hours**,
        **Twelve_Hours**, or **TwentyFour_Hours**.
        """
        return pulumi.get(self, "period")

    @_builtins.property
    @pulumi.getter(name="policyAssignmentId")
    def policy_assignment_id(self) -> _builtins.str:
        return pulumi.get(self, "policy_assignment_id")

    @_builtins.property
    @pulumi.getter(name="policyAssignmentType")
    def policy_assignment_type(self) -> _builtins.str:
        """
        Indicates the rule type, which can be builtin or custom.
        """
        return pulumi.get(self, "policy_assignment_type")

    @_builtins.property
    @pulumi.getter(name="policyDefinitionId")
    def policy_definition_id(self) -> _builtins.str:
        """
        Indicates the ID of the policy associated with a rule.
        """
        return pulumi.get(self, "policy_definition_id")

    @_builtins.property
    @pulumi.getter(name="policyFilterV2s")
    def policy_filter_v2s(self) -> Sequence['outputs.GetResourceAggregatorPolicyAssignmentDetailPolicyFilterV2Result']:
        """
        Indicates the policy filter of a rule.
        The policy_filter_v2 structure is documented below.
        """
        return pulumi.get(self, "policy_filter_v2s")

    @_builtins.property
    @pulumi.getter(name="policyFilters")
    def policy_filters(self) -> Sequence['outputs.GetResourceAggregatorPolicyAssignmentDetailPolicyFilterResult']:
        """
        Indicates the policy filter of a rule.
        The policy_filter structure is documented below.
        """
        return pulumi.get(self, "policy_filters")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        Indicates the rule status.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetResourceAggregatorPolicyAssignmentDetailTagResult']:
        """
        Indicates the tags.
        The tags structure is documented below.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        Indicates the ID of a remediation object.
        """
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="targetType")
    def target_type(self) -> _builtins.str:
        """
        Indicates the execution method of remediation.
        """
        return pulumi.get(self, "target_type")

    @_builtins.property
    @pulumi.getter
    def updated(self) -> _builtins.str:
        """
        Indicates the time when the rule was modified.
        """
        return pulumi.get(self, "updated")


class AwaitableGetResourceAggregatorPolicyAssignmentDetailResult(GetResourceAggregatorPolicyAssignmentDetailResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetResourceAggregatorPolicyAssignmentDetailResult(
            account_id=self.account_id,
            aggregator_id=self.aggregator_id,
            created=self.created,
            created_by=self.created_by,
            custom_policies=self.custom_policies,
            description=self.description,
            id=self.id,
            name=self.name,
            parameters=self.parameters,
            period=self.period,
            policy_assignment_id=self.policy_assignment_id,
            policy_assignment_type=self.policy_assignment_type,
            policy_definition_id=self.policy_definition_id,
            policy_filter_v2s=self.policy_filter_v2s,
            policy_filters=self.policy_filters,
            state=self.state,
            tags=self.tags,
            target_id=self.target_id,
            target_type=self.target_type,
            updated=self.updated)


def get_resource_aggregator_policy_assignment_detail(account_id: Optional[_builtins.str] = None,
                                                     aggregator_id: Optional[_builtins.str] = None,
                                                     policy_assignment_id: Optional[_builtins.str] = None,
                                                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetResourceAggregatorPolicyAssignmentDetailResult:
    """
    Use this data source to get the detail about a specified aggregated rule.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    aggregator_id = config.require_object("aggregatorId")
    account_id = config.require_object("accountId")
    policy_assignment_id = config.require_object("policyAssignmentId")
    test = huaweicloud.rms.get_resource_aggregator_policy_assignment_detail(aggregator_id=aggregator_id,
        account_id=account_id,
        policy_assignment_id=policy_assignment_id)
    ```


    :param _builtins.str account_id: Specifies the source account ID.
    :param _builtins.str aggregator_id: Specifies the resource aggregator ID.
    :param _builtins.str policy_assignment_id: Specifies the rule ID.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['aggregatorId'] = aggregator_id
    __args__['policyAssignmentId'] = policy_assignment_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:rms/getResourceAggregatorPolicyAssignmentDetail:getResourceAggregatorPolicyAssignmentDetail', __args__, opts=opts, typ=GetResourceAggregatorPolicyAssignmentDetailResult).value

    return AwaitableGetResourceAggregatorPolicyAssignmentDetailResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        aggregator_id=pulumi.get(__ret__, 'aggregator_id'),
        created=pulumi.get(__ret__, 'created'),
        created_by=pulumi.get(__ret__, 'created_by'),
        custom_policies=pulumi.get(__ret__, 'custom_policies'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        parameters=pulumi.get(__ret__, 'parameters'),
        period=pulumi.get(__ret__, 'period'),
        policy_assignment_id=pulumi.get(__ret__, 'policy_assignment_id'),
        policy_assignment_type=pulumi.get(__ret__, 'policy_assignment_type'),
        policy_definition_id=pulumi.get(__ret__, 'policy_definition_id'),
        policy_filter_v2s=pulumi.get(__ret__, 'policy_filter_v2s'),
        policy_filters=pulumi.get(__ret__, 'policy_filters'),
        state=pulumi.get(__ret__, 'state'),
        tags=pulumi.get(__ret__, 'tags'),
        target_id=pulumi.get(__ret__, 'target_id'),
        target_type=pulumi.get(__ret__, 'target_type'),
        updated=pulumi.get(__ret__, 'updated'))
def get_resource_aggregator_policy_assignment_detail_output(account_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                            aggregator_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                            policy_assignment_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetResourceAggregatorPolicyAssignmentDetailResult]:
    """
    Use this data source to get the detail about a specified aggregated rule.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    aggregator_id = config.require_object("aggregatorId")
    account_id = config.require_object("accountId")
    policy_assignment_id = config.require_object("policyAssignmentId")
    test = huaweicloud.rms.get_resource_aggregator_policy_assignment_detail(aggregator_id=aggregator_id,
        account_id=account_id,
        policy_assignment_id=policy_assignment_id)
    ```


    :param _builtins.str account_id: Specifies the source account ID.
    :param _builtins.str aggregator_id: Specifies the resource aggregator ID.
    :param _builtins.str policy_assignment_id: Specifies the rule ID.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['aggregatorId'] = aggregator_id
    __args__['policyAssignmentId'] = policy_assignment_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:rms/getResourceAggregatorPolicyAssignmentDetail:getResourceAggregatorPolicyAssignmentDetail', __args__, opts=opts, typ=GetResourceAggregatorPolicyAssignmentDetailResult)
    return __ret__.apply(lambda __response__: GetResourceAggregatorPolicyAssignmentDetailResult(
        account_id=pulumi.get(__response__, 'account_id'),
        aggregator_id=pulumi.get(__response__, 'aggregator_id'),
        created=pulumi.get(__response__, 'created'),
        created_by=pulumi.get(__response__, 'created_by'),
        custom_policies=pulumi.get(__response__, 'custom_policies'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        parameters=pulumi.get(__response__, 'parameters'),
        period=pulumi.get(__response__, 'period'),
        policy_assignment_id=pulumi.get(__response__, 'policy_assignment_id'),
        policy_assignment_type=pulumi.get(__response__, 'policy_assignment_type'),
        policy_definition_id=pulumi.get(__response__, 'policy_definition_id'),
        policy_filter_v2s=pulumi.get(__response__, 'policy_filter_v2s'),
        policy_filters=pulumi.get(__response__, 'policy_filters'),
        state=pulumi.get(__response__, 'state'),
        tags=pulumi.get(__response__, 'tags'),
        target_id=pulumi.get(__response__, 'target_id'),
        target_type=pulumi.get(__response__, 'target_type'),
        updated=pulumi.get(__response__, 'updated')))
