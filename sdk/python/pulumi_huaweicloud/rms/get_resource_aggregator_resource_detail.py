# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetResourceAggregatorResourceDetailResult',
    'AwaitableGetResourceAggregatorResourceDetailResult',
    'get_resource_aggregator_resource_detail',
    'get_resource_aggregator_resource_detail_output',
]

@pulumi.output_type
class GetResourceAggregatorResourceDetailResult:
    """
    A collection of values returned by getResourceAggregatorResourceDetail.
    """
    def __init__(__self__, aggregator_domain_id=None, aggregator_id=None, created=None, ep_id=None, id=None, properties=None, region_id=None, resource_id=None, resource_name=None, service_type=None, source_account_id=None, tags=None, type=None, updated=None):
        if aggregator_domain_id and not isinstance(aggregator_domain_id, str):
            raise TypeError("Expected argument 'aggregator_domain_id' to be a str")
        pulumi.set(__self__, "aggregator_domain_id", aggregator_domain_id)
        if aggregator_id and not isinstance(aggregator_id, str):
            raise TypeError("Expected argument 'aggregator_id' to be a str")
        pulumi.set(__self__, "aggregator_id", aggregator_id)
        if created and not isinstance(created, str):
            raise TypeError("Expected argument 'created' to be a str")
        pulumi.set(__self__, "created", created)
        if ep_id and not isinstance(ep_id, str):
            raise TypeError("Expected argument 'ep_id' to be a str")
        pulumi.set(__self__, "ep_id", ep_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if properties and not isinstance(properties, dict):
            raise TypeError("Expected argument 'properties' to be a dict")
        pulumi.set(__self__, "properties", properties)
        if region_id and not isinstance(region_id, str):
            raise TypeError("Expected argument 'region_id' to be a str")
        pulumi.set(__self__, "region_id", region_id)
        if resource_id and not isinstance(resource_id, str):
            raise TypeError("Expected argument 'resource_id' to be a str")
        pulumi.set(__self__, "resource_id", resource_id)
        if resource_name and not isinstance(resource_name, str):
            raise TypeError("Expected argument 'resource_name' to be a str")
        pulumi.set(__self__, "resource_name", resource_name)
        if service_type and not isinstance(service_type, str):
            raise TypeError("Expected argument 'service_type' to be a str")
        pulumi.set(__self__, "service_type", service_type)
        if source_account_id and not isinstance(source_account_id, str):
            raise TypeError("Expected argument 'source_account_id' to be a str")
        pulumi.set(__self__, "source_account_id", source_account_id)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if updated and not isinstance(updated, str):
            raise TypeError("Expected argument 'updated' to be a str")
        pulumi.set(__self__, "updated", updated)

    @_builtins.property
    @pulumi.getter(name="aggregatorDomainId")
    def aggregator_domain_id(self) -> _builtins.str:
        """
        Indicates the resource aggregator account.
        """
        return pulumi.get(self, "aggregator_domain_id")

    @_builtins.property
    @pulumi.getter(name="aggregatorId")
    def aggregator_id(self) -> _builtins.str:
        return pulumi.get(self, "aggregator_id")

    @_builtins.property
    @pulumi.getter
    def created(self) -> _builtins.str:
        """
        Indicates the time when the resource was created.
        """
        return pulumi.get(self, "created")

    @_builtins.property
    @pulumi.getter(name="epId")
    def ep_id(self) -> _builtins.str:
        """
        Indicates the enterprise project ID.
        """
        return pulumi.get(self, "ep_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def properties(self) -> Mapping[str, _builtins.str]:
        """
        Indicates the properties of the resource.
        """
        return pulumi.get(self, "properties")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> _builtins.str:
        return pulumi.get(self, "region_id")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> _builtins.str:
        return pulumi.get(self, "service_type")

    @_builtins.property
    @pulumi.getter(name="sourceAccountId")
    def source_account_id(self) -> _builtins.str:
        return pulumi.get(self, "source_account_id")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        Indicates the resource tag.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def updated(self) -> _builtins.str:
        """
        Indicates the time when the resource was updated.
        """
        return pulumi.get(self, "updated")


class AwaitableGetResourceAggregatorResourceDetailResult(GetResourceAggregatorResourceDetailResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetResourceAggregatorResourceDetailResult(
            aggregator_domain_id=self.aggregator_domain_id,
            aggregator_id=self.aggregator_id,
            created=self.created,
            ep_id=self.ep_id,
            id=self.id,
            properties=self.properties,
            region_id=self.region_id,
            resource_id=self.resource_id,
            resource_name=self.resource_name,
            service_type=self.service_type,
            source_account_id=self.source_account_id,
            tags=self.tags,
            type=self.type,
            updated=self.updated)


def get_resource_aggregator_resource_detail(aggregator_id: Optional[_builtins.str] = None,
                                            region_id: Optional[_builtins.str] = None,
                                            resource_id: Optional[_builtins.str] = None,
                                            resource_name: Optional[_builtins.str] = None,
                                            service_type: Optional[_builtins.str] = None,
                                            source_account_id: Optional[_builtins.str] = None,
                                            type: Optional[_builtins.str] = None,
                                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetResourceAggregatorResourceDetailResult:
    """
    Use this data source to get the detail about a specific resource in a source account.


    :param _builtins.str aggregator_id: Specifies the resource aggregator ID.
    :param _builtins.str region_id: Specifies the region to which the resource belongs.
    :param _builtins.str resource_id: Specifies the resource ID.
    :param _builtins.str resource_name: Specifies the resource name.
    :param _builtins.str service_type: Specifies the cloud service type.
    :param _builtins.str source_account_id: Specifies the source account ID.
    :param _builtins.str type: Specifies the resource type.
    """
    __args__ = dict()
    __args__['aggregatorId'] = aggregator_id
    __args__['regionId'] = region_id
    __args__['resourceId'] = resource_id
    __args__['resourceName'] = resource_name
    __args__['serviceType'] = service_type
    __args__['sourceAccountId'] = source_account_id
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:rms/getResourceAggregatorResourceDetail:getResourceAggregatorResourceDetail', __args__, opts=opts, typ=GetResourceAggregatorResourceDetailResult).value

    return AwaitableGetResourceAggregatorResourceDetailResult(
        aggregator_domain_id=pulumi.get(__ret__, 'aggregator_domain_id'),
        aggregator_id=pulumi.get(__ret__, 'aggregator_id'),
        created=pulumi.get(__ret__, 'created'),
        ep_id=pulumi.get(__ret__, 'ep_id'),
        id=pulumi.get(__ret__, 'id'),
        properties=pulumi.get(__ret__, 'properties'),
        region_id=pulumi.get(__ret__, 'region_id'),
        resource_id=pulumi.get(__ret__, 'resource_id'),
        resource_name=pulumi.get(__ret__, 'resource_name'),
        service_type=pulumi.get(__ret__, 'service_type'),
        source_account_id=pulumi.get(__ret__, 'source_account_id'),
        tags=pulumi.get(__ret__, 'tags'),
        type=pulumi.get(__ret__, 'type'),
        updated=pulumi.get(__ret__, 'updated'))
def get_resource_aggregator_resource_detail_output(aggregator_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                   region_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                   resource_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                   resource_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                   service_type: Optional[pulumi.Input[_builtins.str]] = None,
                                                   source_account_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                   type: Optional[pulumi.Input[_builtins.str]] = None,
                                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetResourceAggregatorResourceDetailResult]:
    """
    Use this data source to get the detail about a specific resource in a source account.


    :param _builtins.str aggregator_id: Specifies the resource aggregator ID.
    :param _builtins.str region_id: Specifies the region to which the resource belongs.
    :param _builtins.str resource_id: Specifies the resource ID.
    :param _builtins.str resource_name: Specifies the resource name.
    :param _builtins.str service_type: Specifies the cloud service type.
    :param _builtins.str source_account_id: Specifies the source account ID.
    :param _builtins.str type: Specifies the resource type.
    """
    __args__ = dict()
    __args__['aggregatorId'] = aggregator_id
    __args__['regionId'] = region_id
    __args__['resourceId'] = resource_id
    __args__['resourceName'] = resource_name
    __args__['serviceType'] = service_type
    __args__['sourceAccountId'] = source_account_id
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:rms/getResourceAggregatorResourceDetail:getResourceAggregatorResourceDetail', __args__, opts=opts, typ=GetResourceAggregatorResourceDetailResult)
    return __ret__.apply(lambda __response__: GetResourceAggregatorResourceDetailResult(
        aggregator_domain_id=pulumi.get(__response__, 'aggregator_domain_id'),
        aggregator_id=pulumi.get(__response__, 'aggregator_id'),
        created=pulumi.get(__response__, 'created'),
        ep_id=pulumi.get(__response__, 'ep_id'),
        id=pulumi.get(__response__, 'id'),
        properties=pulumi.get(__response__, 'properties'),
        region_id=pulumi.get(__response__, 'region_id'),
        resource_id=pulumi.get(__response__, 'resource_id'),
        resource_name=pulumi.get(__response__, 'resource_name'),
        service_type=pulumi.get(__response__, 'service_type'),
        source_account_id=pulumi.get(__response__, 'source_account_id'),
        tags=pulumi.get(__response__, 'tags'),
        type=pulumi.get(__response__, 'type'),
        updated=pulumi.get(__response__, 'updated')))
