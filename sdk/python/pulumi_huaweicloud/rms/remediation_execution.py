# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RemediationExecutionArgs', 'RemediationExecution']

@pulumi.input_type
class RemediationExecutionArgs:
    def __init__(__self__, *,
                 all_supported: pulumi.Input[_builtins.bool],
                 policy_assignment_id: pulumi.Input[_builtins.str],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a RemediationExecution resource.
        :param pulumi.Input[_builtins.bool] all_supported: Specifies whether to perform remediation for all non-compliant resources.
        :param pulumi.Input[_builtins.str] policy_assignment_id: Specifies the policy assignment ID.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] resource_ids: Specifies the list of resource IDs that require remediation.
        """
        pulumi.set(__self__, "all_supported", all_supported)
        pulumi.set(__self__, "policy_assignment_id", policy_assignment_id)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_ids is not None:
            pulumi.set(__self__, "resource_ids", resource_ids)

    @_builtins.property
    @pulumi.getter(name="allSupported")
    def all_supported(self) -> pulumi.Input[_builtins.bool]:
        """
        Specifies whether to perform remediation for all non-compliant resources.
        """
        return pulumi.get(self, "all_supported")

    @all_supported.setter
    def all_supported(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "all_supported", value)

    @_builtins.property
    @pulumi.getter(name="policyAssignmentId")
    def policy_assignment_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the policy assignment ID.
        """
        return pulumi.get(self, "policy_assignment_id")

    @policy_assignment_id.setter
    def policy_assignment_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "policy_assignment_id", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="resourceIds")
    def resource_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the list of resource IDs that require remediation.
        """
        return pulumi.get(self, "resource_ids")

    @resource_ids.setter
    def resource_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "resource_ids", value)


@pulumi.input_type
class _RemediationExecutionState:
    def __init__(__self__, *,
                 all_supported: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_assignment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 results: Optional[pulumi.Input[Sequence[pulumi.Input['RemediationExecutionResultArgs']]]] = None):
        """
        Input properties used for looking up and filtering RemediationExecution resources.
        :param pulumi.Input[_builtins.bool] all_supported: Specifies whether to perform remediation for all non-compliant resources.
        :param pulumi.Input[_builtins.str] policy_assignment_id: Specifies the policy assignment ID.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] resource_ids: Specifies the list of resource IDs that require remediation.
        :param pulumi.Input[Sequence[pulumi.Input['RemediationExecutionResultArgs']]] results: The result of the remediation execution.
        """
        if all_supported is not None:
            pulumi.set(__self__, "all_supported", all_supported)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if policy_assignment_id is not None:
            pulumi.set(__self__, "policy_assignment_id", policy_assignment_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_ids is not None:
            pulumi.set(__self__, "resource_ids", resource_ids)
        if results is not None:
            pulumi.set(__self__, "results", results)

    @_builtins.property
    @pulumi.getter(name="allSupported")
    def all_supported(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to perform remediation for all non-compliant resources.
        """
        return pulumi.get(self, "all_supported")

    @all_supported.setter
    def all_supported(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "all_supported", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="policyAssignmentId")
    def policy_assignment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the policy assignment ID.
        """
        return pulumi.get(self, "policy_assignment_id")

    @policy_assignment_id.setter
    def policy_assignment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policy_assignment_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="resourceIds")
    def resource_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the list of resource IDs that require remediation.
        """
        return pulumi.get(self, "resource_ids")

    @resource_ids.setter
    def resource_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "resource_ids", value)

    @_builtins.property
    @pulumi.getter
    def results(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RemediationExecutionResultArgs']]]]:
        """
        The result of the remediation execution.
        """
        return pulumi.get(self, "results")

    @results.setter
    def results(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RemediationExecutionResultArgs']]]]):
        pulumi.set(self, "results", value)


@pulumi.type_token("huaweicloud:rms/remediationExecution:RemediationExecution")
class RemediationExecution(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 all_supported: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_assignment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Manages a RMS remediation execution resource within HuaweiCloud.

        > The current resource is a one-time resource, and destroying this resource will not change the current status.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        policy_assignment_id = config.require_object("policyAssignmentId")
        test = huaweicloud.rms.RemediationExecution("test",
            policy_assignment_id=policy_assignment_id,
            all_supported=True)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] all_supported: Specifies whether to perform remediation for all non-compliant resources.
        :param pulumi.Input[_builtins.str] policy_assignment_id: Specifies the policy assignment ID.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] resource_ids: Specifies the list of resource IDs that require remediation.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RemediationExecutionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a RMS remediation execution resource within HuaweiCloud.

        > The current resource is a one-time resource, and destroying this resource will not change the current status.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        policy_assignment_id = config.require_object("policyAssignmentId")
        test = huaweicloud.rms.RemediationExecution("test",
            policy_assignment_id=policy_assignment_id,
            all_supported=True)
        ```

        :param str resource_name: The name of the resource.
        :param RemediationExecutionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RemediationExecutionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 all_supported: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_assignment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RemediationExecutionArgs.__new__(RemediationExecutionArgs)

            if all_supported is None and not opts.urn:
                raise TypeError("Missing required property 'all_supported'")
            __props__.__dict__["all_supported"] = all_supported
            __props__.__dict__["enable_force_new"] = enable_force_new
            if policy_assignment_id is None and not opts.urn:
                raise TypeError("Missing required property 'policy_assignment_id'")
            __props__.__dict__["policy_assignment_id"] = policy_assignment_id
            __props__.__dict__["region"] = region
            __props__.__dict__["resource_ids"] = resource_ids
            __props__.__dict__["results"] = None
        super(RemediationExecution, __self__).__init__(
            'huaweicloud:rms/remediationExecution:RemediationExecution',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            all_supported: Optional[pulumi.Input[_builtins.bool]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            policy_assignment_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            resource_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            results: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RemediationExecutionResultArgs', 'RemediationExecutionResultArgsDict']]]]] = None) -> 'RemediationExecution':
        """
        Get an existing RemediationExecution resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] all_supported: Specifies whether to perform remediation for all non-compliant resources.
        :param pulumi.Input[_builtins.str] policy_assignment_id: Specifies the policy assignment ID.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] resource_ids: Specifies the list of resource IDs that require remediation.
        :param pulumi.Input[Sequence[pulumi.Input[Union['RemediationExecutionResultArgs', 'RemediationExecutionResultArgsDict']]]] results: The result of the remediation execution.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RemediationExecutionState.__new__(_RemediationExecutionState)

        __props__.__dict__["all_supported"] = all_supported
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["policy_assignment_id"] = policy_assignment_id
        __props__.__dict__["region"] = region
        __props__.__dict__["resource_ids"] = resource_ids
        __props__.__dict__["results"] = results
        return RemediationExecution(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="allSupported")
    def all_supported(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether to perform remediation for all non-compliant resources.
        """
        return pulumi.get(self, "all_supported")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="policyAssignmentId")
    def policy_assignment_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the policy assignment ID.
        """
        return pulumi.get(self, "policy_assignment_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceIds")
    def resource_ids(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Specifies the list of resource IDs that require remediation.
        """
        return pulumi.get(self, "resource_ids")

    @_builtins.property
    @pulumi.getter
    def results(self) -> pulumi.Output[Sequence['outputs.RemediationExecutionResult']]:
        """
        The result of the remediation execution.
        """
        return pulumi.get(self, "results")

