# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetResourcePolicyStatesResult',
    'AwaitableGetResourcePolicyStatesResult',
    'get_resource_policy_states',
    'get_resource_policy_states_output',
]

@pulumi.output_type
class GetResourcePolicyStatesResult:
    """
    A collection of values returned by getResourcePolicyStates.
    """
    def __init__(__self__, compliance_state=None, id=None, resource_id=None, values=None):
        if compliance_state and not isinstance(compliance_state, str):
            raise TypeError("Expected argument 'compliance_state' to be a str")
        pulumi.set(__self__, "compliance_state", compliance_state)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if resource_id and not isinstance(resource_id, str):
            raise TypeError("Expected argument 'resource_id' to be a str")
        pulumi.set(__self__, "resource_id", resource_id)
        if values and not isinstance(values, list):
            raise TypeError("Expected argument 'values' to be a list")
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter(name="complianceState")
    def compliance_state(self) -> Optional[_builtins.str]:
        """
        Indicates the compliance state.
        """
        return pulumi.get(self, "compliance_state")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        Indicates the resource ID.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence['outputs.GetResourcePolicyStatesValueResult']:
        """
        Indicates the return value of querying the compliance result.
        """
        return pulumi.get(self, "values")


class AwaitableGetResourcePolicyStatesResult(GetResourcePolicyStatesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetResourcePolicyStatesResult(
            compliance_state=self.compliance_state,
            id=self.id,
            resource_id=self.resource_id,
            values=self.values)


def get_resource_policy_states(compliance_state: Optional[_builtins.str] = None,
                               resource_id: Optional[_builtins.str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetResourcePolicyStatesResult:
    """
    Use this data source to query policy states of a resource.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    resource_id = config.require_object("resourceId")
    test = huaweicloud.rms.get_resource_policy_states(resource_id=resource_id)
    ```


    :param _builtins.str compliance_state: Specifies the compliance status.
    :param _builtins.str resource_id: Specifies the resource ID.
    """
    __args__ = dict()
    __args__['complianceState'] = compliance_state
    __args__['resourceId'] = resource_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:rms/getResourcePolicyStates:getResourcePolicyStates', __args__, opts=opts, typ=GetResourcePolicyStatesResult).value

    return AwaitableGetResourcePolicyStatesResult(
        compliance_state=pulumi.get(__ret__, 'compliance_state'),
        id=pulumi.get(__ret__, 'id'),
        resource_id=pulumi.get(__ret__, 'resource_id'),
        values=pulumi.get(__ret__, 'values'))
def get_resource_policy_states_output(compliance_state: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                      resource_id: Optional[pulumi.Input[_builtins.str]] = None,
                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetResourcePolicyStatesResult]:
    """
    Use this data source to query policy states of a resource.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    resource_id = config.require_object("resourceId")
    test = huaweicloud.rms.get_resource_policy_states(resource_id=resource_id)
    ```


    :param _builtins.str compliance_state: Specifies the compliance status.
    :param _builtins.str resource_id: Specifies the resource ID.
    """
    __args__ = dict()
    __args__['complianceState'] = compliance_state
    __args__['resourceId'] = resource_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:rms/getResourcePolicyStates:getResourcePolicyStates', __args__, opts=opts, typ=GetResourcePolicyStatesResult)
    return __ret__.apply(lambda __response__: GetResourcePolicyStatesResult(
        compliance_state=pulumi.get(__response__, 'compliance_state'),
        id=pulumi.get(__response__, 'id'),
        resource_id=pulumi.get(__response__, 'resource_id'),
        values=pulumi.get(__response__, 'values')))
