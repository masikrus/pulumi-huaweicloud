# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['ResourceAggregationAuthorizationArgs', 'ResourceAggregationAuthorization']

@pulumi.input_type
class ResourceAggregationAuthorizationArgs:
    def __init__(__self__, *,
                 account_id: pulumi.Input[_builtins.str]):
        """
        The set of arguments for constructing a ResourceAggregationAuthorization resource.
        :param pulumi.Input[_builtins.str] account_id: Specifies the ID of the resource aggregation account to be authorized.
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "account_id", account_id)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the resource aggregation account to be authorized.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "account_id", value)


@pulumi.input_type
class _ResourceAggregationAuthorizationState:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 urn: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ResourceAggregationAuthorization resources.
        :param pulumi.Input[_builtins.str] account_id: Specifies the ID of the resource aggregation account to be authorized.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] created_at: Indicates the time when the resource aggregation account was authorized.
        :param pulumi.Input[_builtins.str] urn: Indicates the authorization identifier of the resource aggregation account.
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if urn is not None:
            pulumi.set(__self__, "urn", urn)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the resource aggregation account to be authorized.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "account_id", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the time when the resource aggregation account was authorized.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def urn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the authorization identifier of the resource aggregation account.
        """
        return pulumi.get(self, "urn")

    @urn.setter
    def urn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "urn", value)


@pulumi.type_token("huaweicloud:rms/resourceAggregationAuthorization:ResourceAggregationAuthorization")
class ResourceAggregationAuthorization(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a RMS aggregation authorization resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        source_account = config.require_object("sourceAccount")
        test = huaweicloud.rms.ResourceAggregationAuthorization("test", account_id=source_account)
        ```

        ## Import

        The aggregation authorization can be imported using the `account_id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:rms/resourceAggregationAuthorization:ResourceAggregationAuthorization test 036a12ef8327c4194346684fdbe0b37e
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] account_id: Specifies the ID of the resource aggregation account to be authorized.
               Changing this parameter will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ResourceAggregationAuthorizationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a RMS aggregation authorization resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        source_account = config.require_object("sourceAccount")
        test = huaweicloud.rms.ResourceAggregationAuthorization("test", account_id=source_account)
        ```

        ## Import

        The aggregation authorization can be imported using the `account_id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:rms/resourceAggregationAuthorization:ResourceAggregationAuthorization test 036a12ef8327c4194346684fdbe0b37e
        ```

        :param str resource_name: The name of the resource.
        :param ResourceAggregationAuthorizationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ResourceAggregationAuthorizationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ResourceAggregationAuthorizationArgs.__new__(ResourceAggregationAuthorizationArgs)

            if account_id is None and not opts.urn:
                raise TypeError("Missing required property 'account_id'")
            __props__.__dict__["account_id"] = account_id
            __props__.__dict__["created_at"] = None
            __props__.__dict__["urn"] = None
        super(ResourceAggregationAuthorization, __self__).__init__(
            'huaweicloud:rms/resourceAggregationAuthorization:ResourceAggregationAuthorization',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_id: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            urn: Optional[pulumi.Input[_builtins.str]] = None) -> 'ResourceAggregationAuthorization':
        """
        Get an existing ResourceAggregationAuthorization resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] account_id: Specifies the ID of the resource aggregation account to be authorized.
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] created_at: Indicates the time when the resource aggregation account was authorized.
        :param pulumi.Input[_builtins.str] urn: Indicates the authorization identifier of the resource aggregation account.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ResourceAggregationAuthorizationState.__new__(_ResourceAggregationAuthorizationState)

        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["urn"] = urn
        return ResourceAggregationAuthorization(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the resource aggregation account to be authorized.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the time when the resource aggregation account was authorized.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def urn(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the authorization identifier of the resource aggregation account.
        """
        return pulumi.get(self, "urn")

