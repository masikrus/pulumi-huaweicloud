# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RemediationExceptionArgs', 'RemediationException']

@pulumi.input_type
class RemediationExceptionArgs:
    def __init__(__self__, *,
                 exceptions: pulumi.Input[Sequence[pulumi.Input['RemediationExceptionExceptionArgs']]],
                 policy_assignment_id: pulumi.Input[_builtins.str],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a RemediationException resource.
        :param pulumi.Input[Sequence[pulumi.Input['RemediationExceptionExceptionArgs']]] exceptions: Specifies the list of remediation exceptions.
               The exceptions structure is documented below.
               
               <a name="Exceptions"></a>
               The `exceptions` block supports:
        :param pulumi.Input[_builtins.str] policy_assignment_id: Specifies the policy assignment ID.
        :param pulumi.Input[_builtins.str] region: The region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        pulumi.set(__self__, "exceptions", exceptions)
        pulumi.set(__self__, "policy_assignment_id", policy_assignment_id)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def exceptions(self) -> pulumi.Input[Sequence[pulumi.Input['RemediationExceptionExceptionArgs']]]:
        """
        Specifies the list of remediation exceptions.
        The exceptions structure is documented below.

        <a name="Exceptions"></a>
        The `exceptions` block supports:
        """
        return pulumi.get(self, "exceptions")

    @exceptions.setter
    def exceptions(self, value: pulumi.Input[Sequence[pulumi.Input['RemediationExceptionExceptionArgs']]]):
        pulumi.set(self, "exceptions", value)

    @_builtins.property
    @pulumi.getter(name="policyAssignmentId")
    def policy_assignment_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the policy assignment ID.
        """
        return pulumi.get(self, "policy_assignment_id")

    @policy_assignment_id.setter
    def policy_assignment_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "policy_assignment_id", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _RemediationExceptionState:
    def __init__(__self__, *,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 exceptions: Optional[pulumi.Input[Sequence[pulumi.Input['RemediationExceptionExceptionArgs']]]] = None,
                 policy_assignment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering RemediationException resources.
        :param pulumi.Input[Sequence[pulumi.Input['RemediationExceptionExceptionArgs']]] exceptions: Specifies the list of remediation exceptions.
               The exceptions structure is documented below.
               
               <a name="Exceptions"></a>
               The `exceptions` block supports:
        :param pulumi.Input[_builtins.str] policy_assignment_id: Specifies the policy assignment ID.
        :param pulumi.Input[_builtins.str] region: The region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if exceptions is not None:
            pulumi.set(__self__, "exceptions", exceptions)
        if policy_assignment_id is not None:
            pulumi.set(__self__, "policy_assignment_id", policy_assignment_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def exceptions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RemediationExceptionExceptionArgs']]]]:
        """
        Specifies the list of remediation exceptions.
        The exceptions structure is documented below.

        <a name="Exceptions"></a>
        The `exceptions` block supports:
        """
        return pulumi.get(self, "exceptions")

    @exceptions.setter
    def exceptions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RemediationExceptionExceptionArgs']]]]):
        pulumi.set(self, "exceptions", value)

    @_builtins.property
    @pulumi.getter(name="policyAssignmentId")
    def policy_assignment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the policy assignment ID.
        """
        return pulumi.get(self, "policy_assignment_id")

    @policy_assignment_id.setter
    def policy_assignment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policy_assignment_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("huaweicloud:rms/remediationException:RemediationException")
class RemediationException(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 exceptions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RemediationExceptionExceptionArgs', 'RemediationExceptionExceptionArgsDict']]]]] = None,
                 policy_assignment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a RMS remediation exception resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        policy_assignment_id = config.require_object("policyAssignmentId")
        resource_id = config.require_object("resourceId")
        test = huaweicloud.rms.RemediationException("test",
            policy_assignment_id=policy_assignment_id,
            exceptions=[{
                "resource_id": resource_id,
            }])
        ```

        ## Import

        The remediation exception can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:rms/remediationException:RemediationException test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['RemediationExceptionExceptionArgs', 'RemediationExceptionExceptionArgsDict']]]] exceptions: Specifies the list of remediation exceptions.
               The exceptions structure is documented below.
               
               <a name="Exceptions"></a>
               The `exceptions` block supports:
        :param pulumi.Input[_builtins.str] policy_assignment_id: Specifies the policy assignment ID.
        :param pulumi.Input[_builtins.str] region: The region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RemediationExceptionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a RMS remediation exception resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        policy_assignment_id = config.require_object("policyAssignmentId")
        resource_id = config.require_object("resourceId")
        test = huaweicloud.rms.RemediationException("test",
            policy_assignment_id=policy_assignment_id,
            exceptions=[{
                "resource_id": resource_id,
            }])
        ```

        ## Import

        The remediation exception can be imported using `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:rms/remediationException:RemediationException test <id>
        ```

        :param str resource_name: The name of the resource.
        :param RemediationExceptionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RemediationExceptionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 exceptions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RemediationExceptionExceptionArgs', 'RemediationExceptionExceptionArgsDict']]]]] = None,
                 policy_assignment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RemediationExceptionArgs.__new__(RemediationExceptionArgs)

            __props__.__dict__["enable_force_new"] = enable_force_new
            if exceptions is None and not opts.urn:
                raise TypeError("Missing required property 'exceptions'")
            __props__.__dict__["exceptions"] = exceptions
            if policy_assignment_id is None and not opts.urn:
                raise TypeError("Missing required property 'policy_assignment_id'")
            __props__.__dict__["policy_assignment_id"] = policy_assignment_id
            __props__.__dict__["region"] = region
        super(RemediationException, __self__).__init__(
            'huaweicloud:rms/remediationException:RemediationException',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            exceptions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RemediationExceptionExceptionArgs', 'RemediationExceptionExceptionArgsDict']]]]] = None,
            policy_assignment_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'RemediationException':
        """
        Get an existing RemediationException resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['RemediationExceptionExceptionArgs', 'RemediationExceptionExceptionArgsDict']]]] exceptions: Specifies the list of remediation exceptions.
               The exceptions structure is documented below.
               
               <a name="Exceptions"></a>
               The `exceptions` block supports:
        :param pulumi.Input[_builtins.str] policy_assignment_id: Specifies the policy assignment ID.
        :param pulumi.Input[_builtins.str] region: The region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RemediationExceptionState.__new__(_RemediationExceptionState)

        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["exceptions"] = exceptions
        __props__.__dict__["policy_assignment_id"] = policy_assignment_id
        __props__.__dict__["region"] = region
        return RemediationException(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter
    def exceptions(self) -> pulumi.Output[Sequence['outputs.RemediationExceptionException']]:
        """
        Specifies the list of remediation exceptions.
        The exceptions structure is documented below.

        <a name="Exceptions"></a>
        The `exceptions` block supports:
        """
        return pulumi.get(self, "exceptions")

    @_builtins.property
    @pulumi.getter(name="policyAssignmentId")
    def policy_assignment_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the policy assignment ID.
        """
        return pulumi.get(self, "policy_assignment_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

