# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetResourceAggregatorPolicyAssignmentsResult',
    'AwaitableGetResourceAggregatorPolicyAssignmentsResult',
    'get_resource_aggregator_policy_assignments',
    'get_resource_aggregator_policy_assignments_output',
]

@pulumi.output_type
class GetResourceAggregatorPolicyAssignmentsResult:
    """
    A collection of values returned by getResourceAggregatorPolicyAssignments.
    """
    def __init__(__self__, aggregator_id=None, assignments=None, filter=None, id=None):
        if aggregator_id and not isinstance(aggregator_id, str):
            raise TypeError("Expected argument 'aggregator_id' to be a str")
        pulumi.set(__self__, "aggregator_id", aggregator_id)
        if assignments and not isinstance(assignments, list):
            raise TypeError("Expected argument 'assignments' to be a list")
        pulumi.set(__self__, "assignments", assignments)
        if filter and not isinstance(filter, dict):
            raise TypeError("Expected argument 'filter' to be a dict")
        pulumi.set(__self__, "filter", filter)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter(name="aggregatorId")
    def aggregator_id(self) -> _builtins.str:
        return pulumi.get(self, "aggregator_id")

    @_builtins.property
    @pulumi.getter
    def assignments(self) -> Sequence['outputs.GetResourceAggregatorPolicyAssignmentsAssignmentResult']:
        """
        The policy assignments list. The assignments structure is documented below.
        """
        return pulumi.get(self, "assignments")

    @_builtins.property
    @pulumi.getter
    def filter(self) -> Optional['outputs.GetResourceAggregatorPolicyAssignmentsFilterResult']:
        return pulumi.get(self, "filter")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")


class AwaitableGetResourceAggregatorPolicyAssignmentsResult(GetResourceAggregatorPolicyAssignmentsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetResourceAggregatorPolicyAssignmentsResult(
            aggregator_id=self.aggregator_id,
            assignments=self.assignments,
            filter=self.filter,
            id=self.id)


def get_resource_aggregator_policy_assignments(aggregator_id: Optional[_builtins.str] = None,
                                               filter: Optional[Union['GetResourceAggregatorPolicyAssignmentsFilterArgs', 'GetResourceAggregatorPolicyAssignmentsFilterArgsDict']] = None,
                                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetResourceAggregatorPolicyAssignmentsResult:
    """
    Use this data source to get the list of RMS resource aggregator policy assignments.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    aggregator_id = config.require_object("aggregatorId")
    test = huaweicloud.rms.get_resource_aggregator_policy_assignments(aggregator_id=aggregator_id)
    ```


    :param _builtins.str aggregator_id: Specifies the aggregator ID.
    :param Union['GetResourceAggregatorPolicyAssignmentsFilterArgs', 'GetResourceAggregatorPolicyAssignmentsFilterArgsDict'] filter: Specifies the filter. The filter structure is documented below.
           
           <a name="filter"></a>
           The `filter` block supports:
    """
    __args__ = dict()
    __args__['aggregatorId'] = aggregator_id
    __args__['filter'] = filter
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:rms/getResourceAggregatorPolicyAssignments:getResourceAggregatorPolicyAssignments', __args__, opts=opts, typ=GetResourceAggregatorPolicyAssignmentsResult).value

    return AwaitableGetResourceAggregatorPolicyAssignmentsResult(
        aggregator_id=pulumi.get(__ret__, 'aggregator_id'),
        assignments=pulumi.get(__ret__, 'assignments'),
        filter=pulumi.get(__ret__, 'filter'),
        id=pulumi.get(__ret__, 'id'))
def get_resource_aggregator_policy_assignments_output(aggregator_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                      filter: Optional[pulumi.Input[Optional[Union['GetResourceAggregatorPolicyAssignmentsFilterArgs', 'GetResourceAggregatorPolicyAssignmentsFilterArgsDict']]]] = None,
                                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetResourceAggregatorPolicyAssignmentsResult]:
    """
    Use this data source to get the list of RMS resource aggregator policy assignments.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    aggregator_id = config.require_object("aggregatorId")
    test = huaweicloud.rms.get_resource_aggregator_policy_assignments(aggregator_id=aggregator_id)
    ```


    :param _builtins.str aggregator_id: Specifies the aggregator ID.
    :param Union['GetResourceAggregatorPolicyAssignmentsFilterArgs', 'GetResourceAggregatorPolicyAssignmentsFilterArgsDict'] filter: Specifies the filter. The filter structure is documented below.
           
           <a name="filter"></a>
           The `filter` block supports:
    """
    __args__ = dict()
    __args__['aggregatorId'] = aggregator_id
    __args__['filter'] = filter
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:rms/getResourceAggregatorPolicyAssignments:getResourceAggregatorPolicyAssignments', __args__, opts=opts, typ=GetResourceAggregatorPolicyAssignmentsResult)
    return __ret__.apply(lambda __response__: GetResourceAggregatorPolicyAssignmentsResult(
        aggregator_id=pulumi.get(__response__, 'aggregator_id'),
        assignments=pulumi.get(__response__, 'assignments'),
        filter=pulumi.get(__response__, 'filter'),
        id=pulumi.get(__response__, 'id')))
