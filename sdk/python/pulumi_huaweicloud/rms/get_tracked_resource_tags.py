# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetTrackedResourceTagsResult',
    'AwaitableGetTrackedResourceTagsResult',
    'get_tracked_resource_tags',
    'get_tracked_resource_tags_output',
]

@pulumi.output_type
class GetTrackedResourceTagsResult:
    """
    A collection of values returned by getTrackedResourceTags.
    """
    def __init__(__self__, id=None, key=None, resource_deleted=None, tags=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if key and not isinstance(key, str):
            raise TypeError("Expected argument 'key' to be a str")
        pulumi.set(__self__, "key", key)
        if resource_deleted and not isinstance(resource_deleted, bool):
            raise TypeError("Expected argument 'resource_deleted' to be a bool")
        pulumi.set(__self__, "resource_deleted", resource_deleted)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        """
        The tag key.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter(name="resourceDeleted")
    def resource_deleted(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "resource_deleted")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetTrackedResourceTagsTagResult']:
        """
        The tag list.
        The tags structure is documented below.
        """
        return pulumi.get(self, "tags")


class AwaitableGetTrackedResourceTagsResult(GetTrackedResourceTagsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTrackedResourceTagsResult(
            id=self.id,
            key=self.key,
            resource_deleted=self.resource_deleted,
            tags=self.tags)


def get_tracked_resource_tags(key: Optional[_builtins.str] = None,
                              resource_deleted: Optional[_builtins.bool] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTrackedResourceTagsResult:
    """
    Use this data source to query tags of tracked resources.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.rms.get_tracked_resource_tags()
    ```


    :param _builtins.str key: Specifies the tag key name.
    :param _builtins.bool resource_deleted: Specifies whether to query deleted resources. Defaults to false.
    """
    __args__ = dict()
    __args__['key'] = key
    __args__['resourceDeleted'] = resource_deleted
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:rms/getTrackedResourceTags:getTrackedResourceTags', __args__, opts=opts, typ=GetTrackedResourceTagsResult).value

    return AwaitableGetTrackedResourceTagsResult(
        id=pulumi.get(__ret__, 'id'),
        key=pulumi.get(__ret__, 'key'),
        resource_deleted=pulumi.get(__ret__, 'resource_deleted'),
        tags=pulumi.get(__ret__, 'tags'))
def get_tracked_resource_tags_output(key: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     resource_deleted: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTrackedResourceTagsResult]:
    """
    Use this data source to query tags of tracked resources.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.rms.get_tracked_resource_tags()
    ```


    :param _builtins.str key: Specifies the tag key name.
    :param _builtins.bool resource_deleted: Specifies whether to query deleted resources. Defaults to false.
    """
    __args__ = dict()
    __args__['key'] = key
    __args__['resourceDeleted'] = resource_deleted
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:rms/getTrackedResourceTags:getTrackedResourceTags', __args__, opts=opts, typ=GetTrackedResourceTagsResult)
    return __ret__.apply(lambda __response__: GetTrackedResourceTagsResult(
        id=pulumi.get(__response__, 'id'),
        key=pulumi.get(__response__, 'key'),
        resource_deleted=pulumi.get(__response__, 'resource_deleted'),
        tags=pulumi.get(__response__, 'tags')))
