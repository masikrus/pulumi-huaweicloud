# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetResourceAggregatorPolicyStatesResult',
    'AwaitableGetResourceAggregatorPolicyStatesResult',
    'get_resource_aggregator_policy_states',
    'get_resource_aggregator_policy_states_output',
]

@pulumi.output_type
class GetResourceAggregatorPolicyStatesResult:
    """
    A collection of values returned by getResourceAggregatorPolicyStates.
    """
    def __init__(__self__, account_id=None, aggregator_id=None, compliance_state=None, id=None, policy_assignment_name=None, resource_id=None, resource_name=None, states=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if aggregator_id and not isinstance(aggregator_id, str):
            raise TypeError("Expected argument 'aggregator_id' to be a str")
        pulumi.set(__self__, "aggregator_id", aggregator_id)
        if compliance_state and not isinstance(compliance_state, str):
            raise TypeError("Expected argument 'compliance_state' to be a str")
        pulumi.set(__self__, "compliance_state", compliance_state)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if policy_assignment_name and not isinstance(policy_assignment_name, str):
            raise TypeError("Expected argument 'policy_assignment_name' to be a str")
        pulumi.set(__self__, "policy_assignment_name", policy_assignment_name)
        if resource_id and not isinstance(resource_id, str):
            raise TypeError("Expected argument 'resource_id' to be a str")
        pulumi.set(__self__, "resource_id", resource_id)
        if resource_name and not isinstance(resource_name, str):
            raise TypeError("Expected argument 'resource_name' to be a str")
        pulumi.set(__self__, "resource_name", resource_name)
        if states and not isinstance(states, list):
            raise TypeError("Expected argument 'states' to be a list")
        pulumi.set(__self__, "states", states)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="aggregatorId")
    def aggregator_id(self) -> _builtins.str:
        return pulumi.get(self, "aggregator_id")

    @_builtins.property
    @pulumi.getter(name="complianceState")
    def compliance_state(self) -> Optional[_builtins.str]:
        """
        The compliance status.
        """
        return pulumi.get(self, "compliance_state")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="policyAssignmentName")
    def policy_assignment_name(self) -> Optional[_builtins.str]:
        """
        The policy assignment name.
        """
        return pulumi.get(self, "policy_assignment_name")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[_builtins.str]:
        """
        The resource ID.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[_builtins.str]:
        """
        The resource name.
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter
    def states(self) -> Sequence['outputs.GetResourceAggregatorPolicyStatesStateResult']:
        """
        The policy states list.
        """
        return pulumi.get(self, "states")


class AwaitableGetResourceAggregatorPolicyStatesResult(GetResourceAggregatorPolicyStatesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetResourceAggregatorPolicyStatesResult(
            account_id=self.account_id,
            aggregator_id=self.aggregator_id,
            compliance_state=self.compliance_state,
            id=self.id,
            policy_assignment_name=self.policy_assignment_name,
            resource_id=self.resource_id,
            resource_name=self.resource_name,
            states=self.states)


def get_resource_aggregator_policy_states(account_id: Optional[_builtins.str] = None,
                                          aggregator_id: Optional[_builtins.str] = None,
                                          compliance_state: Optional[_builtins.str] = None,
                                          policy_assignment_name: Optional[_builtins.str] = None,
                                          resource_id: Optional[_builtins.str] = None,
                                          resource_name: Optional[_builtins.str] = None,
                                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetResourceAggregatorPolicyStatesResult:
    """
    Use this data source to get the list of RMS resource aggregator policy states.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    aggregator_id = config.require_object("aggregatorId")
    test = huaweicloud.rms.get_resource_aggregator_policy_states(aggregator_id=aggregator_id)
    ```


    :param _builtins.str account_id: Specifies the ID of account to which the resource belongs.
    :param _builtins.str aggregator_id: Specifies the aggregator ID.
    :param _builtins.str compliance_state: Specifies the compliance state.
           The value can be: **Compliant** and **NonCompliant**.
    :param _builtins.str policy_assignment_name: Specifies the policy assignment name.
    :param _builtins.str resource_id: Specifies the resource ID.
    :param _builtins.str resource_name: Specifies the resource name.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['aggregatorId'] = aggregator_id
    __args__['complianceState'] = compliance_state
    __args__['policyAssignmentName'] = policy_assignment_name
    __args__['resourceId'] = resource_id
    __args__['resourceName'] = resource_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:rms/getResourceAggregatorPolicyStates:getResourceAggregatorPolicyStates', __args__, opts=opts, typ=GetResourceAggregatorPolicyStatesResult).value

    return AwaitableGetResourceAggregatorPolicyStatesResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        aggregator_id=pulumi.get(__ret__, 'aggregator_id'),
        compliance_state=pulumi.get(__ret__, 'compliance_state'),
        id=pulumi.get(__ret__, 'id'),
        policy_assignment_name=pulumi.get(__ret__, 'policy_assignment_name'),
        resource_id=pulumi.get(__ret__, 'resource_id'),
        resource_name=pulumi.get(__ret__, 'resource_name'),
        states=pulumi.get(__ret__, 'states'))
def get_resource_aggregator_policy_states_output(account_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                 aggregator_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                 compliance_state: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                 policy_assignment_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                 resource_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                 resource_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetResourceAggregatorPolicyStatesResult]:
    """
    Use this data source to get the list of RMS resource aggregator policy states.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    aggregator_id = config.require_object("aggregatorId")
    test = huaweicloud.rms.get_resource_aggregator_policy_states(aggregator_id=aggregator_id)
    ```


    :param _builtins.str account_id: Specifies the ID of account to which the resource belongs.
    :param _builtins.str aggregator_id: Specifies the aggregator ID.
    :param _builtins.str compliance_state: Specifies the compliance state.
           The value can be: **Compliant** and **NonCompliant**.
    :param _builtins.str policy_assignment_name: Specifies the policy assignment name.
    :param _builtins.str resource_id: Specifies the resource ID.
    :param _builtins.str resource_name: Specifies the resource name.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['aggregatorId'] = aggregator_id
    __args__['complianceState'] = compliance_state
    __args__['policyAssignmentName'] = policy_assignment_name
    __args__['resourceId'] = resource_id
    __args__['resourceName'] = resource_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:rms/getResourceAggregatorPolicyStates:getResourceAggregatorPolicyStates', __args__, opts=opts, typ=GetResourceAggregatorPolicyStatesResult)
    return __ret__.apply(lambda __response__: GetResourceAggregatorPolicyStatesResult(
        account_id=pulumi.get(__response__, 'account_id'),
        aggregator_id=pulumi.get(__response__, 'aggregator_id'),
        compliance_state=pulumi.get(__response__, 'compliance_state'),
        id=pulumi.get(__response__, 'id'),
        policy_assignment_name=pulumi.get(__response__, 'policy_assignment_name'),
        resource_id=pulumi.get(__response__, 'resource_id'),
        resource_name=pulumi.get(__response__, 'resource_name'),
        states=pulumi.get(__response__, 'states')))
