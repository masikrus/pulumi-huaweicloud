# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAssignmentPackageResultsResult',
    'AwaitableGetAssignmentPackageResultsResult',
    'get_assignment_package_results',
    'get_assignment_package_results_output',
]

@pulumi.output_type
class GetAssignmentPackageResultsResult:
    """
    A collection of values returned by getAssignmentPackageResults.
    """
    def __init__(__self__, assignment_package_id=None, id=None, policy_assignment_name=None, values=None):
        if assignment_package_id and not isinstance(assignment_package_id, str):
            raise TypeError("Expected argument 'assignment_package_id' to be a str")
        pulumi.set(__self__, "assignment_package_id", assignment_package_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if policy_assignment_name and not isinstance(policy_assignment_name, str):
            raise TypeError("Expected argument 'policy_assignment_name' to be a str")
        pulumi.set(__self__, "policy_assignment_name", policy_assignment_name)
        if values and not isinstance(values, list):
            raise TypeError("Expected argument 'values' to be a list")
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter(name="assignmentPackageId")
    def assignment_package_id(self) -> _builtins.str:
        return pulumi.get(self, "assignment_package_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="policyAssignmentName")
    def policy_assignment_name(self) -> Optional[_builtins.str]:
        """
        The policy assignment name.
        """
        return pulumi.get(self, "policy_assignment_name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence['outputs.GetAssignmentPackageResultsValueResult']:
        """
        The details about compliance results of assignments in an assignment package.
        """
        return pulumi.get(self, "values")


class AwaitableGetAssignmentPackageResultsResult(GetAssignmentPackageResultsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAssignmentPackageResultsResult(
            assignment_package_id=self.assignment_package_id,
            id=self.id,
            policy_assignment_name=self.policy_assignment_name,
            values=self.values)


def get_assignment_package_results(assignment_package_id: Optional[_builtins.str] = None,
                                   policy_assignment_name: Optional[_builtins.str] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAssignmentPackageResultsResult:
    """
    Use this data source to get the list of RMS assignment package results.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    assignment_package_id = config.require_object("assignmentPackageId")
    basic = huaweicloud.rms.get_assignment_package_results(assignment_package_id=assignment_package_id)
    ```


    :param _builtins.str assignment_package_id: Specifies the assignment package name.
    :param _builtins.str policy_assignment_name: Specifies the policy assignment name. Fuzzy search is supported.
    """
    __args__ = dict()
    __args__['assignmentPackageId'] = assignment_package_id
    __args__['policyAssignmentName'] = policy_assignment_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:rms/getAssignmentPackageResults:getAssignmentPackageResults', __args__, opts=opts, typ=GetAssignmentPackageResultsResult).value

    return AwaitableGetAssignmentPackageResultsResult(
        assignment_package_id=pulumi.get(__ret__, 'assignment_package_id'),
        id=pulumi.get(__ret__, 'id'),
        policy_assignment_name=pulumi.get(__ret__, 'policy_assignment_name'),
        values=pulumi.get(__ret__, 'values'))
def get_assignment_package_results_output(assignment_package_id: Optional[pulumi.Input[_builtins.str]] = None,
                                          policy_assignment_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAssignmentPackageResultsResult]:
    """
    Use this data source to get the list of RMS assignment package results.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    assignment_package_id = config.require_object("assignmentPackageId")
    basic = huaweicloud.rms.get_assignment_package_results(assignment_package_id=assignment_package_id)
    ```


    :param _builtins.str assignment_package_id: Specifies the assignment package name.
    :param _builtins.str policy_assignment_name: Specifies the policy assignment name. Fuzzy search is supported.
    """
    __args__ = dict()
    __args__['assignmentPackageId'] = assignment_package_id
    __args__['policyAssignmentName'] = policy_assignment_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:rms/getAssignmentPackageResults:getAssignmentPackageResults', __args__, opts=opts, typ=GetAssignmentPackageResultsResult)
    return __ret__.apply(lambda __response__: GetAssignmentPackageResultsResult(
        assignment_package_id=pulumi.get(__response__, 'assignment_package_id'),
        id=pulumi.get(__response__, 'id'),
        policy_assignment_name=pulumi.get(__response__, 'policy_assignment_name'),
        values=pulumi.get(__response__, 'values')))
