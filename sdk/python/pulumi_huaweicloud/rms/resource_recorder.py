# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ResourceRecorderArgs', 'ResourceRecorder']

@pulumi.input_type
class ResourceRecorderArgs:
    def __init__(__self__, *,
                 agency_name: pulumi.Input[_builtins.str],
                 selector: pulumi.Input['ResourceRecorderSelectorArgs'],
                 obs_channel: Optional[pulumi.Input['ResourceRecorderObsChannelArgs']] = None,
                 smn_channel: Optional[pulumi.Input['ResourceRecorderSmnChannelArgs']] = None):
        """
        The set of arguments for constructing a ResourceRecorder resource.
        :param pulumi.Input[_builtins.str] agency_name: Specifies the IAM agency name which must include permissions
               for sending notifications through SMN and for writing data into OBS.
        :param pulumi.Input['ResourceRecorderSelectorArgs'] selector: Specifies configurations of resource selector.
               The object structure is documented below.
        :param pulumi.Input['ResourceRecorderObsChannelArgs'] obs_channel: Specifies configurations of the OBS bucket used for data dumping.
               The object structure is documented below.
        :param pulumi.Input['ResourceRecorderSmnChannelArgs'] smn_channel: Specifies configurations of the SMN channel used to send notifications.
               The object structure is documented below.
               
               > At least one `obs_channel` or `smn_channel` must be configured.
               
               <a name="Recorder_SelectorConfigBody"></a>
               The `selector` block supports:
        """
        pulumi.set(__self__, "agency_name", agency_name)
        pulumi.set(__self__, "selector", selector)
        if obs_channel is not None:
            pulumi.set(__self__, "obs_channel", obs_channel)
        if smn_channel is not None:
            pulumi.set(__self__, "smn_channel", smn_channel)

    @_builtins.property
    @pulumi.getter(name="agencyName")
    def agency_name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the IAM agency name which must include permissions
        for sending notifications through SMN and for writing data into OBS.
        """
        return pulumi.get(self, "agency_name")

    @agency_name.setter
    def agency_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "agency_name", value)

    @_builtins.property
    @pulumi.getter
    def selector(self) -> pulumi.Input['ResourceRecorderSelectorArgs']:
        """
        Specifies configurations of resource selector.
        The object structure is documented below.
        """
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(self, value: pulumi.Input['ResourceRecorderSelectorArgs']):
        pulumi.set(self, "selector", value)

    @_builtins.property
    @pulumi.getter(name="obsChannel")
    def obs_channel(self) -> Optional[pulumi.Input['ResourceRecorderObsChannelArgs']]:
        """
        Specifies configurations of the OBS bucket used for data dumping.
        The object structure is documented below.
        """
        return pulumi.get(self, "obs_channel")

    @obs_channel.setter
    def obs_channel(self, value: Optional[pulumi.Input['ResourceRecorderObsChannelArgs']]):
        pulumi.set(self, "obs_channel", value)

    @_builtins.property
    @pulumi.getter(name="smnChannel")
    def smn_channel(self) -> Optional[pulumi.Input['ResourceRecorderSmnChannelArgs']]:
        """
        Specifies configurations of the SMN channel used to send notifications.
        The object structure is documented below.

        > At least one `obs_channel` or `smn_channel` must be configured.

        <a name="Recorder_SelectorConfigBody"></a>
        The `selector` block supports:
        """
        return pulumi.get(self, "smn_channel")

    @smn_channel.setter
    def smn_channel(self, value: Optional[pulumi.Input['ResourceRecorderSmnChannelArgs']]):
        pulumi.set(self, "smn_channel", value)


@pulumi.input_type
class _ResourceRecorderState:
    def __init__(__self__, *,
                 agency_name: Optional[pulumi.Input[_builtins.str]] = None,
                 obs_channel: Optional[pulumi.Input['ResourceRecorderObsChannelArgs']] = None,
                 selector: Optional[pulumi.Input['ResourceRecorderSelectorArgs']] = None,
                 smn_channel: Optional[pulumi.Input['ResourceRecorderSmnChannelArgs']] = None):
        """
        Input properties used for looking up and filtering ResourceRecorder resources.
        :param pulumi.Input[_builtins.str] agency_name: Specifies the IAM agency name which must include permissions
               for sending notifications through SMN and for writing data into OBS.
        :param pulumi.Input['ResourceRecorderObsChannelArgs'] obs_channel: Specifies configurations of the OBS bucket used for data dumping.
               The object structure is documented below.
        :param pulumi.Input['ResourceRecorderSelectorArgs'] selector: Specifies configurations of resource selector.
               The object structure is documented below.
        :param pulumi.Input['ResourceRecorderSmnChannelArgs'] smn_channel: Specifies configurations of the SMN channel used to send notifications.
               The object structure is documented below.
               
               > At least one `obs_channel` or `smn_channel` must be configured.
               
               <a name="Recorder_SelectorConfigBody"></a>
               The `selector` block supports:
        """
        if agency_name is not None:
            pulumi.set(__self__, "agency_name", agency_name)
        if obs_channel is not None:
            pulumi.set(__self__, "obs_channel", obs_channel)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if smn_channel is not None:
            pulumi.set(__self__, "smn_channel", smn_channel)

    @_builtins.property
    @pulumi.getter(name="agencyName")
    def agency_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the IAM agency name which must include permissions
        for sending notifications through SMN and for writing data into OBS.
        """
        return pulumi.get(self, "agency_name")

    @agency_name.setter
    def agency_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "agency_name", value)

    @_builtins.property
    @pulumi.getter(name="obsChannel")
    def obs_channel(self) -> Optional[pulumi.Input['ResourceRecorderObsChannelArgs']]:
        """
        Specifies configurations of the OBS bucket used for data dumping.
        The object structure is documented below.
        """
        return pulumi.get(self, "obs_channel")

    @obs_channel.setter
    def obs_channel(self, value: Optional[pulumi.Input['ResourceRecorderObsChannelArgs']]):
        pulumi.set(self, "obs_channel", value)

    @_builtins.property
    @pulumi.getter
    def selector(self) -> Optional[pulumi.Input['ResourceRecorderSelectorArgs']]:
        """
        Specifies configurations of resource selector.
        The object structure is documented below.
        """
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(self, value: Optional[pulumi.Input['ResourceRecorderSelectorArgs']]):
        pulumi.set(self, "selector", value)

    @_builtins.property
    @pulumi.getter(name="smnChannel")
    def smn_channel(self) -> Optional[pulumi.Input['ResourceRecorderSmnChannelArgs']]:
        """
        Specifies configurations of the SMN channel used to send notifications.
        The object structure is documented below.

        > At least one `obs_channel` or `smn_channel` must be configured.

        <a name="Recorder_SelectorConfigBody"></a>
        The `selector` block supports:
        """
        return pulumi.get(self, "smn_channel")

    @smn_channel.setter
    def smn_channel(self, value: Optional[pulumi.Input['ResourceRecorderSmnChannelArgs']]):
        pulumi.set(self, "smn_channel", value)


@pulumi.type_token("huaweicloud:rms/resourceRecorder:ResourceRecorder")
class ResourceRecorder(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 agency_name: Optional[pulumi.Input[_builtins.str]] = None,
                 obs_channel: Optional[pulumi.Input[Union['ResourceRecorderObsChannelArgs', 'ResourceRecorderObsChannelArgsDict']]] = None,
                 selector: Optional[pulumi.Input[Union['ResourceRecorderSelectorArgs', 'ResourceRecorderSelectorArgsDict']]] = None,
                 smn_channel: Optional[pulumi.Input[Union['ResourceRecorderSmnChannelArgs', 'ResourceRecorderSmnChannelArgsDict']]] = None,
                 __props__=None):
        """
        Manages a RMS recorder resource within HuaweiCloud.

        > Only one resource recorder can be configured.

        ## Example Usage

        ### Recorder with All Supported Resources

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        topic_urn = config.require_object("topicUrn")
        bucket_name = config.require_object("bucketName")
        delivery_region = config.require_object("deliveryRegion")
        test = huaweicloud.rms.ResourceRecorder("test",
            agency_name="rms_tracker_agency",
            selector={
                "all_supported": True,
            },
            obs_channel={
                "bucket": bucket_name,
                "region": delivery_region,
            },
            smn_channel={
                "topic_urn": topic_urn,
            })
        ```

        ### Recorder with Specified Resources

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        bucket_name = config.require_object("bucketName")
        delivery_region = config.require_object("deliveryRegion")
        test = huaweicloud.rms.ResourceRecorder("test",
            agency_name="rms_tracker_agency",
            selector={
                "all_supported": False,
                "resource_types": [
                    "vpc.vpcs",
                    "rds.instances",
                    "dms.kafkas",
                    "dms.rabbitmqs",
                    "dms.queues",
                ],
            },
            obs_channel={
                "bucket": bucket_name,
                "region": delivery_region,
            })
        ```

        ## Import

        The recorder can be imported using **any string** as the resource ID, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:rms/resourceRecorder:ResourceRecorder test recorder
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] agency_name: Specifies the IAM agency name which must include permissions
               for sending notifications through SMN and for writing data into OBS.
        :param pulumi.Input[Union['ResourceRecorderObsChannelArgs', 'ResourceRecorderObsChannelArgsDict']] obs_channel: Specifies configurations of the OBS bucket used for data dumping.
               The object structure is documented below.
        :param pulumi.Input[Union['ResourceRecorderSelectorArgs', 'ResourceRecorderSelectorArgsDict']] selector: Specifies configurations of resource selector.
               The object structure is documented below.
        :param pulumi.Input[Union['ResourceRecorderSmnChannelArgs', 'ResourceRecorderSmnChannelArgsDict']] smn_channel: Specifies configurations of the SMN channel used to send notifications.
               The object structure is documented below.
               
               > At least one `obs_channel` or `smn_channel` must be configured.
               
               <a name="Recorder_SelectorConfigBody"></a>
               The `selector` block supports:
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ResourceRecorderArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a RMS recorder resource within HuaweiCloud.

        > Only one resource recorder can be configured.

        ## Example Usage

        ### Recorder with All Supported Resources

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        topic_urn = config.require_object("topicUrn")
        bucket_name = config.require_object("bucketName")
        delivery_region = config.require_object("deliveryRegion")
        test = huaweicloud.rms.ResourceRecorder("test",
            agency_name="rms_tracker_agency",
            selector={
                "all_supported": True,
            },
            obs_channel={
                "bucket": bucket_name,
                "region": delivery_region,
            },
            smn_channel={
                "topic_urn": topic_urn,
            })
        ```

        ### Recorder with Specified Resources

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        bucket_name = config.require_object("bucketName")
        delivery_region = config.require_object("deliveryRegion")
        test = huaweicloud.rms.ResourceRecorder("test",
            agency_name="rms_tracker_agency",
            selector={
                "all_supported": False,
                "resource_types": [
                    "vpc.vpcs",
                    "rds.instances",
                    "dms.kafkas",
                    "dms.rabbitmqs",
                    "dms.queues",
                ],
            },
            obs_channel={
                "bucket": bucket_name,
                "region": delivery_region,
            })
        ```

        ## Import

        The recorder can be imported using **any string** as the resource ID, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:rms/resourceRecorder:ResourceRecorder test recorder
        ```

        :param str resource_name: The name of the resource.
        :param ResourceRecorderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ResourceRecorderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 agency_name: Optional[pulumi.Input[_builtins.str]] = None,
                 obs_channel: Optional[pulumi.Input[Union['ResourceRecorderObsChannelArgs', 'ResourceRecorderObsChannelArgsDict']]] = None,
                 selector: Optional[pulumi.Input[Union['ResourceRecorderSelectorArgs', 'ResourceRecorderSelectorArgsDict']]] = None,
                 smn_channel: Optional[pulumi.Input[Union['ResourceRecorderSmnChannelArgs', 'ResourceRecorderSmnChannelArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ResourceRecorderArgs.__new__(ResourceRecorderArgs)

            if agency_name is None and not opts.urn:
                raise TypeError("Missing required property 'agency_name'")
            __props__.__dict__["agency_name"] = agency_name
            __props__.__dict__["obs_channel"] = obs_channel
            if selector is None and not opts.urn:
                raise TypeError("Missing required property 'selector'")
            __props__.__dict__["selector"] = selector
            __props__.__dict__["smn_channel"] = smn_channel
        super(ResourceRecorder, __self__).__init__(
            'huaweicloud:rms/resourceRecorder:ResourceRecorder',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            agency_name: Optional[pulumi.Input[_builtins.str]] = None,
            obs_channel: Optional[pulumi.Input[Union['ResourceRecorderObsChannelArgs', 'ResourceRecorderObsChannelArgsDict']]] = None,
            selector: Optional[pulumi.Input[Union['ResourceRecorderSelectorArgs', 'ResourceRecorderSelectorArgsDict']]] = None,
            smn_channel: Optional[pulumi.Input[Union['ResourceRecorderSmnChannelArgs', 'ResourceRecorderSmnChannelArgsDict']]] = None) -> 'ResourceRecorder':
        """
        Get an existing ResourceRecorder resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] agency_name: Specifies the IAM agency name which must include permissions
               for sending notifications through SMN and for writing data into OBS.
        :param pulumi.Input[Union['ResourceRecorderObsChannelArgs', 'ResourceRecorderObsChannelArgsDict']] obs_channel: Specifies configurations of the OBS bucket used for data dumping.
               The object structure is documented below.
        :param pulumi.Input[Union['ResourceRecorderSelectorArgs', 'ResourceRecorderSelectorArgsDict']] selector: Specifies configurations of resource selector.
               The object structure is documented below.
        :param pulumi.Input[Union['ResourceRecorderSmnChannelArgs', 'ResourceRecorderSmnChannelArgsDict']] smn_channel: Specifies configurations of the SMN channel used to send notifications.
               The object structure is documented below.
               
               > At least one `obs_channel` or `smn_channel` must be configured.
               
               <a name="Recorder_SelectorConfigBody"></a>
               The `selector` block supports:
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ResourceRecorderState.__new__(_ResourceRecorderState)

        __props__.__dict__["agency_name"] = agency_name
        __props__.__dict__["obs_channel"] = obs_channel
        __props__.__dict__["selector"] = selector
        __props__.__dict__["smn_channel"] = smn_channel
        return ResourceRecorder(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="agencyName")
    def agency_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the IAM agency name which must include permissions
        for sending notifications through SMN and for writing data into OBS.
        """
        return pulumi.get(self, "agency_name")

    @_builtins.property
    @pulumi.getter(name="obsChannel")
    def obs_channel(self) -> pulumi.Output[Optional['outputs.ResourceRecorderObsChannel']]:
        """
        Specifies configurations of the OBS bucket used for data dumping.
        The object structure is documented below.
        """
        return pulumi.get(self, "obs_channel")

    @_builtins.property
    @pulumi.getter
    def selector(self) -> pulumi.Output['outputs.ResourceRecorderSelector']:
        """
        Specifies configurations of resource selector.
        The object structure is documented below.
        """
        return pulumi.get(self, "selector")

    @_builtins.property
    @pulumi.getter(name="smnChannel")
    def smn_channel(self) -> pulumi.Output[Optional['outputs.ResourceRecorderSmnChannel']]:
        """
        Specifies configurations of the SMN channel used to send notifications.
        The object structure is documented below.

        > At least one `obs_channel` or `smn_channel` must be configured.

        <a name="Recorder_SelectorConfigBody"></a>
        The `selector` block supports:
        """
        return pulumi.get(self, "smn_channel")

