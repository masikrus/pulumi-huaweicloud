# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetPolicyAssignmentEvaluateStatusResult',
    'AwaitableGetPolicyAssignmentEvaluateStatusResult',
    'get_policy_assignment_evaluate_status',
    'get_policy_assignment_evaluate_status_output',
]

@pulumi.output_type
class GetPolicyAssignmentEvaluateStatusResult:
    """
    A collection of values returned by getPolicyAssignmentEvaluateStatus.
    """
    def __init__(__self__, end_time=None, error_message=None, id=None, policy_assignment_id=None, start_time=None, state=None):
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if error_message and not isinstance(error_message, str):
            raise TypeError("Expected argument 'error_message' to be a str")
        pulumi.set(__self__, "error_message", error_message)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if policy_assignment_id and not isinstance(policy_assignment_id, str):
            raise TypeError("Expected argument 'policy_assignment_id' to be a str")
        pulumi.set(__self__, "policy_assignment_id", policy_assignment_id)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.str:
        """
        Indicates the end time of the evaluation task.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> _builtins.str:
        """
        Indicates the failure information of the evaluation task.
        """
        return pulumi.get(self, "error_message")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="policyAssignmentId")
    def policy_assignment_id(self) -> _builtins.str:
        return pulumi.get(self, "policy_assignment_id")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        """
        Indicates the start time of the evaluation task.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        Indicates the execution status of the evaluation task.
        """
        return pulumi.get(self, "state")


class AwaitableGetPolicyAssignmentEvaluateStatusResult(GetPolicyAssignmentEvaluateStatusResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPolicyAssignmentEvaluateStatusResult(
            end_time=self.end_time,
            error_message=self.error_message,
            id=self.id,
            policy_assignment_id=self.policy_assignment_id,
            start_time=self.start_time,
            state=self.state)


def get_policy_assignment_evaluate_status(policy_assignment_id: Optional[_builtins.str] = None,
                                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPolicyAssignmentEvaluateStatusResult:
    """
    Use this data source to get the evaluation status of a policy assignment.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    policy_assignment_id = config.require_object("policyAssignmentId")
    test = huaweicloud.rms.get_policy_assignment_evaluate_status(policy_assignment_id=policy_assignment_id)
    ```


    :param _builtins.str policy_assignment_id: Specifies the policy assignment ID.
    """
    __args__ = dict()
    __args__['policyAssignmentId'] = policy_assignment_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:rms/getPolicyAssignmentEvaluateStatus:getPolicyAssignmentEvaluateStatus', __args__, opts=opts, typ=GetPolicyAssignmentEvaluateStatusResult).value

    return AwaitableGetPolicyAssignmentEvaluateStatusResult(
        end_time=pulumi.get(__ret__, 'end_time'),
        error_message=pulumi.get(__ret__, 'error_message'),
        id=pulumi.get(__ret__, 'id'),
        policy_assignment_id=pulumi.get(__ret__, 'policy_assignment_id'),
        start_time=pulumi.get(__ret__, 'start_time'),
        state=pulumi.get(__ret__, 'state'))
def get_policy_assignment_evaluate_status_output(policy_assignment_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPolicyAssignmentEvaluateStatusResult]:
    """
    Use this data source to get the evaluation status of a policy assignment.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    policy_assignment_id = config.require_object("policyAssignmentId")
    test = huaweicloud.rms.get_policy_assignment_evaluate_status(policy_assignment_id=policy_assignment_id)
    ```


    :param _builtins.str policy_assignment_id: Specifies the policy assignment ID.
    """
    __args__ = dict()
    __args__['policyAssignmentId'] = policy_assignment_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:rms/getPolicyAssignmentEvaluateStatus:getPolicyAssignmentEvaluateStatus', __args__, opts=opts, typ=GetPolicyAssignmentEvaluateStatusResult)
    return __ret__.apply(lambda __response__: GetPolicyAssignmentEvaluateStatusResult(
        end_time=pulumi.get(__response__, 'end_time'),
        error_message=pulumi.get(__response__, 'error_message'),
        id=pulumi.get(__response__, 'id'),
        policy_assignment_id=pulumi.get(__response__, 'policy_assignment_id'),
        start_time=pulumi.get(__response__, 'start_time'),
        state=pulumi.get(__response__, 'state')))
