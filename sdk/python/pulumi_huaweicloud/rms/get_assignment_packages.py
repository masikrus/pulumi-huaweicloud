# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAssignmentPackagesResult',
    'AwaitableGetAssignmentPackagesResult',
    'get_assignment_packages',
    'get_assignment_packages_output',
]

@pulumi.output_type
class GetAssignmentPackagesResult:
    """
    A collection of values returned by getAssignmentPackages.
    """
    def __init__(__self__, id=None, name=None, package_id=None, packages=None, status=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if package_id and not isinstance(package_id, str):
            raise TypeError("Expected argument 'package_id' to be a str")
        pulumi.set(__self__, "package_id", package_id)
        if packages and not isinstance(packages, list):
            raise TypeError("Expected argument 'packages' to be a list")
        pulumi.set(__self__, "packages", packages)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The assignment package name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="packageId")
    def package_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "package_id")

    @_builtins.property
    @pulumi.getter
    def packages(self) -> Sequence['outputs.GetAssignmentPackagesPackageResult']:
        """
        The assignment package list.
        """
        return pulumi.get(self, "packages")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The deployment status of an assignment package.
        """
        return pulumi.get(self, "status")


class AwaitableGetAssignmentPackagesResult(GetAssignmentPackagesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAssignmentPackagesResult(
            id=self.id,
            name=self.name,
            package_id=self.package_id,
            packages=self.packages,
            status=self.status)


def get_assignment_packages(name: Optional[_builtins.str] = None,
                            package_id: Optional[_builtins.str] = None,
                            status: Optional[_builtins.str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAssignmentPackagesResult:
    """
    Use this data source to get the list of RMS assignment packages.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    assignment_package_name = config.require_object("assignmentPackageName")
    test = huaweicloud.rms.get_assignment_packages(name=assignment_package_name,
        status="CREATE_SUCCESSFUL")
    ```


    :param _builtins.str name: Specifies the assignment package name. It contains 1 to 64 characters.
    :param _builtins.str package_id: Specifies the assignment package ID.
    :param _builtins.str status: Specifies the assignment package status.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['packageId'] = package_id
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:rms/getAssignmentPackages:getAssignmentPackages', __args__, opts=opts, typ=GetAssignmentPackagesResult).value

    return AwaitableGetAssignmentPackagesResult(
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        package_id=pulumi.get(__ret__, 'package_id'),
        packages=pulumi.get(__ret__, 'packages'),
        status=pulumi.get(__ret__, 'status'))
def get_assignment_packages_output(name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   package_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAssignmentPackagesResult]:
    """
    Use this data source to get the list of RMS assignment packages.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    assignment_package_name = config.require_object("assignmentPackageName")
    test = huaweicloud.rms.get_assignment_packages(name=assignment_package_name,
        status="CREATE_SUCCESSFUL")
    ```


    :param _builtins.str name: Specifies the assignment package name. It contains 1 to 64 characters.
    :param _builtins.str package_id: Specifies the assignment package ID.
    :param _builtins.str status: Specifies the assignment package status.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['packageId'] = package_id
    __args__['status'] = status
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:rms/getAssignmentPackages:getAssignmentPackages', __args__, opts=opts, typ=GetAssignmentPackagesResult)
    return __ret__.apply(lambda __response__: GetAssignmentPackagesResult(
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        package_id=pulumi.get(__response__, 'package_id'),
        packages=pulumi.get(__response__, 'packages'),
        status=pulumi.get(__response__, 'status')))
