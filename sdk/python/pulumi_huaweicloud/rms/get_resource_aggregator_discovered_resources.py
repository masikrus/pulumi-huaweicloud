# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetResourceAggregatorDiscoveredResourcesResult',
    'AwaitableGetResourceAggregatorDiscoveredResourcesResult',
    'get_resource_aggregator_discovered_resources',
    'get_resource_aggregator_discovered_resources_output',
]

@pulumi.output_type
class GetResourceAggregatorDiscoveredResourcesResult:
    """
    A collection of values returned by getResourceAggregatorDiscoveredResources.
    """
    def __init__(__self__, aggregator_id=None, filter=None, id=None, resource_type=None, resources=None, service_type=None):
        if aggregator_id and not isinstance(aggregator_id, str):
            raise TypeError("Expected argument 'aggregator_id' to be a str")
        pulumi.set(__self__, "aggregator_id", aggregator_id)
        if filter and not isinstance(filter, dict):
            raise TypeError("Expected argument 'filter' to be a dict")
        pulumi.set(__self__, "filter", filter)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if resources and not isinstance(resources, list):
            raise TypeError("Expected argument 'resources' to be a list")
        pulumi.set(__self__, "resources", resources)
        if service_type and not isinstance(service_type, str):
            raise TypeError("Expected argument 'service_type' to be a str")
        pulumi.set(__self__, "service_type", service_type)

    @_builtins.property
    @pulumi.getter(name="aggregatorId")
    def aggregator_id(self) -> _builtins.str:
        return pulumi.get(self, "aggregator_id")

    @_builtins.property
    @pulumi.getter
    def filter(self) -> Optional['outputs.GetResourceAggregatorDiscoveredResourcesFilterResult']:
        return pulumi.get(self, "filter")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetResourceAggregatorDiscoveredResourcesResourceResult']:
        """
        The service details list.
        """
        return pulumi.get(self, "resources")

    @_builtins.property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "service_type")


class AwaitableGetResourceAggregatorDiscoveredResourcesResult(GetResourceAggregatorDiscoveredResourcesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetResourceAggregatorDiscoveredResourcesResult(
            aggregator_id=self.aggregator_id,
            filter=self.filter,
            id=self.id,
            resource_type=self.resource_type,
            resources=self.resources,
            service_type=self.service_type)


def get_resource_aggregator_discovered_resources(aggregator_id: Optional[_builtins.str] = None,
                                                 filter: Optional[Union['GetResourceAggregatorDiscoveredResourcesFilterArgs', 'GetResourceAggregatorDiscoveredResourcesFilterArgsDict']] = None,
                                                 resource_type: Optional[_builtins.str] = None,
                                                 service_type: Optional[_builtins.str] = None,
                                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetResourceAggregatorDiscoveredResourcesResult:
    """
    Use this data source to get the list of RMS resource aggregator discovered resources.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    aggregator_id = config.require_object("aggregatorId")
    test = huaweicloud.rms.get_resource_aggregator_discovered_resources(aggregator_id=aggregator_id)
    ```


    :param _builtins.str aggregator_id: Specifies the aggregator ID.
    :param Union['GetResourceAggregatorDiscoveredResourcesFilterArgs', 'GetResourceAggregatorDiscoveredResourcesFilterArgsDict'] filter: Specifies the filter. The filter structure is documented below.
           
           <a name="filter"></a>
           The `filter` block supports:
    :param _builtins.str resource_type: Specifies the resource type. For example, **vpcs**.
    :param _builtins.str service_type: Specifies the service type. For example, **vpc**.
    """
    __args__ = dict()
    __args__['aggregatorId'] = aggregator_id
    __args__['filter'] = filter
    __args__['resourceType'] = resource_type
    __args__['serviceType'] = service_type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:rms/getResourceAggregatorDiscoveredResources:getResourceAggregatorDiscoveredResources', __args__, opts=opts, typ=GetResourceAggregatorDiscoveredResourcesResult).value

    return AwaitableGetResourceAggregatorDiscoveredResourcesResult(
        aggregator_id=pulumi.get(__ret__, 'aggregator_id'),
        filter=pulumi.get(__ret__, 'filter'),
        id=pulumi.get(__ret__, 'id'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        resources=pulumi.get(__ret__, 'resources'),
        service_type=pulumi.get(__ret__, 'service_type'))
def get_resource_aggregator_discovered_resources_output(aggregator_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                        filter: Optional[pulumi.Input[Optional[Union['GetResourceAggregatorDiscoveredResourcesFilterArgs', 'GetResourceAggregatorDiscoveredResourcesFilterArgsDict']]]] = None,
                                                        resource_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                        service_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetResourceAggregatorDiscoveredResourcesResult]:
    """
    Use this data source to get the list of RMS resource aggregator discovered resources.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    aggregator_id = config.require_object("aggregatorId")
    test = huaweicloud.rms.get_resource_aggregator_discovered_resources(aggregator_id=aggregator_id)
    ```


    :param _builtins.str aggregator_id: Specifies the aggregator ID.
    :param Union['GetResourceAggregatorDiscoveredResourcesFilterArgs', 'GetResourceAggregatorDiscoveredResourcesFilterArgsDict'] filter: Specifies the filter. The filter structure is documented below.
           
           <a name="filter"></a>
           The `filter` block supports:
    :param _builtins.str resource_type: Specifies the resource type. For example, **vpcs**.
    :param _builtins.str service_type: Specifies the service type. For example, **vpc**.
    """
    __args__ = dict()
    __args__['aggregatorId'] = aggregator_id
    __args__['filter'] = filter
    __args__['resourceType'] = resource_type
    __args__['serviceType'] = service_type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:rms/getResourceAggregatorDiscoveredResources:getResourceAggregatorDiscoveredResources', __args__, opts=opts, typ=GetResourceAggregatorDiscoveredResourcesResult)
    return __ret__.apply(lambda __response__: GetResourceAggregatorDiscoveredResourcesResult(
        aggregator_id=pulumi.get(__response__, 'aggregator_id'),
        filter=pulumi.get(__response__, 'filter'),
        id=pulumi.get(__response__, 'id'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        resources=pulumi.get(__response__, 'resources'),
        service_type=pulumi.get(__response__, 'service_type')))
