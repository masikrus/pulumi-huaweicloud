# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetPolicyAssignmentsResult',
    'AwaitableGetPolicyAssignmentsResult',
    'get_policy_assignments',
    'get_policy_assignments_output',
]

@pulumi.output_type
class GetPolicyAssignmentsResult:
    """
    A collection of values returned by getPolicyAssignments.
    """
    def __init__(__self__, assignment_id=None, assignments=None, id=None, name=None, policy_definition_id=None, status=None):
        if assignment_id and not isinstance(assignment_id, str):
            raise TypeError("Expected argument 'assignment_id' to be a str")
        pulumi.set(__self__, "assignment_id", assignment_id)
        if assignments and not isinstance(assignments, list):
            raise TypeError("Expected argument 'assignments' to be a list")
        pulumi.set(__self__, "assignments", assignments)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if policy_definition_id and not isinstance(policy_definition_id, str):
            raise TypeError("Expected argument 'policy_definition_id' to be a str")
        pulumi.set(__self__, "policy_definition_id", policy_definition_id)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="assignmentId")
    def assignment_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "assignment_id")

    @_builtins.property
    @pulumi.getter
    def assignments(self) -> Sequence['outputs.GetPolicyAssignmentsAssignmentResult']:
        """
        The policy assignment list.
        """
        return pulumi.get(self, "assignments")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The policy assignment name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="policyDefinitionId")
    def policy_definition_id(self) -> Optional[_builtins.str]:
        """
        The ID of the policy used by the policy assignment.
        """
        return pulumi.get(self, "policy_definition_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The policy assignment status.
        """
        return pulumi.get(self, "status")


class AwaitableGetPolicyAssignmentsResult(GetPolicyAssignmentsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPolicyAssignmentsResult(
            assignment_id=self.assignment_id,
            assignments=self.assignments,
            id=self.id,
            name=self.name,
            policy_definition_id=self.policy_definition_id,
            status=self.status)


def get_policy_assignments(assignment_id: Optional[_builtins.str] = None,
                           name: Optional[_builtins.str] = None,
                           policy_definition_id: Optional[_builtins.str] = None,
                           status: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPolicyAssignmentsResult:
    """
    Use this data source to get the list of RMS policy assignments.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    policy_assignment_name = config.require_object("policyAssignmentName")
    test = huaweicloud.rms.get_policy_assignments(name=policy_assignment_name,
        status="Enabled")
    ```


    :param _builtins.str assignment_id: Specifies the ID of the policy assignment.
    :param _builtins.str name: Specifies the assignment name.
    :param _builtins.str policy_definition_id: Specifies the ID of the policy definition.
    :param _builtins.str status: Specifies the expect status of the policy.
    """
    __args__ = dict()
    __args__['assignmentId'] = assignment_id
    __args__['name'] = name
    __args__['policyDefinitionId'] = policy_definition_id
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:rms/getPolicyAssignments:getPolicyAssignments', __args__, opts=opts, typ=GetPolicyAssignmentsResult).value

    return AwaitableGetPolicyAssignmentsResult(
        assignment_id=pulumi.get(__ret__, 'assignment_id'),
        assignments=pulumi.get(__ret__, 'assignments'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        policy_definition_id=pulumi.get(__ret__, 'policy_definition_id'),
        status=pulumi.get(__ret__, 'status'))
def get_policy_assignments_output(assignment_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  policy_definition_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPolicyAssignmentsResult]:
    """
    Use this data source to get the list of RMS policy assignments.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    policy_assignment_name = config.require_object("policyAssignmentName")
    test = huaweicloud.rms.get_policy_assignments(name=policy_assignment_name,
        status="Enabled")
    ```


    :param _builtins.str assignment_id: Specifies the ID of the policy assignment.
    :param _builtins.str name: Specifies the assignment name.
    :param _builtins.str policy_definition_id: Specifies the ID of the policy definition.
    :param _builtins.str status: Specifies the expect status of the policy.
    """
    __args__ = dict()
    __args__['assignmentId'] = assignment_id
    __args__['name'] = name
    __args__['policyDefinitionId'] = policy_definition_id
    __args__['status'] = status
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:rms/getPolicyAssignments:getPolicyAssignments', __args__, opts=opts, typ=GetPolicyAssignmentsResult)
    return __ret__.apply(lambda __response__: GetPolicyAssignmentsResult(
        assignment_id=pulumi.get(__response__, 'assignment_id'),
        assignments=pulumi.get(__response__, 'assignments'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        policy_definition_id=pulumi.get(__response__, 'policy_definition_id'),
        status=pulumi.get(__response__, 'status')))
