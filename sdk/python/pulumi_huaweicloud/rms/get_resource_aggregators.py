# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetResourceAggregatorsResult',
    'AwaitableGetResourceAggregatorsResult',
    'get_resource_aggregators',
    'get_resource_aggregators_output',
]

@pulumi.output_type
class GetResourceAggregatorsResult:
    """
    A collection of values returned by getResourceAggregators.
    """
    def __init__(__self__, aggregator_id=None, aggregators=None, id=None, name=None, type=None):
        if aggregator_id and not isinstance(aggregator_id, str):
            raise TypeError("Expected argument 'aggregator_id' to be a str")
        pulumi.set(__self__, "aggregator_id", aggregator_id)
        if aggregators and not isinstance(aggregators, list):
            raise TypeError("Expected argument 'aggregators' to be a list")
        pulumi.set(__self__, "aggregators", aggregators)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="aggregatorId")
    def aggregator_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "aggregator_id")

    @_builtins.property
    @pulumi.getter
    def aggregators(self) -> Sequence['outputs.GetResourceAggregatorsAggregatorResult']:
        """
        The resource aggregators.
        """
        return pulumi.get(self, "aggregators")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The resource aggregator name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The resource aggregator type.
        """
        return pulumi.get(self, "type")


class AwaitableGetResourceAggregatorsResult(GetResourceAggregatorsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetResourceAggregatorsResult(
            aggregator_id=self.aggregator_id,
            aggregators=self.aggregators,
            id=self.id,
            name=self.name,
            type=self.type)


def get_resource_aggregators(aggregator_id: Optional[_builtins.str] = None,
                             name: Optional[_builtins.str] = None,
                             type: Optional[_builtins.str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetResourceAggregatorsResult:
    """
    Use this data source to get the list of RMS resource aggregator.


    :param _builtins.str aggregator_id: Specifies the resource aggregator ID.
    :param _builtins.str name: Specifies the resource aggregator name.
    :param _builtins.str type: Specifies the resource aggregator type, which can be ACCOUNT or ORGANIZATION.
    """
    __args__ = dict()
    __args__['aggregatorId'] = aggregator_id
    __args__['name'] = name
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:rms/getResourceAggregators:getResourceAggregators', __args__, opts=opts, typ=GetResourceAggregatorsResult).value

    return AwaitableGetResourceAggregatorsResult(
        aggregator_id=pulumi.get(__ret__, 'aggregator_id'),
        aggregators=pulumi.get(__ret__, 'aggregators'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        type=pulumi.get(__ret__, 'type'))
def get_resource_aggregators_output(aggregator_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetResourceAggregatorsResult]:
    """
    Use this data source to get the list of RMS resource aggregator.


    :param _builtins.str aggregator_id: Specifies the resource aggregator ID.
    :param _builtins.str name: Specifies the resource aggregator name.
    :param _builtins.str type: Specifies the resource aggregator type, which can be ACCOUNT or ORGANIZATION.
    """
    __args__ = dict()
    __args__['aggregatorId'] = aggregator_id
    __args__['name'] = name
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:rms/getResourceAggregators:getResourceAggregators', __args__, opts=opts, typ=GetResourceAggregatorsResult)
    return __ret__.apply(lambda __response__: GetResourceAggregatorsResult(
        aggregator_id=pulumi.get(__response__, 'aggregator_id'),
        aggregators=pulumi.get(__response__, 'aggregators'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        type=pulumi.get(__response__, 'type')))
