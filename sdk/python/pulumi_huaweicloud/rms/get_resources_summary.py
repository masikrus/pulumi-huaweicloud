# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetResourcesSummaryResult',
    'AwaitableGetResourcesSummaryResult',
    'get_resources_summary',
    'get_resources_summary_output',
]

@pulumi.output_type
class GetResourcesSummaryResult:
    """
    A collection of values returned by getResourcesSummary.
    """
    def __init__(__self__, enterprise_project_id=None, id=None, name=None, project_id=None, region_id=None, resource_deleted=None, resources_summaries=None, tags=None, tracked=None, type=None):
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)
        if region_id and not isinstance(region_id, str):
            raise TypeError("Expected argument 'region_id' to be a str")
        pulumi.set(__self__, "region_id", region_id)
        if resource_deleted and not isinstance(resource_deleted, bool):
            raise TypeError("Expected argument 'resource_deleted' to be a bool")
        pulumi.set(__self__, "resource_deleted", resource_deleted)
        if resources_summaries and not isinstance(resources_summaries, list):
            raise TypeError("Expected argument 'resources_summaries' to be a list")
        pulumi.set(__self__, "resources_summaries", resources_summaries)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if tracked and not isinstance(tracked, bool):
            raise TypeError("Expected argument 'tracked' to be a bool")
        pulumi.set(__self__, "tracked", tracked)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "region_id")

    @_builtins.property
    @pulumi.getter(name="resourceDeleted")
    def resource_deleted(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "resource_deleted")

    @_builtins.property
    @pulumi.getter(name="resourcesSummaries")
    def resources_summaries(self) -> Sequence['outputs.GetResourcesSummaryResourcesSummaryResult']:
        """
        The service details list.
        """
        return pulumi.get(self, "resources_summaries")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def tracked(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "tracked")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The resource type.
        """
        return pulumi.get(self, "type")


class AwaitableGetResourcesSummaryResult(GetResourcesSummaryResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetResourcesSummaryResult(
            enterprise_project_id=self.enterprise_project_id,
            id=self.id,
            name=self.name,
            project_id=self.project_id,
            region_id=self.region_id,
            resource_deleted=self.resource_deleted,
            resources_summaries=self.resources_summaries,
            tags=self.tags,
            tracked=self.tracked,
            type=self.type)


def get_resources_summary(enterprise_project_id: Optional[_builtins.str] = None,
                          name: Optional[_builtins.str] = None,
                          project_id: Optional[_builtins.str] = None,
                          region_id: Optional[_builtins.str] = None,
                          resource_deleted: Optional[_builtins.bool] = None,
                          tags: Optional[Mapping[str, _builtins.str]] = None,
                          tracked: Optional[_builtins.bool] = None,
                          type: Optional[_builtins.str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetResourcesSummaryResult:
    """
    Use this data source to get the list of RMS resources summary.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.rms.get_resources_summary(type="vpc.vpcs")
    ```


    :param _builtins.str enterprise_project_id: Specifies the ID of enterprise project to which the resource belongs.
    :param _builtins.str name: Specifies the resource name.
    :param _builtins.str project_id: Specifies the ID of project to which the resource belongs.
    :param _builtins.str region_id: Specifies the region to which the resource belongs.
    :param _builtins.bool resource_deleted: Specifies whether the query the deleted resources.
    :param Mapping[str, _builtins.str] tags: Specifies the tags to filter the resources.
    :param _builtins.bool tracked: Specifies whether the resource is tracked.
    :param _builtins.str type: Specifies the resource type. For example, **vpc.vpcs** and **rds.instances**.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['name'] = name
    __args__['projectId'] = project_id
    __args__['regionId'] = region_id
    __args__['resourceDeleted'] = resource_deleted
    __args__['tags'] = tags
    __args__['tracked'] = tracked
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:rms/getResourcesSummary:getResourcesSummary', __args__, opts=opts, typ=GetResourcesSummaryResult).value

    return AwaitableGetResourcesSummaryResult(
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        project_id=pulumi.get(__ret__, 'project_id'),
        region_id=pulumi.get(__ret__, 'region_id'),
        resource_deleted=pulumi.get(__ret__, 'resource_deleted'),
        resources_summaries=pulumi.get(__ret__, 'resources_summaries'),
        tags=pulumi.get(__ret__, 'tags'),
        tracked=pulumi.get(__ret__, 'tracked'),
        type=pulumi.get(__ret__, 'type'))
def get_resources_summary_output(enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 region_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 resource_deleted: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                 tags: Optional[pulumi.Input[Optional[Mapping[str, _builtins.str]]]] = None,
                                 tracked: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                 type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetResourcesSummaryResult]:
    """
    Use this data source to get the list of RMS resources summary.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.rms.get_resources_summary(type="vpc.vpcs")
    ```


    :param _builtins.str enterprise_project_id: Specifies the ID of enterprise project to which the resource belongs.
    :param _builtins.str name: Specifies the resource name.
    :param _builtins.str project_id: Specifies the ID of project to which the resource belongs.
    :param _builtins.str region_id: Specifies the region to which the resource belongs.
    :param _builtins.bool resource_deleted: Specifies whether the query the deleted resources.
    :param Mapping[str, _builtins.str] tags: Specifies the tags to filter the resources.
    :param _builtins.bool tracked: Specifies whether the resource is tracked.
    :param _builtins.str type: Specifies the resource type. For example, **vpc.vpcs** and **rds.instances**.
    """
    __args__ = dict()
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['name'] = name
    __args__['projectId'] = project_id
    __args__['regionId'] = region_id
    __args__['resourceDeleted'] = resource_deleted
    __args__['tags'] = tags
    __args__['tracked'] = tracked
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:rms/getResourcesSummary:getResourcesSummary', __args__, opts=opts, typ=GetResourcesSummaryResult)
    return __ret__.apply(lambda __response__: GetResourcesSummaryResult(
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        project_id=pulumi.get(__response__, 'project_id'),
        region_id=pulumi.get(__response__, 'region_id'),
        resource_deleted=pulumi.get(__response__, 'resource_deleted'),
        resources_summaries=pulumi.get(__response__, 'resources_summaries'),
        tags=pulumi.get(__response__, 'tags'),
        tracked=pulumi.get(__response__, 'tracked'),
        type=pulumi.get(__response__, 'type')))
