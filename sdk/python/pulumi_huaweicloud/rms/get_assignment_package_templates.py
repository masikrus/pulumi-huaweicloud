# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAssignmentPackageTemplatesResult',
    'AwaitableGetAssignmentPackageTemplatesResult',
    'get_assignment_package_templates',
    'get_assignment_package_templates_output',
]

@pulumi.output_type
class GetAssignmentPackageTemplatesResult:
    """
    A collection of values returned by getAssignmentPackageTemplates.
    """
    def __init__(__self__, description=None, id=None, template_key=None, templates=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if template_key and not isinstance(template_key, str):
            raise TypeError("Expected argument 'template_key' to be a str")
        pulumi.set(__self__, "template_key", template_key)
        if templates and not isinstance(templates, list):
            raise TypeError("Expected argument 'templates' to be a list")
        pulumi.set(__self__, "templates", templates)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Indicates the description of a parameter for a built-in assignment package template.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="templateKey")
    def template_key(self) -> Optional[_builtins.str]:
        """
        Indicates the name of a built-in assignment package template.
        """
        return pulumi.get(self, "template_key")

    @_builtins.property
    @pulumi.getter
    def templates(self) -> Sequence['outputs.GetAssignmentPackageTemplatesTemplateResult']:
        """
        Indicates the list of RMS assignment package templates.
        The templates structure is documented below.
        """
        return pulumi.get(self, "templates")


class AwaitableGetAssignmentPackageTemplatesResult(GetAssignmentPackageTemplatesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAssignmentPackageTemplatesResult(
            description=self.description,
            id=self.id,
            template_key=self.template_key,
            templates=self.templates)


def get_assignment_package_templates(description: Optional[_builtins.str] = None,
                                     template_key: Optional[_builtins.str] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAssignmentPackageTemplatesResult:
    """
    Use this data source to get the list of RMS assignment package templates.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.rms.get_assignment_package_templates(template_key="test_template_key.json",
        description="test_template_description")
    ```


    :param _builtins.str description: Specifies the description for a built-in assignment package template.
    :param _builtins.str template_key: Specifies the name of a built-in assignment package template.
    """
    __args__ = dict()
    __args__['description'] = description
    __args__['templateKey'] = template_key
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:rms/getAssignmentPackageTemplates:getAssignmentPackageTemplates', __args__, opts=opts, typ=GetAssignmentPackageTemplatesResult).value

    return AwaitableGetAssignmentPackageTemplatesResult(
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        template_key=pulumi.get(__ret__, 'template_key'),
        templates=pulumi.get(__ret__, 'templates'))
def get_assignment_package_templates_output(description: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                            template_key: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAssignmentPackageTemplatesResult]:
    """
    Use this data source to get the list of RMS assignment package templates.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.rms.get_assignment_package_templates(template_key="test_template_key.json",
        description="test_template_description")
    ```


    :param _builtins.str description: Specifies the description for a built-in assignment package template.
    :param _builtins.str template_key: Specifies the name of a built-in assignment package template.
    """
    __args__ = dict()
    __args__['description'] = description
    __args__['templateKey'] = template_key
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:rms/getAssignmentPackageTemplates:getAssignmentPackageTemplates', __args__, opts=opts, typ=GetAssignmentPackageTemplatesResult)
    return __ret__.apply(lambda __response__: GetAssignmentPackageTemplatesResult(
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        template_key=pulumi.get(__response__, 'template_key'),
        templates=pulumi.get(__response__, 'templates')))
