# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetPolicyDefinitionsResult',
    'AwaitableGetPolicyDefinitionsResult',
    'get_policy_definitions',
    'get_policy_definitions_output',
]

@pulumi.output_type
class GetPolicyDefinitionsResult:
    """
    A collection of values returned by getPolicyDefinitions.
    """
    def __init__(__self__, definitions=None, id=None, keywords=None, name=None, policy_rule_type=None, policy_type=None, trigger_type=None):
        if definitions and not isinstance(definitions, list):
            raise TypeError("Expected argument 'definitions' to be a list")
        pulumi.set(__self__, "definitions", definitions)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if keywords and not isinstance(keywords, list):
            raise TypeError("Expected argument 'keywords' to be a list")
        pulumi.set(__self__, "keywords", keywords)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if policy_rule_type and not isinstance(policy_rule_type, str):
            raise TypeError("Expected argument 'policy_rule_type' to be a str")
        pulumi.set(__self__, "policy_rule_type", policy_rule_type)
        if policy_type and not isinstance(policy_type, str):
            raise TypeError("Expected argument 'policy_type' to be a str")
        pulumi.set(__self__, "policy_type", policy_type)
        if trigger_type and not isinstance(trigger_type, str):
            raise TypeError("Expected argument 'trigger_type' to be a str")
        pulumi.set(__self__, "trigger_type", trigger_type)

    @_builtins.property
    @pulumi.getter
    def definitions(self) -> Sequence['outputs.GetPolicyDefinitionsDefinitionResult']:
        """
        The policy definition list.
        The object structure is documented below.
        """
        return pulumi.get(self, "definitions")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def keywords(self) -> Optional[Sequence[_builtins.str]]:
        """
        The keyword list of the policy definition.
        """
        return pulumi.get(self, "keywords")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the policy definition.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="policyRuleType")
    def policy_rule_type(self) -> Optional[_builtins.str]:
        """
        The policy rule type of the policy definition.
        """
        return pulumi.get(self, "policy_rule_type")

    @_builtins.property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[_builtins.str]:
        """
        The policy type of the policy definition.
        """
        return pulumi.get(self, "policy_type")

    @_builtins.property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> Optional[_builtins.str]:
        """
        The trigger type of the policy definition.
        """
        return pulumi.get(self, "trigger_type")


class AwaitableGetPolicyDefinitionsResult(GetPolicyDefinitionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPolicyDefinitionsResult(
            definitions=self.definitions,
            id=self.id,
            keywords=self.keywords,
            name=self.name,
            policy_rule_type=self.policy_rule_type,
            policy_type=self.policy_type,
            trigger_type=self.trigger_type)


def get_policy_definitions(keywords: Optional[Sequence[_builtins.str]] = None,
                           name: Optional[_builtins.str] = None,
                           policy_rule_type: Optional[_builtins.str] = None,
                           policy_type: Optional[_builtins.str] = None,
                           trigger_type: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPolicyDefinitionsResult:
    """
    Use this data source to query policy definition list.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    trigger_type = config.require_object("triggerType")
    test = huaweicloud.rms.get_policy_definitions(trigger_type=trigger_type)
    ```


    :param Sequence[_builtins.str] keywords: Specifies the keyword list used to query definition list.
    :param _builtins.str name: Specifies the name of the policy definitions used to query definition list.
    :param _builtins.str policy_rule_type: Specifies the policy rule type used to query definition list.
    :param _builtins.str policy_type: Specifies the policy type used to query definition list.  
           The valid value is **builtin**.
    :param _builtins.str trigger_type: Specifies the trigger type used to query definition list.  
           The valid values are **resource** and **period**.
    """
    __args__ = dict()
    __args__['keywords'] = keywords
    __args__['name'] = name
    __args__['policyRuleType'] = policy_rule_type
    __args__['policyType'] = policy_type
    __args__['triggerType'] = trigger_type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:rms/getPolicyDefinitions:getPolicyDefinitions', __args__, opts=opts, typ=GetPolicyDefinitionsResult).value

    return AwaitableGetPolicyDefinitionsResult(
        definitions=pulumi.get(__ret__, 'definitions'),
        id=pulumi.get(__ret__, 'id'),
        keywords=pulumi.get(__ret__, 'keywords'),
        name=pulumi.get(__ret__, 'name'),
        policy_rule_type=pulumi.get(__ret__, 'policy_rule_type'),
        policy_type=pulumi.get(__ret__, 'policy_type'),
        trigger_type=pulumi.get(__ret__, 'trigger_type'))
def get_policy_definitions_output(keywords: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                  name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  policy_rule_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  policy_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  trigger_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPolicyDefinitionsResult]:
    """
    Use this data source to query policy definition list.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    trigger_type = config.require_object("triggerType")
    test = huaweicloud.rms.get_policy_definitions(trigger_type=trigger_type)
    ```


    :param Sequence[_builtins.str] keywords: Specifies the keyword list used to query definition list.
    :param _builtins.str name: Specifies the name of the policy definitions used to query definition list.
    :param _builtins.str policy_rule_type: Specifies the policy rule type used to query definition list.
    :param _builtins.str policy_type: Specifies the policy type used to query definition list.  
           The valid value is **builtin**.
    :param _builtins.str trigger_type: Specifies the trigger type used to query definition list.  
           The valid values are **resource** and **period**.
    """
    __args__ = dict()
    __args__['keywords'] = keywords
    __args__['name'] = name
    __args__['policyRuleType'] = policy_rule_type
    __args__['policyType'] = policy_type
    __args__['triggerType'] = trigger_type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:rms/getPolicyDefinitions:getPolicyDefinitions', __args__, opts=opts, typ=GetPolicyDefinitionsResult)
    return __ret__.apply(lambda __response__: GetPolicyDefinitionsResult(
        definitions=pulumi.get(__response__, 'definitions'),
        id=pulumi.get(__response__, 'id'),
        keywords=pulumi.get(__response__, 'keywords'),
        name=pulumi.get(__response__, 'name'),
        policy_rule_type=pulumi.get(__response__, 'policy_rule_type'),
        policy_type=pulumi.get(__response__, 'policy_type'),
        trigger_type=pulumi.get(__response__, 'trigger_type')))
