# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAdvancedQuerySchemasResult',
    'AwaitableGetAdvancedQuerySchemasResult',
    'get_advanced_query_schemas',
    'get_advanced_query_schemas_output',
]

@pulumi.output_type
class GetAdvancedQuerySchemasResult:
    """
    A collection of values returned by getAdvancedQuerySchemas.
    """
    def __init__(__self__, id=None, schemas=None, type=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if schemas and not isinstance(schemas, list):
            raise TypeError("Expected argument 'schemas' to be a list")
        pulumi.set(__self__, "schemas", schemas)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def schemas(self) -> Sequence['outputs.GetAdvancedQuerySchemasSchemaResult']:
        """
        The list of schema.
        """
        return pulumi.get(self, "schemas")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The schema type.
        """
        return pulumi.get(self, "type")


class AwaitableGetAdvancedQuerySchemasResult(GetAdvancedQuerySchemasResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAdvancedQuerySchemasResult(
            id=self.id,
            schemas=self.schemas,
            type=self.type)


def get_advanced_query_schemas(type: Optional[_builtins.str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAdvancedQuerySchemasResult:
    """
    Use this data source to get the list of RMS advanced query schemas.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.rms.get_advanced_query_schemas(type="aad.instances")
    ```


    :param _builtins.str type: Specifies the type of the schema.
    """
    __args__ = dict()
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:rms/getAdvancedQuerySchemas:getAdvancedQuerySchemas', __args__, opts=opts, typ=GetAdvancedQuerySchemasResult).value

    return AwaitableGetAdvancedQuerySchemasResult(
        id=pulumi.get(__ret__, 'id'),
        schemas=pulumi.get(__ret__, 'schemas'),
        type=pulumi.get(__ret__, 'type'))
def get_advanced_query_schemas_output(type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAdvancedQuerySchemasResult]:
    """
    Use this data source to get the list of RMS advanced query schemas.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    test = huaweicloud.rms.get_advanced_query_schemas(type="aad.instances")
    ```


    :param _builtins.str type: Specifies the type of the schema.
    """
    __args__ = dict()
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:rms/getAdvancedQuerySchemas:getAdvancedQuerySchemas', __args__, opts=opts, typ=GetAdvancedQuerySchemasResult)
    return __ret__.apply(lambda __response__: GetAdvancedQuerySchemasResult(
        id=pulumi.get(__response__, 'id'),
        schemas=pulumi.get(__response__, 'schemas'),
        type=pulumi.get(__response__, 'type')))
