# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['AdvancedQueryArgs', 'AdvancedQuery']

@pulumi.input_type
class AdvancedQueryArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a AdvancedQuery resource.
        :param pulumi.Input[_builtins.str] expression: Specifies the advanced query expression. It contains 1 to 4096 characters.
        :param pulumi.Input[_builtins.str] description: Specifies the advanced query description. It contains 1 to 512 characters.
        :param pulumi.Input[_builtins.str] name: Specifies the advanced query name. It contains 1 to 64 characters.
        :param pulumi.Input[_builtins.str] type: Specifies the advanced query type.
               The valid values are as follows:
               + **account**: means the customized query statement of a single account;
               + **aggregator**: means the user-defined query statement of the aggregator.
               
               Defaults to **account**.
        """
        pulumi.set(__self__, "expression", expression)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def expression(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the advanced query expression. It contains 1 to 4096 characters.
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "expression", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the advanced query description. It contains 1 to 512 characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the advanced query name. It contains 1 to 64 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the advanced query type.
        The valid values are as follows:
        + **account**: means the customized query statement of a single account;
        + **aggregator**: means the user-defined query statement of the aggregator.

        Defaults to **account**.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _AdvancedQueryState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 expression: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering AdvancedQuery resources.
        :param pulumi.Input[_builtins.str] description: Specifies the advanced query description. It contains 1 to 512 characters.
        :param pulumi.Input[_builtins.str] expression: Specifies the advanced query expression. It contains 1 to 4096 characters.
        :param pulumi.Input[_builtins.str] name: Specifies the advanced query name. It contains 1 to 64 characters.
        :param pulumi.Input[_builtins.str] type: Specifies the advanced query type.
               The valid values are as follows:
               + **account**: means the customized query statement of a single account;
               + **aggregator**: means the user-defined query statement of the aggregator.
               
               Defaults to **account**.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the advanced query description. It contains 1 to 512 characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the advanced query expression. It contains 1 to 4096 characters.
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "expression", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the advanced query name. It contains 1 to 64 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the advanced query type.
        The valid values are as follows:
        + **account**: means the customized query statement of a single account;
        + **aggregator**: means the user-defined query statement of the aggregator.

        Defaults to **account**.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.type_token("huaweicloud:rms/advancedQuery:AdvancedQuery")
class AdvancedQuery(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 expression: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a RMS advanced query resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.rms.AdvancedQuery("test",
            name="advanced_query_name",
            expression="select * from table_test")
        ```

        ## Import

        The RMS advanced query can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:rms/advancedQuery:AdvancedQuery test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Specifies the advanced query description. It contains 1 to 512 characters.
        :param pulumi.Input[_builtins.str] expression: Specifies the advanced query expression. It contains 1 to 4096 characters.
        :param pulumi.Input[_builtins.str] name: Specifies the advanced query name. It contains 1 to 64 characters.
        :param pulumi.Input[_builtins.str] type: Specifies the advanced query type.
               The valid values are as follows:
               + **account**: means the customized query statement of a single account;
               + **aggregator**: means the user-defined query statement of the aggregator.
               
               Defaults to **account**.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AdvancedQueryArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a RMS advanced query resource within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        test = huaweicloud.rms.AdvancedQuery("test",
            name="advanced_query_name",
            expression="select * from table_test")
        ```

        ## Import

        The RMS advanced query can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:rms/advancedQuery:AdvancedQuery test <id>
        ```

        :param str resource_name: The name of the resource.
        :param AdvancedQueryArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AdvancedQueryArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 expression: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AdvancedQueryArgs.__new__(AdvancedQueryArgs)

            __props__.__dict__["description"] = description
            if expression is None and not opts.urn:
                raise TypeError("Missing required property 'expression'")
            __props__.__dict__["expression"] = expression
            __props__.__dict__["name"] = name
            __props__.__dict__["type"] = type
        super(AdvancedQuery, __self__).__init__(
            'huaweicloud:rms/advancedQuery:AdvancedQuery',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            expression: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None) -> 'AdvancedQuery':
        """
        Get an existing AdvancedQuery resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Specifies the advanced query description. It contains 1 to 512 characters.
        :param pulumi.Input[_builtins.str] expression: Specifies the advanced query expression. It contains 1 to 4096 characters.
        :param pulumi.Input[_builtins.str] name: Specifies the advanced query name. It contains 1 to 64 characters.
        :param pulumi.Input[_builtins.str] type: Specifies the advanced query type.
               The valid values are as follows:
               + **account**: means the customized query statement of a single account;
               + **aggregator**: means the user-defined query statement of the aggregator.
               
               Defaults to **account**.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AdvancedQueryState.__new__(_AdvancedQueryState)

        __props__.__dict__["description"] = description
        __props__.__dict__["expression"] = expression
        __props__.__dict__["name"] = name
        __props__.__dict__["type"] = type
        return AdvancedQuery(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the advanced query description. It contains 1 to 512 characters.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def expression(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the advanced query expression. It contains 1 to 4096 characters.
        """
        return pulumi.get(self, "expression")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the advanced query name. It contains 1 to 64 characters.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the advanced query type.
        The valid values are as follows:
        + **account**: means the customized query statement of a single account;
        + **aggregator**: means the user-defined query statement of the aggregator.

        Defaults to **account**.
        """
        return pulumi.get(self, "type")

