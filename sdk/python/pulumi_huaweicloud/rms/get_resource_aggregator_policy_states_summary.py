# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetResourceAggregatorPolicyStatesSummaryResult',
    'AwaitableGetResourceAggregatorPolicyStatesSummaryResult',
    'get_resource_aggregator_policy_states_summary',
    'get_resource_aggregator_policy_states_summary_output',
]

@pulumi.output_type
class GetResourceAggregatorPolicyStatesSummaryResult:
    """
    A collection of values returned by getResourceAggregatorPolicyStatesSummary.
    """
    def __init__(__self__, account_id=None, aggregator_id=None, group_by_key=None, id=None, results=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if aggregator_id and not isinstance(aggregator_id, str):
            raise TypeError("Expected argument 'aggregator_id' to be a str")
        pulumi.set(__self__, "aggregator_id", aggregator_id)
        if group_by_key and not isinstance(group_by_key, str):
            raise TypeError("Expected argument 'group_by_key' to be a str")
        pulumi.set(__self__, "group_by_key", group_by_key)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if results and not isinstance(results, list):
            raise TypeError("Expected argument 'results' to be a list")
        pulumi.set(__self__, "results", results)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="aggregatorId")
    def aggregator_id(self) -> _builtins.str:
        return pulumi.get(self, "aggregator_id")

    @_builtins.property
    @pulumi.getter(name="groupByKey")
    def group_by_key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "group_by_key")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def results(self) -> Sequence['outputs.GetResourceAggregatorPolicyStatesSummaryResultResult']:
        """
        Indicates the compliance summary results.
        The results structure is documented below.
        """
        return pulumi.get(self, "results")


class AwaitableGetResourceAggregatorPolicyStatesSummaryResult(GetResourceAggregatorPolicyStatesSummaryResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetResourceAggregatorPolicyStatesSummaryResult(
            account_id=self.account_id,
            aggregator_id=self.aggregator_id,
            group_by_key=self.group_by_key,
            id=self.id,
            results=self.results)


def get_resource_aggregator_policy_states_summary(account_id: Optional[_builtins.str] = None,
                                                  aggregator_id: Optional[_builtins.str] = None,
                                                  group_by_key: Optional[_builtins.str] = None,
                                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetResourceAggregatorPolicyStatesSummaryResult:
    """
    Use this data source to get the number of compliant and non-compliant rules of one or more accounts in the aggregator.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    aggregator_id = config.require_object("aggregatorId")
    test = huaweicloud.rms.get_resource_aggregator_policy_states_summary(aggregator_id=aggregator_id)
    ```


    :param _builtins.str account_id: Specifies the source account ID.
    :param _builtins.str aggregator_id: Specifies the resource aggregator ID.
    :param _builtins.str group_by_key: Specifies the key **DOMAIN** used to group resource counts.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['aggregatorId'] = aggregator_id
    __args__['groupByKey'] = group_by_key
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:rms/getResourceAggregatorPolicyStatesSummary:getResourceAggregatorPolicyStatesSummary', __args__, opts=opts, typ=GetResourceAggregatorPolicyStatesSummaryResult).value

    return AwaitableGetResourceAggregatorPolicyStatesSummaryResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        aggregator_id=pulumi.get(__ret__, 'aggregator_id'),
        group_by_key=pulumi.get(__ret__, 'group_by_key'),
        id=pulumi.get(__ret__, 'id'),
        results=pulumi.get(__ret__, 'results'))
def get_resource_aggregator_policy_states_summary_output(account_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                         aggregator_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                         group_by_key: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetResourceAggregatorPolicyStatesSummaryResult]:
    """
    Use this data source to get the number of compliant and non-compliant rules of one or more accounts in the aggregator.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    aggregator_id = config.require_object("aggregatorId")
    test = huaweicloud.rms.get_resource_aggregator_policy_states_summary(aggregator_id=aggregator_id)
    ```


    :param _builtins.str account_id: Specifies the source account ID.
    :param _builtins.str aggregator_id: Specifies the resource aggregator ID.
    :param _builtins.str group_by_key: Specifies the key **DOMAIN** used to group resource counts.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['aggregatorId'] = aggregator_id
    __args__['groupByKey'] = group_by_key
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:rms/getResourceAggregatorPolicyStatesSummary:getResourceAggregatorPolicyStatesSummary', __args__, opts=opts, typ=GetResourceAggregatorPolicyStatesSummaryResult)
    return __ret__.apply(lambda __response__: GetResourceAggregatorPolicyStatesSummaryResult(
        account_id=pulumi.get(__response__, 'account_id'),
        aggregator_id=pulumi.get(__response__, 'aggregator_id'),
        group_by_key=pulumi.get(__response__, 'group_by_key'),
        id=pulumi.get(__response__, 'id'),
        results=pulumi.get(__response__, 'results')))
