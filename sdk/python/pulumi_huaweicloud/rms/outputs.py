# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'AssignmentPackageVarsStructure',
    'OrganizationalAssignmentPackageVarsStructure',
    'OrganizationalPolicyAssignmentPolicyFilter',
    'PolicyAssignmentCustomPolicy',
    'PolicyAssignmentPolicyFilter',
    'RemediationConfigurationResourceParameter',
    'RemediationConfigurationStaticParameter',
    'RemediationExceptionException',
    'RemediationExecutionResult',
    'ResourceRecorderObsChannel',
    'ResourceRecorderSelector',
    'ResourceRecorderSmnChannel',
    'GetAdvancedQueriesQueryResult',
    'GetAdvancedQueryQueryInfoResult',
    'GetAdvancedQuerySchemasSchemaResult',
    'GetAssignmentPackageResultsValueResult',
    'GetAssignmentPackageScoresValueResult',
    'GetAssignmentPackageSummaryValueResult',
    'GetAssignmentPackageTemplatesTemplateResult',
    'GetAssignmentPackageTemplatesTemplateParameterResult',
    'GetAssignmentPackagesPackageResult',
    'GetAssignmentPackagesPackageVarsStructureResult',
    'GetInterconnectedServicesResourceProviderResult',
    'GetInterconnectedServicesResourceProviderResourceTypeResult',
    'GetOrganizationalAssignmentPackagesPackageResult',
    'GetOrganizationalAssignmentPackagesPackageVarsStructureResult',
    'GetOrganizationalPolicyAssignmentsAssignmentResult',
    'GetOrganizationalPolicyAssignmentsAssignmentPolicyFilterResult',
    'GetPolicyAssignmentSummaryResultResult',
    'GetPolicyAssignmentSummaryResultAssignmentDetailResult',
    'GetPolicyAssignmentSummaryResultResourceDetailResult',
    'GetPolicyAssignmentsAssignmentResult',
    'GetPolicyAssignmentsAssignmentCustomPolicyResult',
    'GetPolicyAssignmentsAssignmentPolicyFilterResult',
    'GetPolicyDefinitionsDefinitionResult',
    'GetPolicyStatesStateResult',
    'GetPolicyStatesSummaryResultResult',
    'GetPolicyStatesSummaryResultAssignmentDetailResult',
    'GetPolicyStatesSummaryResultResourceDetailResult',
    'GetRegionsRegionResult',
    'GetRemediationExecutionStatusesResourceKeyResult',
    'GetRemediationExecutionStatusesValueResult',
    'GetRemediationExecutionStatusesValueResourceKeyResult',
    'GetResourceAggregationPendingRequestsPendingAggregationRequestResult',
    'GetResourceAggregatorAdvancedQueryQueryInfoResult',
    'GetResourceAggregatorDiscoveredResourcesFilterResult',
    'GetResourceAggregatorDiscoveredResourcesResourceResult',
    'GetResourceAggregatorPolicyAssignmentDetailCustomPolicyResult',
    'GetResourceAggregatorPolicyAssignmentDetailPolicyFilterResult',
    'GetResourceAggregatorPolicyAssignmentDetailPolicyFilterV2Result',
    'GetResourceAggregatorPolicyAssignmentDetailPolicyFilterV2ExcludeTagResult',
    'GetResourceAggregatorPolicyAssignmentDetailPolicyFilterV2TagResult',
    'GetResourceAggregatorPolicyAssignmentDetailTagResult',
    'GetResourceAggregatorPolicyAssignmentsAssignmentResult',
    'GetResourceAggregatorPolicyAssignmentsAssignmentComplianceResult',
    'GetResourceAggregatorPolicyAssignmentsAssignmentComplianceResourceDetailResult',
    'GetResourceAggregatorPolicyAssignmentsFilterResult',
    'GetResourceAggregatorPolicyStatesStateResult',
    'GetResourceAggregatorPolicyStatesSummaryResultResult',
    'GetResourceAggregatorPolicyStatesSummaryResultAssignmentDetailResult',
    'GetResourceAggregatorPolicyStatesSummaryResultResourceDetailResult',
    'GetResourceAggregatorSourceStatusesAggregatedSourceStatusResult',
    'GetResourceAggregatorsAggregatorResult',
    'GetResourceHistoriesItemResult',
    'GetResourceHistoriesItemRelationResult',
    'GetResourceHistoriesItemResourceResult',
    'GetResourceInstancesResourceResult',
    'GetResourceInstancesResourceTagResult',
    'GetResourceInstancesTagResult',
    'GetResourcePolicyStatesSummaryValueResult',
    'GetResourcePolicyStatesSummaryValueResultResult',
    'GetResourcePolicyStatesSummaryValueResultAssignmentDetailResult',
    'GetResourcePolicyStatesSummaryValueResultResourceDetailResult',
    'GetResourcePolicyStatesValueResult',
    'GetResourceRelationsDetailsRelationResult',
    'GetResourceTagsTagResult',
    'GetResourcesResourceResult',
    'GetResourcesSummaryResourcesSummaryResult',
    'GetResourcesSummaryResourcesSummaryTypeResult',
    'GetResourcesSummaryResourcesSummaryTypeRegionResult',
    'GetServicesServiceResult',
    'GetServicesServiceResourceTypeResult',
    'GetTagsTagResult',
    'GetTrackedResourceTagsTagResult',
]

@pulumi.output_type
class AssignmentPackageVarsStructure(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "varKey":
            suggest = "var_key"
        elif key == "varValue":
            suggest = "var_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AssignmentPackageVarsStructure. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AssignmentPackageVarsStructure.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AssignmentPackageVarsStructure.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 var_key: Optional[_builtins.str] = None,
                 var_value: Optional[_builtins.str] = None):
        """
        :param _builtins.str var_key: Specifies the name of a parameter. It contains 1 to 64 characters.
        :param _builtins.str var_value: Specifies the value of a parameter. It's a json string.
        """
        if var_key is not None:
            pulumi.set(__self__, "var_key", var_key)
        if var_value is not None:
            pulumi.set(__self__, "var_value", var_value)

    @_builtins.property
    @pulumi.getter(name="varKey")
    def var_key(self) -> Optional[_builtins.str]:
        """
        Specifies the name of a parameter. It contains 1 to 64 characters.
        """
        return pulumi.get(self, "var_key")

    @_builtins.property
    @pulumi.getter(name="varValue")
    def var_value(self) -> Optional[_builtins.str]:
        """
        Specifies the value of a parameter. It's a json string.
        """
        return pulumi.get(self, "var_value")


@pulumi.output_type
class OrganizationalAssignmentPackageVarsStructure(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "varKey":
            suggest = "var_key"
        elif key == "varValue":
            suggest = "var_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrganizationalAssignmentPackageVarsStructure. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrganizationalAssignmentPackageVarsStructure.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrganizationalAssignmentPackageVarsStructure.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 var_key: Optional[_builtins.str] = None,
                 var_value: Optional[_builtins.str] = None):
        """
        :param _builtins.str var_key: Specifies the name of a parameter. It contains `1` to `64` characters.
        :param _builtins.str var_value: Specifies the value of a parameter. It's a json string.
        """
        if var_key is not None:
            pulumi.set(__self__, "var_key", var_key)
        if var_value is not None:
            pulumi.set(__self__, "var_value", var_value)

    @_builtins.property
    @pulumi.getter(name="varKey")
    def var_key(self) -> Optional[_builtins.str]:
        """
        Specifies the name of a parameter. It contains `1` to `64` characters.
        """
        return pulumi.get(self, "var_key")

    @_builtins.property
    @pulumi.getter(name="varValue")
    def var_value(self) -> Optional[_builtins.str]:
        """
        Specifies the value of a parameter. It's a json string.
        """
        return pulumi.get(self, "var_value")


@pulumi.output_type
class OrganizationalPolicyAssignmentPolicyFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceId":
            suggest = "resource_id"
        elif key == "resourceProvider":
            suggest = "resource_provider"
        elif key == "resourceType":
            suggest = "resource_type"
        elif key == "tagKey":
            suggest = "tag_key"
        elif key == "tagValue":
            suggest = "tag_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrganizationalPolicyAssignmentPolicyFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrganizationalPolicyAssignmentPolicyFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrganizationalPolicyAssignmentPolicyFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 region: Optional[_builtins.str] = None,
                 resource_id: Optional[_builtins.str] = None,
                 resource_provider: Optional[_builtins.str] = None,
                 resource_type: Optional[_builtins.str] = None,
                 tag_key: Optional[_builtins.str] = None,
                 tag_value: Optional[_builtins.str] = None):
        """
        :param _builtins.str region: Specifies the name of the region to which the filtered resources belong.
        :param _builtins.str resource_id: Specifies the resource ID used to filter a specified resource.
        :param _builtins.str resource_provider: Specifies the service name to which the filtered resources belong.
        :param _builtins.str resource_type: Specifies the resource type of the filtered resources.
        :param _builtins.str tag_key: Specifies the tag name used to filter resources.  
               This parameter and `resource_id` are alternative.
        :param _builtins.str tag_value: Specifies the tag value used to filter resources.  
               Required if `tag_key` is set.
        """
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_provider is not None:
            pulumi.set(__self__, "resource_provider", resource_provider)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if tag_key is not None:
            pulumi.set(__self__, "tag_key", tag_key)
        if tag_value is not None:
            pulumi.set(__self__, "tag_value", tag_value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[_builtins.str]:
        """
        Specifies the name of the region to which the filtered resources belong.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[_builtins.str]:
        """
        Specifies the resource ID used to filter a specified resource.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceProvider")
    def resource_provider(self) -> Optional[_builtins.str]:
        """
        Specifies the service name to which the filtered resources belong.
        """
        return pulumi.get(self, "resource_provider")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[_builtins.str]:
        """
        Specifies the resource type of the filtered resources.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[_builtins.str]:
        """
        Specifies the tag name used to filter resources.  
        This parameter and `resource_id` are alternative.
        """
        return pulumi.get(self, "tag_key")

    @_builtins.property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> Optional[_builtins.str]:
        """
        Specifies the tag value used to filter resources.  
        Required if `tag_key` is set.
        """
        return pulumi.get(self, "tag_value")


@pulumi.output_type
class PolicyAssignmentCustomPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authType":
            suggest = "auth_type"
        elif key == "functionUrn":
            suggest = "function_urn"
        elif key == "authValue":
            suggest = "auth_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyAssignmentCustomPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyAssignmentCustomPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyAssignmentCustomPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_type: _builtins.str,
                 function_urn: _builtins.str,
                 auth_value: Optional[Mapping[str, _builtins.str]] = None):
        """
        :param _builtins.str auth_type: Specifies the authorization type of the custom policy.
        :param _builtins.str function_urn: Specifies the function URN used to create the custom policy.
        :param Mapping[str, _builtins.str] auth_value: Specifies the authorization value of the custom policy.
        """
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "function_urn", function_urn)
        if auth_value is not None:
            pulumi.set(__self__, "auth_value", auth_value)

    @_builtins.property
    @pulumi.getter(name="authType")
    def auth_type(self) -> _builtins.str:
        """
        Specifies the authorization type of the custom policy.
        """
        return pulumi.get(self, "auth_type")

    @_builtins.property
    @pulumi.getter(name="functionUrn")
    def function_urn(self) -> _builtins.str:
        """
        Specifies the function URN used to create the custom policy.
        """
        return pulumi.get(self, "function_urn")

    @_builtins.property
    @pulumi.getter(name="authValue")
    def auth_value(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Specifies the authorization value of the custom policy.
        """
        return pulumi.get(self, "auth_value")


@pulumi.output_type
class PolicyAssignmentPolicyFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceId":
            suggest = "resource_id"
        elif key == "resourceProvider":
            suggest = "resource_provider"
        elif key == "resourceType":
            suggest = "resource_type"
        elif key == "tagKey":
            suggest = "tag_key"
        elif key == "tagValue":
            suggest = "tag_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyAssignmentPolicyFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyAssignmentPolicyFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyAssignmentPolicyFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 region: Optional[_builtins.str] = None,
                 resource_id: Optional[_builtins.str] = None,
                 resource_provider: Optional[_builtins.str] = None,
                 resource_type: Optional[_builtins.str] = None,
                 tag_key: Optional[_builtins.str] = None,
                 tag_value: Optional[_builtins.str] = None):
        """
        :param _builtins.str region: Specifies the name of the region to which the filtered resources belong.
        :param _builtins.str resource_id: Specifies the resource ID used to filter a specified resource.
        :param _builtins.str resource_provider: Specifies the service name to which the filtered resources belong.
        :param _builtins.str resource_type: Specifies the resource type of the filtered resources.
        :param _builtins.str tag_key: Specifies the tag name used to filter resources.  
               This parameter and `resource_id` are alternative.
        :param _builtins.str tag_value: Specifies the tag value used to filter resources.  
               Required if `tag_key` is set.
               
               <a name="rms_custom_policy"></a>
               The `custom_policy` block supports:
        """
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_provider is not None:
            pulumi.set(__self__, "resource_provider", resource_provider)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if tag_key is not None:
            pulumi.set(__self__, "tag_key", tag_key)
        if tag_value is not None:
            pulumi.set(__self__, "tag_value", tag_value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[_builtins.str]:
        """
        Specifies the name of the region to which the filtered resources belong.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[_builtins.str]:
        """
        Specifies the resource ID used to filter a specified resource.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceProvider")
    def resource_provider(self) -> Optional[_builtins.str]:
        """
        Specifies the service name to which the filtered resources belong.
        """
        return pulumi.get(self, "resource_provider")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[_builtins.str]:
        """
        Specifies the resource type of the filtered resources.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[_builtins.str]:
        """
        Specifies the tag name used to filter resources.  
        This parameter and `resource_id` are alternative.
        """
        return pulumi.get(self, "tag_key")

    @_builtins.property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> Optional[_builtins.str]:
        """
        Specifies the tag value used to filter resources.  
        Required if `tag_key` is set.

        <a name="rms_custom_policy"></a>
        The `custom_policy` block supports:
        """
        return pulumi.get(self, "tag_value")


@pulumi.output_type
class RemediationConfigurationResourceParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceId":
            suggest = "resource_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RemediationConfigurationResourceParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RemediationConfigurationResourceParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RemediationConfigurationResourceParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_id: _builtins.str):
        """
        :param _builtins.str resource_id: Specifies the parameter name for passing the resource ID.
               
               <a name="static_parameter_struct"></a>
               The `static_parameter` block supports:
        """
        pulumi.set(__self__, "resource_id", resource_id)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        Specifies the parameter name for passing the resource ID.

        <a name="static_parameter_struct"></a>
        The `static_parameter` block supports:
        """
        return pulumi.get(self, "resource_id")


@pulumi.output_type
class RemediationConfigurationStaticParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "varKey":
            suggest = "var_key"
        elif key == "varValue":
            suggest = "var_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RemediationConfigurationStaticParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RemediationConfigurationStaticParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RemediationConfigurationStaticParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 var_key: Optional[_builtins.str] = None,
                 var_value: Optional[_builtins.str] = None):
        """
        :param _builtins.str var_key: Specifies the static parameter name.
        :param _builtins.str var_value: Specifies the static parameter value in JSON format.
        """
        if var_key is not None:
            pulumi.set(__self__, "var_key", var_key)
        if var_value is not None:
            pulumi.set(__self__, "var_value", var_value)

    @_builtins.property
    @pulumi.getter(name="varKey")
    def var_key(self) -> Optional[_builtins.str]:
        """
        Specifies the static parameter name.
        """
        return pulumi.get(self, "var_key")

    @_builtins.property
    @pulumi.getter(name="varValue")
    def var_value(self) -> Optional[_builtins.str]:
        """
        Specifies the static parameter value in JSON format.
        """
        return pulumi.get(self, "var_value")


@pulumi.output_type
class RemediationExceptionException(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceId":
            suggest = "resource_id"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "joinedAt":
            suggest = "joined_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RemediationExceptionException. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RemediationExceptionException.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RemediationExceptionException.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_id: _builtins.str,
                 created_by: Optional[_builtins.str] = None,
                 joined_at: Optional[_builtins.str] = None,
                 message: Optional[_builtins.str] = None):
        """
        :param _builtins.str resource_id: Specifies the resource ID.
        :param _builtins.str created_by: The creator of a remediation exception.
        :param _builtins.str joined_at: The time when a remediation exception is added.
        :param _builtins.str message: Specifies the reason for adding an exception.
        """
        pulumi.set(__self__, "resource_id", resource_id)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if joined_at is not None:
            pulumi.set(__self__, "joined_at", joined_at)
        if message is not None:
            pulumi.set(__self__, "message", message)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        Specifies the resource ID.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[_builtins.str]:
        """
        The creator of a remediation exception.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter(name="joinedAt")
    def joined_at(self) -> Optional[_builtins.str]:
        """
        The time when a remediation exception is added.
        """
        return pulumi.get(self, "joined_at")

    @_builtins.property
    @pulumi.getter
    def message(self) -> Optional[_builtins.str]:
        """
        Specifies the reason for adding an exception.
        """
        return pulumi.get(self, "message")


@pulumi.output_type
class RemediationExecutionResult(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "invocationTime":
            suggest = "invocation_time"
        elif key == "resourceId":
            suggest = "resource_id"
        elif key == "resourceName":
            suggest = "resource_name"
        elif key == "resourceProvider":
            suggest = "resource_provider"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RemediationExecutionResult. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RemediationExecutionResult.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RemediationExecutionResult.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automatic: Optional[_builtins.bool] = None,
                 invocation_time: Optional[_builtins.str] = None,
                 message: Optional[_builtins.str] = None,
                 resource_id: Optional[_builtins.str] = None,
                 resource_name: Optional[_builtins.str] = None,
                 resource_provider: Optional[_builtins.str] = None,
                 resource_type: Optional[_builtins.str] = None,
                 state: Optional[_builtins.str] = None):
        """
        :param _builtins.bool automatic: Whether the remediation is automatic.
        :param _builtins.str invocation_time: The start time of remediation.
        :param _builtins.str message: The information of remediation execution.
        :param _builtins.str resource_id: The resource ID.
        :param _builtins.str resource_name: The resource name.
        :param _builtins.str resource_provider: The cloud service name.
        :param _builtins.str resource_type: The resource type.
        :param _builtins.str state: The execution state of remediation.
        """
        if automatic is not None:
            pulumi.set(__self__, "automatic", automatic)
        if invocation_time is not None:
            pulumi.set(__self__, "invocation_time", invocation_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if resource_provider is not None:
            pulumi.set(__self__, "resource_provider", resource_provider)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter
    def automatic(self) -> Optional[_builtins.bool]:
        """
        Whether the remediation is automatic.
        """
        return pulumi.get(self, "automatic")

    @_builtins.property
    @pulumi.getter(name="invocationTime")
    def invocation_time(self) -> Optional[_builtins.str]:
        """
        The start time of remediation.
        """
        return pulumi.get(self, "invocation_time")

    @_builtins.property
    @pulumi.getter
    def message(self) -> Optional[_builtins.str]:
        """
        The information of remediation execution.
        """
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[_builtins.str]:
        """
        The resource ID.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[_builtins.str]:
        """
        The resource name.
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="resourceProvider")
    def resource_provider(self) -> Optional[_builtins.str]:
        """
        The cloud service name.
        """
        return pulumi.get(self, "resource_provider")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[_builtins.str]:
        """
        The resource type.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[_builtins.str]:
        """
        The execution state of remediation.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class ResourceRecorderObsChannel(dict):
    def __init__(__self__, *,
                 bucket: _builtins.str,
                 region: _builtins.str):
        """
        :param _builtins.str bucket: Specifies the OBS bucket name used for data dumping.
        :param _builtins.str region: Specifies the region where this SMN topic is located.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> _builtins.str:
        """
        Specifies the OBS bucket name used for data dumping.
        """
        return pulumi.get(self, "bucket")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        Specifies the region where this SMN topic is located.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class ResourceRecorderSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allSupported":
            suggest = "all_supported"
        elif key == "resourceTypes":
            suggest = "resource_types"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceRecorderSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceRecorderSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceRecorderSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 all_supported: _builtins.bool,
                 resource_types: Optional[Sequence[_builtins.str]] = None):
        """
        :param _builtins.bool all_supported: Specifies whether to select all supported resources.
        :param Sequence[_builtins.str] resource_types: Specifies the resource type list. For details about the supported services and
               resource types, see [Supported Services and Resource Types](https://support.huaweicloud.com/intl/en-us/api-rms/rms_06_0100.html).
               
               <a name="Recorder_TrackerOBSChannelConfigBody"></a>
               The `obs_channel` block supports:
        """
        pulumi.set(__self__, "all_supported", all_supported)
        if resource_types is not None:
            pulumi.set(__self__, "resource_types", resource_types)

    @_builtins.property
    @pulumi.getter(name="allSupported")
    def all_supported(self) -> _builtins.bool:
        """
        Specifies whether to select all supported resources.
        """
        return pulumi.get(self, "all_supported")

    @_builtins.property
    @pulumi.getter(name="resourceTypes")
    def resource_types(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the resource type list. For details about the supported services and
        resource types, see [Supported Services and Resource Types](https://support.huaweicloud.com/intl/en-us/api-rms/rms_06_0100.html).

        <a name="Recorder_TrackerOBSChannelConfigBody"></a>
        The `obs_channel` block supports:
        """
        return pulumi.get(self, "resource_types")


@pulumi.output_type
class ResourceRecorderSmnChannel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "topicUrn":
            suggest = "topic_urn"
        elif key == "projectId":
            suggest = "project_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceRecorderSmnChannel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceRecorderSmnChannel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceRecorderSmnChannel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 topic_urn: _builtins.str,
                 project_id: Optional[_builtins.str] = None,
                 region: Optional[_builtins.str] = None):
        """
        :param _builtins.str topic_urn: Specifies the SMN topic URN used to send notifications.
        :param _builtins.str project_id: Specifies the project ID where this SMN topic is located.
        :param _builtins.str region: Specifies the region where this SMN topic is located.
        """
        pulumi.set(__self__, "topic_urn", topic_urn)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="topicUrn")
    def topic_urn(self) -> _builtins.str:
        """
        Specifies the SMN topic URN used to send notifications.
        """
        return pulumi.get(self, "topic_urn")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[_builtins.str]:
        """
        Specifies the project ID where this SMN topic is located.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[_builtins.str]:
        """
        Specifies the region where this SMN topic is located.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class GetAdvancedQueriesQueryResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 expression: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str created_at: The creation time of the advanced query.
        :param _builtins.str description: The advanced query description.
        :param _builtins.str expression: The advanced query expression.
        :param _builtins.str id: The advanced query ID.
        :param _builtins.str name: Specifies the advanced query name.
        :param _builtins.str updated_at: The latest update time of the advanced query.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the advanced query.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The advanced query description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def expression(self) -> _builtins.str:
        """
        The advanced query expression.
        """
        return pulumi.get(self, "expression")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The advanced query ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the advanced query name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the advanced query.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetAdvancedQueryQueryInfoResult(dict):
    def __init__(__self__, *,
                 select_fields: Sequence[_builtins.str]):
        """
        :param Sequence[_builtins.str] select_fields: The list of select fields.
        """
        pulumi.set(__self__, "select_fields", select_fields)

    @_builtins.property
    @pulumi.getter(name="selectFields")
    def select_fields(self) -> Sequence[_builtins.str]:
        """
        The list of select fields.
        """
        return pulumi.get(self, "select_fields")


@pulumi.output_type
class GetAdvancedQuerySchemasSchemaResult(dict):
    def __init__(__self__, *,
                 schema: Mapping[str, _builtins.str],
                 type: _builtins.str):
        """
        :param Mapping[str, _builtins.str] schema: The schema detail.
        :param _builtins.str type: Specifies the type of the schema.
        """
        pulumi.set(__self__, "schema", schema)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def schema(self) -> Mapping[str, _builtins.str]:
        """
        The schema detail.
        """
        return pulumi.get(self, "schema")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the schema.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetAssignmentPackageResultsValueResult(dict):
    def __init__(__self__, *,
                 compliance_state: _builtins.str,
                 evaluation_time: _builtins.str,
                 policy_assignment_id: _builtins.str,
                 policy_assignment_name: _builtins.str,
                 resource_id: _builtins.str):
        """
        :param _builtins.str compliance_state: The compliance result of the assignment.
        :param _builtins.str evaluation_time: The time for evaluating resources.
        :param _builtins.str policy_assignment_id: The policy assignment ID.
        :param _builtins.str policy_assignment_name: Specifies the policy assignment name. Fuzzy search is supported.
        :param _builtins.str resource_id: The ID of the resource to be evaluated.
        """
        pulumi.set(__self__, "compliance_state", compliance_state)
        pulumi.set(__self__, "evaluation_time", evaluation_time)
        pulumi.set(__self__, "policy_assignment_id", policy_assignment_id)
        pulumi.set(__self__, "policy_assignment_name", policy_assignment_name)
        pulumi.set(__self__, "resource_id", resource_id)

    @_builtins.property
    @pulumi.getter(name="complianceState")
    def compliance_state(self) -> _builtins.str:
        """
        The compliance result of the assignment.
        """
        return pulumi.get(self, "compliance_state")

    @_builtins.property
    @pulumi.getter(name="evaluationTime")
    def evaluation_time(self) -> _builtins.str:
        """
        The time for evaluating resources.
        """
        return pulumi.get(self, "evaluation_time")

    @_builtins.property
    @pulumi.getter(name="policyAssignmentId")
    def policy_assignment_id(self) -> _builtins.str:
        """
        The policy assignment ID.
        """
        return pulumi.get(self, "policy_assignment_id")

    @_builtins.property
    @pulumi.getter(name="policyAssignmentName")
    def policy_assignment_name(self) -> _builtins.str:
        """
        Specifies the policy assignment name. Fuzzy search is supported.
        """
        return pulumi.get(self, "policy_assignment_name")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        The ID of the resource to be evaluated.
        """
        return pulumi.get(self, "resource_id")


@pulumi.output_type
class GetAssignmentPackageScoresValueResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 name: _builtins.str,
                 score: _builtins.str):
        """
        :param _builtins.str id: The ID of the assignment package.
        :param _builtins.str name: The assignment package name.
        :param _builtins.str score: The score of the assignment package.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "score", score)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the assignment package.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The assignment package name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def score(self) -> _builtins.str:
        """
        The score of the assignment package.
        """
        return pulumi.get(self, "score")


@pulumi.output_type
class GetAssignmentPackageSummaryValueResult(dict):
    def __init__(__self__, *,
                 compliance: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str):
        """
        :param _builtins.str compliance: Indicates the compliance result of a conformance package.
        :param _builtins.str id: Indicates the ID of a conformance package.
        :param _builtins.str name: Indicates the conformance package name.
        """
        pulumi.set(__self__, "compliance", compliance)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def compliance(self) -> _builtins.str:
        """
        Indicates the compliance result of a conformance package.
        """
        return pulumi.get(self, "compliance")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the ID of a conformance package.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the conformance package name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAssignmentPackageTemplatesTemplateResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 id: _builtins.str,
                 parameters: Sequence['outputs.GetAssignmentPackageTemplatesTemplateParameterResult'],
                 template_body: _builtins.str,
                 template_key: _builtins.str):
        """
        :param _builtins.str description: Specifies the description for a built-in assignment package template.
        :param _builtins.str id: Indicates the ID of a built-in assignment package template.
        :param Sequence['GetAssignmentPackageTemplatesTemplateParameterArgs'] parameters: Indicates the parameters for a built-in assignment package template.
               The parameters structure is documented below.
        :param _builtins.str template_body: Indicates the content of a built-in assignment package template.
        :param _builtins.str template_key: Specifies the name of a built-in assignment package template.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "parameters", parameters)
        pulumi.set(__self__, "template_body", template_body)
        pulumi.set(__self__, "template_key", template_key)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Specifies the description for a built-in assignment package template.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the ID of a built-in assignment package template.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Sequence['outputs.GetAssignmentPackageTemplatesTemplateParameterResult']:
        """
        Indicates the parameters for a built-in assignment package template.
        The parameters structure is documented below.
        """
        return pulumi.get(self, "parameters")

    @_builtins.property
    @pulumi.getter(name="templateBody")
    def template_body(self) -> _builtins.str:
        """
        Indicates the content of a built-in assignment package template.
        """
        return pulumi.get(self, "template_body")

    @_builtins.property
    @pulumi.getter(name="templateKey")
    def template_key(self) -> _builtins.str:
        """
        Specifies the name of a built-in assignment package template.
        """
        return pulumi.get(self, "template_key")


@pulumi.output_type
class GetAssignmentPackageTemplatesTemplateParameterResult(dict):
    def __init__(__self__, *,
                 default_value: _builtins.str,
                 description: _builtins.str,
                 name: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str default_value: Indicates the default value of a parameter for a built-in assignment package template.
        :param _builtins.str description: Specifies the description for a built-in assignment package template.
        :param _builtins.str name: Indicates the name of a parameter for a built-in assignment package template.
        :param _builtins.str type: Indicates the type of a parameter for a built-in assignment package template.
        """
        pulumi.set(__self__, "default_value", default_value)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> _builtins.str:
        """
        Indicates the default value of a parameter for a built-in assignment package template.
        """
        return pulumi.get(self, "default_value")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Specifies the description for a built-in assignment package template.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the name of a parameter for a built-in assignment package template.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the type of a parameter for a built-in assignment package template.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetAssignmentPackagesPackageResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 created_by: _builtins.str,
                 deployment_id: _builtins.str,
                 error_message: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 stack_id: _builtins.str,
                 stack_name: _builtins.str,
                 status: _builtins.str,
                 updated_at: _builtins.str,
                 vars_structures: Sequence['outputs.GetAssignmentPackagesPackageVarsStructureResult']):
        """
        :param _builtins.str created_at: The time when the assignment package was created.
        :param _builtins.str created_by: The creator of the assignment package.
        :param _builtins.str deployment_id: The deployment ID.
        :param _builtins.str error_message: The error message when you failed to deploy or delete an assignment package.
        :param _builtins.str id: The ID of an assignment package.
        :param _builtins.str name: Specifies the assignment package name. It contains 1 to 64 characters.
        :param _builtins.str stack_id: The unique ID of a resource stack.
        :param _builtins.str stack_name: The name of a resource stack.
        :param _builtins.str status: Specifies the assignment package status.
        :param _builtins.str updated_at: The time when the assignment package was updated.
        :param Sequence['GetAssignmentPackagesPackageVarsStructureArgs'] vars_structures: The parameters of the assignment package.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "deployment_id", deployment_id)
        pulumi.set(__self__, "error_message", error_message)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "stack_id", stack_id)
        pulumi.set(__self__, "stack_name", stack_name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "vars_structures", vars_structures)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The time when the assignment package was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> _builtins.str:
        """
        The creator of the assignment package.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> _builtins.str:
        """
        The deployment ID.
        """
        return pulumi.get(self, "deployment_id")

    @_builtins.property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> _builtins.str:
        """
        The error message when you failed to deploy or delete an assignment package.
        """
        return pulumi.get(self, "error_message")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of an assignment package.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the assignment package name. It contains 1 to 64 characters.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="stackId")
    def stack_id(self) -> _builtins.str:
        """
        The unique ID of a resource stack.
        """
        return pulumi.get(self, "stack_id")

    @_builtins.property
    @pulumi.getter(name="stackName")
    def stack_name(self) -> _builtins.str:
        """
        The name of a resource stack.
        """
        return pulumi.get(self, "stack_name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the assignment package status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The time when the assignment package was updated.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="varsStructures")
    def vars_structures(self) -> Sequence['outputs.GetAssignmentPackagesPackageVarsStructureResult']:
        """
        The parameters of the assignment package.
        """
        return pulumi.get(self, "vars_structures")


@pulumi.output_type
class GetAssignmentPackagesPackageVarsStructureResult(dict):
    def __init__(__self__, *,
                 var_key: _builtins.str,
                 var_value: _builtins.str):
        """
        :param _builtins.str var_key: The name of a parameter.
        :param _builtins.str var_value: The value of a parameter.
        """
        pulumi.set(__self__, "var_key", var_key)
        pulumi.set(__self__, "var_value", var_value)

    @_builtins.property
    @pulumi.getter(name="varKey")
    def var_key(self) -> _builtins.str:
        """
        The name of a parameter.
        """
        return pulumi.get(self, "var_key")

    @_builtins.property
    @pulumi.getter(name="varValue")
    def var_value(self) -> _builtins.str:
        """
        The value of a parameter.
        """
        return pulumi.get(self, "var_value")


@pulumi.output_type
class GetInterconnectedServicesResourceProviderResult(dict):
    def __init__(__self__, *,
                 category_display_name: _builtins.str,
                 display_name: _builtins.str,
                 provider: _builtins.str,
                 resource_types: Sequence['outputs.GetInterconnectedServicesResourceProviderResourceTypeResult']):
        """
        :param _builtins.str category_display_name: Indicates the display name of the service category.
        :param _builtins.str display_name: Indicates the display name of the resource type.
        :param _builtins.str provider: Indicates the service name.
        :param Sequence['GetInterconnectedServicesResourceProviderResourceTypeArgs'] resource_types: Indicates the resource type list.
               The resource_types structure is documented below.
        """
        pulumi.set(__self__, "category_display_name", category_display_name)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "provider", provider)
        pulumi.set(__self__, "resource_types", resource_types)

    @_builtins.property
    @pulumi.getter(name="categoryDisplayName")
    def category_display_name(self) -> _builtins.str:
        """
        Indicates the display name of the service category.
        """
        return pulumi.get(self, "category_display_name")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        Indicates the display name of the resource type.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter
    def provider(self) -> _builtins.str:
        """
        Indicates the service name.
        """
        return pulumi.get(self, "provider")

    @_builtins.property
    @pulumi.getter(name="resourceTypes")
    def resource_types(self) -> Sequence['outputs.GetInterconnectedServicesResourceProviderResourceTypeResult']:
        """
        Indicates the resource type list.
        The resource_types structure is documented below.
        """
        return pulumi.get(self, "resource_types")


@pulumi.output_type
class GetInterconnectedServicesResourceProviderResourceTypeResult(dict):
    def __init__(__self__, *,
                 console_detail_url: _builtins.str,
                 console_endpoint_id: _builtins.str,
                 console_list_url: _builtins.str,
                 display_name: _builtins.str,
                 global_: _builtins.bool,
                 name: _builtins.str,
                 regions: Sequence[_builtins.str],
                 track: _builtins.str):
        """
        :param _builtins.str console_detail_url: Indicates the URL of the resource details page.
        :param _builtins.str console_endpoint_id: Indicates the endpoint ID of the console.
        :param _builtins.str console_list_url: Indicates the URL of the resource list page.
        :param _builtins.str display_name: Indicates the display name of the resource type.
        :param _builtins.bool global_: Indicates whether a resource is a global resource.
        :param _builtins.str name: Indicates the resource type name.
        :param Sequence[_builtins.str] regions: Indicates the list of supported regions.
        :param _builtins.str track: Indicates whether resources are collected by default.
               The value can be:
               + **tracked**: indicates that resources are collected by default;
               + **untracked**: indicates that resources are not collected by default.
        """
        pulumi.set(__self__, "console_detail_url", console_detail_url)
        pulumi.set(__self__, "console_endpoint_id", console_endpoint_id)
        pulumi.set(__self__, "console_list_url", console_list_url)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "global_", global_)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "regions", regions)
        pulumi.set(__self__, "track", track)

    @_builtins.property
    @pulumi.getter(name="consoleDetailUrl")
    def console_detail_url(self) -> _builtins.str:
        """
        Indicates the URL of the resource details page.
        """
        return pulumi.get(self, "console_detail_url")

    @_builtins.property
    @pulumi.getter(name="consoleEndpointId")
    def console_endpoint_id(self) -> _builtins.str:
        """
        Indicates the endpoint ID of the console.
        """
        return pulumi.get(self, "console_endpoint_id")

    @_builtins.property
    @pulumi.getter(name="consoleListUrl")
    def console_list_url(self) -> _builtins.str:
        """
        Indicates the URL of the resource list page.
        """
        return pulumi.get(self, "console_list_url")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        Indicates the display name of the resource type.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="global")
    def global_(self) -> _builtins.bool:
        """
        Indicates whether a resource is a global resource.
        """
        return pulumi.get(self, "global_")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the resource type name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def regions(self) -> Sequence[_builtins.str]:
        """
        Indicates the list of supported regions.
        """
        return pulumi.get(self, "regions")

    @_builtins.property
    @pulumi.getter
    def track(self) -> _builtins.str:
        """
        Indicates whether resources are collected by default.
        The value can be:
        + **tracked**: indicates that resources are collected by default;
        + **untracked**: indicates that resources are not collected by default.
        """
        return pulumi.get(self, "track")


@pulumi.output_type
class GetOrganizationalAssignmentPackagesPackageResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 org_conformance_pack_urn: _builtins.str,
                 organization_id: _builtins.str,
                 owner_id: _builtins.str,
                 updated_at: _builtins.str,
                 vars_structures: Sequence['outputs.GetOrganizationalAssignmentPackagesPackageVarsStructureResult']):
        """
        :param _builtins.str created_at: The creation time of the organizational assignment package.
        :param _builtins.str id: The organizational assignment package ID.
        :param _builtins.str name: Specifies the organizational assignment package name.
        :param _builtins.str org_conformance_pack_urn: The unique identifier of the organizational assignment package.
        :param _builtins.str organization_id: Specifies the ID of the organization.
        :param _builtins.str owner_id: The creator of the organizational assignment package.
        :param _builtins.str updated_at: The update time of the organizational assignment package.
        :param Sequence['GetOrganizationalAssignmentPackagesPackageVarsStructureArgs'] vars_structures: The parameters of the organizational assignment package.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "org_conformance_pack_urn", org_conformance_pack_urn)
        pulumi.set(__self__, "organization_id", organization_id)
        pulumi.set(__self__, "owner_id", owner_id)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "vars_structures", vars_structures)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the organizational assignment package.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The organizational assignment package ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the organizational assignment package name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="orgConformancePackUrn")
    def org_conformance_pack_urn(self) -> _builtins.str:
        """
        The unique identifier of the organizational assignment package.
        """
        return pulumi.get(self, "org_conformance_pack_urn")

    @_builtins.property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> _builtins.str:
        """
        Specifies the ID of the organization.
        """
        return pulumi.get(self, "organization_id")

    @_builtins.property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> _builtins.str:
        """
        The creator of the organizational assignment package.
        """
        return pulumi.get(self, "owner_id")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The update time of the organizational assignment package.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="varsStructures")
    def vars_structures(self) -> Sequence['outputs.GetOrganizationalAssignmentPackagesPackageVarsStructureResult']:
        """
        The parameters of the organizational assignment package.
        """
        return pulumi.get(self, "vars_structures")


@pulumi.output_type
class GetOrganizationalAssignmentPackagesPackageVarsStructureResult(dict):
    def __init__(__self__, *,
                 var_key: _builtins.str,
                 var_value: _builtins.str):
        """
        :param _builtins.str var_key: The name of a parameter.
        :param _builtins.str var_value: The value of a parameter.
        """
        pulumi.set(__self__, "var_key", var_key)
        pulumi.set(__self__, "var_value", var_value)

    @_builtins.property
    @pulumi.getter(name="varKey")
    def var_key(self) -> _builtins.str:
        """
        The name of a parameter.
        """
        return pulumi.get(self, "var_key")

    @_builtins.property
    @pulumi.getter(name="varValue")
    def var_value(self) -> _builtins.str:
        """
        The value of a parameter.
        """
        return pulumi.get(self, "var_value")


@pulumi.output_type
class GetOrganizationalPolicyAssignmentsAssignmentResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 organization_id: _builtins.str,
                 organization_policy_assignment_urn: _builtins.str,
                 owner_id: _builtins.str,
                 parameters: Mapping[str, _builtins.str],
                 period: _builtins.str,
                 policy_definition_id: _builtins.str,
                 policy_filters: Sequence['outputs.GetOrganizationalPolicyAssignmentsAssignmentPolicyFilterResult'],
                 updated_at: _builtins.str):
        """
        :param _builtins.str created_at: The creation time of the organizational policy assignment.
        :param _builtins.str description: The description of the organizational policy assignment.
        :param _builtins.str id: The ID of the organizational policy assignment.
        :param _builtins.str name: Specifies the name of the organizational policy assignment.
        :param _builtins.str organization_id: Specifies the ID of the organization.
        :param _builtins.str organization_policy_assignment_urn: The unique identifier of the organizational policy assignment.
        :param _builtins.str owner_id: The creator of the organizational policy assignment.
        :param Mapping[str, _builtins.str] parameters: The rule definition of the organizational policy assignment.
        :param _builtins.str period: The trigger period of the organizational policy assignment.
        :param _builtins.str policy_definition_id: Specifies the ID of the policy definition.
        :param Sequence['GetOrganizationalPolicyAssignmentsAssignmentPolicyFilterArgs'] policy_filters: The configuration used to filter resources.
        :param _builtins.str updated_at: The latest update time of the organizational policy assignment.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "organization_id", organization_id)
        pulumi.set(__self__, "organization_policy_assignment_urn", organization_policy_assignment_urn)
        pulumi.set(__self__, "owner_id", owner_id)
        pulumi.set(__self__, "parameters", parameters)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "policy_definition_id", policy_definition_id)
        pulumi.set(__self__, "policy_filters", policy_filters)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the organizational policy assignment.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the organizational policy assignment.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the organizational policy assignment.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the organizational policy assignment.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> _builtins.str:
        """
        Specifies the ID of the organization.
        """
        return pulumi.get(self, "organization_id")

    @_builtins.property
    @pulumi.getter(name="organizationPolicyAssignmentUrn")
    def organization_policy_assignment_urn(self) -> _builtins.str:
        """
        The unique identifier of the organizational policy assignment.
        """
        return pulumi.get(self, "organization_policy_assignment_urn")

    @_builtins.property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> _builtins.str:
        """
        The creator of the organizational policy assignment.
        """
        return pulumi.get(self, "owner_id")

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Mapping[str, _builtins.str]:
        """
        The rule definition of the organizational policy assignment.
        """
        return pulumi.get(self, "parameters")

    @_builtins.property
    @pulumi.getter
    def period(self) -> _builtins.str:
        """
        The trigger period of the organizational policy assignment.
        """
        return pulumi.get(self, "period")

    @_builtins.property
    @pulumi.getter(name="policyDefinitionId")
    def policy_definition_id(self) -> _builtins.str:
        """
        Specifies the ID of the policy definition.
        """
        return pulumi.get(self, "policy_definition_id")

    @_builtins.property
    @pulumi.getter(name="policyFilters")
    def policy_filters(self) -> Sequence['outputs.GetOrganizationalPolicyAssignmentsAssignmentPolicyFilterResult']:
        """
        The configuration used to filter resources.
        """
        return pulumi.get(self, "policy_filters")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the organizational policy assignment.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetOrganizationalPolicyAssignmentsAssignmentPolicyFilterResult(dict):
    def __init__(__self__, *,
                 region_id: _builtins.str,
                 resource_id: _builtins.str,
                 resource_provider: _builtins.str,
                 resource_type: _builtins.str,
                 tag_key: _builtins.str,
                 tag_value: _builtins.str):
        """
        :param _builtins.str region_id: The name of the region to which the filtered resources belong.
        :param _builtins.str resource_id: The resource ID used to filter a specified resource.
        :param _builtins.str resource_provider: The service name to which the filtered resources belong.
        :param _builtins.str resource_type: The resource type of the filtered resources.
        :param _builtins.str tag_key: The tag name used to filter resources.
        :param _builtins.str tag_value: The tag value used to filter resources.
        """
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_provider", resource_provider)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "tag_key", tag_key)
        pulumi.set(__self__, "tag_value", tag_value)

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> _builtins.str:
        """
        The name of the region to which the filtered resources belong.
        """
        return pulumi.get(self, "region_id")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        The resource ID used to filter a specified resource.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceProvider")
    def resource_provider(self) -> _builtins.str:
        """
        The service name to which the filtered resources belong.
        """
        return pulumi.get(self, "resource_provider")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        """
        The resource type of the filtered resources.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> _builtins.str:
        """
        The tag name used to filter resources.
        """
        return pulumi.get(self, "tag_key")

    @_builtins.property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> _builtins.str:
        """
        The tag value used to filter resources.
        """
        return pulumi.get(self, "tag_value")


@pulumi.output_type
class GetPolicyAssignmentSummaryResultResult(dict):
    def __init__(__self__, *,
                 assignment_details: Sequence['outputs.GetPolicyAssignmentSummaryResultAssignmentDetailResult'],
                 resource_details: Sequence['outputs.GetPolicyAssignmentSummaryResultResourceDetailResult']):
        """
        :param Sequence['GetPolicyAssignmentSummaryResultAssignmentDetailArgs'] assignment_details: Indicates the compliance summary details.
               The assignment_details structure is documented below.
        :param Sequence['GetPolicyAssignmentSummaryResultResourceDetailArgs'] resource_details: Indicates the resource compliance summary details.
               The resource_details structure is documented below.
        """
        pulumi.set(__self__, "assignment_details", assignment_details)
        pulumi.set(__self__, "resource_details", resource_details)

    @_builtins.property
    @pulumi.getter(name="assignmentDetails")
    def assignment_details(self) -> Sequence['outputs.GetPolicyAssignmentSummaryResultAssignmentDetailResult']:
        """
        Indicates the compliance summary details.
        The assignment_details structure is documented below.
        """
        return pulumi.get(self, "assignment_details")

    @_builtins.property
    @pulumi.getter(name="resourceDetails")
    def resource_details(self) -> Sequence['outputs.GetPolicyAssignmentSummaryResultResourceDetailResult']:
        """
        Indicates the resource compliance summary details.
        The resource_details structure is documented below.
        """
        return pulumi.get(self, "resource_details")


@pulumi.output_type
class GetPolicyAssignmentSummaryResultAssignmentDetailResult(dict):
    def __init__(__self__, *,
                 compliant_count: _builtins.int,
                 non_compliant_count: _builtins.int):
        """
        :param _builtins.int compliant_count: Indicates the number of compliant resources.
        :param _builtins.int non_compliant_count: Indicates the number of non-compliant resources.
        """
        pulumi.set(__self__, "compliant_count", compliant_count)
        pulumi.set(__self__, "non_compliant_count", non_compliant_count)

    @_builtins.property
    @pulumi.getter(name="compliantCount")
    def compliant_count(self) -> _builtins.int:
        """
        Indicates the number of compliant resources.
        """
        return pulumi.get(self, "compliant_count")

    @_builtins.property
    @pulumi.getter(name="nonCompliantCount")
    def non_compliant_count(self) -> _builtins.int:
        """
        Indicates the number of non-compliant resources.
        """
        return pulumi.get(self, "non_compliant_count")


@pulumi.output_type
class GetPolicyAssignmentSummaryResultResourceDetailResult(dict):
    def __init__(__self__, *,
                 compliant_count: _builtins.int,
                 non_compliant_count: _builtins.int):
        """
        :param _builtins.int compliant_count: Indicates the number of compliant resources.
        :param _builtins.int non_compliant_count: Indicates the number of non-compliant resources.
        """
        pulumi.set(__self__, "compliant_count", compliant_count)
        pulumi.set(__self__, "non_compliant_count", non_compliant_count)

    @_builtins.property
    @pulumi.getter(name="compliantCount")
    def compliant_count(self) -> _builtins.int:
        """
        Indicates the number of compliant resources.
        """
        return pulumi.get(self, "compliant_count")

    @_builtins.property
    @pulumi.getter(name="nonCompliantCount")
    def non_compliant_count(self) -> _builtins.int:
        """
        Indicates the number of non-compliant resources.
        """
        return pulumi.get(self, "non_compliant_count")


@pulumi.output_type
class GetPolicyAssignmentsAssignmentResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 created_by: _builtins.str,
                 custom_policies: Sequence['outputs.GetPolicyAssignmentsAssignmentCustomPolicyResult'],
                 description: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 parameters: Mapping[str, _builtins.str],
                 period: _builtins.str,
                 policy_assignment_type: _builtins.str,
                 policy_definition_id: _builtins.str,
                 policy_filters: Sequence['outputs.GetPolicyAssignmentsAssignmentPolicyFilterResult'],
                 status: _builtins.str,
                 updated: _builtins.str):
        """
        :param _builtins.str created_at: The creation time of the policy assignment.
        :param _builtins.str created_by: The policy assignment creator.
        :param Sequence['GetPolicyAssignmentsAssignmentCustomPolicyArgs'] custom_policies: The configuration of the custom policy.
        :param _builtins.str description: The policy assignment description.
        :param _builtins.str id: The policy assignment ID.
        :param _builtins.str name: Specifies the assignment name.
        :param Mapping[str, _builtins.str] parameters: The policy assignment parameter.
        :param _builtins.str period: The policy assignment period.
        :param _builtins.str policy_assignment_type: Specifies the policy assignment type.
        :param _builtins.str policy_definition_id: Specifies the ID of the policy definition.
        :param Sequence['GetPolicyAssignmentsAssignmentPolicyFilterArgs'] policy_filters: The configuration used to filter resources.
        :param _builtins.str status: Specifies the expect status of the policy.
        :param _builtins.str updated: The latest update time of the policy assignment.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "custom_policies", custom_policies)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "parameters", parameters)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "policy_assignment_type", policy_assignment_type)
        pulumi.set(__self__, "policy_definition_id", policy_definition_id)
        pulumi.set(__self__, "policy_filters", policy_filters)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "updated", updated)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the policy assignment.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> _builtins.str:
        """
        The policy assignment creator.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter(name="customPolicies")
    def custom_policies(self) -> Sequence['outputs.GetPolicyAssignmentsAssignmentCustomPolicyResult']:
        """
        The configuration of the custom policy.
        """
        return pulumi.get(self, "custom_policies")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The policy assignment description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The policy assignment ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the assignment name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Mapping[str, _builtins.str]:
        """
        The policy assignment parameter.
        """
        return pulumi.get(self, "parameters")

    @_builtins.property
    @pulumi.getter
    def period(self) -> _builtins.str:
        """
        The policy assignment period.
        """
        return pulumi.get(self, "period")

    @_builtins.property
    @pulumi.getter(name="policyAssignmentType")
    def policy_assignment_type(self) -> _builtins.str:
        """
        Specifies the policy assignment type.
        """
        return pulumi.get(self, "policy_assignment_type")

    @_builtins.property
    @pulumi.getter(name="policyDefinitionId")
    def policy_definition_id(self) -> _builtins.str:
        """
        Specifies the ID of the policy definition.
        """
        return pulumi.get(self, "policy_definition_id")

    @_builtins.property
    @pulumi.getter(name="policyFilters")
    def policy_filters(self) -> Sequence['outputs.GetPolicyAssignmentsAssignmentPolicyFilterResult']:
        """
        The configuration used to filter resources.
        """
        return pulumi.get(self, "policy_filters")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the expect status of the policy.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def updated(self) -> _builtins.str:
        """
        The latest update time of the policy assignment.
        """
        return pulumi.get(self, "updated")


@pulumi.output_type
class GetPolicyAssignmentsAssignmentCustomPolicyResult(dict):
    def __init__(__self__, *,
                 auth_type: _builtins.str,
                 auth_value: Mapping[str, _builtins.str],
                 function_urn: _builtins.str):
        """
        :param _builtins.str auth_type: The authorization type of the custom policy.
        :param Mapping[str, _builtins.str] auth_value: The authorization value of the custom policy.
        :param _builtins.str function_urn: The function URN used to create the custom policy.
        """
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "auth_value", auth_value)
        pulumi.set(__self__, "function_urn", function_urn)

    @_builtins.property
    @pulumi.getter(name="authType")
    def auth_type(self) -> _builtins.str:
        """
        The authorization type of the custom policy.
        """
        return pulumi.get(self, "auth_type")

    @_builtins.property
    @pulumi.getter(name="authValue")
    def auth_value(self) -> Mapping[str, _builtins.str]:
        """
        The authorization value of the custom policy.
        """
        return pulumi.get(self, "auth_value")

    @_builtins.property
    @pulumi.getter(name="functionUrn")
    def function_urn(self) -> _builtins.str:
        """
        The function URN used to create the custom policy.
        """
        return pulumi.get(self, "function_urn")


@pulumi.output_type
class GetPolicyAssignmentsAssignmentPolicyFilterResult(dict):
    def __init__(__self__, *,
                 region: _builtins.str,
                 resource_id: _builtins.str,
                 resource_provider: _builtins.str,
                 resource_type: _builtins.str,
                 tag_key: _builtins.str,
                 tag_value: _builtins.str):
        """
        :param _builtins.str region: The name of the region to which the filtered resources belong.
        :param _builtins.str resource_id: The resource ID used to filter a specified resource.
        :param _builtins.str resource_provider: The service name to which the filtered resources belong.
        :param _builtins.str resource_type: The resource type of the filtered resources.
        :param _builtins.str tag_key: The tag name used to filter resources.
        :param _builtins.str tag_value: The tag value used to filter resources.
        """
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_provider", resource_provider)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "tag_key", tag_key)
        pulumi.set(__self__, "tag_value", tag_value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        The name of the region to which the filtered resources belong.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        The resource ID used to filter a specified resource.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceProvider")
    def resource_provider(self) -> _builtins.str:
        """
        The service name to which the filtered resources belong.
        """
        return pulumi.get(self, "resource_provider")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        """
        The resource type of the filtered resources.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> _builtins.str:
        """
        The tag name used to filter resources.
        """
        return pulumi.get(self, "tag_key")

    @_builtins.property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> _builtins.str:
        """
        The tag value used to filter resources.
        """
        return pulumi.get(self, "tag_value")


@pulumi.output_type
class GetPolicyDefinitionsDefinitionResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 id: _builtins.str,
                 keywords: Sequence[_builtins.str],
                 name: _builtins.str,
                 parameters: Mapping[str, _builtins.str],
                 policy_rule: _builtins.str,
                 policy_rule_type: _builtins.str,
                 policy_type: _builtins.str,
                 trigger_type: _builtins.str):
        """
        :param _builtins.str description: The description of the policy definition.
        :param _builtins.str id: The ID of the policy definition.
        :param Sequence[_builtins.str] keywords: Specifies the keyword list used to query definition list.
        :param _builtins.str name: Specifies the name of the policy definitions used to query definition list.
        :param Mapping[str, _builtins.str] parameters: The parameter reference map of the policy definition.
        :param _builtins.str policy_rule: The policy rule of the policy definition.
        :param _builtins.str policy_rule_type: Specifies the policy rule type used to query definition list.
        :param _builtins.str policy_type: Specifies the policy type used to query definition list.  
               The valid value is **builtin**.
        :param _builtins.str trigger_type: Specifies the trigger type used to query definition list.  
               The valid values are **resource** and **period**.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "keywords", keywords)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "parameters", parameters)
        pulumi.set(__self__, "policy_rule", policy_rule)
        pulumi.set(__self__, "policy_rule_type", policy_rule_type)
        pulumi.set(__self__, "policy_type", policy_type)
        pulumi.set(__self__, "trigger_type", trigger_type)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the policy definition.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the policy definition.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def keywords(self) -> Sequence[_builtins.str]:
        """
        Specifies the keyword list used to query definition list.
        """
        return pulumi.get(self, "keywords")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the policy definitions used to query definition list.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Mapping[str, _builtins.str]:
        """
        The parameter reference map of the policy definition.
        """
        return pulumi.get(self, "parameters")

    @_builtins.property
    @pulumi.getter(name="policyRule")
    def policy_rule(self) -> _builtins.str:
        """
        The policy rule of the policy definition.
        """
        return pulumi.get(self, "policy_rule")

    @_builtins.property
    @pulumi.getter(name="policyRuleType")
    def policy_rule_type(self) -> _builtins.str:
        """
        Specifies the policy rule type used to query definition list.
        """
        return pulumi.get(self, "policy_rule_type")

    @_builtins.property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> _builtins.str:
        """
        Specifies the policy type used to query definition list.  
        The valid value is **builtin**.
        """
        return pulumi.get(self, "policy_type")

    @_builtins.property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> _builtins.str:
        """
        Specifies the trigger type used to query definition list.  
        The valid values are **resource** and **period**.
        """
        return pulumi.get(self, "trigger_type")


@pulumi.output_type
class GetPolicyStatesStateResult(dict):
    def __init__(__self__, *,
                 compliance_state: _builtins.str,
                 domain_id: _builtins.str,
                 evaluation_time: _builtins.str,
                 policy_assignment_id: _builtins.str,
                 policy_assignment_name: _builtins.str,
                 policy_definition_id: _builtins.str,
                 region_id: _builtins.str,
                 resource_id: _builtins.str,
                 resource_name: _builtins.str,
                 resource_provider: _builtins.str,
                 resource_type: _builtins.str,
                 trigger_type: _builtins.str):
        """
        :param _builtins.str compliance_state: Specifies the compliance state.
               The value can be: **Compliant** and **NonCompliant**.
        :param _builtins.str domain_id: The domain ID.
        :param _builtins.str evaluation_time: The evaluation time of compliance status.
        :param _builtins.str policy_assignment_id: Specifies the policy assignment ID.
        :param _builtins.str policy_assignment_name: The policy assignment name.
        :param _builtins.str policy_definition_id: The ID of the policy definition.
        :param _builtins.str region_id: The ID of the region the resource belongs to.
        :param _builtins.str resource_id: Specifies the resource ID.
        :param _builtins.str resource_name: Specifies the resource name.
        :param _builtins.str resource_provider: The cloud service name.
        :param _builtins.str resource_type: The resource type.
        :param _builtins.str trigger_type: The trigger type. The value can be **resource** or **period**.
        """
        pulumi.set(__self__, "compliance_state", compliance_state)
        pulumi.set(__self__, "domain_id", domain_id)
        pulumi.set(__self__, "evaluation_time", evaluation_time)
        pulumi.set(__self__, "policy_assignment_id", policy_assignment_id)
        pulumi.set(__self__, "policy_assignment_name", policy_assignment_name)
        pulumi.set(__self__, "policy_definition_id", policy_definition_id)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "resource_provider", resource_provider)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "trigger_type", trigger_type)

    @_builtins.property
    @pulumi.getter(name="complianceState")
    def compliance_state(self) -> _builtins.str:
        """
        Specifies the compliance state.
        The value can be: **Compliant** and **NonCompliant**.
        """
        return pulumi.get(self, "compliance_state")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> _builtins.str:
        """
        The domain ID.
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter(name="evaluationTime")
    def evaluation_time(self) -> _builtins.str:
        """
        The evaluation time of compliance status.
        """
        return pulumi.get(self, "evaluation_time")

    @_builtins.property
    @pulumi.getter(name="policyAssignmentId")
    def policy_assignment_id(self) -> _builtins.str:
        """
        Specifies the policy assignment ID.
        """
        return pulumi.get(self, "policy_assignment_id")

    @_builtins.property
    @pulumi.getter(name="policyAssignmentName")
    def policy_assignment_name(self) -> _builtins.str:
        """
        The policy assignment name.
        """
        return pulumi.get(self, "policy_assignment_name")

    @_builtins.property
    @pulumi.getter(name="policyDefinitionId")
    def policy_definition_id(self) -> _builtins.str:
        """
        The ID of the policy definition.
        """
        return pulumi.get(self, "policy_definition_id")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> _builtins.str:
        """
        The ID of the region the resource belongs to.
        """
        return pulumi.get(self, "region_id")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        Specifies the resource ID.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> _builtins.str:
        """
        Specifies the resource name.
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="resourceProvider")
    def resource_provider(self) -> _builtins.str:
        """
        The cloud service name.
        """
        return pulumi.get(self, "resource_provider")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        """
        The resource type.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> _builtins.str:
        """
        The trigger type. The value can be **resource** or **period**.
        """
        return pulumi.get(self, "trigger_type")


@pulumi.output_type
class GetPolicyStatesSummaryResultResult(dict):
    def __init__(__self__, *,
                 assignment_details: Sequence['outputs.GetPolicyStatesSummaryResultAssignmentDetailResult'],
                 resource_details: Sequence['outputs.GetPolicyStatesSummaryResultResourceDetailResult']):
        """
        :param Sequence['GetPolicyStatesSummaryResultAssignmentDetailArgs'] assignment_details: Indicates the compliance summary details.
               The assignment_details structure is documented below.
        :param Sequence['GetPolicyStatesSummaryResultResourceDetailArgs'] resource_details: Indicates the resource compliance summary details.
               The resource_details structure is documented below.
        """
        pulumi.set(__self__, "assignment_details", assignment_details)
        pulumi.set(__self__, "resource_details", resource_details)

    @_builtins.property
    @pulumi.getter(name="assignmentDetails")
    def assignment_details(self) -> Sequence['outputs.GetPolicyStatesSummaryResultAssignmentDetailResult']:
        """
        Indicates the compliance summary details.
        The assignment_details structure is documented below.
        """
        return pulumi.get(self, "assignment_details")

    @_builtins.property
    @pulumi.getter(name="resourceDetails")
    def resource_details(self) -> Sequence['outputs.GetPolicyStatesSummaryResultResourceDetailResult']:
        """
        Indicates the resource compliance summary details.
        The resource_details structure is documented below.
        """
        return pulumi.get(self, "resource_details")


@pulumi.output_type
class GetPolicyStatesSummaryResultAssignmentDetailResult(dict):
    def __init__(__self__, *,
                 compliant_count: _builtins.int,
                 non_compliant_count: _builtins.int):
        """
        :param _builtins.int compliant_count: Indicates the number of compliant resources.
        :param _builtins.int non_compliant_count: Indicates the number of non-compliant resources.
        """
        pulumi.set(__self__, "compliant_count", compliant_count)
        pulumi.set(__self__, "non_compliant_count", non_compliant_count)

    @_builtins.property
    @pulumi.getter(name="compliantCount")
    def compliant_count(self) -> _builtins.int:
        """
        Indicates the number of compliant resources.
        """
        return pulumi.get(self, "compliant_count")

    @_builtins.property
    @pulumi.getter(name="nonCompliantCount")
    def non_compliant_count(self) -> _builtins.int:
        """
        Indicates the number of non-compliant resources.
        """
        return pulumi.get(self, "non_compliant_count")


@pulumi.output_type
class GetPolicyStatesSummaryResultResourceDetailResult(dict):
    def __init__(__self__, *,
                 compliant_count: _builtins.int,
                 non_compliant_count: _builtins.int):
        """
        :param _builtins.int compliant_count: Indicates the number of compliant resources.
        :param _builtins.int non_compliant_count: Indicates the number of non-compliant resources.
        """
        pulumi.set(__self__, "compliant_count", compliant_count)
        pulumi.set(__self__, "non_compliant_count", non_compliant_count)

    @_builtins.property
    @pulumi.getter(name="compliantCount")
    def compliant_count(self) -> _builtins.int:
        """
        Indicates the number of compliant resources.
        """
        return pulumi.get(self, "compliant_count")

    @_builtins.property
    @pulumi.getter(name="nonCompliantCount")
    def non_compliant_count(self) -> _builtins.int:
        """
        Indicates the number of non-compliant resources.
        """
        return pulumi.get(self, "non_compliant_count")


@pulumi.output_type
class GetRegionsRegionResult(dict):
    def __init__(__self__, *,
                 display_name: _builtins.str,
                 region_id: _builtins.str):
        """
        :param _builtins.str display_name: Specifies the region dispaly name.
        :param _builtins.str region_id: Specifies the region ID.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "region_id", region_id)

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        Specifies the region dispaly name.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> _builtins.str:
        """
        Specifies the region ID.
        """
        return pulumi.get(self, "region_id")


@pulumi.output_type
class GetRemediationExecutionStatusesResourceKeyResult(dict):
    def __init__(__self__, *,
                 resource_id: _builtins.str,
                 resource_provider: _builtins.str,
                 resource_type: _builtins.str):
        """
        :param _builtins.str resource_id: The resource ID.
        :param _builtins.str resource_provider: The cloud service name.
        :param _builtins.str resource_type: The resource type.
        """
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_provider", resource_provider)
        pulumi.set(__self__, "resource_type", resource_type)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        The resource ID.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceProvider")
    def resource_provider(self) -> _builtins.str:
        """
        The cloud service name.
        """
        return pulumi.get(self, "resource_provider")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        """
        The resource type.
        """
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class GetRemediationExecutionStatusesValueResult(dict):
    def __init__(__self__, *,
                 invocation_time: _builtins.str,
                 message: _builtins.str,
                 resource_keys: Sequence['outputs.GetRemediationExecutionStatusesValueResourceKeyResult'],
                 state: _builtins.str):
        """
        :param _builtins.str invocation_time: The start time of remediation.
        :param _builtins.str message: The information of remediation execution.
        :param Sequence['GetRemediationExecutionStatusesValueResourceKeyArgs'] resource_keys: The query criteria required to collect remediation results.
        :param _builtins.str state: The execution state of remediation.
        """
        pulumi.set(__self__, "invocation_time", invocation_time)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "resource_keys", resource_keys)
        pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter(name="invocationTime")
    def invocation_time(self) -> _builtins.str:
        """
        The start time of remediation.
        """
        return pulumi.get(self, "invocation_time")

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        """
        The information of remediation execution.
        """
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter(name="resourceKeys")
    def resource_keys(self) -> Sequence['outputs.GetRemediationExecutionStatusesValueResourceKeyResult']:
        """
        The query criteria required to collect remediation results.
        """
        return pulumi.get(self, "resource_keys")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The execution state of remediation.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class GetRemediationExecutionStatusesValueResourceKeyResult(dict):
    def __init__(__self__, *,
                 resource_id: _builtins.str,
                 resource_provider: _builtins.str,
                 resource_type: _builtins.str):
        """
        :param _builtins.str resource_id: The resource ID.
        :param _builtins.str resource_provider: The cloud service name.
        :param _builtins.str resource_type: The resource type.
        """
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_provider", resource_provider)
        pulumi.set(__self__, "resource_type", resource_type)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        The resource ID.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceProvider")
    def resource_provider(self) -> _builtins.str:
        """
        The cloud service name.
        """
        return pulumi.get(self, "resource_provider")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        """
        The resource type.
        """
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class GetResourceAggregationPendingRequestsPendingAggregationRequestResult(dict):
    def __init__(__self__, *,
                 requester_account_id: _builtins.str):
        """
        :param _builtins.str requester_account_id: The ID of the account that requests aggregated data.
        """
        pulumi.set(__self__, "requester_account_id", requester_account_id)

    @_builtins.property
    @pulumi.getter(name="requesterAccountId")
    def requester_account_id(self) -> _builtins.str:
        """
        The ID of the account that requests aggregated data.
        """
        return pulumi.get(self, "requester_account_id")


@pulumi.output_type
class GetResourceAggregatorAdvancedQueryQueryInfoResult(dict):
    def __init__(__self__, *,
                 select_fields: Sequence[_builtins.str]):
        """
        :param Sequence[_builtins.str] select_fields: The list of select fields.
        """
        pulumi.set(__self__, "select_fields", select_fields)

    @_builtins.property
    @pulumi.getter(name="selectFields")
    def select_fields(self) -> Sequence[_builtins.str]:
        """
        The list of select fields.
        """
        return pulumi.get(self, "select_fields")


@pulumi.output_type
class GetResourceAggregatorDiscoveredResourcesFilterResult(dict):
    def __init__(__self__, *,
                 account_id: Optional[_builtins.str] = None,
                 region_id: Optional[_builtins.str] = None,
                 resource_id: Optional[_builtins.str] = None,
                 resource_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str account_id: Specifies the ID of account to which the resource belongs.
        :param _builtins.str region_id: Specifies the ID of region to which the resource belongs.
        :param _builtins.str resource_id: Specifies resource ID.
        :param _builtins.str resource_name: Specifies resource name.
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if region_id is not None:
            pulumi.set(__self__, "region_id", region_id)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[_builtins.str]:
        """
        Specifies the ID of account to which the resource belongs.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> Optional[_builtins.str]:
        """
        Specifies the ID of region to which the resource belongs.
        """
        return pulumi.get(self, "region_id")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[_builtins.str]:
        """
        Specifies resource ID.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[_builtins.str]:
        """
        Specifies resource name.
        """
        return pulumi.get(self, "resource_name")


@pulumi.output_type
class GetResourceAggregatorDiscoveredResourcesResourceResult(dict):
    def __init__(__self__, *,
                 region_id: _builtins.str,
                 resource_id: _builtins.str,
                 resource_name: _builtins.str,
                 service: _builtins.str,
                 source_account_id: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str region_id: Specifies the ID of region to which the resource belongs.
        :param _builtins.str resource_id: Specifies resource ID.
        :param _builtins.str resource_name: Specifies resource name.
        :param _builtins.str service: The service name.
        :param _builtins.str source_account_id: The ID of the account to which the resource belongs.
        :param _builtins.str type: The resource type.
        """
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "source_account_id", source_account_id)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> _builtins.str:
        """
        Specifies the ID of region to which the resource belongs.
        """
        return pulumi.get(self, "region_id")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        Specifies resource ID.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> _builtins.str:
        """
        Specifies resource name.
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter
    def service(self) -> _builtins.str:
        """
        The service name.
        """
        return pulumi.get(self, "service")

    @_builtins.property
    @pulumi.getter(name="sourceAccountId")
    def source_account_id(self) -> _builtins.str:
        """
        The ID of the account to which the resource belongs.
        """
        return pulumi.get(self, "source_account_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The resource type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetResourceAggregatorPolicyAssignmentDetailCustomPolicyResult(dict):
    def __init__(__self__, *,
                 auth_type: _builtins.str,
                 auth_value: Mapping[str, _builtins.str],
                 function_urn: _builtins.str):
        """
        :param _builtins.str auth_type: Indicates the method used by a custom rule to call a function.
        :param Mapping[str, _builtins.str] auth_value: Indicates the value of the method used by a custom rule to call a function.
        :param _builtins.str function_urn: Indicates the URN of a custom function.
        """
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "auth_value", auth_value)
        pulumi.set(__self__, "function_urn", function_urn)

    @_builtins.property
    @pulumi.getter(name="authType")
    def auth_type(self) -> _builtins.str:
        """
        Indicates the method used by a custom rule to call a function.
        """
        return pulumi.get(self, "auth_type")

    @_builtins.property
    @pulumi.getter(name="authValue")
    def auth_value(self) -> Mapping[str, _builtins.str]:
        """
        Indicates the value of the method used by a custom rule to call a function.
        """
        return pulumi.get(self, "auth_value")

    @_builtins.property
    @pulumi.getter(name="functionUrn")
    def function_urn(self) -> _builtins.str:
        """
        Indicates the URN of a custom function.
        """
        return pulumi.get(self, "function_urn")


@pulumi.output_type
class GetResourceAggregatorPolicyAssignmentDetailPolicyFilterResult(dict):
    def __init__(__self__, *,
                 region_id: _builtins.str,
                 resource_id: _builtins.str,
                 resource_provider: _builtins.str,
                 resource_type: _builtins.str,
                 tag_key: _builtins.str,
                 tag_value: _builtins.str):
        """
        :param _builtins.str region_id: Indicates the region ID.
        :param _builtins.str resource_id: Indicates the resource ID.
        :param _builtins.str resource_provider: Indicates the cloud service name.
        :param _builtins.str resource_type: Indicates the resource type.
        :param _builtins.str tag_key: Indicates the tag key.
        :param _builtins.str tag_value: Indicates the tag value.
        """
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_provider", resource_provider)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "tag_key", tag_key)
        pulumi.set(__self__, "tag_value", tag_value)

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> _builtins.str:
        """
        Indicates the region ID.
        """
        return pulumi.get(self, "region_id")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        Indicates the resource ID.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceProvider")
    def resource_provider(self) -> _builtins.str:
        """
        Indicates the cloud service name.
        """
        return pulumi.get(self, "resource_provider")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        """
        Indicates the resource type.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> _builtins.str:
        """
        Indicates the tag key.
        """
        return pulumi.get(self, "tag_key")

    @_builtins.property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> _builtins.str:
        """
        Indicates the tag value.
        """
        return pulumi.get(self, "tag_value")


@pulumi.output_type
class GetResourceAggregatorPolicyAssignmentDetailPolicyFilterV2Result(dict):
    def __init__(__self__, *,
                 exclude_tag_key_logic: _builtins.str,
                 exclude_tags: Sequence['outputs.GetResourceAggregatorPolicyAssignmentDetailPolicyFilterV2ExcludeTagResult'],
                 region_ids: Sequence[_builtins.str],
                 resource_ids: Sequence[_builtins.str],
                 resource_types: Sequence[_builtins.str],
                 tag_key_logic: _builtins.str,
                 tags: Sequence['outputs.GetResourceAggregatorPolicyAssignmentDetailPolicyFilterV2TagResult']):
        """
        :param _builtins.str exclude_tag_key_logic: Indicates the logical relationship when parameter `exclude_tags` takes multiple values, for
               example: When the `exclude_tags` is **"exclude_tags.1.key":"a", "exclude_tags.1.values":"a", "exclude_tags.2.key":"b",
               "exclude_tags.2.values":"b"**, if this parameter is set to **AND**, it means that the rule excludes resources that are
               bound with the tags **a:a** and **b:b**. If not specified, the default logic is **OR**.
        :param Sequence['GetResourceAggregatorPolicyAssignmentDetailPolicyFilterV2ExcludeTagArgs'] exclude_tags: Indicates the exclude tags.
               The exclude_tags structure is documented below.
        :param Sequence[_builtins.str] region_ids: Indicates the region IDs.
        :param Sequence[_builtins.str] resource_ids: Indicates the resource list.
        :param Sequence[_builtins.str] resource_types: Indicates the cloud services.
        :param _builtins.str tag_key_logic: Indicates the logical relationship when parameter `tags` takes multiple values, for example: When the
               `tags` is **"tags.1.key":"a", "tags.1.values":"a", "tags.2.key":"b", "tags.2.values":"b"**, if this parameter is set to
               **AND**, it means that the rule only applies to resources bound with both tags **a:a** and **b:b**. If not specified,
               the default logic is **OR**.
        :param Sequence['GetResourceAggregatorPolicyAssignmentDetailPolicyFilterV2TagArgs'] tags: Indicates the tags.
               The tags structure is documented below.
        """
        pulumi.set(__self__, "exclude_tag_key_logic", exclude_tag_key_logic)
        pulumi.set(__self__, "exclude_tags", exclude_tags)
        pulumi.set(__self__, "region_ids", region_ids)
        pulumi.set(__self__, "resource_ids", resource_ids)
        pulumi.set(__self__, "resource_types", resource_types)
        pulumi.set(__self__, "tag_key_logic", tag_key_logic)
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="excludeTagKeyLogic")
    def exclude_tag_key_logic(self) -> _builtins.str:
        """
        Indicates the logical relationship when parameter `exclude_tags` takes multiple values, for
        example: When the `exclude_tags` is **"exclude_tags.1.key":"a", "exclude_tags.1.values":"a", "exclude_tags.2.key":"b",
        "exclude_tags.2.values":"b"**, if this parameter is set to **AND**, it means that the rule excludes resources that are
        bound with the tags **a:a** and **b:b**. If not specified, the default logic is **OR**.
        """
        return pulumi.get(self, "exclude_tag_key_logic")

    @_builtins.property
    @pulumi.getter(name="excludeTags")
    def exclude_tags(self) -> Sequence['outputs.GetResourceAggregatorPolicyAssignmentDetailPolicyFilterV2ExcludeTagResult']:
        """
        Indicates the exclude tags.
        The exclude_tags structure is documented below.
        """
        return pulumi.get(self, "exclude_tags")

    @_builtins.property
    @pulumi.getter(name="regionIds")
    def region_ids(self) -> Sequence[_builtins.str]:
        """
        Indicates the region IDs.
        """
        return pulumi.get(self, "region_ids")

    @_builtins.property
    @pulumi.getter(name="resourceIds")
    def resource_ids(self) -> Sequence[_builtins.str]:
        """
        Indicates the resource list.
        """
        return pulumi.get(self, "resource_ids")

    @_builtins.property
    @pulumi.getter(name="resourceTypes")
    def resource_types(self) -> Sequence[_builtins.str]:
        """
        Indicates the cloud services.
        """
        return pulumi.get(self, "resource_types")

    @_builtins.property
    @pulumi.getter(name="tagKeyLogic")
    def tag_key_logic(self) -> _builtins.str:
        """
        Indicates the logical relationship when parameter `tags` takes multiple values, for example: When the
        `tags` is **"tags.1.key":"a", "tags.1.values":"a", "tags.2.key":"b", "tags.2.values":"b"**, if this parameter is set to
        **AND**, it means that the rule only applies to resources bound with both tags **a:a** and **b:b**. If not specified,
        the default logic is **OR**.
        """
        return pulumi.get(self, "tag_key_logic")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetResourceAggregatorPolicyAssignmentDetailPolicyFilterV2TagResult']:
        """
        Indicates the tags.
        The tags structure is documented below.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetResourceAggregatorPolicyAssignmentDetailPolicyFilterV2ExcludeTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: Indicates the tag key.
        :param Sequence[_builtins.str] values: Indicates the tag values.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Indicates the tag key.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Indicates the tag values.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetResourceAggregatorPolicyAssignmentDetailPolicyFilterV2TagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: Indicates the tag key.
        :param Sequence[_builtins.str] values: Indicates the tag values.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Indicates the tag key.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Indicates the tag values.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetResourceAggregatorPolicyAssignmentDetailTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: Indicates the tag key.
        :param _builtins.str value: Indicates the tag value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Indicates the tag key.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Indicates the tag value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetResourceAggregatorPolicyAssignmentsAssignmentResult(dict):
    def __init__(__self__, *,
                 account_id: _builtins.str,
                 account_name: _builtins.str,
                 compliances: Sequence['outputs.GetResourceAggregatorPolicyAssignmentsAssignmentComplianceResult'],
                 policy_assignment_id: _builtins.str,
                 policy_assignment_name: _builtins.str):
        """
        :param _builtins.str account_id: Specifies the ID of account to which the resource belongs.
        :param _builtins.str account_name: The name of account to which the resource belongs.
        :param Sequence['GetResourceAggregatorPolicyAssignmentsAssignmentComplianceArgs'] compliances: The compliance of the policy assignment. The compliance structure is documented below.
        :param _builtins.str policy_assignment_id: The policy assignment ID.
        :param _builtins.str policy_assignment_name: Specifies the policy assignment name.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "compliances", compliances)
        pulumi.set(__self__, "policy_assignment_id", policy_assignment_id)
        pulumi.set(__self__, "policy_assignment_name", policy_assignment_name)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        """
        Specifies the ID of account to which the resource belongs.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="accountName")
    def account_name(self) -> _builtins.str:
        """
        The name of account to which the resource belongs.
        """
        return pulumi.get(self, "account_name")

    @_builtins.property
    @pulumi.getter
    def compliances(self) -> Sequence['outputs.GetResourceAggregatorPolicyAssignmentsAssignmentComplianceResult']:
        """
        The compliance of the policy assignment. The compliance structure is documented below.
        """
        return pulumi.get(self, "compliances")

    @_builtins.property
    @pulumi.getter(name="policyAssignmentId")
    def policy_assignment_id(self) -> _builtins.str:
        """
        The policy assignment ID.
        """
        return pulumi.get(self, "policy_assignment_id")

    @_builtins.property
    @pulumi.getter(name="policyAssignmentName")
    def policy_assignment_name(self) -> _builtins.str:
        """
        Specifies the policy assignment name.
        """
        return pulumi.get(self, "policy_assignment_name")


@pulumi.output_type
class GetResourceAggregatorPolicyAssignmentsAssignmentComplianceResult(dict):
    def __init__(__self__, *,
                 compliance_state: _builtins.str,
                 resource_details: Sequence['outputs.GetResourceAggregatorPolicyAssignmentsAssignmentComplianceResourceDetailResult']):
        """
        :param _builtins.str compliance_state: Specifies the compliance state.
               The value can be: **Compliant** and **NonCompliant**.
        :param Sequence['GetResourceAggregatorPolicyAssignmentsAssignmentComplianceResourceDetailArgs'] resource_details: The resource details. The resource_details structure is documented below.
        """
        pulumi.set(__self__, "compliance_state", compliance_state)
        pulumi.set(__self__, "resource_details", resource_details)

    @_builtins.property
    @pulumi.getter(name="complianceState")
    def compliance_state(self) -> _builtins.str:
        """
        Specifies the compliance state.
        The value can be: **Compliant** and **NonCompliant**.
        """
        return pulumi.get(self, "compliance_state")

    @_builtins.property
    @pulumi.getter(name="resourceDetails")
    def resource_details(self) -> Sequence['outputs.GetResourceAggregatorPolicyAssignmentsAssignmentComplianceResourceDetailResult']:
        """
        The resource details. The resource_details structure is documented below.
        """
        return pulumi.get(self, "resource_details")


@pulumi.output_type
class GetResourceAggregatorPolicyAssignmentsAssignmentComplianceResourceDetailResult(dict):
    def __init__(__self__, *,
                 compliant_count: _builtins.int,
                 non_compliant_count: _builtins.int):
        """
        :param _builtins.int compliant_count: The number of compliant resources.
        :param _builtins.int non_compliant_count: The number of non-compliant resources.
        """
        pulumi.set(__self__, "compliant_count", compliant_count)
        pulumi.set(__self__, "non_compliant_count", non_compliant_count)

    @_builtins.property
    @pulumi.getter(name="compliantCount")
    def compliant_count(self) -> _builtins.int:
        """
        The number of compliant resources.
        """
        return pulumi.get(self, "compliant_count")

    @_builtins.property
    @pulumi.getter(name="nonCompliantCount")
    def non_compliant_count(self) -> _builtins.int:
        """
        The number of non-compliant resources.
        """
        return pulumi.get(self, "non_compliant_count")


@pulumi.output_type
class GetResourceAggregatorPolicyAssignmentsFilterResult(dict):
    def __init__(__self__, *,
                 account_id: Optional[_builtins.str] = None,
                 compliance_state: Optional[_builtins.str] = None,
                 policy_assignment_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str account_id: Specifies the ID of account to which the resource belongs.
        :param _builtins.str compliance_state: Specifies the compliance state.
               The value can be: **Compliant** and **NonCompliant**.
        :param _builtins.str policy_assignment_name: Specifies the policy assignment name.
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if compliance_state is not None:
            pulumi.set(__self__, "compliance_state", compliance_state)
        if policy_assignment_name is not None:
            pulumi.set(__self__, "policy_assignment_name", policy_assignment_name)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[_builtins.str]:
        """
        Specifies the ID of account to which the resource belongs.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="complianceState")
    def compliance_state(self) -> Optional[_builtins.str]:
        """
        Specifies the compliance state.
        The value can be: **Compliant** and **NonCompliant**.
        """
        return pulumi.get(self, "compliance_state")

    @_builtins.property
    @pulumi.getter(name="policyAssignmentName")
    def policy_assignment_name(self) -> Optional[_builtins.str]:
        """
        Specifies the policy assignment name.
        """
        return pulumi.get(self, "policy_assignment_name")


@pulumi.output_type
class GetResourceAggregatorPolicyStatesStateResult(dict):
    def __init__(__self__, *,
                 compliance_state: _builtins.str,
                 domain_id: _builtins.str,
                 evaluation_time: _builtins.str,
                 policy_assignment_id: _builtins.str,
                 policy_assignment_name: _builtins.str,
                 policy_definition_id: _builtins.str,
                 region_id: _builtins.str,
                 resource_id: _builtins.str,
                 resource_name: _builtins.str,
                 resource_provider: _builtins.str,
                 resource_type: _builtins.str,
                 trigger_type: _builtins.str):
        """
        :param _builtins.str compliance_state: Specifies the compliance state.
               The value can be: **Compliant** and **NonCompliant**.
        :param _builtins.str domain_id: The domain ID.
        :param _builtins.str evaluation_time: The evaluation time of compliance status.
        :param _builtins.str policy_assignment_id: The policy assignment ID.
        :param _builtins.str policy_assignment_name: Specifies the policy assignment name.
        :param _builtins.str policy_definition_id: The ID of the policy definition.
        :param _builtins.str region_id: The ID of the region the resource belongs to.
        :param _builtins.str resource_id: Specifies the resource ID.
        :param _builtins.str resource_name: Specifies the resource name.
        :param _builtins.str resource_provider: The cloud service name.
        :param _builtins.str resource_type: The resource type.
        :param _builtins.str trigger_type: The trigger type. The value can be **resource** or **period**.
        """
        pulumi.set(__self__, "compliance_state", compliance_state)
        pulumi.set(__self__, "domain_id", domain_id)
        pulumi.set(__self__, "evaluation_time", evaluation_time)
        pulumi.set(__self__, "policy_assignment_id", policy_assignment_id)
        pulumi.set(__self__, "policy_assignment_name", policy_assignment_name)
        pulumi.set(__self__, "policy_definition_id", policy_definition_id)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "resource_provider", resource_provider)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "trigger_type", trigger_type)

    @_builtins.property
    @pulumi.getter(name="complianceState")
    def compliance_state(self) -> _builtins.str:
        """
        Specifies the compliance state.
        The value can be: **Compliant** and **NonCompliant**.
        """
        return pulumi.get(self, "compliance_state")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> _builtins.str:
        """
        The domain ID.
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter(name="evaluationTime")
    def evaluation_time(self) -> _builtins.str:
        """
        The evaluation time of compliance status.
        """
        return pulumi.get(self, "evaluation_time")

    @_builtins.property
    @pulumi.getter(name="policyAssignmentId")
    def policy_assignment_id(self) -> _builtins.str:
        """
        The policy assignment ID.
        """
        return pulumi.get(self, "policy_assignment_id")

    @_builtins.property
    @pulumi.getter(name="policyAssignmentName")
    def policy_assignment_name(self) -> _builtins.str:
        """
        Specifies the policy assignment name.
        """
        return pulumi.get(self, "policy_assignment_name")

    @_builtins.property
    @pulumi.getter(name="policyDefinitionId")
    def policy_definition_id(self) -> _builtins.str:
        """
        The ID of the policy definition.
        """
        return pulumi.get(self, "policy_definition_id")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> _builtins.str:
        """
        The ID of the region the resource belongs to.
        """
        return pulumi.get(self, "region_id")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        Specifies the resource ID.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> _builtins.str:
        """
        Specifies the resource name.
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="resourceProvider")
    def resource_provider(self) -> _builtins.str:
        """
        The cloud service name.
        """
        return pulumi.get(self, "resource_provider")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        """
        The resource type.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> _builtins.str:
        """
        The trigger type. The value can be **resource** or **period**.
        """
        return pulumi.get(self, "trigger_type")


@pulumi.output_type
class GetResourceAggregatorPolicyStatesSummaryResultResult(dict):
    def __init__(__self__, *,
                 assignment_details: Sequence['outputs.GetResourceAggregatorPolicyStatesSummaryResultAssignmentDetailResult'],
                 group_account_name: _builtins.str,
                 group_name: _builtins.str,
                 resource_details: Sequence['outputs.GetResourceAggregatorPolicyStatesSummaryResultResourceDetailResult']):
        """
        :param Sequence['GetResourceAggregatorPolicyStatesSummaryResultAssignmentDetailArgs'] assignment_details: Indicates the compliance summary details.
               The assignment_details structure is documented below.
        :param _builtins.str group_account_name: Indicates the acccount name
        :param _builtins.str group_name: Indicates the group name
        :param Sequence['GetResourceAggregatorPolicyStatesSummaryResultResourceDetailArgs'] resource_details: Indicates the resource compliance summary details.
               The resource_details structure is documented below.
        """
        pulumi.set(__self__, "assignment_details", assignment_details)
        pulumi.set(__self__, "group_account_name", group_account_name)
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "resource_details", resource_details)

    @_builtins.property
    @pulumi.getter(name="assignmentDetails")
    def assignment_details(self) -> Sequence['outputs.GetResourceAggregatorPolicyStatesSummaryResultAssignmentDetailResult']:
        """
        Indicates the compliance summary details.
        The assignment_details structure is documented below.
        """
        return pulumi.get(self, "assignment_details")

    @_builtins.property
    @pulumi.getter(name="groupAccountName")
    def group_account_name(self) -> _builtins.str:
        """
        Indicates the acccount name
        """
        return pulumi.get(self, "group_account_name")

    @_builtins.property
    @pulumi.getter(name="groupName")
    def group_name(self) -> _builtins.str:
        """
        Indicates the group name
        """
        return pulumi.get(self, "group_name")

    @_builtins.property
    @pulumi.getter(name="resourceDetails")
    def resource_details(self) -> Sequence['outputs.GetResourceAggregatorPolicyStatesSummaryResultResourceDetailResult']:
        """
        Indicates the resource compliance summary details.
        The resource_details structure is documented below.
        """
        return pulumi.get(self, "resource_details")


@pulumi.output_type
class GetResourceAggregatorPolicyStatesSummaryResultAssignmentDetailResult(dict):
    def __init__(__self__, *,
                 compliant_count: _builtins.int,
                 non_compliant_count: _builtins.int):
        """
        :param _builtins.int compliant_count: Indicates the number of compliant resources.
        :param _builtins.int non_compliant_count: Indicates the number of non-compliant resources.
        """
        pulumi.set(__self__, "compliant_count", compliant_count)
        pulumi.set(__self__, "non_compliant_count", non_compliant_count)

    @_builtins.property
    @pulumi.getter(name="compliantCount")
    def compliant_count(self) -> _builtins.int:
        """
        Indicates the number of compliant resources.
        """
        return pulumi.get(self, "compliant_count")

    @_builtins.property
    @pulumi.getter(name="nonCompliantCount")
    def non_compliant_count(self) -> _builtins.int:
        """
        Indicates the number of non-compliant resources.
        """
        return pulumi.get(self, "non_compliant_count")


@pulumi.output_type
class GetResourceAggregatorPolicyStatesSummaryResultResourceDetailResult(dict):
    def __init__(__self__, *,
                 compliant_count: _builtins.int,
                 non_compliant_count: _builtins.int):
        """
        :param _builtins.int compliant_count: Indicates the number of compliant resources.
        :param _builtins.int non_compliant_count: Indicates the number of non-compliant resources.
        """
        pulumi.set(__self__, "compliant_count", compliant_count)
        pulumi.set(__self__, "non_compliant_count", non_compliant_count)

    @_builtins.property
    @pulumi.getter(name="compliantCount")
    def compliant_count(self) -> _builtins.int:
        """
        Indicates the number of compliant resources.
        """
        return pulumi.get(self, "compliant_count")

    @_builtins.property
    @pulumi.getter(name="nonCompliantCount")
    def non_compliant_count(self) -> _builtins.int:
        """
        Indicates the number of non-compliant resources.
        """
        return pulumi.get(self, "non_compliant_count")


@pulumi.output_type
class GetResourceAggregatorSourceStatusesAggregatedSourceStatusResult(dict):
    def __init__(__self__, *,
                 last_error_code: _builtins.str,
                 last_error_message: _builtins.str,
                 last_update_status: _builtins.str,
                 last_update_time: _builtins.str,
                 source_id: _builtins.str,
                 source_name: _builtins.str,
                 source_type: _builtins.str):
        """
        :param _builtins.str last_error_code: The error code returned when the last resource aggregation for the source fails.
        :param _builtins.str last_error_message: The error message returned when the last resource aggregation for the source fails.
        :param _builtins.str last_update_status: The latest status of the source.
        :param _builtins.str last_update_time: The last update time of the source.
        :param _builtins.str source_id: The source ID.
               The value can be an account ID of organizatin ID.
        :param _builtins.str source_name: The source name.
        :param _builtins.str source_type: The source account type.
               The value can be **ACCOUNT** or **ORGANIZATION**.
        """
        pulumi.set(__self__, "last_error_code", last_error_code)
        pulumi.set(__self__, "last_error_message", last_error_message)
        pulumi.set(__self__, "last_update_status", last_update_status)
        pulumi.set(__self__, "last_update_time", last_update_time)
        pulumi.set(__self__, "source_id", source_id)
        pulumi.set(__self__, "source_name", source_name)
        pulumi.set(__self__, "source_type", source_type)

    @_builtins.property
    @pulumi.getter(name="lastErrorCode")
    def last_error_code(self) -> _builtins.str:
        """
        The error code returned when the last resource aggregation for the source fails.
        """
        return pulumi.get(self, "last_error_code")

    @_builtins.property
    @pulumi.getter(name="lastErrorMessage")
    def last_error_message(self) -> _builtins.str:
        """
        The error message returned when the last resource aggregation for the source fails.
        """
        return pulumi.get(self, "last_error_message")

    @_builtins.property
    @pulumi.getter(name="lastUpdateStatus")
    def last_update_status(self) -> _builtins.str:
        """
        The latest status of the source.
        """
        return pulumi.get(self, "last_update_status")

    @_builtins.property
    @pulumi.getter(name="lastUpdateTime")
    def last_update_time(self) -> _builtins.str:
        """
        The last update time of the source.
        """
        return pulumi.get(self, "last_update_time")

    @_builtins.property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> _builtins.str:
        """
        The source ID.
        The value can be an account ID of organizatin ID.
        """
        return pulumi.get(self, "source_id")

    @_builtins.property
    @pulumi.getter(name="sourceName")
    def source_name(self) -> _builtins.str:
        """
        The source name.
        """
        return pulumi.get(self, "source_name")

    @_builtins.property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> _builtins.str:
        """
        The source account type.
        The value can be **ACCOUNT** or **ORGANIZATION**.
        """
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetResourceAggregatorsAggregatorResult(dict):
    def __init__(__self__, *,
                 account_ids: Sequence[_builtins.str],
                 created_at: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 type: _builtins.str,
                 updated_at: _builtins.str,
                 urn: _builtins.str):
        """
        :param Sequence[_builtins.str] account_ids: The source account list being aggregated.
        :param _builtins.str created_at: The time when the resource aggregator was created.
        :param _builtins.str id: The resource aggregator ID.
        :param _builtins.str name: Specifies the resource aggregator name.
        :param _builtins.str type: Specifies the resource aggregator type, which can be ACCOUNT or ORGANIZATION.
        :param _builtins.str updated_at: The time when the resource aggregator was updated.
        :param _builtins.str urn: The resource aggregator identifier.
        """
        pulumi.set(__self__, "account_ids", account_ids)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "urn", urn)

    @_builtins.property
    @pulumi.getter(name="accountIds")
    def account_ids(self) -> Sequence[_builtins.str]:
        """
        The source account list being aggregated.
        """
        return pulumi.get(self, "account_ids")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The time when the resource aggregator was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The resource aggregator ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the resource aggregator name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the resource aggregator type, which can be ACCOUNT or ORGANIZATION.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The time when the resource aggregator was updated.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter
    def urn(self) -> _builtins.str:
        """
        The resource aggregator identifier.
        """
        return pulumi.get(self, "urn")


@pulumi.output_type
class GetResourceHistoriesItemResult(dict):
    def __init__(__self__, *,
                 capture_time: _builtins.str,
                 domain_id: _builtins.str,
                 relations: Sequence['outputs.GetResourceHistoriesItemRelationResult'],
                 resource_id: _builtins.str,
                 resource_type: _builtins.str,
                 resources: Sequence['outputs.GetResourceHistoriesItemResourceResult'],
                 status: _builtins.str):
        """
        :param _builtins.str capture_time: The time when the resource is captured by Config.
        :param _builtins.str domain_id: The user ID.
        :param Sequence['GetResourceHistoriesItemRelationArgs'] relations: The list of resource relationships.
        :param _builtins.str resource_id: Specifies the resource ID.
        :param _builtins.str resource_type: The resource type.
        :param Sequence['GetResourceHistoriesItemResourceArgs'] resources: The resource information.
        :param _builtins.str status: The resource status.
        """
        pulumi.set(__self__, "capture_time", capture_time)
        pulumi.set(__self__, "domain_id", domain_id)
        pulumi.set(__self__, "relations", relations)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="captureTime")
    def capture_time(self) -> _builtins.str:
        """
        The time when the resource is captured by Config.
        """
        return pulumi.get(self, "capture_time")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> _builtins.str:
        """
        The user ID.
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter
    def relations(self) -> Sequence['outputs.GetResourceHistoriesItemRelationResult']:
        """
        The list of resource relationships.
        """
        return pulumi.get(self, "relations")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        Specifies the resource ID.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        """
        The resource type.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetResourceHistoriesItemResourceResult']:
        """
        The resource information.
        """
        return pulumi.get(self, "resources")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The resource status.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetResourceHistoriesItemRelationResult(dict):
    def __init__(__self__, *,
                 from_resource_id: _builtins.str,
                 from_resource_type: _builtins.str,
                 relation_type: _builtins.str,
                 to_resource_id: _builtins.str,
                 to_resource_type: _builtins.str):
        """
        :param _builtins.str from_resource_id: The source resource ID.
        :param _builtins.str from_resource_type: The type of the source resource.
        :param _builtins.str relation_type: The relationship type.
        :param _builtins.str to_resource_id: The destination resource ID.
        :param _builtins.str to_resource_type: The type of the destination resource.
        """
        pulumi.set(__self__, "from_resource_id", from_resource_id)
        pulumi.set(__self__, "from_resource_type", from_resource_type)
        pulumi.set(__self__, "relation_type", relation_type)
        pulumi.set(__self__, "to_resource_id", to_resource_id)
        pulumi.set(__self__, "to_resource_type", to_resource_type)

    @_builtins.property
    @pulumi.getter(name="fromResourceId")
    def from_resource_id(self) -> _builtins.str:
        """
        The source resource ID.
        """
        return pulumi.get(self, "from_resource_id")

    @_builtins.property
    @pulumi.getter(name="fromResourceType")
    def from_resource_type(self) -> _builtins.str:
        """
        The type of the source resource.
        """
        return pulumi.get(self, "from_resource_type")

    @_builtins.property
    @pulumi.getter(name="relationType")
    def relation_type(self) -> _builtins.str:
        """
        The relationship type.
        """
        return pulumi.get(self, "relation_type")

    @_builtins.property
    @pulumi.getter(name="toResourceId")
    def to_resource_id(self) -> _builtins.str:
        """
        The destination resource ID.
        """
        return pulumi.get(self, "to_resource_id")

    @_builtins.property
    @pulumi.getter(name="toResourceType")
    def to_resource_type(self) -> _builtins.str:
        """
        The type of the destination resource.
        """
        return pulumi.get(self, "to_resource_type")


@pulumi.output_type
class GetResourceHistoriesItemResourceResult(dict):
    def __init__(__self__, *,
                 checksum: _builtins.str,
                 created: _builtins.str,
                 ep_id: _builtins.str,
                 ep_name: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 project_id: _builtins.str,
                 project_name: _builtins.str,
                 properties: _builtins.str,
                 provider: _builtins.str,
                 provisioning_state: _builtins.str,
                 region_id: _builtins.str,
                 tags: Mapping[str, _builtins.str],
                 type: _builtins.str,
                 updated: _builtins.str):
        """
        :param _builtins.str checksum: The resource checksum.
        :param _builtins.str created: The time when the resource is created.
        :param _builtins.str ep_id: The enterprise project ID.
        :param _builtins.str ep_name: The enterprise project name.
        :param _builtins.str id: The resource ID.
        :param _builtins.str name: The resource name.
        :param _builtins.str project_id: The project ID.
        :param _builtins.str project_name: The project name.
        :param _builtins.str properties: The resource properties.
        :param _builtins.str provider: The provider name.
        :param _builtins.str provisioning_state: The status of the operation that causes the resource change.
        :param _builtins.str region_id: The region ID.
        :param Mapping[str, _builtins.str] tags: The resource tag.
        :param _builtins.str type: The resource type.
        :param _builtins.str updated: The time when the resource is updated.
        """
        pulumi.set(__self__, "checksum", checksum)
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "ep_id", ep_id)
        pulumi.set(__self__, "ep_name", ep_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "project_name", project_name)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "provider", provider)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated", updated)

    @_builtins.property
    @pulumi.getter
    def checksum(self) -> _builtins.str:
        """
        The resource checksum.
        """
        return pulumi.get(self, "checksum")

    @_builtins.property
    @pulumi.getter
    def created(self) -> _builtins.str:
        """
        The time when the resource is created.
        """
        return pulumi.get(self, "created")

    @_builtins.property
    @pulumi.getter(name="epId")
    def ep_id(self) -> _builtins.str:
        """
        The enterprise project ID.
        """
        return pulumi.get(self, "ep_id")

    @_builtins.property
    @pulumi.getter(name="epName")
    def ep_name(self) -> _builtins.str:
        """
        The enterprise project name.
        """
        return pulumi.get(self, "ep_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The resource ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The resource name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        The project ID.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="projectName")
    def project_name(self) -> _builtins.str:
        """
        The project name.
        """
        return pulumi.get(self, "project_name")

    @_builtins.property
    @pulumi.getter
    def properties(self) -> _builtins.str:
        """
        The resource properties.
        """
        return pulumi.get(self, "properties")

    @_builtins.property
    @pulumi.getter
    def provider(self) -> _builtins.str:
        """
        The provider name.
        """
        return pulumi.get(self, "provider")

    @_builtins.property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> _builtins.str:
        """
        The status of the operation that causes the resource change.
        """
        return pulumi.get(self, "provisioning_state")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> _builtins.str:
        """
        The region ID.
        """
        return pulumi.get(self, "region_id")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        The resource tag.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The resource type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def updated(self) -> _builtins.str:
        """
        The time when the resource is updated.
        """
        return pulumi.get(self, "updated")


@pulumi.output_type
class GetResourceInstancesResourceResult(dict):
    def __init__(__self__, *,
                 resource_id: _builtins.str,
                 resource_name: _builtins.str,
                 tags: Sequence['outputs.GetResourceInstancesResourceTagResult']):
        """
        :param _builtins.str resource_id: The resource ID.
        :param _builtins.str resource_name: The resource name.
        :param Sequence['GetResourceInstancesResourceTagArgs'] tags: Specifies the tags.
               
               The tags structure is documented below.
               
               <a name="tags_struct"></a>
               The `tags` block supports:
        """
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        The resource ID.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> _builtins.str:
        """
        The resource name.
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetResourceInstancesResourceTagResult']:
        """
        Specifies the tags.

        The tags structure is documented below.

        <a name="tags_struct"></a>
        The `tags` block supports:
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetResourceInstancesResourceTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: Specifies the tag key.
        :param _builtins.str value: The tag value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the tag key.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The tag value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetResourceInstancesTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: Specifies the tag key.
        :param Sequence[_builtins.str] values: Specifies the tag values.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the tag key.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Specifies the tag values.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetResourcePolicyStatesSummaryValueResult(dict):
    def __init__(__self__, *,
                 compliance_state: _builtins.str,
                 results: Sequence['outputs.GetResourcePolicyStatesSummaryValueResultResult']):
        """
        :param _builtins.str compliance_state: Indicates the rule status.
        :param Sequence['GetResourcePolicyStatesSummaryValueResultArgs'] results: Indicates the results of compliance summaries.
               The results structure is documented below.
        """
        pulumi.set(__self__, "compliance_state", compliance_state)
        pulumi.set(__self__, "results", results)

    @_builtins.property
    @pulumi.getter(name="complianceState")
    def compliance_state(self) -> _builtins.str:
        """
        Indicates the rule status.
        """
        return pulumi.get(self, "compliance_state")

    @_builtins.property
    @pulumi.getter
    def results(self) -> Sequence['outputs.GetResourcePolicyStatesSummaryValueResultResult']:
        """
        Indicates the results of compliance summaries.
        The results structure is documented below.
        """
        return pulumi.get(self, "results")


@pulumi.output_type
class GetResourcePolicyStatesSummaryValueResultResult(dict):
    def __init__(__self__, *,
                 assignment_details: Sequence['outputs.GetResourcePolicyStatesSummaryValueResultAssignmentDetailResult'],
                 resource_details: Sequence['outputs.GetResourcePolicyStatesSummaryValueResultResourceDetailResult']):
        """
        :param Sequence['GetResourcePolicyStatesSummaryValueResultAssignmentDetailArgs'] assignment_details: Indicates the compliance summary details.
               The assignment_details structure is documented below.
        :param Sequence['GetResourcePolicyStatesSummaryValueResultResourceDetailArgs'] resource_details: Indicates the resource compliance summary details.
               The resource_details structure is documented below.
        """
        pulumi.set(__self__, "assignment_details", assignment_details)
        pulumi.set(__self__, "resource_details", resource_details)

    @_builtins.property
    @pulumi.getter(name="assignmentDetails")
    def assignment_details(self) -> Sequence['outputs.GetResourcePolicyStatesSummaryValueResultAssignmentDetailResult']:
        """
        Indicates the compliance summary details.
        The assignment_details structure is documented below.
        """
        return pulumi.get(self, "assignment_details")

    @_builtins.property
    @pulumi.getter(name="resourceDetails")
    def resource_details(self) -> Sequence['outputs.GetResourcePolicyStatesSummaryValueResultResourceDetailResult']:
        """
        Indicates the resource compliance summary details.
        The resource_details structure is documented below.
        """
        return pulumi.get(self, "resource_details")


@pulumi.output_type
class GetResourcePolicyStatesSummaryValueResultAssignmentDetailResult(dict):
    def __init__(__self__, *,
                 compliant_count: _builtins.int,
                 non_compliant_count: _builtins.int):
        """
        :param _builtins.int compliant_count: Indicates the number of compliant resources.
        :param _builtins.int non_compliant_count: Indicates the number of non-compliant resources.
        """
        pulumi.set(__self__, "compliant_count", compliant_count)
        pulumi.set(__self__, "non_compliant_count", non_compliant_count)

    @_builtins.property
    @pulumi.getter(name="compliantCount")
    def compliant_count(self) -> _builtins.int:
        """
        Indicates the number of compliant resources.
        """
        return pulumi.get(self, "compliant_count")

    @_builtins.property
    @pulumi.getter(name="nonCompliantCount")
    def non_compliant_count(self) -> _builtins.int:
        """
        Indicates the number of non-compliant resources.
        """
        return pulumi.get(self, "non_compliant_count")


@pulumi.output_type
class GetResourcePolicyStatesSummaryValueResultResourceDetailResult(dict):
    def __init__(__self__, *,
                 compliant_count: _builtins.int,
                 non_compliant_count: _builtins.int):
        """
        :param _builtins.int compliant_count: Indicates the number of compliant resources.
        :param _builtins.int non_compliant_count: Indicates the number of non-compliant resources.
        """
        pulumi.set(__self__, "compliant_count", compliant_count)
        pulumi.set(__self__, "non_compliant_count", non_compliant_count)

    @_builtins.property
    @pulumi.getter(name="compliantCount")
    def compliant_count(self) -> _builtins.int:
        """
        Indicates the number of compliant resources.
        """
        return pulumi.get(self, "compliant_count")

    @_builtins.property
    @pulumi.getter(name="nonCompliantCount")
    def non_compliant_count(self) -> _builtins.int:
        """
        Indicates the number of non-compliant resources.
        """
        return pulumi.get(self, "non_compliant_count")


@pulumi.output_type
class GetResourcePolicyStatesValueResult(dict):
    def __init__(__self__, *,
                 compliance_state: _builtins.str,
                 domain_id: _builtins.str,
                 evaluation_time: _builtins.str,
                 policy_assignment_id: _builtins.str,
                 policy_assignment_name: _builtins.str,
                 policy_definition_id: _builtins.str,
                 region_id: _builtins.str,
                 resource_id: _builtins.str,
                 resource_name: _builtins.str,
                 resource_provider: _builtins.str,
                 resource_type: _builtins.str,
                 trigger_type: _builtins.str):
        """
        :param _builtins.str compliance_state: Specifies the compliance status.
        :param _builtins.str domain_id: Indicates the user ID.
        :param _builtins.str evaluation_time: Indicates the compliance state evaluation time.
        :param _builtins.str policy_assignment_id: Indicates the rule ID.
        :param _builtins.str policy_assignment_name: Indicates the rule name.
        :param _builtins.str policy_definition_id: Indicates the policy ID.
        :param _builtins.str region_id: Indicates the ID of the region the resource belongs to.
        :param _builtins.str resource_id: Specifies the resource ID.
        :param _builtins.str resource_name: Indicates the resource name.
        :param _builtins.str resource_provider: Indicates the cloud service name.
        :param _builtins.str resource_type: Indicates the resource type.
        :param _builtins.str trigger_type: Indicates the trigger type. The value can be **resource** or **period**.
        """
        pulumi.set(__self__, "compliance_state", compliance_state)
        pulumi.set(__self__, "domain_id", domain_id)
        pulumi.set(__self__, "evaluation_time", evaluation_time)
        pulumi.set(__self__, "policy_assignment_id", policy_assignment_id)
        pulumi.set(__self__, "policy_assignment_name", policy_assignment_name)
        pulumi.set(__self__, "policy_definition_id", policy_definition_id)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "resource_provider", resource_provider)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "trigger_type", trigger_type)

    @_builtins.property
    @pulumi.getter(name="complianceState")
    def compliance_state(self) -> _builtins.str:
        """
        Specifies the compliance status.
        """
        return pulumi.get(self, "compliance_state")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> _builtins.str:
        """
        Indicates the user ID.
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter(name="evaluationTime")
    def evaluation_time(self) -> _builtins.str:
        """
        Indicates the compliance state evaluation time.
        """
        return pulumi.get(self, "evaluation_time")

    @_builtins.property
    @pulumi.getter(name="policyAssignmentId")
    def policy_assignment_id(self) -> _builtins.str:
        """
        Indicates the rule ID.
        """
        return pulumi.get(self, "policy_assignment_id")

    @_builtins.property
    @pulumi.getter(name="policyAssignmentName")
    def policy_assignment_name(self) -> _builtins.str:
        """
        Indicates the rule name.
        """
        return pulumi.get(self, "policy_assignment_name")

    @_builtins.property
    @pulumi.getter(name="policyDefinitionId")
    def policy_definition_id(self) -> _builtins.str:
        """
        Indicates the policy ID.
        """
        return pulumi.get(self, "policy_definition_id")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> _builtins.str:
        """
        Indicates the ID of the region the resource belongs to.
        """
        return pulumi.get(self, "region_id")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        Specifies the resource ID.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> _builtins.str:
        """
        Indicates the resource name.
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="resourceProvider")
    def resource_provider(self) -> _builtins.str:
        """
        Indicates the cloud service name.
        """
        return pulumi.get(self, "resource_provider")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        """
        Indicates the resource type.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> _builtins.str:
        """
        Indicates the trigger type. The value can be **resource** or **period**.
        """
        return pulumi.get(self, "trigger_type")


@pulumi.output_type
class GetResourceRelationsDetailsRelationResult(dict):
    def __init__(__self__, *,
                 from_resource_id: _builtins.str,
                 from_resource_type: _builtins.str,
                 relation_type: _builtins.str,
                 to_resource_id: _builtins.str,
                 to_resource_type: _builtins.str):
        """
        :param _builtins.str from_resource_id: The source resource ID.
        :param _builtins.str from_resource_type: The type of the source resource.
        :param _builtins.str relation_type: The relationship type.
        :param _builtins.str to_resource_id: The destination resource ID.
        :param _builtins.str to_resource_type: The type of the destination resource.
        """
        pulumi.set(__self__, "from_resource_id", from_resource_id)
        pulumi.set(__self__, "from_resource_type", from_resource_type)
        pulumi.set(__self__, "relation_type", relation_type)
        pulumi.set(__self__, "to_resource_id", to_resource_id)
        pulumi.set(__self__, "to_resource_type", to_resource_type)

    @_builtins.property
    @pulumi.getter(name="fromResourceId")
    def from_resource_id(self) -> _builtins.str:
        """
        The source resource ID.
        """
        return pulumi.get(self, "from_resource_id")

    @_builtins.property
    @pulumi.getter(name="fromResourceType")
    def from_resource_type(self) -> _builtins.str:
        """
        The type of the source resource.
        """
        return pulumi.get(self, "from_resource_type")

    @_builtins.property
    @pulumi.getter(name="relationType")
    def relation_type(self) -> _builtins.str:
        """
        The relationship type.
        """
        return pulumi.get(self, "relation_type")

    @_builtins.property
    @pulumi.getter(name="toResourceId")
    def to_resource_id(self) -> _builtins.str:
        """
        The destination resource ID.
        """
        return pulumi.get(self, "to_resource_id")

    @_builtins.property
    @pulumi.getter(name="toResourceType")
    def to_resource_type(self) -> _builtins.str:
        """
        The type of the destination resource.
        """
        return pulumi.get(self, "to_resource_type")


@pulumi.output_type
class GetResourceTagsTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: The tag key.
        :param Sequence[_builtins.str] values: The tag values.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The tag key.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        The tag values.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetResourcesResourceResult(dict):
    def __init__(__self__, *,
                 checksum: _builtins.str,
                 created_at: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 enterprise_project_name: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 project_id: _builtins.str,
                 project_name: _builtins.str,
                 properties: Mapping[str, _builtins.str],
                 provisioning_state: _builtins.str,
                 region_id: _builtins.str,
                 service: _builtins.str,
                 state: _builtins.str,
                 tags: Mapping[str, _builtins.str],
                 type: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str checksum: The checksum of the resource.
        :param _builtins.str created_at: The creation time.
        :param _builtins.str enterprise_project_id: Specifies the ID of enterprise project to which the resource belongs.
        :param _builtins.str enterprise_project_name: The name of enterprise project to which the resource belongs.
        :param _builtins.str id: The resource ID.
        :param _builtins.str name: Specifies the resource name.
        :param _builtins.str project_id: The ID of project to which the resource belongs.
        :param _builtins.str project_name: The name of project to which the resource belongs.
        :param Mapping[str, _builtins.str] properties: The properties of the resource.
        :param _builtins.str provisioning_state: The provisioning state of the resource.
        :param _builtins.str region_id: Specifies the region to which the resource belongs.
        :param _builtins.str service: The service name.
        :param _builtins.str state: The state of the resource.
        :param Mapping[str, _builtins.str] tags: Specifies the tags to filter the resources.
        :param _builtins.str type: Specifies the resource type. For example, **vpc.vpcs** and **rds.instances**.
        :param _builtins.str updated_at: The update time.
        """
        pulumi.set(__self__, "checksum", checksum)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "enterprise_project_name", enterprise_project_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "project_name", project_name)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def checksum(self) -> _builtins.str:
        """
        The checksum of the resource.
        """
        return pulumi.get(self, "checksum")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the ID of enterprise project to which the resource belongs.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectName")
    def enterprise_project_name(self) -> _builtins.str:
        """
        The name of enterprise project to which the resource belongs.
        """
        return pulumi.get(self, "enterprise_project_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The resource ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the resource name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        The ID of project to which the resource belongs.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="projectName")
    def project_name(self) -> _builtins.str:
        """
        The name of project to which the resource belongs.
        """
        return pulumi.get(self, "project_name")

    @_builtins.property
    @pulumi.getter
    def properties(self) -> Mapping[str, _builtins.str]:
        """
        The properties of the resource.
        """
        return pulumi.get(self, "properties")

    @_builtins.property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> _builtins.str:
        """
        The provisioning state of the resource.
        """
        return pulumi.get(self, "provisioning_state")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> _builtins.str:
        """
        Specifies the region to which the resource belongs.
        """
        return pulumi.get(self, "region_id")

    @_builtins.property
    @pulumi.getter
    def service(self) -> _builtins.str:
        """
        The service name.
        """
        return pulumi.get(self, "service")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The state of the resource.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        Specifies the tags to filter the resources.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the resource type. For example, **vpc.vpcs** and **rds.instances**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The update time.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetResourcesSummaryResourcesSummaryResult(dict):
    def __init__(__self__, *,
                 service: _builtins.str,
                 types: Sequence['outputs.GetResourcesSummaryResourcesSummaryTypeResult']):
        """
        :param _builtins.str service: The service name.
        :param Sequence['GetResourcesSummaryResourcesSummaryTypeArgs'] types: The resource type list.
               The types structure is documented below.
        """
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "types", types)

    @_builtins.property
    @pulumi.getter
    def service(self) -> _builtins.str:
        """
        The service name.
        """
        return pulumi.get(self, "service")

    @_builtins.property
    @pulumi.getter
    def types(self) -> Sequence['outputs.GetResourcesSummaryResourcesSummaryTypeResult']:
        """
        The resource type list.
        The types structure is documented below.
        """
        return pulumi.get(self, "types")


@pulumi.output_type
class GetResourcesSummaryResourcesSummaryTypeResult(dict):
    def __init__(__self__, *,
                 regions: Sequence['outputs.GetResourcesSummaryResourcesSummaryTypeRegionResult'],
                 type: _builtins.str):
        """
        :param Sequence['GetResourcesSummaryResourcesSummaryTypeRegionArgs'] regions: The list of supported regions.
               The regions structure is documented below.
        :param _builtins.str type: Specifies the resource type. For example, **vpc.vpcs** and **rds.instances**.
        """
        pulumi.set(__self__, "regions", regions)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def regions(self) -> Sequence['outputs.GetResourcesSummaryResourcesSummaryTypeRegionResult']:
        """
        The list of supported regions.
        The regions structure is documented below.
        """
        return pulumi.get(self, "regions")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the resource type. For example, **vpc.vpcs** and **rds.instances**.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetResourcesSummaryResourcesSummaryTypeRegionResult(dict):
    def __init__(__self__, *,
                 count: _builtins.int,
                 region_id: _builtins.str):
        """
        :param _builtins.int count: The number of resource in this region.
        :param _builtins.str region_id: Specifies the region to which the resource belongs.
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "region_id", region_id)

    @_builtins.property
    @pulumi.getter
    def count(self) -> _builtins.int:
        """
        The number of resource in this region.
        """
        return pulumi.get(self, "count")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> _builtins.str:
        """
        Specifies the region to which the resource belongs.
        """
        return pulumi.get(self, "region_id")


@pulumi.output_type
class GetServicesServiceResult(dict):
    def __init__(__self__, *,
                 category_display_name: _builtins.str,
                 display_name: _builtins.str,
                 name: _builtins.str,
                 resource_types: Sequence['outputs.GetServicesServiceResourceTypeResult']):
        """
        :param _builtins.str category_display_name: The display name of the service category.
        :param _builtins.str display_name: The display name of the resource type.
        :param _builtins.str name: Specifies the service name.
        :param Sequence['GetServicesServiceResourceTypeArgs'] resource_types: The resource type list.
        """
        pulumi.set(__self__, "category_display_name", category_display_name)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resource_types", resource_types)

    @_builtins.property
    @pulumi.getter(name="categoryDisplayName")
    def category_display_name(self) -> _builtins.str:
        """
        The display name of the service category.
        """
        return pulumi.get(self, "category_display_name")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        The display name of the resource type.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the service name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="resourceTypes")
    def resource_types(self) -> Sequence['outputs.GetServicesServiceResourceTypeResult']:
        """
        The resource type list.
        """
        return pulumi.get(self, "resource_types")


@pulumi.output_type
class GetServicesServiceResourceTypeResult(dict):
    def __init__(__self__, *,
                 console_detail_url: _builtins.str,
                 console_endpoint_id: _builtins.str,
                 console_list_url: _builtins.str,
                 display_name: _builtins.str,
                 global_: _builtins.bool,
                 name: _builtins.str,
                 regions: Sequence[_builtins.str],
                 track: _builtins.str):
        """
        :param _builtins.str console_detail_url: The URL of the resource details page.
        :param _builtins.str console_endpoint_id: The endpoint ID of the console.
        :param _builtins.str console_list_url: The URL of the resource list page.
        :param _builtins.str display_name: The display name of the resource type.
        :param _builtins.bool global_: Indicates whether a resource is a global resource.
        :param _builtins.str name: Specifies the service name.
        :param Sequence[_builtins.str] regions: The list of supported regions.
        :param _builtins.str track: Specifies whether resources are collected by default.
               The value can be **tracked** and **untracked**
        """
        pulumi.set(__self__, "console_detail_url", console_detail_url)
        pulumi.set(__self__, "console_endpoint_id", console_endpoint_id)
        pulumi.set(__self__, "console_list_url", console_list_url)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "global_", global_)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "regions", regions)
        pulumi.set(__self__, "track", track)

    @_builtins.property
    @pulumi.getter(name="consoleDetailUrl")
    def console_detail_url(self) -> _builtins.str:
        """
        The URL of the resource details page.
        """
        return pulumi.get(self, "console_detail_url")

    @_builtins.property
    @pulumi.getter(name="consoleEndpointId")
    def console_endpoint_id(self) -> _builtins.str:
        """
        The endpoint ID of the console.
        """
        return pulumi.get(self, "console_endpoint_id")

    @_builtins.property
    @pulumi.getter(name="consoleListUrl")
    def console_list_url(self) -> _builtins.str:
        """
        The URL of the resource list page.
        """
        return pulumi.get(self, "console_list_url")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        The display name of the resource type.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="global")
    def global_(self) -> _builtins.bool:
        """
        Indicates whether a resource is a global resource.
        """
        return pulumi.get(self, "global_")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the service name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def regions(self) -> Sequence[_builtins.str]:
        """
        The list of supported regions.
        """
        return pulumi.get(self, "regions")

    @_builtins.property
    @pulumi.getter
    def track(self) -> _builtins.str:
        """
        Specifies whether resources are collected by default.
        The value can be **tracked** and **untracked**
        """
        return pulumi.get(self, "track")


@pulumi.output_type
class GetTagsTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: Tag key name.
        :param Sequence[_builtins.str] values: Tag value list.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Tag key name.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Tag value list.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetTrackedResourceTagsTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: Specifies the tag key name.
        :param Sequence[_builtins.str] values: The tag value list.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the tag key name.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        The tag value list.
        """
        return pulumi.get(self, "values")


