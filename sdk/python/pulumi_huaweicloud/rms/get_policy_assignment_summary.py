# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetPolicyAssignmentSummaryResult',
    'AwaitableGetPolicyAssignmentSummaryResult',
    'get_policy_assignment_summary',
    'get_policy_assignment_summary_output',
]

@pulumi.output_type
class GetPolicyAssignmentSummaryResult:
    """
    A collection of values returned by getPolicyAssignmentSummary.
    """
    def __init__(__self__, compliance_state=None, id=None, policy_assignment_id=None, resource_name=None, results=None):
        if compliance_state and not isinstance(compliance_state, str):
            raise TypeError("Expected argument 'compliance_state' to be a str")
        pulumi.set(__self__, "compliance_state", compliance_state)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if policy_assignment_id and not isinstance(policy_assignment_id, str):
            raise TypeError("Expected argument 'policy_assignment_id' to be a str")
        pulumi.set(__self__, "policy_assignment_id", policy_assignment_id)
        if resource_name and not isinstance(resource_name, str):
            raise TypeError("Expected argument 'resource_name' to be a str")
        pulumi.set(__self__, "resource_name", resource_name)
        if results and not isinstance(results, list):
            raise TypeError("Expected argument 'results' to be a list")
        pulumi.set(__self__, "results", results)

    @_builtins.property
    @pulumi.getter(name="complianceState")
    def compliance_state(self) -> _builtins.str:
        """
        Indicates the policy assignment status.
        """
        return pulumi.get(self, "compliance_state")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="policyAssignmentId")
    def policy_assignment_id(self) -> _builtins.str:
        return pulumi.get(self, "policy_assignment_id")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter
    def results(self) -> Sequence['outputs.GetPolicyAssignmentSummaryResultResult']:
        """
        Indicates the results of compliance summaries.
        The results structure is documented below.
        """
        return pulumi.get(self, "results")


class AwaitableGetPolicyAssignmentSummaryResult(GetPolicyAssignmentSummaryResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPolicyAssignmentSummaryResult(
            compliance_state=self.compliance_state,
            id=self.id,
            policy_assignment_id=self.policy_assignment_id,
            resource_name=self.resource_name,
            results=self.results)


def get_policy_assignment_summary(policy_assignment_id: Optional[_builtins.str] = None,
                                  resource_name: Optional[_builtins.str] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPolicyAssignmentSummaryResult:
    """
    Use this data source to get the summary of a policy assignment.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    policy_assignment_id = config.require_object("policyAssignmentId")
    test = huaweicloud.rms.get_policy_assignment_summary(policy_assignment_id=policy_assignment_id)
    ```


    :param _builtins.str policy_assignment_id: Specifies the policy assignment ID.
    :param _builtins.str resource_name: Specifies the resource name.
    """
    __args__ = dict()
    __args__['policyAssignmentId'] = policy_assignment_id
    __args__['resourceName'] = resource_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:rms/getPolicyAssignmentSummary:getPolicyAssignmentSummary', __args__, opts=opts, typ=GetPolicyAssignmentSummaryResult).value

    return AwaitableGetPolicyAssignmentSummaryResult(
        compliance_state=pulumi.get(__ret__, 'compliance_state'),
        id=pulumi.get(__ret__, 'id'),
        policy_assignment_id=pulumi.get(__ret__, 'policy_assignment_id'),
        resource_name=pulumi.get(__ret__, 'resource_name'),
        results=pulumi.get(__ret__, 'results'))
def get_policy_assignment_summary_output(policy_assignment_id: Optional[pulumi.Input[_builtins.str]] = None,
                                         resource_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPolicyAssignmentSummaryResult]:
    """
    Use this data source to get the summary of a policy assignment.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    policy_assignment_id = config.require_object("policyAssignmentId")
    test = huaweicloud.rms.get_policy_assignment_summary(policy_assignment_id=policy_assignment_id)
    ```


    :param _builtins.str policy_assignment_id: Specifies the policy assignment ID.
    :param _builtins.str resource_name: Specifies the resource name.
    """
    __args__ = dict()
    __args__['policyAssignmentId'] = policy_assignment_id
    __args__['resourceName'] = resource_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:rms/getPolicyAssignmentSummary:getPolicyAssignmentSummary', __args__, opts=opts, typ=GetPolicyAssignmentSummaryResult)
    return __ret__.apply(lambda __response__: GetPolicyAssignmentSummaryResult(
        compliance_state=pulumi.get(__response__, 'compliance_state'),
        id=pulumi.get(__response__, 'id'),
        policy_assignment_id=pulumi.get(__response__, 'policy_assignment_id'),
        resource_name=pulumi.get(__response__, 'resource_name'),
        results=pulumi.get(__response__, 'results')))
