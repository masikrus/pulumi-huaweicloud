# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetResourceAggregationPendingRequestsResult',
    'AwaitableGetResourceAggregationPendingRequestsResult',
    'get_resource_aggregation_pending_requests',
    'get_resource_aggregation_pending_requests_output',
]

@pulumi.output_type
class GetResourceAggregationPendingRequestsResult:
    """
    A collection of values returned by getResourceAggregationPendingRequests.
    """
    def __init__(__self__, account_id=None, id=None, pending_aggregation_requests=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if pending_aggregation_requests and not isinstance(pending_aggregation_requests, list):
            raise TypeError("Expected argument 'pending_aggregation_requests' to be a list")
        pulumi.set(__self__, "pending_aggregation_requests", pending_aggregation_requests)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="pendingAggregationRequests")
    def pending_aggregation_requests(self) -> Sequence['outputs.GetResourceAggregationPendingRequestsPendingAggregationRequestResult']:
        """
        The list of pending aggregation requests.
        """
        return pulumi.get(self, "pending_aggregation_requests")


class AwaitableGetResourceAggregationPendingRequestsResult(GetResourceAggregationPendingRequestsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetResourceAggregationPendingRequestsResult(
            account_id=self.account_id,
            id=self.id,
            pending_aggregation_requests=self.pending_aggregation_requests)


def get_resource_aggregation_pending_requests(account_id: Optional[_builtins.str] = None,
                                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetResourceAggregationPendingRequestsResult:
    """
    Use this data source to get the list of RMS pending resource aggregation requests.


    :param _builtins.str account_id: Specifies the ID of the authorized resource aggregator account.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:rms/getResourceAggregationPendingRequests:getResourceAggregationPendingRequests', __args__, opts=opts, typ=GetResourceAggregationPendingRequestsResult).value

    return AwaitableGetResourceAggregationPendingRequestsResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        id=pulumi.get(__ret__, 'id'),
        pending_aggregation_requests=pulumi.get(__ret__, 'pending_aggregation_requests'))
def get_resource_aggregation_pending_requests_output(account_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetResourceAggregationPendingRequestsResult]:
    """
    Use this data source to get the list of RMS pending resource aggregation requests.


    :param _builtins.str account_id: Specifies the ID of the authorized resource aggregator account.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:rms/getResourceAggregationPendingRequests:getResourceAggregationPendingRequests', __args__, opts=opts, typ=GetResourceAggregationPendingRequestsResult)
    return __ret__.apply(lambda __response__: GetResourceAggregationPendingRequestsResult(
        account_id=pulumi.get(__response__, 'account_id'),
        id=pulumi.get(__response__, 'id'),
        pending_aggregation_requests=pulumi.get(__response__, 'pending_aggregation_requests')))
