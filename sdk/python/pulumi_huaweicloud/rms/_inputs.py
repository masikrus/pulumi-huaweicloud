# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'AssignmentPackageVarsStructureArgs',
    'AssignmentPackageVarsStructureArgsDict',
    'OrganizationalAssignmentPackageVarsStructureArgs',
    'OrganizationalAssignmentPackageVarsStructureArgsDict',
    'OrganizationalPolicyAssignmentPolicyFilterArgs',
    'OrganizationalPolicyAssignmentPolicyFilterArgsDict',
    'PolicyAssignmentCustomPolicyArgs',
    'PolicyAssignmentCustomPolicyArgsDict',
    'PolicyAssignmentPolicyFilterArgs',
    'PolicyAssignmentPolicyFilterArgsDict',
    'RemediationConfigurationResourceParameterArgs',
    'RemediationConfigurationResourceParameterArgsDict',
    'RemediationConfigurationStaticParameterArgs',
    'RemediationConfigurationStaticParameterArgsDict',
    'RemediationExceptionExceptionArgs',
    'RemediationExceptionExceptionArgsDict',
    'RemediationExecutionResultArgs',
    'RemediationExecutionResultArgsDict',
    'ResourceRecorderObsChannelArgs',
    'ResourceRecorderObsChannelArgsDict',
    'ResourceRecorderSelectorArgs',
    'ResourceRecorderSelectorArgsDict',
    'ResourceRecorderSmnChannelArgs',
    'ResourceRecorderSmnChannelArgsDict',
    'GetRemediationExecutionStatusesResourceKeyArgs',
    'GetRemediationExecutionStatusesResourceKeyArgsDict',
    'GetResourceAggregatorDiscoveredResourcesFilterArgs',
    'GetResourceAggregatorDiscoveredResourcesFilterArgsDict',
    'GetResourceAggregatorPolicyAssignmentsFilterArgs',
    'GetResourceAggregatorPolicyAssignmentsFilterArgsDict',
    'GetResourceInstancesTagArgs',
    'GetResourceInstancesTagArgsDict',
]

MYPY = False

if not MYPY:
    class AssignmentPackageVarsStructureArgsDict(TypedDict):
        var_key: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the name of a parameter. It contains 1 to 64 characters.
        """
        var_value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the value of a parameter. It's a json string.
        """
elif False:
    AssignmentPackageVarsStructureArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AssignmentPackageVarsStructureArgs:
    def __init__(__self__, *,
                 var_key: Optional[pulumi.Input[_builtins.str]] = None,
                 var_value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] var_key: Specifies the name of a parameter. It contains 1 to 64 characters.
        :param pulumi.Input[_builtins.str] var_value: Specifies the value of a parameter. It's a json string.
        """
        if var_key is not None:
            pulumi.set(__self__, "var_key", var_key)
        if var_value is not None:
            pulumi.set(__self__, "var_value", var_value)

    @_builtins.property
    @pulumi.getter(name="varKey")
    def var_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of a parameter. It contains 1 to 64 characters.
        """
        return pulumi.get(self, "var_key")

    @var_key.setter
    def var_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "var_key", value)

    @_builtins.property
    @pulumi.getter(name="varValue")
    def var_value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the value of a parameter. It's a json string.
        """
        return pulumi.get(self, "var_value")

    @var_value.setter
    def var_value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "var_value", value)


if not MYPY:
    class OrganizationalAssignmentPackageVarsStructureArgsDict(TypedDict):
        var_key: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the name of a parameter. It contains `1` to `64` characters.
        """
        var_value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the value of a parameter. It's a json string.
        """
elif False:
    OrganizationalAssignmentPackageVarsStructureArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OrganizationalAssignmentPackageVarsStructureArgs:
    def __init__(__self__, *,
                 var_key: Optional[pulumi.Input[_builtins.str]] = None,
                 var_value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] var_key: Specifies the name of a parameter. It contains `1` to `64` characters.
        :param pulumi.Input[_builtins.str] var_value: Specifies the value of a parameter. It's a json string.
        """
        if var_key is not None:
            pulumi.set(__self__, "var_key", var_key)
        if var_value is not None:
            pulumi.set(__self__, "var_value", var_value)

    @_builtins.property
    @pulumi.getter(name="varKey")
    def var_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of a parameter. It contains `1` to `64` characters.
        """
        return pulumi.get(self, "var_key")

    @var_key.setter
    def var_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "var_key", value)

    @_builtins.property
    @pulumi.getter(name="varValue")
    def var_value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the value of a parameter. It's a json string.
        """
        return pulumi.get(self, "var_value")

    @var_value.setter
    def var_value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "var_value", value)


if not MYPY:
    class OrganizationalPolicyAssignmentPolicyFilterArgsDict(TypedDict):
        region: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the name of the region to which the filtered resources belong.
        """
        resource_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the resource ID used to filter a specified resource.
        """
        resource_provider: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the service name to which the filtered resources belong.
        """
        resource_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the resource type of the filtered resources.
        """
        tag_key: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the tag name used to filter resources.  
        This parameter and `resource_id` are alternative.
        """
        tag_value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the tag value used to filter resources.  
        Required if `tag_key` is set.
        """
elif False:
    OrganizationalPolicyAssignmentPolicyFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OrganizationalPolicyAssignmentPolicyFilterArgs:
    def __init__(__self__, *,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_provider: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 tag_key: Optional[pulumi.Input[_builtins.str]] = None,
                 tag_value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] region: Specifies the name of the region to which the filtered resources belong.
        :param pulumi.Input[_builtins.str] resource_id: Specifies the resource ID used to filter a specified resource.
        :param pulumi.Input[_builtins.str] resource_provider: Specifies the service name to which the filtered resources belong.
        :param pulumi.Input[_builtins.str] resource_type: Specifies the resource type of the filtered resources.
        :param pulumi.Input[_builtins.str] tag_key: Specifies the tag name used to filter resources.  
               This parameter and `resource_id` are alternative.
        :param pulumi.Input[_builtins.str] tag_value: Specifies the tag value used to filter resources.  
               Required if `tag_key` is set.
        """
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_provider is not None:
            pulumi.set(__self__, "resource_provider", resource_provider)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if tag_key is not None:
            pulumi.set(__self__, "tag_key", tag_key)
        if tag_value is not None:
            pulumi.set(__self__, "tag_value", tag_value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the region to which the filtered resources belong.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the resource ID used to filter a specified resource.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceProvider")
    def resource_provider(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the service name to which the filtered resources belong.
        """
        return pulumi.get(self, "resource_provider")

    @resource_provider.setter
    def resource_provider(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_provider", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the resource type of the filtered resources.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the tag name used to filter resources.  
        This parameter and `resource_id` are alternative.
        """
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tag_key", value)

    @_builtins.property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the tag value used to filter resources.  
        Required if `tag_key` is set.
        """
        return pulumi.get(self, "tag_value")

    @tag_value.setter
    def tag_value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tag_value", value)


if not MYPY:
    class PolicyAssignmentCustomPolicyArgsDict(TypedDict):
        auth_type: pulumi.Input[_builtins.str]
        """
        Specifies the authorization type of the custom policy.
        """
        function_urn: pulumi.Input[_builtins.str]
        """
        Specifies the function URN used to create the custom policy.
        """
        auth_value: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]
        """
        Specifies the authorization value of the custom policy.
        """
elif False:
    PolicyAssignmentCustomPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyAssignmentCustomPolicyArgs:
    def __init__(__self__, *,
                 auth_type: pulumi.Input[_builtins.str],
                 function_urn: pulumi.Input[_builtins.str],
                 auth_value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input[_builtins.str] auth_type: Specifies the authorization type of the custom policy.
        :param pulumi.Input[_builtins.str] function_urn: Specifies the function URN used to create the custom policy.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] auth_value: Specifies the authorization value of the custom policy.
        """
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "function_urn", function_urn)
        if auth_value is not None:
            pulumi.set(__self__, "auth_value", auth_value)

    @_builtins.property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the authorization type of the custom policy.
        """
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "auth_type", value)

    @_builtins.property
    @pulumi.getter(name="functionUrn")
    def function_urn(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the function URN used to create the custom policy.
        """
        return pulumi.get(self, "function_urn")

    @function_urn.setter
    def function_urn(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "function_urn", value)

    @_builtins.property
    @pulumi.getter(name="authValue")
    def auth_value(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the authorization value of the custom policy.
        """
        return pulumi.get(self, "auth_value")

    @auth_value.setter
    def auth_value(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "auth_value", value)


if not MYPY:
    class PolicyAssignmentPolicyFilterArgsDict(TypedDict):
        region: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the name of the region to which the filtered resources belong.
        """
        resource_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the resource ID used to filter a specified resource.
        """
        resource_provider: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the service name to which the filtered resources belong.
        """
        resource_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the resource type of the filtered resources.
        """
        tag_key: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the tag name used to filter resources.  
        This parameter and `resource_id` are alternative.
        """
        tag_value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the tag value used to filter resources.  
        Required if `tag_key` is set.

        <a name="rms_custom_policy"></a>
        The `custom_policy` block supports:
        """
elif False:
    PolicyAssignmentPolicyFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyAssignmentPolicyFilterArgs:
    def __init__(__self__, *,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_provider: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 tag_key: Optional[pulumi.Input[_builtins.str]] = None,
                 tag_value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] region: Specifies the name of the region to which the filtered resources belong.
        :param pulumi.Input[_builtins.str] resource_id: Specifies the resource ID used to filter a specified resource.
        :param pulumi.Input[_builtins.str] resource_provider: Specifies the service name to which the filtered resources belong.
        :param pulumi.Input[_builtins.str] resource_type: Specifies the resource type of the filtered resources.
        :param pulumi.Input[_builtins.str] tag_key: Specifies the tag name used to filter resources.  
               This parameter and `resource_id` are alternative.
        :param pulumi.Input[_builtins.str] tag_value: Specifies the tag value used to filter resources.  
               Required if `tag_key` is set.
               
               <a name="rms_custom_policy"></a>
               The `custom_policy` block supports:
        """
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_provider is not None:
            pulumi.set(__self__, "resource_provider", resource_provider)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if tag_key is not None:
            pulumi.set(__self__, "tag_key", tag_key)
        if tag_value is not None:
            pulumi.set(__self__, "tag_value", tag_value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the region to which the filtered resources belong.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the resource ID used to filter a specified resource.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceProvider")
    def resource_provider(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the service name to which the filtered resources belong.
        """
        return pulumi.get(self, "resource_provider")

    @resource_provider.setter
    def resource_provider(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_provider", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the resource type of the filtered resources.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the tag name used to filter resources.  
        This parameter and `resource_id` are alternative.
        """
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tag_key", value)

    @_builtins.property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the tag value used to filter resources.  
        Required if `tag_key` is set.

        <a name="rms_custom_policy"></a>
        The `custom_policy` block supports:
        """
        return pulumi.get(self, "tag_value")

    @tag_value.setter
    def tag_value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tag_value", value)


if not MYPY:
    class RemediationConfigurationResourceParameterArgsDict(TypedDict):
        resource_id: pulumi.Input[_builtins.str]
        """
        Specifies the parameter name for passing the resource ID.

        <a name="static_parameter_struct"></a>
        The `static_parameter` block supports:
        """
elif False:
    RemediationConfigurationResourceParameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RemediationConfigurationResourceParameterArgs:
    def __init__(__self__, *,
                 resource_id: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] resource_id: Specifies the parameter name for passing the resource ID.
               
               <a name="static_parameter_struct"></a>
               The `static_parameter` block supports:
        """
        pulumi.set(__self__, "resource_id", resource_id)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the parameter name for passing the resource ID.

        <a name="static_parameter_struct"></a>
        The `static_parameter` block supports:
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "resource_id", value)


if not MYPY:
    class RemediationConfigurationStaticParameterArgsDict(TypedDict):
        var_key: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the static parameter name.
        """
        var_value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the static parameter value in JSON format.
        """
elif False:
    RemediationConfigurationStaticParameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RemediationConfigurationStaticParameterArgs:
    def __init__(__self__, *,
                 var_key: Optional[pulumi.Input[_builtins.str]] = None,
                 var_value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] var_key: Specifies the static parameter name.
        :param pulumi.Input[_builtins.str] var_value: Specifies the static parameter value in JSON format.
        """
        if var_key is not None:
            pulumi.set(__self__, "var_key", var_key)
        if var_value is not None:
            pulumi.set(__self__, "var_value", var_value)

    @_builtins.property
    @pulumi.getter(name="varKey")
    def var_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the static parameter name.
        """
        return pulumi.get(self, "var_key")

    @var_key.setter
    def var_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "var_key", value)

    @_builtins.property
    @pulumi.getter(name="varValue")
    def var_value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the static parameter value in JSON format.
        """
        return pulumi.get(self, "var_value")

    @var_value.setter
    def var_value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "var_value", value)


if not MYPY:
    class RemediationExceptionExceptionArgsDict(TypedDict):
        resource_id: pulumi.Input[_builtins.str]
        """
        Specifies the resource ID.
        """
        created_by: NotRequired[pulumi.Input[_builtins.str]]
        """
        The creator of a remediation exception.
        """
        joined_at: NotRequired[pulumi.Input[_builtins.str]]
        """
        The time when a remediation exception is added.
        """
        message: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the reason for adding an exception.
        """
elif False:
    RemediationExceptionExceptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RemediationExceptionExceptionArgs:
    def __init__(__self__, *,
                 resource_id: pulumi.Input[_builtins.str],
                 created_by: Optional[pulumi.Input[_builtins.str]] = None,
                 joined_at: Optional[pulumi.Input[_builtins.str]] = None,
                 message: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] resource_id: Specifies the resource ID.
        :param pulumi.Input[_builtins.str] created_by: The creator of a remediation exception.
        :param pulumi.Input[_builtins.str] joined_at: The time when a remediation exception is added.
        :param pulumi.Input[_builtins.str] message: Specifies the reason for adding an exception.
        """
        pulumi.set(__self__, "resource_id", resource_id)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if joined_at is not None:
            pulumi.set(__self__, "joined_at", joined_at)
        if message is not None:
            pulumi.set(__self__, "message", message)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the resource ID.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "resource_id", value)

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creator of a remediation exception.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_by", value)

    @_builtins.property
    @pulumi.getter(name="joinedAt")
    def joined_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The time when a remediation exception is added.
        """
        return pulumi.get(self, "joined_at")

    @joined_at.setter
    def joined_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "joined_at", value)

    @_builtins.property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the reason for adding an exception.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "message", value)


if not MYPY:
    class RemediationExecutionResultArgsDict(TypedDict):
        automatic: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Whether the remediation is automatic.
        """
        invocation_time: NotRequired[pulumi.Input[_builtins.str]]
        """
        The start time of remediation.
        """
        message: NotRequired[pulumi.Input[_builtins.str]]
        """
        The information of remediation execution.
        """
        resource_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The resource ID.
        """
        resource_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The resource name.
        """
        resource_provider: NotRequired[pulumi.Input[_builtins.str]]
        """
        The cloud service name.
        """
        resource_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        The resource type.
        """
        state: NotRequired[pulumi.Input[_builtins.str]]
        """
        The execution state of remediation.
        """
elif False:
    RemediationExecutionResultArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RemediationExecutionResultArgs:
    def __init__(__self__, *,
                 automatic: Optional[pulumi.Input[_builtins.bool]] = None,
                 invocation_time: Optional[pulumi.Input[_builtins.str]] = None,
                 message: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_provider: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 state: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] automatic: Whether the remediation is automatic.
        :param pulumi.Input[_builtins.str] invocation_time: The start time of remediation.
        :param pulumi.Input[_builtins.str] message: The information of remediation execution.
        :param pulumi.Input[_builtins.str] resource_id: The resource ID.
        :param pulumi.Input[_builtins.str] resource_name: The resource name.
        :param pulumi.Input[_builtins.str] resource_provider: The cloud service name.
        :param pulumi.Input[_builtins.str] resource_type: The resource type.
        :param pulumi.Input[_builtins.str] state: The execution state of remediation.
        """
        if automatic is not None:
            pulumi.set(__self__, "automatic", automatic)
        if invocation_time is not None:
            pulumi.set(__self__, "invocation_time", invocation_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if resource_provider is not None:
            pulumi.set(__self__, "resource_provider", resource_provider)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter
    def automatic(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether the remediation is automatic.
        """
        return pulumi.get(self, "automatic")

    @automatic.setter
    def automatic(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "automatic", value)

    @_builtins.property
    @pulumi.getter(name="invocationTime")
    def invocation_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The start time of remediation.
        """
        return pulumi.get(self, "invocation_time")

    @invocation_time.setter
    def invocation_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "invocation_time", value)

    @_builtins.property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The information of remediation execution.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "message", value)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource ID.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource name.
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_name", value)

    @_builtins.property
    @pulumi.getter(name="resourceProvider")
    def resource_provider(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The cloud service name.
        """
        return pulumi.get(self, "resource_provider")

    @resource_provider.setter
    def resource_provider(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_provider", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource type.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The execution state of remediation.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "state", value)


if not MYPY:
    class ResourceRecorderObsChannelArgsDict(TypedDict):
        bucket: pulumi.Input[_builtins.str]
        """
        Specifies the OBS bucket name used for data dumping.
        """
        region: pulumi.Input[_builtins.str]
        """
        Specifies the region where this SMN topic is located.
        """
elif False:
    ResourceRecorderObsChannelArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ResourceRecorderObsChannelArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[_builtins.str],
                 region: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] bucket: Specifies the OBS bucket name used for data dumping.
        :param pulumi.Input[_builtins.str] region: Specifies the region where this SMN topic is located.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the OBS bucket name used for data dumping.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "bucket", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the region where this SMN topic is located.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "region", value)


if not MYPY:
    class ResourceRecorderSelectorArgsDict(TypedDict):
        all_supported: pulumi.Input[_builtins.bool]
        """
        Specifies whether to select all supported resources.
        """
        resource_types: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Specifies the resource type list. For details about the supported services and
        resource types, see [Supported Services and Resource Types](https://support.huaweicloud.com/intl/en-us/api-rms/rms_06_0100.html).

        <a name="Recorder_TrackerOBSChannelConfigBody"></a>
        The `obs_channel` block supports:
        """
elif False:
    ResourceRecorderSelectorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ResourceRecorderSelectorArgs:
    def __init__(__self__, *,
                 all_supported: pulumi.Input[_builtins.bool],
                 resource_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input[_builtins.bool] all_supported: Specifies whether to select all supported resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] resource_types: Specifies the resource type list. For details about the supported services and
               resource types, see [Supported Services and Resource Types](https://support.huaweicloud.com/intl/en-us/api-rms/rms_06_0100.html).
               
               <a name="Recorder_TrackerOBSChannelConfigBody"></a>
               The `obs_channel` block supports:
        """
        pulumi.set(__self__, "all_supported", all_supported)
        if resource_types is not None:
            pulumi.set(__self__, "resource_types", resource_types)

    @_builtins.property
    @pulumi.getter(name="allSupported")
    def all_supported(self) -> pulumi.Input[_builtins.bool]:
        """
        Specifies whether to select all supported resources.
        """
        return pulumi.get(self, "all_supported")

    @all_supported.setter
    def all_supported(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "all_supported", value)

    @_builtins.property
    @pulumi.getter(name="resourceTypes")
    def resource_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the resource type list. For details about the supported services and
        resource types, see [Supported Services and Resource Types](https://support.huaweicloud.com/intl/en-us/api-rms/rms_06_0100.html).

        <a name="Recorder_TrackerOBSChannelConfigBody"></a>
        The `obs_channel` block supports:
        """
        return pulumi.get(self, "resource_types")

    @resource_types.setter
    def resource_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "resource_types", value)


if not MYPY:
    class ResourceRecorderSmnChannelArgsDict(TypedDict):
        topic_urn: pulumi.Input[_builtins.str]
        """
        Specifies the SMN topic URN used to send notifications.
        """
        project_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the project ID where this SMN topic is located.
        """
        region: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the region where this SMN topic is located.
        """
elif False:
    ResourceRecorderSmnChannelArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ResourceRecorderSmnChannelArgs:
    def __init__(__self__, *,
                 topic_urn: pulumi.Input[_builtins.str],
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] topic_urn: Specifies the SMN topic URN used to send notifications.
        :param pulumi.Input[_builtins.str] project_id: Specifies the project ID where this SMN topic is located.
        :param pulumi.Input[_builtins.str] region: Specifies the region where this SMN topic is located.
        """
        pulumi.set(__self__, "topic_urn", topic_urn)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="topicUrn")
    def topic_urn(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the SMN topic URN used to send notifications.
        """
        return pulumi.get(self, "topic_urn")

    @topic_urn.setter
    def topic_urn(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "topic_urn", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the project ID where this SMN topic is located.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region where this SMN topic is located.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


if not MYPY:
    class GetRemediationExecutionStatusesResourceKeyArgsDict(TypedDict):
        resource_id: _builtins.str
        """
        The resource ID.
        """
        resource_provider: _builtins.str
        """
        The cloud service name.
        """
        resource_type: _builtins.str
        """
        The resource type.
        """
elif False:
    GetRemediationExecutionStatusesResourceKeyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetRemediationExecutionStatusesResourceKeyArgs:
    def __init__(__self__, *,
                 resource_id: _builtins.str,
                 resource_provider: _builtins.str,
                 resource_type: _builtins.str):
        """
        :param _builtins.str resource_id: The resource ID.
        :param _builtins.str resource_provider: The cloud service name.
        :param _builtins.str resource_type: The resource type.
        """
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_provider", resource_provider)
        pulumi.set(__self__, "resource_type", resource_type)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        The resource ID.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: _builtins.str):
        pulumi.set(self, "resource_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceProvider")
    def resource_provider(self) -> _builtins.str:
        """
        The cloud service name.
        """
        return pulumi.get(self, "resource_provider")

    @resource_provider.setter
    def resource_provider(self, value: _builtins.str):
        pulumi.set(self, "resource_provider", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        """
        The resource type.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: _builtins.str):
        pulumi.set(self, "resource_type", value)


if not MYPY:
    class GetResourceAggregatorDiscoveredResourcesFilterArgsDict(TypedDict):
        account_id: NotRequired[_builtins.str]
        """
        Specifies the ID of account to which the resource belongs.
        """
        region_id: NotRequired[_builtins.str]
        """
        Specifies the ID of region to which the resource belongs.
        """
        resource_id: NotRequired[_builtins.str]
        """
        Specifies resource ID.
        """
        resource_name: NotRequired[_builtins.str]
        """
        Specifies resource name.
        """
elif False:
    GetResourceAggregatorDiscoveredResourcesFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetResourceAggregatorDiscoveredResourcesFilterArgs:
    def __init__(__self__, *,
                 account_id: Optional[_builtins.str] = None,
                 region_id: Optional[_builtins.str] = None,
                 resource_id: Optional[_builtins.str] = None,
                 resource_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str account_id: Specifies the ID of account to which the resource belongs.
        :param _builtins.str region_id: Specifies the ID of region to which the resource belongs.
        :param _builtins.str resource_id: Specifies resource ID.
        :param _builtins.str resource_name: Specifies resource name.
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if region_id is not None:
            pulumi.set(__self__, "region_id", region_id)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[_builtins.str]:
        """
        Specifies the ID of account to which the resource belongs.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[_builtins.str]):
        pulumi.set(self, "account_id", value)

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> Optional[_builtins.str]:
        """
        Specifies the ID of region to which the resource belongs.
        """
        return pulumi.get(self, "region_id")

    @region_id.setter
    def region_id(self, value: Optional[_builtins.str]):
        pulumi.set(self, "region_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[_builtins.str]:
        """
        Specifies resource ID.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[_builtins.str]):
        pulumi.set(self, "resource_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[_builtins.str]:
        """
        Specifies resource name.
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[_builtins.str]):
        pulumi.set(self, "resource_name", value)


if not MYPY:
    class GetResourceAggregatorPolicyAssignmentsFilterArgsDict(TypedDict):
        account_id: NotRequired[_builtins.str]
        """
        Specifies the ID of account to which the resource belongs.
        """
        compliance_state: NotRequired[_builtins.str]
        """
        Specifies the compliance state.
        The value can be: **Compliant** and **NonCompliant**.
        """
        policy_assignment_name: NotRequired[_builtins.str]
        """
        Specifies the policy assignment name.
        """
elif False:
    GetResourceAggregatorPolicyAssignmentsFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetResourceAggregatorPolicyAssignmentsFilterArgs:
    def __init__(__self__, *,
                 account_id: Optional[_builtins.str] = None,
                 compliance_state: Optional[_builtins.str] = None,
                 policy_assignment_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str account_id: Specifies the ID of account to which the resource belongs.
        :param _builtins.str compliance_state: Specifies the compliance state.
               The value can be: **Compliant** and **NonCompliant**.
        :param _builtins.str policy_assignment_name: Specifies the policy assignment name.
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if compliance_state is not None:
            pulumi.set(__self__, "compliance_state", compliance_state)
        if policy_assignment_name is not None:
            pulumi.set(__self__, "policy_assignment_name", policy_assignment_name)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[_builtins.str]:
        """
        Specifies the ID of account to which the resource belongs.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[_builtins.str]):
        pulumi.set(self, "account_id", value)

    @_builtins.property
    @pulumi.getter(name="complianceState")
    def compliance_state(self) -> Optional[_builtins.str]:
        """
        Specifies the compliance state.
        The value can be: **Compliant** and **NonCompliant**.
        """
        return pulumi.get(self, "compliance_state")

    @compliance_state.setter
    def compliance_state(self, value: Optional[_builtins.str]):
        pulumi.set(self, "compliance_state", value)

    @_builtins.property
    @pulumi.getter(name="policyAssignmentName")
    def policy_assignment_name(self) -> Optional[_builtins.str]:
        """
        Specifies the policy assignment name.
        """
        return pulumi.get(self, "policy_assignment_name")

    @policy_assignment_name.setter
    def policy_assignment_name(self, value: Optional[_builtins.str]):
        pulumi.set(self, "policy_assignment_name", value)


if not MYPY:
    class GetResourceInstancesTagArgsDict(TypedDict):
        key: _builtins.str
        """
        Specifies the tag key.
        """
        values: Sequence[_builtins.str]
        """
        Specifies the tag values.
        """
elif False:
    GetResourceInstancesTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetResourceInstancesTagArgs:
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str key: Specifies the tag key.
        :param Sequence[_builtins.str] values: Specifies the tag values.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Specifies the tag key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: _builtins.str):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Specifies the tag values.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[_builtins.str]):
        pulumi.set(self, "values", value)


