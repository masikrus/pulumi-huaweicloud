# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RemediationConfigurationArgs', 'RemediationConfiguration']

@pulumi.input_type
class RemediationConfigurationArgs:
    def __init__(__self__, *,
                 policy_assignment_id: pulumi.Input[_builtins.str],
                 resource_parameter: pulumi.Input['RemediationConfigurationResourceParameterArgs'],
                 target_id: pulumi.Input[_builtins.str],
                 target_type: pulumi.Input[_builtins.str],
                 auth_type: Optional[pulumi.Input[_builtins.str]] = None,
                 auth_value: Optional[pulumi.Input[_builtins.str]] = None,
                 automatic: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 maximum_attempts: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 retry_attempt_seconds: Optional[pulumi.Input[_builtins.int]] = None,
                 static_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['RemediationConfigurationStaticParameterArgs']]]] = None):
        """
        The set of arguments for constructing a RemediationConfiguration resource.
        :param pulumi.Input[_builtins.str] policy_assignment_id: Specifies the policy assignment ID.
        :param pulumi.Input['RemediationConfigurationResourceParameterArgs'] resource_parameter: Specifies the dynamic parameter of remediation.
               
               The resource_parameter structure is documented below.
        :param pulumi.Input[_builtins.str] target_id: Specifies the ID of a remediation object.
               + If the execution method is **fgs**, the value is a function URN.
               + If the execution method is **rfs**, the value is the name and version ID that separated by a slash (/).
               If the version is not specified, V1 is used by default.
        :param pulumi.Input[_builtins.str] target_type: Specifies the execution method of remediation.
               The valid value can be **fgs** or **rfs**.
        :param pulumi.Input[_builtins.str] auth_type: Specifies the authorization type for remediation configurations.
               The valid value can be **agency** or **trustAgency**.
        :param pulumi.Input[_builtins.str] auth_value: Specifies the information of dependent service authorization.
        :param pulumi.Input[_builtins.bool] automatic: Specifies whether remediation is automatic.
               The default value is **false**.
        :param pulumi.Input[_builtins.int] maximum_attempts: Specifies the maximum number of retries allowed within a specified period.
               The maximum value is **25**. The minimum value is **1**. The default value is **5**.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[_builtins.int] retry_attempt_seconds: Specifies the time period during which the number of attempts specified
               in the `maximum_attempts` can be tried.
               The maximum value is **43200**. The minimum value is **60**. The default value is **3600**.
               If remediation retries exceed the limit, corresponding resources will be classified as exceptions of remediation.
               
               <a name="resource_parameter_struct"></a>
               The `resource_parameter` block supports:
        :param pulumi.Input[Sequence[pulumi.Input['RemediationConfigurationStaticParameterArgs']]] static_parameters: Specifies the static parameters for the remediation execution.
               
               The static_parameter structure is documented below.
        """
        pulumi.set(__self__, "policy_assignment_id", policy_assignment_id)
        pulumi.set(__self__, "resource_parameter", resource_parameter)
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "target_type", target_type)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if auth_value is not None:
            pulumi.set(__self__, "auth_value", auth_value)
        if automatic is not None:
            pulumi.set(__self__, "automatic", automatic)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if maximum_attempts is not None:
            pulumi.set(__self__, "maximum_attempts", maximum_attempts)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if retry_attempt_seconds is not None:
            pulumi.set(__self__, "retry_attempt_seconds", retry_attempt_seconds)
        if static_parameters is not None:
            pulumi.set(__self__, "static_parameters", static_parameters)

    @_builtins.property
    @pulumi.getter(name="policyAssignmentId")
    def policy_assignment_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the policy assignment ID.
        """
        return pulumi.get(self, "policy_assignment_id")

    @policy_assignment_id.setter
    def policy_assignment_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "policy_assignment_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceParameter")
    def resource_parameter(self) -> pulumi.Input['RemediationConfigurationResourceParameterArgs']:
        """
        Specifies the dynamic parameter of remediation.

        The resource_parameter structure is documented below.
        """
        return pulumi.get(self, "resource_parameter")

    @resource_parameter.setter
    def resource_parameter(self, value: pulumi.Input['RemediationConfigurationResourceParameterArgs']):
        pulumi.set(self, "resource_parameter", value)

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of a remediation object.
        + If the execution method is **fgs**, the value is a function URN.
        + If the execution method is **rfs**, the value is the name and version ID that separated by a slash (/).
        If the version is not specified, V1 is used by default.
        """
        return pulumi.get(self, "target_id")

    @target_id.setter
    def target_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "target_id", value)

    @_builtins.property
    @pulumi.getter(name="targetType")
    def target_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the execution method of remediation.
        The valid value can be **fgs** or **rfs**.
        """
        return pulumi.get(self, "target_type")

    @target_type.setter
    def target_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "target_type", value)

    @_builtins.property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the authorization type for remediation configurations.
        The valid value can be **agency** or **trustAgency**.
        """
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auth_type", value)

    @_builtins.property
    @pulumi.getter(name="authValue")
    def auth_value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the information of dependent service authorization.
        """
        return pulumi.get(self, "auth_value")

    @auth_value.setter
    def auth_value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auth_value", value)

    @_builtins.property
    @pulumi.getter
    def automatic(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether remediation is automatic.
        The default value is **false**.
        """
        return pulumi.get(self, "automatic")

    @automatic.setter
    def automatic(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "automatic", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="maximumAttempts")
    def maximum_attempts(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the maximum number of retries allowed within a specified period.
        The maximum value is **25**. The minimum value is **1**. The default value is **5**.
        """
        return pulumi.get(self, "maximum_attempts")

    @maximum_attempts.setter
    def maximum_attempts(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "maximum_attempts", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="retryAttemptSeconds")
    def retry_attempt_seconds(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the time period during which the number of attempts specified
        in the `maximum_attempts` can be tried.
        The maximum value is **43200**. The minimum value is **60**. The default value is **3600**.
        If remediation retries exceed the limit, corresponding resources will be classified as exceptions of remediation.

        <a name="resource_parameter_struct"></a>
        The `resource_parameter` block supports:
        """
        return pulumi.get(self, "retry_attempt_seconds")

    @retry_attempt_seconds.setter
    def retry_attempt_seconds(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "retry_attempt_seconds", value)

    @_builtins.property
    @pulumi.getter(name="staticParameters")
    def static_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RemediationConfigurationStaticParameterArgs']]]]:
        """
        Specifies the static parameters for the remediation execution.

        The static_parameter structure is documented below.
        """
        return pulumi.get(self, "static_parameters")

    @static_parameters.setter
    def static_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RemediationConfigurationStaticParameterArgs']]]]):
        pulumi.set(self, "static_parameters", value)


@pulumi.input_type
class _RemediationConfigurationState:
    def __init__(__self__, *,
                 auth_type: Optional[pulumi.Input[_builtins.str]] = None,
                 auth_value: Optional[pulumi.Input[_builtins.str]] = None,
                 automatic: Optional[pulumi.Input[_builtins.bool]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 created_by: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 maximum_attempts: Optional[pulumi.Input[_builtins.int]] = None,
                 policy_assignment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_parameter: Optional[pulumi.Input['RemediationConfigurationResourceParameterArgs']] = None,
                 retry_attempt_seconds: Optional[pulumi.Input[_builtins.int]] = None,
                 static_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['RemediationConfigurationStaticParameterArgs']]]] = None,
                 target_id: Optional[pulumi.Input[_builtins.str]] = None,
                 target_type: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering RemediationConfiguration resources.
        :param pulumi.Input[_builtins.str] auth_type: Specifies the authorization type for remediation configurations.
               The valid value can be **agency** or **trustAgency**.
        :param pulumi.Input[_builtins.str] auth_value: Specifies the information of dependent service authorization.
        :param pulumi.Input[_builtins.bool] automatic: Specifies whether remediation is automatic.
               The default value is **false**.
        :param pulumi.Input[_builtins.str] created_at: The time when the remediation configuration was created.
        :param pulumi.Input[_builtins.str] created_by: The user who created the remediation configuration.
        :param pulumi.Input[_builtins.int] maximum_attempts: Specifies the maximum number of retries allowed within a specified period.
               The maximum value is **25**. The minimum value is **1**. The default value is **5**.
        :param pulumi.Input[_builtins.str] policy_assignment_id: Specifies the policy assignment ID.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input['RemediationConfigurationResourceParameterArgs'] resource_parameter: Specifies the dynamic parameter of remediation.
               
               The resource_parameter structure is documented below.
        :param pulumi.Input[_builtins.int] retry_attempt_seconds: Specifies the time period during which the number of attempts specified
               in the `maximum_attempts` can be tried.
               The maximum value is **43200**. The minimum value is **60**. The default value is **3600**.
               If remediation retries exceed the limit, corresponding resources will be classified as exceptions of remediation.
               
               <a name="resource_parameter_struct"></a>
               The `resource_parameter` block supports:
        :param pulumi.Input[Sequence[pulumi.Input['RemediationConfigurationStaticParameterArgs']]] static_parameters: Specifies the static parameters for the remediation execution.
               
               The static_parameter structure is documented below.
        :param pulumi.Input[_builtins.str] target_id: Specifies the ID of a remediation object.
               + If the execution method is **fgs**, the value is a function URN.
               + If the execution method is **rfs**, the value is the name and version ID that separated by a slash (/).
               If the version is not specified, V1 is used by default.
        :param pulumi.Input[_builtins.str] target_type: Specifies the execution method of remediation.
               The valid value can be **fgs** or **rfs**.
        :param pulumi.Input[_builtins.str] updated_at: The time when the remediation configuration was updated.
        """
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if auth_value is not None:
            pulumi.set(__self__, "auth_value", auth_value)
        if automatic is not None:
            pulumi.set(__self__, "automatic", automatic)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if maximum_attempts is not None:
            pulumi.set(__self__, "maximum_attempts", maximum_attempts)
        if policy_assignment_id is not None:
            pulumi.set(__self__, "policy_assignment_id", policy_assignment_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_parameter is not None:
            pulumi.set(__self__, "resource_parameter", resource_parameter)
        if retry_attempt_seconds is not None:
            pulumi.set(__self__, "retry_attempt_seconds", retry_attempt_seconds)
        if static_parameters is not None:
            pulumi.set(__self__, "static_parameters", static_parameters)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)
        if target_type is not None:
            pulumi.set(__self__, "target_type", target_type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the authorization type for remediation configurations.
        The valid value can be **agency** or **trustAgency**.
        """
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auth_type", value)

    @_builtins.property
    @pulumi.getter(name="authValue")
    def auth_value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the information of dependent service authorization.
        """
        return pulumi.get(self, "auth_value")

    @auth_value.setter
    def auth_value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auth_value", value)

    @_builtins.property
    @pulumi.getter
    def automatic(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether remediation is automatic.
        The default value is **false**.
        """
        return pulumi.get(self, "automatic")

    @automatic.setter
    def automatic(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "automatic", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The time when the remediation configuration was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user who created the remediation configuration.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_by", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="maximumAttempts")
    def maximum_attempts(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the maximum number of retries allowed within a specified period.
        The maximum value is **25**. The minimum value is **1**. The default value is **5**.
        """
        return pulumi.get(self, "maximum_attempts")

    @maximum_attempts.setter
    def maximum_attempts(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "maximum_attempts", value)

    @_builtins.property
    @pulumi.getter(name="policyAssignmentId")
    def policy_assignment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the policy assignment ID.
        """
        return pulumi.get(self, "policy_assignment_id")

    @policy_assignment_id.setter
    def policy_assignment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policy_assignment_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="resourceParameter")
    def resource_parameter(self) -> Optional[pulumi.Input['RemediationConfigurationResourceParameterArgs']]:
        """
        Specifies the dynamic parameter of remediation.

        The resource_parameter structure is documented below.
        """
        return pulumi.get(self, "resource_parameter")

    @resource_parameter.setter
    def resource_parameter(self, value: Optional[pulumi.Input['RemediationConfigurationResourceParameterArgs']]):
        pulumi.set(self, "resource_parameter", value)

    @_builtins.property
    @pulumi.getter(name="retryAttemptSeconds")
    def retry_attempt_seconds(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specifies the time period during which the number of attempts specified
        in the `maximum_attempts` can be tried.
        The maximum value is **43200**. The minimum value is **60**. The default value is **3600**.
        If remediation retries exceed the limit, corresponding resources will be classified as exceptions of remediation.

        <a name="resource_parameter_struct"></a>
        The `resource_parameter` block supports:
        """
        return pulumi.get(self, "retry_attempt_seconds")

    @retry_attempt_seconds.setter
    def retry_attempt_seconds(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "retry_attempt_seconds", value)

    @_builtins.property
    @pulumi.getter(name="staticParameters")
    def static_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RemediationConfigurationStaticParameterArgs']]]]:
        """
        Specifies the static parameters for the remediation execution.

        The static_parameter structure is documented below.
        """
        return pulumi.get(self, "static_parameters")

    @static_parameters.setter
    def static_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RemediationConfigurationStaticParameterArgs']]]]):
        pulumi.set(self, "static_parameters", value)

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of a remediation object.
        + If the execution method is **fgs**, the value is a function URN.
        + If the execution method is **rfs**, the value is the name and version ID that separated by a slash (/).
        If the version is not specified, V1 is used by default.
        """
        return pulumi.get(self, "target_id")

    @target_id.setter
    def target_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_id", value)

    @_builtins.property
    @pulumi.getter(name="targetType")
    def target_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the execution method of remediation.
        The valid value can be **fgs** or **rfs**.
        """
        return pulumi.get(self, "target_type")

    @target_type.setter
    def target_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_type", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The time when the remediation configuration was updated.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("huaweicloud:rms/remediationConfiguration:RemediationConfiguration")
class RemediationConfiguration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_type: Optional[pulumi.Input[_builtins.str]] = None,
                 auth_value: Optional[pulumi.Input[_builtins.str]] = None,
                 automatic: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 maximum_attempts: Optional[pulumi.Input[_builtins.int]] = None,
                 policy_assignment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_parameter: Optional[pulumi.Input[Union['RemediationConfigurationResourceParameterArgs', 'RemediationConfigurationResourceParameterArgsDict']]] = None,
                 retry_attempt_seconds: Optional[pulumi.Input[_builtins.int]] = None,
                 static_parameters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RemediationConfigurationStaticParameterArgs', 'RemediationConfigurationStaticParameterArgsDict']]]]] = None,
                 target_id: Optional[pulumi.Input[_builtins.str]] = None,
                 target_type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a RMS remediation configuration resource within HuaweiCloud.

        ## Import

        The RMS remediation configuration can be imported by using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:rms/remediationConfiguration:RemediationConfiguration test <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] auth_type: Specifies the authorization type for remediation configurations.
               The valid value can be **agency** or **trustAgency**.
        :param pulumi.Input[_builtins.str] auth_value: Specifies the information of dependent service authorization.
        :param pulumi.Input[_builtins.bool] automatic: Specifies whether remediation is automatic.
               The default value is **false**.
        :param pulumi.Input[_builtins.int] maximum_attempts: Specifies the maximum number of retries allowed within a specified period.
               The maximum value is **25**. The minimum value is **1**. The default value is **5**.
        :param pulumi.Input[_builtins.str] policy_assignment_id: Specifies the policy assignment ID.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[Union['RemediationConfigurationResourceParameterArgs', 'RemediationConfigurationResourceParameterArgsDict']] resource_parameter: Specifies the dynamic parameter of remediation.
               
               The resource_parameter structure is documented below.
        :param pulumi.Input[_builtins.int] retry_attempt_seconds: Specifies the time period during which the number of attempts specified
               in the `maximum_attempts` can be tried.
               The maximum value is **43200**. The minimum value is **60**. The default value is **3600**.
               If remediation retries exceed the limit, corresponding resources will be classified as exceptions of remediation.
               
               <a name="resource_parameter_struct"></a>
               The `resource_parameter` block supports:
        :param pulumi.Input[Sequence[pulumi.Input[Union['RemediationConfigurationStaticParameterArgs', 'RemediationConfigurationStaticParameterArgsDict']]]] static_parameters: Specifies the static parameters for the remediation execution.
               
               The static_parameter structure is documented below.
        :param pulumi.Input[_builtins.str] target_id: Specifies the ID of a remediation object.
               + If the execution method is **fgs**, the value is a function URN.
               + If the execution method is **rfs**, the value is the name and version ID that separated by a slash (/).
               If the version is not specified, V1 is used by default.
        :param pulumi.Input[_builtins.str] target_type: Specifies the execution method of remediation.
               The valid value can be **fgs** or **rfs**.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RemediationConfigurationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a RMS remediation configuration resource within HuaweiCloud.

        ## Import

        The RMS remediation configuration can be imported by using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:rms/remediationConfiguration:RemediationConfiguration test <id>
        ```

        :param str resource_name: The name of the resource.
        :param RemediationConfigurationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RemediationConfigurationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_type: Optional[pulumi.Input[_builtins.str]] = None,
                 auth_value: Optional[pulumi.Input[_builtins.str]] = None,
                 automatic: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 maximum_attempts: Optional[pulumi.Input[_builtins.int]] = None,
                 policy_assignment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_parameter: Optional[pulumi.Input[Union['RemediationConfigurationResourceParameterArgs', 'RemediationConfigurationResourceParameterArgsDict']]] = None,
                 retry_attempt_seconds: Optional[pulumi.Input[_builtins.int]] = None,
                 static_parameters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RemediationConfigurationStaticParameterArgs', 'RemediationConfigurationStaticParameterArgsDict']]]]] = None,
                 target_id: Optional[pulumi.Input[_builtins.str]] = None,
                 target_type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RemediationConfigurationArgs.__new__(RemediationConfigurationArgs)

            __props__.__dict__["auth_type"] = auth_type
            __props__.__dict__["auth_value"] = auth_value
            __props__.__dict__["automatic"] = automatic
            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["maximum_attempts"] = maximum_attempts
            if policy_assignment_id is None and not opts.urn:
                raise TypeError("Missing required property 'policy_assignment_id'")
            __props__.__dict__["policy_assignment_id"] = policy_assignment_id
            __props__.__dict__["region"] = region
            if resource_parameter is None and not opts.urn:
                raise TypeError("Missing required property 'resource_parameter'")
            __props__.__dict__["resource_parameter"] = resource_parameter
            __props__.__dict__["retry_attempt_seconds"] = retry_attempt_seconds
            __props__.__dict__["static_parameters"] = static_parameters
            if target_id is None and not opts.urn:
                raise TypeError("Missing required property 'target_id'")
            __props__.__dict__["target_id"] = target_id
            if target_type is None and not opts.urn:
                raise TypeError("Missing required property 'target_type'")
            __props__.__dict__["target_type"] = target_type
            __props__.__dict__["created_at"] = None
            __props__.__dict__["created_by"] = None
            __props__.__dict__["updated_at"] = None
        super(RemediationConfiguration, __self__).__init__(
            'huaweicloud:rms/remediationConfiguration:RemediationConfiguration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auth_type: Optional[pulumi.Input[_builtins.str]] = None,
            auth_value: Optional[pulumi.Input[_builtins.str]] = None,
            automatic: Optional[pulumi.Input[_builtins.bool]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            created_by: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            maximum_attempts: Optional[pulumi.Input[_builtins.int]] = None,
            policy_assignment_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            resource_parameter: Optional[pulumi.Input[Union['RemediationConfigurationResourceParameterArgs', 'RemediationConfigurationResourceParameterArgsDict']]] = None,
            retry_attempt_seconds: Optional[pulumi.Input[_builtins.int]] = None,
            static_parameters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RemediationConfigurationStaticParameterArgs', 'RemediationConfigurationStaticParameterArgsDict']]]]] = None,
            target_id: Optional[pulumi.Input[_builtins.str]] = None,
            target_type: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None) -> 'RemediationConfiguration':
        """
        Get an existing RemediationConfiguration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] auth_type: Specifies the authorization type for remediation configurations.
               The valid value can be **agency** or **trustAgency**.
        :param pulumi.Input[_builtins.str] auth_value: Specifies the information of dependent service authorization.
        :param pulumi.Input[_builtins.bool] automatic: Specifies whether remediation is automatic.
               The default value is **false**.
        :param pulumi.Input[_builtins.str] created_at: The time when the remediation configuration was created.
        :param pulumi.Input[_builtins.str] created_by: The user who created the remediation configuration.
        :param pulumi.Input[_builtins.int] maximum_attempts: Specifies the maximum number of retries allowed within a specified period.
               The maximum value is **25**. The minimum value is **1**. The default value is **5**.
        :param pulumi.Input[_builtins.str] policy_assignment_id: Specifies the policy assignment ID.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used. Changing this will create new resource.
        :param pulumi.Input[Union['RemediationConfigurationResourceParameterArgs', 'RemediationConfigurationResourceParameterArgsDict']] resource_parameter: Specifies the dynamic parameter of remediation.
               
               The resource_parameter structure is documented below.
        :param pulumi.Input[_builtins.int] retry_attempt_seconds: Specifies the time period during which the number of attempts specified
               in the `maximum_attempts` can be tried.
               The maximum value is **43200**. The minimum value is **60**. The default value is **3600**.
               If remediation retries exceed the limit, corresponding resources will be classified as exceptions of remediation.
               
               <a name="resource_parameter_struct"></a>
               The `resource_parameter` block supports:
        :param pulumi.Input[Sequence[pulumi.Input[Union['RemediationConfigurationStaticParameterArgs', 'RemediationConfigurationStaticParameterArgsDict']]]] static_parameters: Specifies the static parameters for the remediation execution.
               
               The static_parameter structure is documented below.
        :param pulumi.Input[_builtins.str] target_id: Specifies the ID of a remediation object.
               + If the execution method is **fgs**, the value is a function URN.
               + If the execution method is **rfs**, the value is the name and version ID that separated by a slash (/).
               If the version is not specified, V1 is used by default.
        :param pulumi.Input[_builtins.str] target_type: Specifies the execution method of remediation.
               The valid value can be **fgs** or **rfs**.
        :param pulumi.Input[_builtins.str] updated_at: The time when the remediation configuration was updated.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RemediationConfigurationState.__new__(_RemediationConfigurationState)

        __props__.__dict__["auth_type"] = auth_type
        __props__.__dict__["auth_value"] = auth_value
        __props__.__dict__["automatic"] = automatic
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["created_by"] = created_by
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["maximum_attempts"] = maximum_attempts
        __props__.__dict__["policy_assignment_id"] = policy_assignment_id
        __props__.__dict__["region"] = region
        __props__.__dict__["resource_parameter"] = resource_parameter
        __props__.__dict__["retry_attempt_seconds"] = retry_attempt_seconds
        __props__.__dict__["static_parameters"] = static_parameters
        __props__.__dict__["target_id"] = target_id
        __props__.__dict__["target_type"] = target_type
        __props__.__dict__["updated_at"] = updated_at
        return RemediationConfiguration(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the authorization type for remediation configurations.
        The valid value can be **agency** or **trustAgency**.
        """
        return pulumi.get(self, "auth_type")

    @_builtins.property
    @pulumi.getter(name="authValue")
    def auth_value(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the information of dependent service authorization.
        """
        return pulumi.get(self, "auth_value")

    @_builtins.property
    @pulumi.getter
    def automatic(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether remediation is automatic.
        The default value is **false**.
        """
        return pulumi.get(self, "automatic")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The time when the remediation configuration was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> pulumi.Output[_builtins.str]:
        """
        The user who created the remediation configuration.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="maximumAttempts")
    def maximum_attempts(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the maximum number of retries allowed within a specified period.
        The maximum value is **25**. The minimum value is **1**. The default value is **5**.
        """
        return pulumi.get(self, "maximum_attempts")

    @_builtins.property
    @pulumi.getter(name="policyAssignmentId")
    def policy_assignment_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the policy assignment ID.
        """
        return pulumi.get(self, "policy_assignment_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used. Changing this will create new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceParameter")
    def resource_parameter(self) -> pulumi.Output['outputs.RemediationConfigurationResourceParameter']:
        """
        Specifies the dynamic parameter of remediation.

        The resource_parameter structure is documented below.
        """
        return pulumi.get(self, "resource_parameter")

    @_builtins.property
    @pulumi.getter(name="retryAttemptSeconds")
    def retry_attempt_seconds(self) -> pulumi.Output[_builtins.int]:
        """
        Specifies the time period during which the number of attempts specified
        in the `maximum_attempts` can be tried.
        The maximum value is **43200**. The minimum value is **60**. The default value is **3600**.
        If remediation retries exceed the limit, corresponding resources will be classified as exceptions of remediation.

        <a name="resource_parameter_struct"></a>
        The `resource_parameter` block supports:
        """
        return pulumi.get(self, "retry_attempt_seconds")

    @_builtins.property
    @pulumi.getter(name="staticParameters")
    def static_parameters(self) -> pulumi.Output[Optional[Sequence['outputs.RemediationConfigurationStaticParameter']]]:
        """
        Specifies the static parameters for the remediation execution.

        The static_parameter structure is documented below.
        """
        return pulumi.get(self, "static_parameters")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of a remediation object.
        + If the execution method is **fgs**, the value is a function URN.
        + If the execution method is **rfs**, the value is the name and version ID that separated by a slash (/).
        If the version is not specified, V1 is used by default.
        """
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="targetType")
    def target_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the execution method of remediation.
        The valid value can be **fgs** or **rfs**.
        """
        return pulumi.get(self, "target_type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The time when the remediation configuration was updated.
        """
        return pulumi.get(self, "updated_at")

