# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AssignmentPackageArgs', 'AssignmentPackage']

@pulumi.input_type
class AssignmentPackageArgs:
    def __init__(__self__, *,
                 agency_name: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 template_body: Optional[pulumi.Input[_builtins.str]] = None,
                 template_key: Optional[pulumi.Input[_builtins.str]] = None,
                 template_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 vars_structures: Optional[pulumi.Input[Sequence[pulumi.Input['AssignmentPackageVarsStructureArgs']]]] = None):
        """
        The set of arguments for constructing a AssignmentPackage resource.
        :param pulumi.Input[_builtins.str] agency_name: Specifies the agency name. The agency needs to authorize RFS to invoke
               the Config APIs for creating, updating, deleting an assignment. It contains 1 to 64 characters.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the assignment package name. It contains 1 to 64 characters.
        :param pulumi.Input[_builtins.str] template_body: Specifies the content of a custom assignment package. It contains 1 to
               51200 characters.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] template_key: Specifies the name of a built-in assignment package template. It
               contains 1 to 128 characters.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] template_uri: Specifies the URL address of the OBS bucket where an assignment package
               template was stored. It contains 1 to 1024 characters.
               
               Changing this parameter will create a new resource.
               
               > **NOTE:** Exactly one of `template_key`, `template_body`, `template_uri` should be specified.
        :param pulumi.Input[Sequence[pulumi.Input['AssignmentPackageVarsStructureArgs']]] vars_structures: Specifies the parameters of an assignment package.
               
               The vars_structure structure is documented below.
               
               <a name="AssignmentPackage_VarStructure"></a>
               The `vars_structure` block supports:
        """
        if agency_name is not None:
            pulumi.set(__self__, "agency_name", agency_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if template_body is not None:
            pulumi.set(__self__, "template_body", template_body)
        if template_key is not None:
            pulumi.set(__self__, "template_key", template_key)
        if template_uri is not None:
            pulumi.set(__self__, "template_uri", template_uri)
        if vars_structures is not None:
            pulumi.set(__self__, "vars_structures", vars_structures)

    @_builtins.property
    @pulumi.getter(name="agencyName")
    def agency_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the agency name. The agency needs to authorize RFS to invoke
        the Config APIs for creating, updating, deleting an assignment. It contains 1 to 64 characters.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "agency_name")

    @agency_name.setter
    def agency_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "agency_name", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the assignment package name. It contains 1 to 64 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="templateBody")
    def template_body(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the content of a custom assignment package. It contains 1 to
        51200 characters.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "template_body")

    @template_body.setter
    def template_body(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_body", value)

    @_builtins.property
    @pulumi.getter(name="templateKey")
    def template_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of a built-in assignment package template. It
        contains 1 to 128 characters.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "template_key")

    @template_key.setter
    def template_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_key", value)

    @_builtins.property
    @pulumi.getter(name="templateUri")
    def template_uri(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the URL address of the OBS bucket where an assignment package
        template was stored. It contains 1 to 1024 characters.

        Changing this parameter will create a new resource.

        > **NOTE:** Exactly one of `template_key`, `template_body`, `template_uri` should be specified.
        """
        return pulumi.get(self, "template_uri")

    @template_uri.setter
    def template_uri(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_uri", value)

    @_builtins.property
    @pulumi.getter(name="varsStructures")
    def vars_structures(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AssignmentPackageVarsStructureArgs']]]]:
        """
        Specifies the parameters of an assignment package.

        The vars_structure structure is documented below.

        <a name="AssignmentPackage_VarStructure"></a>
        The `vars_structure` block supports:
        """
        return pulumi.get(self, "vars_structures")

    @vars_structures.setter
    def vars_structures(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AssignmentPackageVarsStructureArgs']]]]):
        pulumi.set(self, "vars_structures", value)


@pulumi.input_type
class _AssignmentPackageState:
    def __init__(__self__, *,
                 agency_name: Optional[pulumi.Input[_builtins.str]] = None,
                 deployment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 stack_id: Optional[pulumi.Input[_builtins.str]] = None,
                 stack_name: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 template_body: Optional[pulumi.Input[_builtins.str]] = None,
                 template_key: Optional[pulumi.Input[_builtins.str]] = None,
                 template_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 vars_structures: Optional[pulumi.Input[Sequence[pulumi.Input['AssignmentPackageVarsStructureArgs']]]] = None):
        """
        Input properties used for looking up and filtering AssignmentPackage resources.
        :param pulumi.Input[_builtins.str] agency_name: Specifies the agency name. The agency needs to authorize RFS to invoke
               the Config APIs for creating, updating, deleting an assignment. It contains 1 to 64 characters.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] deployment_id: Indicates the deployment ID.
        :param pulumi.Input[_builtins.str] name: Specifies the assignment package name. It contains 1 to 64 characters.
        :param pulumi.Input[_builtins.str] stack_id: Indicates the unique ID of a resource stack.
        :param pulumi.Input[_builtins.str] stack_name: Indicates the name of a resource stack.
        :param pulumi.Input[_builtins.str] status: Indicates the deployment status of an assignment package.
        :param pulumi.Input[_builtins.str] template_body: Specifies the content of a custom assignment package. It contains 1 to
               51200 characters.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] template_key: Specifies the name of a built-in assignment package template. It
               contains 1 to 128 characters.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] template_uri: Specifies the URL address of the OBS bucket where an assignment package
               template was stored. It contains 1 to 1024 characters.
               
               Changing this parameter will create a new resource.
               
               > **NOTE:** Exactly one of `template_key`, `template_body`, `template_uri` should be specified.
        :param pulumi.Input[Sequence[pulumi.Input['AssignmentPackageVarsStructureArgs']]] vars_structures: Specifies the parameters of an assignment package.
               
               The vars_structure structure is documented below.
               
               <a name="AssignmentPackage_VarStructure"></a>
               The `vars_structure` block supports:
        """
        if agency_name is not None:
            pulumi.set(__self__, "agency_name", agency_name)
        if deployment_id is not None:
            pulumi.set(__self__, "deployment_id", deployment_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if stack_id is not None:
            pulumi.set(__self__, "stack_id", stack_id)
        if stack_name is not None:
            pulumi.set(__self__, "stack_name", stack_name)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if template_body is not None:
            pulumi.set(__self__, "template_body", template_body)
        if template_key is not None:
            pulumi.set(__self__, "template_key", template_key)
        if template_uri is not None:
            pulumi.set(__self__, "template_uri", template_uri)
        if vars_structures is not None:
            pulumi.set(__self__, "vars_structures", vars_structures)

    @_builtins.property
    @pulumi.getter(name="agencyName")
    def agency_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the agency name. The agency needs to authorize RFS to invoke
        the Config APIs for creating, updating, deleting an assignment. It contains 1 to 64 characters.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "agency_name")

    @agency_name.setter
    def agency_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "agency_name", value)

    @_builtins.property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the deployment ID.
        """
        return pulumi.get(self, "deployment_id")

    @deployment_id.setter
    def deployment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "deployment_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the assignment package name. It contains 1 to 64 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="stackId")
    def stack_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the unique ID of a resource stack.
        """
        return pulumi.get(self, "stack_id")

    @stack_id.setter
    def stack_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "stack_id", value)

    @_builtins.property
    @pulumi.getter(name="stackName")
    def stack_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the name of a resource stack.
        """
        return pulumi.get(self, "stack_name")

    @stack_name.setter
    def stack_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "stack_name", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the deployment status of an assignment package.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="templateBody")
    def template_body(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the content of a custom assignment package. It contains 1 to
        51200 characters.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "template_body")

    @template_body.setter
    def template_body(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_body", value)

    @_builtins.property
    @pulumi.getter(name="templateKey")
    def template_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of a built-in assignment package template. It
        contains 1 to 128 characters.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "template_key")

    @template_key.setter
    def template_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_key", value)

    @_builtins.property
    @pulumi.getter(name="templateUri")
    def template_uri(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the URL address of the OBS bucket where an assignment package
        template was stored. It contains 1 to 1024 characters.

        Changing this parameter will create a new resource.

        > **NOTE:** Exactly one of `template_key`, `template_body`, `template_uri` should be specified.
        """
        return pulumi.get(self, "template_uri")

    @template_uri.setter
    def template_uri(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_uri", value)

    @_builtins.property
    @pulumi.getter(name="varsStructures")
    def vars_structures(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AssignmentPackageVarsStructureArgs']]]]:
        """
        Specifies the parameters of an assignment package.

        The vars_structure structure is documented below.

        <a name="AssignmentPackage_VarStructure"></a>
        The `vars_structure` block supports:
        """
        return pulumi.get(self, "vars_structures")

    @vars_structures.setter
    def vars_structures(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AssignmentPackageVarsStructureArgs']]]]):
        pulumi.set(self, "vars_structures", value)


@pulumi.type_token("huaweicloud:rms/assignmentPackage:AssignmentPackage")
class AssignmentPackage(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 agency_name: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 template_body: Optional[pulumi.Input[_builtins.str]] = None,
                 template_key: Optional[pulumi.Input[_builtins.str]] = None,
                 template_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 vars_structures: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AssignmentPackageVarsStructureArgs', 'AssignmentPackageVarsStructureArgsDict']]]]] = None,
                 __props__=None):
        """
        Manages a RMS assignment package resource within HuaweiCloud.

        ## Import

        The RMS assignment package can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:rms/assignmentPackage:AssignmentPackage test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `agency_name`, `template_key`,

        `template_body`, `template_uri`. It is generally recommended running `pulumi preview` after importing a RMS assignment

        package. You can then decide if changes should be applied to the RMS assignment package, or the resource definition

        should be updated to align with the RMS assignment package. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_rms_assignment_package" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              agency_name, template_key, template_body, template_uri,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] agency_name: Specifies the agency name. The agency needs to authorize RFS to invoke
               the Config APIs for creating, updating, deleting an assignment. It contains 1 to 64 characters.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the assignment package name. It contains 1 to 64 characters.
        :param pulumi.Input[_builtins.str] template_body: Specifies the content of a custom assignment package. It contains 1 to
               51200 characters.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] template_key: Specifies the name of a built-in assignment package template. It
               contains 1 to 128 characters.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] template_uri: Specifies the URL address of the OBS bucket where an assignment package
               template was stored. It contains 1 to 1024 characters.
               
               Changing this parameter will create a new resource.
               
               > **NOTE:** Exactly one of `template_key`, `template_body`, `template_uri` should be specified.
        :param pulumi.Input[Sequence[pulumi.Input[Union['AssignmentPackageVarsStructureArgs', 'AssignmentPackageVarsStructureArgsDict']]]] vars_structures: Specifies the parameters of an assignment package.
               
               The vars_structure structure is documented below.
               
               <a name="AssignmentPackage_VarStructure"></a>
               The `vars_structure` block supports:
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[AssignmentPackageArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a RMS assignment package resource within HuaweiCloud.

        ## Import

        The RMS assignment package can be imported using the `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:rms/assignmentPackage:AssignmentPackage test <id>
        ```

        Note that the imported state may not be identical to your resource definition, due to some attributes missing from the

        API response, security or some other reason. The missing attributes include: `agency_name`, `template_key`,

        `template_body`, `template_uri`. It is generally recommended running `pulumi preview` after importing a RMS assignment

        package. You can then decide if changes should be applied to the RMS assignment package, or the resource definition

        should be updated to align with the RMS assignment package. Also you can ignore changes as below.

        hcl

        resource "huaweicloud_rms_assignment_package" "test" {

            ...

          lifecycle {

            ignore_changes = [
            
              agency_name, template_key, template_body, template_uri,
            
            ]

          }

        }

        :param str resource_name: The name of the resource.
        :param AssignmentPackageArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AssignmentPackageArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 agency_name: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 template_body: Optional[pulumi.Input[_builtins.str]] = None,
                 template_key: Optional[pulumi.Input[_builtins.str]] = None,
                 template_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 vars_structures: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AssignmentPackageVarsStructureArgs', 'AssignmentPackageVarsStructureArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AssignmentPackageArgs.__new__(AssignmentPackageArgs)

            __props__.__dict__["agency_name"] = agency_name
            __props__.__dict__["name"] = name
            __props__.__dict__["template_body"] = template_body
            __props__.__dict__["template_key"] = template_key
            __props__.__dict__["template_uri"] = template_uri
            __props__.__dict__["vars_structures"] = vars_structures
            __props__.__dict__["deployment_id"] = None
            __props__.__dict__["stack_id"] = None
            __props__.__dict__["stack_name"] = None
            __props__.__dict__["status"] = None
        super(AssignmentPackage, __self__).__init__(
            'huaweicloud:rms/assignmentPackage:AssignmentPackage',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            agency_name: Optional[pulumi.Input[_builtins.str]] = None,
            deployment_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            stack_id: Optional[pulumi.Input[_builtins.str]] = None,
            stack_name: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            template_body: Optional[pulumi.Input[_builtins.str]] = None,
            template_key: Optional[pulumi.Input[_builtins.str]] = None,
            template_uri: Optional[pulumi.Input[_builtins.str]] = None,
            vars_structures: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AssignmentPackageVarsStructureArgs', 'AssignmentPackageVarsStructureArgsDict']]]]] = None) -> 'AssignmentPackage':
        """
        Get an existing AssignmentPackage resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] agency_name: Specifies the agency name. The agency needs to authorize RFS to invoke
               the Config APIs for creating, updating, deleting an assignment. It contains 1 to 64 characters.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] deployment_id: Indicates the deployment ID.
        :param pulumi.Input[_builtins.str] name: Specifies the assignment package name. It contains 1 to 64 characters.
        :param pulumi.Input[_builtins.str] stack_id: Indicates the unique ID of a resource stack.
        :param pulumi.Input[_builtins.str] stack_name: Indicates the name of a resource stack.
        :param pulumi.Input[_builtins.str] status: Indicates the deployment status of an assignment package.
        :param pulumi.Input[_builtins.str] template_body: Specifies the content of a custom assignment package. It contains 1 to
               51200 characters.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] template_key: Specifies the name of a built-in assignment package template. It
               contains 1 to 128 characters.
               
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] template_uri: Specifies the URL address of the OBS bucket where an assignment package
               template was stored. It contains 1 to 1024 characters.
               
               Changing this parameter will create a new resource.
               
               > **NOTE:** Exactly one of `template_key`, `template_body`, `template_uri` should be specified.
        :param pulumi.Input[Sequence[pulumi.Input[Union['AssignmentPackageVarsStructureArgs', 'AssignmentPackageVarsStructureArgsDict']]]] vars_structures: Specifies the parameters of an assignment package.
               
               The vars_structure structure is documented below.
               
               <a name="AssignmentPackage_VarStructure"></a>
               The `vars_structure` block supports:
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AssignmentPackageState.__new__(_AssignmentPackageState)

        __props__.__dict__["agency_name"] = agency_name
        __props__.__dict__["deployment_id"] = deployment_id
        __props__.__dict__["name"] = name
        __props__.__dict__["stack_id"] = stack_id
        __props__.__dict__["stack_name"] = stack_name
        __props__.__dict__["status"] = status
        __props__.__dict__["template_body"] = template_body
        __props__.__dict__["template_key"] = template_key
        __props__.__dict__["template_uri"] = template_uri
        __props__.__dict__["vars_structures"] = vars_structures
        return AssignmentPackage(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="agencyName")
    def agency_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the agency name. The agency needs to authorize RFS to invoke
        the Config APIs for creating, updating, deleting an assignment. It contains 1 to 64 characters.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "agency_name")

    @_builtins.property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the deployment ID.
        """
        return pulumi.get(self, "deployment_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the assignment package name. It contains 1 to 64 characters.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="stackId")
    def stack_id(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the unique ID of a resource stack.
        """
        return pulumi.get(self, "stack_id")

    @_builtins.property
    @pulumi.getter(name="stackName")
    def stack_name(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the name of a resource stack.
        """
        return pulumi.get(self, "stack_name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the deployment status of an assignment package.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="templateBody")
    def template_body(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the content of a custom assignment package. It contains 1 to
        51200 characters.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "template_body")

    @_builtins.property
    @pulumi.getter(name="templateKey")
    def template_key(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of a built-in assignment package template. It
        contains 1 to 128 characters.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "template_key")

    @_builtins.property
    @pulumi.getter(name="templateUri")
    def template_uri(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the URL address of the OBS bucket where an assignment package
        template was stored. It contains 1 to 1024 characters.

        Changing this parameter will create a new resource.

        > **NOTE:** Exactly one of `template_key`, `template_body`, `template_uri` should be specified.
        """
        return pulumi.get(self, "template_uri")

    @_builtins.property
    @pulumi.getter(name="varsStructures")
    def vars_structures(self) -> pulumi.Output[Sequence['outputs.AssignmentPackageVarsStructure']]:
        """
        Specifies the parameters of an assignment package.

        The vars_structure structure is documented below.

        <a name="AssignmentPackage_VarStructure"></a>
        The `vars_structure` block supports:
        """
        return pulumi.get(self, "vars_structures")

