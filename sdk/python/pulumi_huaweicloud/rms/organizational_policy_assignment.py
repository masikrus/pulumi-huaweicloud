# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['OrganizationalPolicyAssignmentArgs', 'OrganizationalPolicyAssignment']

@pulumi.input_type
class OrganizationalPolicyAssignmentArgs:
    def __init__(__self__, *,
                 organization_id: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 excluded_accounts: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 function_urn: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 period: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_definition_id: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_filter: Optional[pulumi.Input['OrganizationalPolicyAssignmentPolicyFilterArgs']] = None):
        """
        The set of arguments for constructing a OrganizationalPolicyAssignment resource.
        :param pulumi.Input[_builtins.str] organization_id: Specifies the ID of the organization.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the organizational policy assignment,
               which contain maximum of `512` characters.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] excluded_accounts: Specifies the excluded accounts of the organizational policy assignment.
        :param pulumi.Input[_builtins.str] function_urn: Specifies the function URN used to create the custom policy.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the organizational policy assignment.  
               The valid length is limited from `1` to `60`, only letters, digits, hyphens (-) and underscores (_) are allowed.
               Change this parameter will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] parameters: Specifies the rule definition of the organizational policy assignment.
               
               <a name="rms_policy_filter"></a>
               The `policy_filter` block supports:
        :param pulumi.Input[_builtins.str] period: Specifies the period of the organizational policy assignment.  
               The valid values are as follows:
               + **One_Hour**
               + **Three_Hours**
               + **Six_Hours**
               + **Twelve_Hours**
               + **TwentyFour_Hours**
               
               Most one of `period` and `policy_filter` can be configured.
        :param pulumi.Input[_builtins.str] policy_definition_id: Specifies the ID of the built-in policy definition.  
               This parameter and `function_urn` are alternative.
               Changing this parameter will create a new resource.
        :param pulumi.Input['OrganizationalPolicyAssignmentPolicyFilterArgs'] policy_filter: Specifies the configuration used to filter resources.  
               The policy_filter structure is documented below.
        """
        pulumi.set(__self__, "organization_id", organization_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if excluded_accounts is not None:
            pulumi.set(__self__, "excluded_accounts", excluded_accounts)
        if function_urn is not None:
            pulumi.set(__self__, "function_urn", function_urn)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if policy_definition_id is not None:
            pulumi.set(__self__, "policy_definition_id", policy_definition_id)
        if policy_filter is not None:
            pulumi.set(__self__, "policy_filter", policy_filter)

    @_builtins.property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the organization.  
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "organization_id")

    @organization_id.setter
    def organization_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "organization_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the organizational policy assignment,
        which contain maximum of `512` characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="excludedAccounts")
    def excluded_accounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the excluded accounts of the organizational policy assignment.
        """
        return pulumi.get(self, "excluded_accounts")

    @excluded_accounts.setter
    def excluded_accounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "excluded_accounts", value)

    @_builtins.property
    @pulumi.getter(name="functionUrn")
    def function_urn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the function URN used to create the custom policy.  
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "function_urn")

    @function_urn.setter
    def function_urn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "function_urn", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the organizational policy assignment.  
        The valid length is limited from `1` to `60`, only letters, digits, hyphens (-) and underscores (_) are allowed.
        Change this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the rule definition of the organizational policy assignment.

        <a name="rms_policy_filter"></a>
        The `policy_filter` block supports:
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "parameters", value)

    @_builtins.property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the period of the organizational policy assignment.  
        The valid values are as follows:
        + **One_Hour**
        + **Three_Hours**
        + **Six_Hours**
        + **Twelve_Hours**
        + **TwentyFour_Hours**

        Most one of `period` and `policy_filter` can be configured.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "period", value)

    @_builtins.property
    @pulumi.getter(name="policyDefinitionId")
    def policy_definition_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the built-in policy definition.  
        This parameter and `function_urn` are alternative.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "policy_definition_id")

    @policy_definition_id.setter
    def policy_definition_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policy_definition_id", value)

    @_builtins.property
    @pulumi.getter(name="policyFilter")
    def policy_filter(self) -> Optional[pulumi.Input['OrganizationalPolicyAssignmentPolicyFilterArgs']]:
        """
        Specifies the configuration used to filter resources.  
        The policy_filter structure is documented below.
        """
        return pulumi.get(self, "policy_filter")

    @policy_filter.setter
    def policy_filter(self, value: Optional[pulumi.Input['OrganizationalPolicyAssignmentPolicyFilterArgs']]):
        pulumi.set(self, "policy_filter", value)


@pulumi.input_type
class _OrganizationalPolicyAssignmentState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 excluded_accounts: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 function_urn: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organization_id: Optional[pulumi.Input[_builtins.str]] = None,
                 organization_policy_assignment_urn: Optional[pulumi.Input[_builtins.str]] = None,
                 owner_id: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 period: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_definition_id: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_filter: Optional[pulumi.Input['OrganizationalPolicyAssignmentPolicyFilterArgs']] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering OrganizationalPolicyAssignment resources.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the organizational policy assignment.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the organizational policy assignment,
               which contain maximum of `512` characters.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] excluded_accounts: Specifies the excluded accounts of the organizational policy assignment.
        :param pulumi.Input[_builtins.str] function_urn: Specifies the function URN used to create the custom policy.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the organizational policy assignment.  
               The valid length is limited from `1` to `60`, only letters, digits, hyphens (-) and underscores (_) are allowed.
               Change this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] organization_id: Specifies the ID of the organization.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] organization_policy_assignment_urn: Indicates the unique identifier of the organizational policy assignment.
        :param pulumi.Input[_builtins.str] owner_id: Indicates the creator of the organizational policy assignment.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] parameters: Specifies the rule definition of the organizational policy assignment.
               
               <a name="rms_policy_filter"></a>
               The `policy_filter` block supports:
        :param pulumi.Input[_builtins.str] period: Specifies the period of the organizational policy assignment.  
               The valid values are as follows:
               + **One_Hour**
               + **Three_Hours**
               + **Six_Hours**
               + **Twelve_Hours**
               + **TwentyFour_Hours**
               
               Most one of `period` and `policy_filter` can be configured.
        :param pulumi.Input[_builtins.str] policy_definition_id: Specifies the ID of the built-in policy definition.  
               This parameter and `function_urn` are alternative.
               Changing this parameter will create a new resource.
        :param pulumi.Input['OrganizationalPolicyAssignmentPolicyFilterArgs'] policy_filter: Specifies the configuration used to filter resources.  
               The policy_filter structure is documented below.
        :param pulumi.Input[_builtins.str] updated_at: The latest update time of the organizational policy assignment.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if excluded_accounts is not None:
            pulumi.set(__self__, "excluded_accounts", excluded_accounts)
        if function_urn is not None:
            pulumi.set(__self__, "function_urn", function_urn)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organization_id is not None:
            pulumi.set(__self__, "organization_id", organization_id)
        if organization_policy_assignment_urn is not None:
            pulumi.set(__self__, "organization_policy_assignment_urn", organization_policy_assignment_urn)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if policy_definition_id is not None:
            pulumi.set(__self__, "policy_definition_id", policy_definition_id)
        if policy_filter is not None:
            pulumi.set(__self__, "policy_filter", policy_filter)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time of the organizational policy assignment.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the organizational policy assignment,
        which contain maximum of `512` characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="excludedAccounts")
    def excluded_accounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the excluded accounts of the organizational policy assignment.
        """
        return pulumi.get(self, "excluded_accounts")

    @excluded_accounts.setter
    def excluded_accounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "excluded_accounts", value)

    @_builtins.property
    @pulumi.getter(name="functionUrn")
    def function_urn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the function URN used to create the custom policy.  
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "function_urn")

    @function_urn.setter
    def function_urn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "function_urn", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the organizational policy assignment.  
        The valid length is limited from `1` to `60`, only letters, digits, hyphens (-) and underscores (_) are allowed.
        Change this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the organization.  
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "organization_id")

    @organization_id.setter
    def organization_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "organization_id", value)

    @_builtins.property
    @pulumi.getter(name="organizationPolicyAssignmentUrn")
    def organization_policy_assignment_urn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the unique identifier of the organizational policy assignment.
        """
        return pulumi.get(self, "organization_policy_assignment_urn")

    @organization_policy_assignment_urn.setter
    def organization_policy_assignment_urn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "organization_policy_assignment_urn", value)

    @_builtins.property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the creator of the organizational policy assignment.
        """
        return pulumi.get(self, "owner_id")

    @owner_id.setter
    def owner_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "owner_id", value)

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the rule definition of the organizational policy assignment.

        <a name="rms_policy_filter"></a>
        The `policy_filter` block supports:
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "parameters", value)

    @_builtins.property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the period of the organizational policy assignment.  
        The valid values are as follows:
        + **One_Hour**
        + **Three_Hours**
        + **Six_Hours**
        + **Twelve_Hours**
        + **TwentyFour_Hours**

        Most one of `period` and `policy_filter` can be configured.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "period", value)

    @_builtins.property
    @pulumi.getter(name="policyDefinitionId")
    def policy_definition_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the built-in policy definition.  
        This parameter and `function_urn` are alternative.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "policy_definition_id")

    @policy_definition_id.setter
    def policy_definition_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policy_definition_id", value)

    @_builtins.property
    @pulumi.getter(name="policyFilter")
    def policy_filter(self) -> Optional[pulumi.Input['OrganizationalPolicyAssignmentPolicyFilterArgs']]:
        """
        Specifies the configuration used to filter resources.  
        The policy_filter structure is documented below.
        """
        return pulumi.get(self, "policy_filter")

    @policy_filter.setter
    def policy_filter(self, value: Optional[pulumi.Input['OrganizationalPolicyAssignmentPolicyFilterArgs']]):
        pulumi.set(self, "policy_filter", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The latest update time of the organizational policy assignment.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("huaweicloud:rms/organizationalPolicyAssignment:OrganizationalPolicyAssignment")
class OrganizationalPolicyAssignment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 excluded_accounts: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 function_urn: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organization_id: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 period: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_definition_id: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_filter: Optional[pulumi.Input[Union['OrganizationalPolicyAssignmentPolicyFilterArgs', 'OrganizationalPolicyAssignmentPolicyFilterArgsDict']]] = None,
                 __props__=None):
        """
        Using this resource to assign the organizational policy HuaweiCloud resources.

        ## Example Usage

        ### Assign a custom policy

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        function_name = config.require_object("functionName")
        policy_assignment_name = config.require_object("policyAssignmentName")
        test = huaweicloud.organizations.get_organization()
        test_function = huaweicloud.functiongraph.Function("test",
            name=function_name,
            code_type="inline",
            handler="index.handler",
            runtime="Node.js10.16",
            functiongraph_version="v2",
            app="default",
            enterprise_project_id="0",
            memory_size=128,
            timeout=3)
        test_organizational_policy_assignment = huaweicloud.rms.OrganizationalPolicyAssignment("test",
            organization_id=test.id,
            name=policy_assignment_name,
            description="This is a custom policy assignment.",
            function_urn=pulumi.Output.all(
                urn=test_function.urn,
                version=test_function.version
        ).apply(lambda resolved_outputs: f"{resolved_outputs['urn']}:{resolved_outputs['version']}")
        ,
            period="TwentyFour_Hours",
            parameters={
                "string_test": "\\"string_value\\"",
                "array_test": "[\\"array_element\\"]",
                "object_test": json.dumps({
                    "terraform_version": "1.xx.x",
                }),
            })
        ```

        ## Import

        The organizational policy assignment can be imported using the `organization_id` and `id`separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:rms/organizationalPolicyAssignment:OrganizationalPolicyAssignment test <organization_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the organizational policy assignment,
               which contain maximum of `512` characters.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] excluded_accounts: Specifies the excluded accounts of the organizational policy assignment.
        :param pulumi.Input[_builtins.str] function_urn: Specifies the function URN used to create the custom policy.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the organizational policy assignment.  
               The valid length is limited from `1` to `60`, only letters, digits, hyphens (-) and underscores (_) are allowed.
               Change this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] organization_id: Specifies the ID of the organization.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] parameters: Specifies the rule definition of the organizational policy assignment.
               
               <a name="rms_policy_filter"></a>
               The `policy_filter` block supports:
        :param pulumi.Input[_builtins.str] period: Specifies the period of the organizational policy assignment.  
               The valid values are as follows:
               + **One_Hour**
               + **Three_Hours**
               + **Six_Hours**
               + **Twelve_Hours**
               + **TwentyFour_Hours**
               
               Most one of `period` and `policy_filter` can be configured.
        :param pulumi.Input[_builtins.str] policy_definition_id: Specifies the ID of the built-in policy definition.  
               This parameter and `function_urn` are alternative.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Union['OrganizationalPolicyAssignmentPolicyFilterArgs', 'OrganizationalPolicyAssignmentPolicyFilterArgsDict']] policy_filter: Specifies the configuration used to filter resources.  
               The policy_filter structure is documented below.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OrganizationalPolicyAssignmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Using this resource to assign the organizational policy HuaweiCloud resources.

        ## Example Usage

        ### Assign a custom policy

        ```python
        import pulumi
        import json
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        function_name = config.require_object("functionName")
        policy_assignment_name = config.require_object("policyAssignmentName")
        test = huaweicloud.organizations.get_organization()
        test_function = huaweicloud.functiongraph.Function("test",
            name=function_name,
            code_type="inline",
            handler="index.handler",
            runtime="Node.js10.16",
            functiongraph_version="v2",
            app="default",
            enterprise_project_id="0",
            memory_size=128,
            timeout=3)
        test_organizational_policy_assignment = huaweicloud.rms.OrganizationalPolicyAssignment("test",
            organization_id=test.id,
            name=policy_assignment_name,
            description="This is a custom policy assignment.",
            function_urn=pulumi.Output.all(
                urn=test_function.urn,
                version=test_function.version
        ).apply(lambda resolved_outputs: f"{resolved_outputs['urn']}:{resolved_outputs['version']}")
        ,
            period="TwentyFour_Hours",
            parameters={
                "string_test": "\\"string_value\\"",
                "array_test": "[\\"array_element\\"]",
                "object_test": json.dumps({
                    "terraform_version": "1.xx.x",
                }),
            })
        ```

        ## Import

        The organizational policy assignment can be imported using the `organization_id` and `id`separated by a slash, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:rms/organizationalPolicyAssignment:OrganizationalPolicyAssignment test <organization_id>/<id>
        ```

        :param str resource_name: The name of the resource.
        :param OrganizationalPolicyAssignmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OrganizationalPolicyAssignmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 excluded_accounts: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 function_urn: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organization_id: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 period: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_definition_id: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_filter: Optional[pulumi.Input[Union['OrganizationalPolicyAssignmentPolicyFilterArgs', 'OrganizationalPolicyAssignmentPolicyFilterArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OrganizationalPolicyAssignmentArgs.__new__(OrganizationalPolicyAssignmentArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["excluded_accounts"] = excluded_accounts
            __props__.__dict__["function_urn"] = function_urn
            __props__.__dict__["name"] = name
            if organization_id is None and not opts.urn:
                raise TypeError("Missing required property 'organization_id'")
            __props__.__dict__["organization_id"] = organization_id
            __props__.__dict__["parameters"] = parameters
            __props__.__dict__["period"] = period
            __props__.__dict__["policy_definition_id"] = policy_definition_id
            __props__.__dict__["policy_filter"] = policy_filter
            __props__.__dict__["created_at"] = None
            __props__.__dict__["organization_policy_assignment_urn"] = None
            __props__.__dict__["owner_id"] = None
            __props__.__dict__["updated_at"] = None
        super(OrganizationalPolicyAssignment, __self__).__init__(
            'huaweicloud:rms/organizationalPolicyAssignment:OrganizationalPolicyAssignment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            excluded_accounts: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            function_urn: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            organization_id: Optional[pulumi.Input[_builtins.str]] = None,
            organization_policy_assignment_urn: Optional[pulumi.Input[_builtins.str]] = None,
            owner_id: Optional[pulumi.Input[_builtins.str]] = None,
            parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            period: Optional[pulumi.Input[_builtins.str]] = None,
            policy_definition_id: Optional[pulumi.Input[_builtins.str]] = None,
            policy_filter: Optional[pulumi.Input[Union['OrganizationalPolicyAssignmentPolicyFilterArgs', 'OrganizationalPolicyAssignmentPolicyFilterArgsDict']]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None) -> 'OrganizationalPolicyAssignment':
        """
        Get an existing OrganizationalPolicyAssignment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the organizational policy assignment.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the organizational policy assignment,
               which contain maximum of `512` characters.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] excluded_accounts: Specifies the excluded accounts of the organizational policy assignment.
        :param pulumi.Input[_builtins.str] function_urn: Specifies the function URN used to create the custom policy.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the organizational policy assignment.  
               The valid length is limited from `1` to `60`, only letters, digits, hyphens (-) and underscores (_) are allowed.
               Change this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] organization_id: Specifies the ID of the organization.  
               Changing this parameter will create a new resource.
        :param pulumi.Input[_builtins.str] organization_policy_assignment_urn: Indicates the unique identifier of the organizational policy assignment.
        :param pulumi.Input[_builtins.str] owner_id: Indicates the creator of the organizational policy assignment.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] parameters: Specifies the rule definition of the organizational policy assignment.
               
               <a name="rms_policy_filter"></a>
               The `policy_filter` block supports:
        :param pulumi.Input[_builtins.str] period: Specifies the period of the organizational policy assignment.  
               The valid values are as follows:
               + **One_Hour**
               + **Three_Hours**
               + **Six_Hours**
               + **Twelve_Hours**
               + **TwentyFour_Hours**
               
               Most one of `period` and `policy_filter` can be configured.
        :param pulumi.Input[_builtins.str] policy_definition_id: Specifies the ID of the built-in policy definition.  
               This parameter and `function_urn` are alternative.
               Changing this parameter will create a new resource.
        :param pulumi.Input[Union['OrganizationalPolicyAssignmentPolicyFilterArgs', 'OrganizationalPolicyAssignmentPolicyFilterArgsDict']] policy_filter: Specifies the configuration used to filter resources.  
               The policy_filter structure is documented below.
        :param pulumi.Input[_builtins.str] updated_at: The latest update time of the organizational policy assignment.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OrganizationalPolicyAssignmentState.__new__(_OrganizationalPolicyAssignmentState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["excluded_accounts"] = excluded_accounts
        __props__.__dict__["function_urn"] = function_urn
        __props__.__dict__["name"] = name
        __props__.__dict__["organization_id"] = organization_id
        __props__.__dict__["organization_policy_assignment_urn"] = organization_policy_assignment_urn
        __props__.__dict__["owner_id"] = owner_id
        __props__.__dict__["parameters"] = parameters
        __props__.__dict__["period"] = period
        __props__.__dict__["policy_definition_id"] = policy_definition_id
        __props__.__dict__["policy_filter"] = policy_filter
        __props__.__dict__["updated_at"] = updated_at
        return OrganizationalPolicyAssignment(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The creation time of the organizational policy assignment.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of the organizational policy assignment,
        which contain maximum of `512` characters.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="excludedAccounts")
    def excluded_accounts(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Specifies the excluded accounts of the organizational policy assignment.
        """
        return pulumi.get(self, "excluded_accounts")

    @_builtins.property
    @pulumi.getter(name="functionUrn")
    def function_urn(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the function URN used to create the custom policy.  
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "function_urn")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the organizational policy assignment.  
        The valid length is limited from `1` to `60`, only letters, digits, hyphens (-) and underscores (_) are allowed.
        Change this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the organization.  
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "organization_id")

    @_builtins.property
    @pulumi.getter(name="organizationPolicyAssignmentUrn")
    def organization_policy_assignment_urn(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the unique identifier of the organizational policy assignment.
        """
        return pulumi.get(self, "organization_policy_assignment_urn")

    @_builtins.property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the creator of the organizational policy assignment.
        """
        return pulumi.get(self, "owner_id")

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Specifies the rule definition of the organizational policy assignment.

        <a name="rms_policy_filter"></a>
        The `policy_filter` block supports:
        """
        return pulumi.get(self, "parameters")

    @_builtins.property
    @pulumi.getter
    def period(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the period of the organizational policy assignment.  
        The valid values are as follows:
        + **One_Hour**
        + **Three_Hours**
        + **Six_Hours**
        + **Twelve_Hours**
        + **TwentyFour_Hours**

        Most one of `period` and `policy_filter` can be configured.
        """
        return pulumi.get(self, "period")

    @_builtins.property
    @pulumi.getter(name="policyDefinitionId")
    def policy_definition_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the built-in policy definition.  
        This parameter and `function_urn` are alternative.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "policy_definition_id")

    @_builtins.property
    @pulumi.getter(name="policyFilter")
    def policy_filter(self) -> pulumi.Output['outputs.OrganizationalPolicyAssignmentPolicyFilter']:
        """
        Specifies the configuration used to filter resources.  
        The policy_filter structure is documented below.
        """
        return pulumi.get(self, "policy_filter")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The latest update time of the organizational policy assignment.
        """
        return pulumi.get(self, "updated_at")

