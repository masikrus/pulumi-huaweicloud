# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetRemediationExecutionStatusesResult',
    'AwaitableGetRemediationExecutionStatusesResult',
    'get_remediation_execution_statuses',
    'get_remediation_execution_statuses_output',
]

@pulumi.output_type
class GetRemediationExecutionStatusesResult:
    """
    A collection of values returned by getRemediationExecutionStatuses.
    """
    def __init__(__self__, id=None, policy_assignment_id=None, region=None, resource_keys=None, values=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if policy_assignment_id and not isinstance(policy_assignment_id, str):
            raise TypeError("Expected argument 'policy_assignment_id' to be a str")
        pulumi.set(__self__, "policy_assignment_id", policy_assignment_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if resource_keys and not isinstance(resource_keys, list):
            raise TypeError("Expected argument 'resource_keys' to be a list")
        pulumi.set(__self__, "resource_keys", resource_keys)
        if values and not isinstance(values, list):
            raise TypeError("Expected argument 'values' to be a list")
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="policyAssignmentId")
    def policy_assignment_id(self) -> _builtins.str:
        return pulumi.get(self, "policy_assignment_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceKeys")
    def resource_keys(self) -> Optional[Sequence['outputs.GetRemediationExecutionStatusesResourceKeyResult']]:
        return pulumi.get(self, "resource_keys")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence['outputs.GetRemediationExecutionStatusesValueResult']:
        """
        The compliance rule remediation execution results.
        """
        return pulumi.get(self, "values")


class AwaitableGetRemediationExecutionStatusesResult(GetRemediationExecutionStatusesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRemediationExecutionStatusesResult(
            id=self.id,
            policy_assignment_id=self.policy_assignment_id,
            region=self.region,
            resource_keys=self.resource_keys,
            values=self.values)


def get_remediation_execution_statuses(policy_assignment_id: Optional[_builtins.str] = None,
                                       region: Optional[_builtins.str] = None,
                                       resource_keys: Optional[Sequence[Union['GetRemediationExecutionStatusesResourceKeyArgs', 'GetRemediationExecutionStatusesResourceKeyArgsDict']]] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRemediationExecutionStatusesResult:
    """
    Use this data source to get the list of RMS latest remediation execution statuses.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    policy_assignment_id = config.require_object("policyAssignmentId")
    test = huaweicloud.rms.get_remediation_execution_statuses(policy_assignment_id=policy_assignment_id)
    ```


    :param _builtins.str policy_assignment_id: The policy assignment ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param Sequence[Union['GetRemediationExecutionStatusesResourceKeyArgs', 'GetRemediationExecutionStatusesResourceKeyArgsDict']] resource_keys: The list of query criteria required to collect remediation results.
           
           The resource_keys structure is documented below.
           
           <a name="resource_keys_struct"></a>
           The `resource_keys` block supports:
    """
    __args__ = dict()
    __args__['policyAssignmentId'] = policy_assignment_id
    __args__['region'] = region
    __args__['resourceKeys'] = resource_keys
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:rms/getRemediationExecutionStatuses:getRemediationExecutionStatuses', __args__, opts=opts, typ=GetRemediationExecutionStatusesResult).value

    return AwaitableGetRemediationExecutionStatusesResult(
        id=pulumi.get(__ret__, 'id'),
        policy_assignment_id=pulumi.get(__ret__, 'policy_assignment_id'),
        region=pulumi.get(__ret__, 'region'),
        resource_keys=pulumi.get(__ret__, 'resource_keys'),
        values=pulumi.get(__ret__, 'values'))
def get_remediation_execution_statuses_output(policy_assignment_id: Optional[pulumi.Input[_builtins.str]] = None,
                                              region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                              resource_keys: Optional[pulumi.Input[Optional[Sequence[Union['GetRemediationExecutionStatusesResourceKeyArgs', 'GetRemediationExecutionStatusesResourceKeyArgsDict']]]]] = None,
                                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetRemediationExecutionStatusesResult]:
    """
    Use this data source to get the list of RMS latest remediation execution statuses.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    policy_assignment_id = config.require_object("policyAssignmentId")
    test = huaweicloud.rms.get_remediation_execution_statuses(policy_assignment_id=policy_assignment_id)
    ```


    :param _builtins.str policy_assignment_id: The policy assignment ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param Sequence[Union['GetRemediationExecutionStatusesResourceKeyArgs', 'GetRemediationExecutionStatusesResourceKeyArgsDict']] resource_keys: The list of query criteria required to collect remediation results.
           
           The resource_keys structure is documented below.
           
           <a name="resource_keys_struct"></a>
           The `resource_keys` block supports:
    """
    __args__ = dict()
    __args__['policyAssignmentId'] = policy_assignment_id
    __args__['region'] = region
    __args__['resourceKeys'] = resource_keys
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:rms/getRemediationExecutionStatuses:getRemediationExecutionStatuses', __args__, opts=opts, typ=GetRemediationExecutionStatusesResult)
    return __ret__.apply(lambda __response__: GetRemediationExecutionStatusesResult(
        id=pulumi.get(__response__, 'id'),
        policy_assignment_id=pulumi.get(__response__, 'policy_assignment_id'),
        region=pulumi.get(__response__, 'region'),
        resource_keys=pulumi.get(__response__, 'resource_keys'),
        values=pulumi.get(__response__, 'values')))
