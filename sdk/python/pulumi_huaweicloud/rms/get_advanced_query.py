# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAdvancedQueryResult',
    'AwaitableGetAdvancedQueryResult',
    'get_advanced_query',
    'get_advanced_query_output',
]

@pulumi.output_type
class GetAdvancedQueryResult:
    """
    A collection of values returned by getAdvancedQuery.
    """
    def __init__(__self__, expression=None, id=None, query_infos=None, results=None):
        if expression and not isinstance(expression, str):
            raise TypeError("Expected argument 'expression' to be a str")
        pulumi.set(__self__, "expression", expression)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if query_infos and not isinstance(query_infos, list):
            raise TypeError("Expected argument 'query_infos' to be a list")
        pulumi.set(__self__, "query_infos", query_infos)
        if results and not isinstance(results, list):
            raise TypeError("Expected argument 'results' to be a list")
        pulumi.set(__self__, "results", results)

    @_builtins.property
    @pulumi.getter
    def expression(self) -> _builtins.str:
        return pulumi.get(self, "expression")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="queryInfos")
    def query_infos(self) -> Sequence['outputs.GetAdvancedQueryQueryInfoResult']:
        """
        The query info.
        """
        return pulumi.get(self, "query_infos")

    @_builtins.property
    @pulumi.getter
    def results(self) -> Sequence[Mapping[str, _builtins.str]]:
        """
        The list of query results.
        """
        return pulumi.get(self, "results")


class AwaitableGetAdvancedQueryResult(GetAdvancedQueryResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAdvancedQueryResult(
            expression=self.expression,
            id=self.id,
            query_infos=self.query_infos,
            results=self.results)


def get_advanced_query(expression: Optional[_builtins.str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAdvancedQueryResult:
    """
    Use this data source to do an RMS advanced query.


    :param _builtins.str expression: Specifies the expression of the query.
           
           For example, **select name, id from tracked_resources where provider = 'ecs' and type = 'cloudservers'**
    """
    __args__ = dict()
    __args__['expression'] = expression
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:rms/getAdvancedQuery:getAdvancedQuery', __args__, opts=opts, typ=GetAdvancedQueryResult).value

    return AwaitableGetAdvancedQueryResult(
        expression=pulumi.get(__ret__, 'expression'),
        id=pulumi.get(__ret__, 'id'),
        query_infos=pulumi.get(__ret__, 'query_infos'),
        results=pulumi.get(__ret__, 'results'))
def get_advanced_query_output(expression: Optional[pulumi.Input[_builtins.str]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAdvancedQueryResult]:
    """
    Use this data source to do an RMS advanced query.


    :param _builtins.str expression: Specifies the expression of the query.
           
           For example, **select name, id from tracked_resources where provider = 'ecs' and type = 'cloudservers'**
    """
    __args__ = dict()
    __args__['expression'] = expression
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:rms/getAdvancedQuery:getAdvancedQuery', __args__, opts=opts, typ=GetAdvancedQueryResult)
    return __ret__.apply(lambda __response__: GetAdvancedQueryResult(
        expression=pulumi.get(__response__, 'expression'),
        id=pulumi.get(__response__, 'id'),
        query_infos=pulumi.get(__response__, 'query_infos'),
        results=pulumi.get(__response__, 'results')))
