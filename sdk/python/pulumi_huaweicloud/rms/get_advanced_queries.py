# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAdvancedQueriesResult',
    'AwaitableGetAdvancedQueriesResult',
    'get_advanced_queries',
    'get_advanced_queries_output',
]

@pulumi.output_type
class GetAdvancedQueriesResult:
    """
    A collection of values returned by getAdvancedQueries.
    """
    def __init__(__self__, id=None, name=None, queries=None, query_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if queries and not isinstance(queries, list):
            raise TypeError("Expected argument 'queries' to be a list")
        pulumi.set(__self__, "queries", queries)
        if query_id and not isinstance(query_id, str):
            raise TypeError("Expected argument 'query_id' to be a str")
        pulumi.set(__self__, "query_id", query_id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The advanced query name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def queries(self) -> Sequence['outputs.GetAdvancedQueriesQueryResult']:
        """
        The list of advanced queries.
        """
        return pulumi.get(self, "queries")

    @_builtins.property
    @pulumi.getter(name="queryId")
    def query_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "query_id")


class AwaitableGetAdvancedQueriesResult(GetAdvancedQueriesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAdvancedQueriesResult(
            id=self.id,
            name=self.name,
            queries=self.queries,
            query_id=self.query_id)


def get_advanced_queries(name: Optional[_builtins.str] = None,
                         query_id: Optional[_builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAdvancedQueriesResult:
    """
    Use this data source to get the list of RMS advanced queries.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    advanced_query_name = config.require_object("advancedQueryName")
    test = huaweicloud.rms.get_advanced_queries(name=advanced_query_name)
    ```


    :param _builtins.str name: Specifies the advanced query name.
    :param _builtins.str query_id: Specifies the advanced query ID.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['queryId'] = query_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:rms/getAdvancedQueries:getAdvancedQueries', __args__, opts=opts, typ=GetAdvancedQueriesResult).value

    return AwaitableGetAdvancedQueriesResult(
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        queries=pulumi.get(__ret__, 'queries'),
        query_id=pulumi.get(__ret__, 'query_id'))
def get_advanced_queries_output(name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                query_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAdvancedQueriesResult]:
    """
    Use this data source to get the list of RMS advanced queries.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    advanced_query_name = config.require_object("advancedQueryName")
    test = huaweicloud.rms.get_advanced_queries(name=advanced_query_name)
    ```


    :param _builtins.str name: Specifies the advanced query name.
    :param _builtins.str query_id: Specifies the advanced query ID.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['queryId'] = query_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('huaweicloud:rms/getAdvancedQueries:getAdvancedQueries', __args__, opts=opts, typ=GetAdvancedQueriesResult)
    return __ret__.apply(lambda __response__: GetAdvancedQueriesResult(
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        queries=pulumi.get(__response__, 'queries'),
        query_id=pulumi.get(__response__, 'query_id')))
