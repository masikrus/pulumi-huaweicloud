# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PolicyAssignmentArgs', 'PolicyAssignment']

@pulumi.input_type
class PolicyAssignmentArgs:
    def __init__(__self__, *,
                 custom_policy: Optional[pulumi.Input['PolicyAssignmentCustomPolicyArgs']] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 period: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_definition_id: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_filter: Optional[pulumi.Input['PolicyAssignmentPolicyFilterArgs']] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a PolicyAssignment resource.
        :param pulumi.Input['PolicyAssignmentCustomPolicyArgs'] custom_policy: Specifies the configuration of the custom policy.  
               The object structure is documented below.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the policy assignment, which contain maximum of
               `512` characters.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the policy assignment.  
               The valid length is limited from `1` to `64`.
               Change this parameter will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] parameters: Specifies the rule definition of the policy assignment.
        :param pulumi.Input[_builtins.str] period: Specifies the period of the policy assignment.  
               The valid values are as follows:
               + **One_Hour**
               + **Three_Hours**
               + **Six_Hours**
               + **Twelve_Hours**
               + **TwentyFour_Hours**
               
               Most one of `period` and `policy_filter` can be configured.
        :param pulumi.Input[_builtins.str] policy_definition_id: Specifies the ID of the built-in policy definition.  
               This parameter and `custom_policy` are alternative.
        :param pulumi.Input['PolicyAssignmentPolicyFilterArgs'] policy_filter: Specifies the configuration used to filter resources.  
               The object structure is documented below.
               
               > If the `period` is configured, it means that the evaluation is performed periodically.
               If the `policy_filter` is configured, it means that the evaluation is performed on the specified resources through
               the filter. If neither parameter is configured, it means that the evaluation is performed on all resources under the
               account.
        :param pulumi.Input[_builtins.str] status: Specifies the expect status of the policy.
               The valid values are **Enabled** and **Disabled**.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the policy assignment.
               
               <a name="rms_policy_filter"></a>
               The `policy_filter` block supports:
        """
        if custom_policy is not None:
            pulumi.set(__self__, "custom_policy", custom_policy)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if policy_definition_id is not None:
            pulumi.set(__self__, "policy_definition_id", policy_definition_id)
        if policy_filter is not None:
            pulumi.set(__self__, "policy_filter", policy_filter)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="customPolicy")
    def custom_policy(self) -> Optional[pulumi.Input['PolicyAssignmentCustomPolicyArgs']]:
        """
        Specifies the configuration of the custom policy.  
        The object structure is documented below.
        """
        return pulumi.get(self, "custom_policy")

    @custom_policy.setter
    def custom_policy(self, value: Optional[pulumi.Input['PolicyAssignmentCustomPolicyArgs']]):
        pulumi.set(self, "custom_policy", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the policy assignment, which contain maximum of
        `512` characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the policy assignment.  
        The valid length is limited from `1` to `64`.
        Change this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the rule definition of the policy assignment.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "parameters", value)

    @_builtins.property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the period of the policy assignment.  
        The valid values are as follows:
        + **One_Hour**
        + **Three_Hours**
        + **Six_Hours**
        + **Twelve_Hours**
        + **TwentyFour_Hours**

        Most one of `period` and `policy_filter` can be configured.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "period", value)

    @_builtins.property
    @pulumi.getter(name="policyDefinitionId")
    def policy_definition_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the built-in policy definition.  
        This parameter and `custom_policy` are alternative.
        """
        return pulumi.get(self, "policy_definition_id")

    @policy_definition_id.setter
    def policy_definition_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policy_definition_id", value)

    @_builtins.property
    @pulumi.getter(name="policyFilter")
    def policy_filter(self) -> Optional[pulumi.Input['PolicyAssignmentPolicyFilterArgs']]:
        """
        Specifies the configuration used to filter resources.  
        The object structure is documented below.

        > If the `period` is configured, it means that the evaluation is performed periodically.
        If the `policy_filter` is configured, it means that the evaluation is performed on the specified resources through
        the filter. If neither parameter is configured, it means that the evaluation is performed on all resources under the
        account.
        """
        return pulumi.get(self, "policy_filter")

    @policy_filter.setter
    def policy_filter(self, value: Optional[pulumi.Input['PolicyAssignmentPolicyFilterArgs']]):
        pulumi.set(self, "policy_filter", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the expect status of the policy.
        The valid values are **Enabled** and **Disabled**.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value pairs to associate with the policy assignment.

        <a name="rms_policy_filter"></a>
        The `policy_filter` block supports:
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _PolicyAssignmentState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 custom_policy: Optional[pulumi.Input['PolicyAssignmentCustomPolicyArgs']] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 period: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_definition_id: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_filter: Optional[pulumi.Input['PolicyAssignmentPolicyFilterArgs']] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering PolicyAssignment resources.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the policy assignment.
        :param pulumi.Input['PolicyAssignmentCustomPolicyArgs'] custom_policy: Specifies the configuration of the custom policy.  
               The object structure is documented below.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the policy assignment, which contain maximum of
               `512` characters.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the policy assignment.  
               The valid length is limited from `1` to `64`.
               Change this parameter will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] parameters: Specifies the rule definition of the policy assignment.
        :param pulumi.Input[_builtins.str] period: Specifies the period of the policy assignment.  
               The valid values are as follows:
               + **One_Hour**
               + **Three_Hours**
               + **Six_Hours**
               + **Twelve_Hours**
               + **TwentyFour_Hours**
               
               Most one of `period` and `policy_filter` can be configured.
        :param pulumi.Input[_builtins.str] policy_definition_id: Specifies the ID of the built-in policy definition.  
               This parameter and `custom_policy` are alternative.
        :param pulumi.Input['PolicyAssignmentPolicyFilterArgs'] policy_filter: Specifies the configuration used to filter resources.  
               The object structure is documented below.
               
               > If the `period` is configured, it means that the evaluation is performed periodically.
               If the `policy_filter` is configured, it means that the evaluation is performed on the specified resources through
               the filter. If neither parameter is configured, it means that the evaluation is performed on all resources under the
               account.
        :param pulumi.Input[_builtins.str] status: Specifies the expect status of the policy.
               The valid values are **Enabled** and **Disabled**.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the policy assignment.
               
               <a name="rms_policy_filter"></a>
               The `policy_filter` block supports:
        :param pulumi.Input[_builtins.str] type: The type of the policy assignment.  
               The valid values are as follows:
               + **builtin**
               + **custom**
        :param pulumi.Input[_builtins.str] updated_at: The latest update time of the policy assignment.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if custom_policy is not None:
            pulumi.set(__self__, "custom_policy", custom_policy)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if policy_definition_id is not None:
            pulumi.set(__self__, "policy_definition_id", policy_definition_id)
        if policy_filter is not None:
            pulumi.set(__self__, "policy_filter", policy_filter)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time of the policy assignment.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="customPolicy")
    def custom_policy(self) -> Optional[pulumi.Input['PolicyAssignmentCustomPolicyArgs']]:
        """
        Specifies the configuration of the custom policy.  
        The object structure is documented below.
        """
        return pulumi.get(self, "custom_policy")

    @custom_policy.setter
    def custom_policy(self, value: Optional[pulumi.Input['PolicyAssignmentCustomPolicyArgs']]):
        pulumi.set(self, "custom_policy", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the policy assignment, which contain maximum of
        `512` characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the policy assignment.  
        The valid length is limited from `1` to `64`.
        Change this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the rule definition of the policy assignment.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "parameters", value)

    @_builtins.property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the period of the policy assignment.  
        The valid values are as follows:
        + **One_Hour**
        + **Three_Hours**
        + **Six_Hours**
        + **Twelve_Hours**
        + **TwentyFour_Hours**

        Most one of `period` and `policy_filter` can be configured.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "period", value)

    @_builtins.property
    @pulumi.getter(name="policyDefinitionId")
    def policy_definition_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the built-in policy definition.  
        This parameter and `custom_policy` are alternative.
        """
        return pulumi.get(self, "policy_definition_id")

    @policy_definition_id.setter
    def policy_definition_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policy_definition_id", value)

    @_builtins.property
    @pulumi.getter(name="policyFilter")
    def policy_filter(self) -> Optional[pulumi.Input['PolicyAssignmentPolicyFilterArgs']]:
        """
        Specifies the configuration used to filter resources.  
        The object structure is documented below.

        > If the `period` is configured, it means that the evaluation is performed periodically.
        If the `policy_filter` is configured, it means that the evaluation is performed on the specified resources through
        the filter. If neither parameter is configured, it means that the evaluation is performed on all resources under the
        account.
        """
        return pulumi.get(self, "policy_filter")

    @policy_filter.setter
    def policy_filter(self, value: Optional[pulumi.Input['PolicyAssignmentPolicyFilterArgs']]):
        pulumi.set(self, "policy_filter", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the expect status of the policy.
        The valid values are **Enabled** and **Disabled**.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Specifies the key/value pairs to associate with the policy assignment.

        <a name="rms_policy_filter"></a>
        The `policy_filter` block supports:
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of the policy assignment.  
        The valid values are as follows:
        + **builtin**
        + **custom**
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The latest update time of the policy assignment.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("huaweicloud:rms/policyAssignment:PolicyAssignment")
class PolicyAssignment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 custom_policy: Optional[pulumi.Input[Union['PolicyAssignmentCustomPolicyArgs', 'PolicyAssignmentCustomPolicyArgsDict']]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 period: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_definition_id: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_filter: Optional[pulumi.Input[Union['PolicyAssignmentPolicyFilterArgs', 'PolicyAssignmentPolicyFilterArgsDict']]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Using this resource to assign the policy and evaluate HuaweiCloud resources.

        ## Example Usage

        ### Assign a custom policy

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        policy_assignment_name = config.require_object("policyAssignmentName")
        function_urn = config.require_object("functionUrn")
        function_version = config.require_object("functionVersion")
        rms_admin_trust_agency = config.require_object("rmsAdminTrustAgency")
        test = huaweicloud.rms.PolicyAssignment("test",
            name=policy_assignment_name,
            description="The ECS instances that do not conform to the custom function logic are considered non-compliant.",
            status="Enabled",
            custom_policy={
                "function_urn": f"{function_urn}:{function_version}",
                "auth_type": "agency",
                "auth_value": {
                    "agency_name": f"\\"{rms_admin_trust_agency}\\"",
                },
            },
            parameters={
                "string_example": "\\"string_value\\"",
                "array_example": "[\\"array_element\\"]",
                "object_example": "{\\"terraform_version\\":\\"1.xx.x\\"}",
            })
        ```

        ## Import

        Policy assignments can be imported using their `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:rms/policyAssignment:PolicyAssignment test 63f48e3762ce955981ab7e25
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['PolicyAssignmentCustomPolicyArgs', 'PolicyAssignmentCustomPolicyArgsDict']] custom_policy: Specifies the configuration of the custom policy.  
               The object structure is documented below.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the policy assignment, which contain maximum of
               `512` characters.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the policy assignment.  
               The valid length is limited from `1` to `64`.
               Change this parameter will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] parameters: Specifies the rule definition of the policy assignment.
        :param pulumi.Input[_builtins.str] period: Specifies the period of the policy assignment.  
               The valid values are as follows:
               + **One_Hour**
               + **Three_Hours**
               + **Six_Hours**
               + **Twelve_Hours**
               + **TwentyFour_Hours**
               
               Most one of `period` and `policy_filter` can be configured.
        :param pulumi.Input[_builtins.str] policy_definition_id: Specifies the ID of the built-in policy definition.  
               This parameter and `custom_policy` are alternative.
        :param pulumi.Input[Union['PolicyAssignmentPolicyFilterArgs', 'PolicyAssignmentPolicyFilterArgsDict']] policy_filter: Specifies the configuration used to filter resources.  
               The object structure is documented below.
               
               > If the `period` is configured, it means that the evaluation is performed periodically.
               If the `policy_filter` is configured, it means that the evaluation is performed on the specified resources through
               the filter. If neither parameter is configured, it means that the evaluation is performed on all resources under the
               account.
        :param pulumi.Input[_builtins.str] status: Specifies the expect status of the policy.
               The valid values are **Enabled** and **Disabled**.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the policy assignment.
               
               <a name="rms_policy_filter"></a>
               The `policy_filter` block supports:
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[PolicyAssignmentArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Using this resource to assign the policy and evaluate HuaweiCloud resources.

        ## Example Usage

        ### Assign a custom policy

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        policy_assignment_name = config.require_object("policyAssignmentName")
        function_urn = config.require_object("functionUrn")
        function_version = config.require_object("functionVersion")
        rms_admin_trust_agency = config.require_object("rmsAdminTrustAgency")
        test = huaweicloud.rms.PolicyAssignment("test",
            name=policy_assignment_name,
            description="The ECS instances that do not conform to the custom function logic are considered non-compliant.",
            status="Enabled",
            custom_policy={
                "function_urn": f"{function_urn}:{function_version}",
                "auth_type": "agency",
                "auth_value": {
                    "agency_name": f"\\"{rms_admin_trust_agency}\\"",
                },
            },
            parameters={
                "string_example": "\\"string_value\\"",
                "array_example": "[\\"array_element\\"]",
                "object_example": "{\\"terraform_version\\":\\"1.xx.x\\"}",
            })
        ```

        ## Import

        Policy assignments can be imported using their `id`, e.g.

        bash

        ```sh
        $ pulumi import huaweicloud:rms/policyAssignment:PolicyAssignment test 63f48e3762ce955981ab7e25
        ```

        :param str resource_name: The name of the resource.
        :param PolicyAssignmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PolicyAssignmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 custom_policy: Optional[pulumi.Input[Union['PolicyAssignmentCustomPolicyArgs', 'PolicyAssignmentCustomPolicyArgsDict']]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 period: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_definition_id: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_filter: Optional[pulumi.Input[Union['PolicyAssignmentPolicyFilterArgs', 'PolicyAssignmentPolicyFilterArgsDict']]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PolicyAssignmentArgs.__new__(PolicyAssignmentArgs)

            __props__.__dict__["custom_policy"] = custom_policy
            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            __props__.__dict__["parameters"] = parameters
            __props__.__dict__["period"] = period
            __props__.__dict__["policy_definition_id"] = policy_definition_id
            __props__.__dict__["policy_filter"] = policy_filter
            __props__.__dict__["status"] = status
            __props__.__dict__["tags"] = tags
            __props__.__dict__["created_at"] = None
            __props__.__dict__["type"] = None
            __props__.__dict__["updated_at"] = None
        super(PolicyAssignment, __self__).__init__(
            'huaweicloud:rms/policyAssignment:PolicyAssignment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            custom_policy: Optional[pulumi.Input[Union['PolicyAssignmentCustomPolicyArgs', 'PolicyAssignmentCustomPolicyArgsDict']]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            period: Optional[pulumi.Input[_builtins.str]] = None,
            policy_definition_id: Optional[pulumi.Input[_builtins.str]] = None,
            policy_filter: Optional[pulumi.Input[Union['PolicyAssignmentPolicyFilterArgs', 'PolicyAssignmentPolicyFilterArgsDict']]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None) -> 'PolicyAssignment':
        """
        Get an existing PolicyAssignment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the policy assignment.
        :param pulumi.Input[Union['PolicyAssignmentCustomPolicyArgs', 'PolicyAssignmentCustomPolicyArgsDict']] custom_policy: Specifies the configuration of the custom policy.  
               The object structure is documented below.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the policy assignment, which contain maximum of
               `512` characters.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the policy assignment.  
               The valid length is limited from `1` to `64`.
               Change this parameter will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] parameters: Specifies the rule definition of the policy assignment.
        :param pulumi.Input[_builtins.str] period: Specifies the period of the policy assignment.  
               The valid values are as follows:
               + **One_Hour**
               + **Three_Hours**
               + **Six_Hours**
               + **Twelve_Hours**
               + **TwentyFour_Hours**
               
               Most one of `period` and `policy_filter` can be configured.
        :param pulumi.Input[_builtins.str] policy_definition_id: Specifies the ID of the built-in policy definition.  
               This parameter and `custom_policy` are alternative.
        :param pulumi.Input[Union['PolicyAssignmentPolicyFilterArgs', 'PolicyAssignmentPolicyFilterArgsDict']] policy_filter: Specifies the configuration used to filter resources.  
               The object structure is documented below.
               
               > If the `period` is configured, it means that the evaluation is performed periodically.
               If the `policy_filter` is configured, it means that the evaluation is performed on the specified resources through
               the filter. If neither parameter is configured, it means that the evaluation is performed on all resources under the
               account.
        :param pulumi.Input[_builtins.str] status: Specifies the expect status of the policy.
               The valid values are **Enabled** and **Disabled**.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Specifies the key/value pairs to associate with the policy assignment.
               
               <a name="rms_policy_filter"></a>
               The `policy_filter` block supports:
        :param pulumi.Input[_builtins.str] type: The type of the policy assignment.  
               The valid values are as follows:
               + **builtin**
               + **custom**
        :param pulumi.Input[_builtins.str] updated_at: The latest update time of the policy assignment.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PolicyAssignmentState.__new__(_PolicyAssignmentState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["custom_policy"] = custom_policy
        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        __props__.__dict__["parameters"] = parameters
        __props__.__dict__["period"] = period
        __props__.__dict__["policy_definition_id"] = policy_definition_id
        __props__.__dict__["policy_filter"] = policy_filter
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["type"] = type
        __props__.__dict__["updated_at"] = updated_at
        return PolicyAssignment(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The creation time of the policy assignment.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="customPolicy")
    def custom_policy(self) -> pulumi.Output[Optional['outputs.PolicyAssignmentCustomPolicy']]:
        """
        Specifies the configuration of the custom policy.  
        The object structure is documented below.
        """
        return pulumi.get(self, "custom_policy")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of the policy assignment, which contain maximum of
        `512` characters.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the policy assignment.  
        The valid length is limited from `1` to `64`.
        Change this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Specifies the rule definition of the policy assignment.
        """
        return pulumi.get(self, "parameters")

    @_builtins.property
    @pulumi.getter
    def period(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the period of the policy assignment.  
        The valid values are as follows:
        + **One_Hour**
        + **Three_Hours**
        + **Six_Hours**
        + **Twelve_Hours**
        + **TwentyFour_Hours**

        Most one of `period` and `policy_filter` can be configured.
        """
        return pulumi.get(self, "period")

    @_builtins.property
    @pulumi.getter(name="policyDefinitionId")
    def policy_definition_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the ID of the built-in policy definition.  
        This parameter and `custom_policy` are alternative.
        """
        return pulumi.get(self, "policy_definition_id")

    @_builtins.property
    @pulumi.getter(name="policyFilter")
    def policy_filter(self) -> pulumi.Output[Optional['outputs.PolicyAssignmentPolicyFilter']]:
        """
        Specifies the configuration used to filter resources.  
        The object structure is documented below.

        > If the `period` is configured, it means that the evaluation is performed periodically.
        If the `policy_filter` is configured, it means that the evaluation is performed on the specified resources through
        the filter. If neither parameter is configured, it means that the evaluation is performed on all resources under the
        account.
        """
        return pulumi.get(self, "policy_filter")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the expect status of the policy.
        The valid values are **Enabled** and **Disabled**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Specifies the key/value pairs to associate with the policy assignment.

        <a name="rms_policy_filter"></a>
        The `policy_filter` block supports:
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        The type of the policy assignment.  
        The valid values are as follows:
        + **builtin**
        + **custom**
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The latest update time of the policy assignment.
        """
        return pulumi.get(self, "updated_at")

