// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package evs

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a volume resource within HuaweiCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Evs"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			availabilityZone := cfg.RequireObject("availabilityZone")
//			_, err := Evs.NewVolume(ctx, "volume", &Evs.VolumeArgs{
//				Description:      pulumi.String("my volume"),
//				VolumeType:       pulumi.String("SAS"),
//				Size:             pulumi.Int(20),
//				AvailabilityZone: pulumi.Any(availabilityZone),
//				Tags: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//					"key": pulumi.String("value"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### With KMS Encryption
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Evs"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			availabilityZone := cfg.RequireObject("availabilityZone")
//			_, err := Evs.NewVolume(ctx, "volume", &Evs.VolumeArgs{
//				Description:      pulumi.String("my volume"),
//				VolumeType:       pulumi.String("SAS"),
//				Size:             pulumi.Int(20),
//				KmsId:            pulumi.Any(_var.Kms_id),
//				AvailabilityZone: pulumi.Any(availabilityZone),
//				Tags: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//					"key": pulumi.String("value"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### With Server_id
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Ecs"
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Evs"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Ecs"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			imageId := cfg.RequireObject("imageId")
//			flavorId := cfg.RequireObject("flavorId")
//			keyPair := cfg.RequireObject("keyPair")
//			securityGroupId := cfg.RequireObject("securityGroupId")
//			availabilityZone := cfg.RequireObject("availabilityZone")
//			subnetId := cfg.RequireObject("subnetId")
//			myinstance, err := Ecs.NewInstance(ctx, "myinstance", &Ecs.InstanceArgs{
//				ImageId:  pulumi.Any(imageId),
//				FlavorId: pulumi.Any(flavorId),
//				KeyPair:  pulumi.Any(keyPair),
//				SecurityGroupIds: pulumi.StringArray{
//					pulumi.Any(securityGroupId),
//				},
//				AvailabilityZone: pulumi.Any(availabilityZone),
//				Networks: ecs.InstanceNetworkArray{
//					&ecs.InstanceNetworkArgs{
//						Uuid: pulumi.Any(subnetId),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Evs.NewVolume(ctx, "volume", &Evs.VolumeArgs{
//				Description:      pulumi.String("my volume"),
//				VolumeType:       pulumi.String("SAS"),
//				Size:             pulumi.Int(20),
//				AvailabilityZone: pulumi.Any(availabilityZone),
//				ServerId:         myinstance.ID(),
//				Tags: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//					"key": pulumi.String("value"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Volumes can be imported using the `id`, e.g. bash
//
// ```sh
//
//	$ pulumi import huaweicloud:Evs/volume:Volume test <id>
//
// ```
//
//	Note that the imported state may not be identical to your resource definition, due to some attributes missing from the API response, security or some other reason. The missing attributes include`cascade`, `period_unit`, `period`, `server_id`, `auto_renew`, and `charging_mode`. It is generally recommended running terraform plan after importing a disk. You can then decide if changes should be applied to the disk, or the resource definition should be updated to align with the disk. Also, you can ignore changes as below. hcl resource "huaweicloud_evs_volume" "test" {
//
//	...
//
//	lifecycle {
//
//	ignore_changes = [
//
//	cascade, period_unit, period, server_id, auto_renew, charging_mode,
//
// ]
//
//	} }
type Volume struct {
	pulumi.CustomResourceState

	// The key-value pair disk metadata. Valid key-value pairs are as follows:
	// + **__system__cmkid**: The encryption CMK ID in metadata. This attribute is used together with **__system__encrypted**
	//   for encryption.
	// + **__system__encrypted**: The encryption field in metadata. The value can be `0` (no encryption) or `1` (encryption).
	//   If this attribute is not specified, the encryption attribute of the disk is the same as that of the data source.
	//   If the disk is not created from a data source, the disk is not encrypted by default.
	// + **full_clone**: The creation method when the disk is created from a snapshot. `0`: linked clone. `1`: full clone.
	// + **hw:passthrough**: If this attribute value is **true**, the disk device type is SCSI, which allows ECS OSs to directly
	//   access the underlying storage media and supports SCSI reservation commands. If this attribute is set to **false**,
	//   the disk device type is VBD, which is also the default type. VBD supports only simple SCSI read/write commands.
	//   If this attribute is not specified, the disk device type is VBD.
	// + **orderID**: The attribute that describes the disk billing mode in metadata. If this attribute has a value, the disk
	//   is billed on a yearly/monthly basis. If this attribute is empty, the disk is billed on a pay-per-use basis.
	AllMetadata pulumi.StringMapOutput `pulumi:"allMetadata"`
	// The metadata of the disk image.
	AllVolumeImageMetadata pulumi.StringMapOutput `pulumi:"allVolumeImageMetadata"`
	// If a disk is attached to an instance, this attribute will display the attachment ID, instance ID, and
	// the device as the instance sees it. The attachment structure is documented below.
	Attachments VolumeAttachmentArrayOutput `pulumi:"attachments"`
	// Deprecated: Deprecated
	AutoPay pulumi.StringPtrOutput `pulumi:"autoPay"`
	// Specifies whether auto-renew is enabled.
	// Valid values are **true** and **false**. Defaults to **false**.
	AutoRenew pulumi.StringPtrOutput `pulumi:"autoRenew"`
	// Specifies the availability zone for the disk.
	AvailabilityZone pulumi.StringOutput `pulumi:"availabilityZone"`
	// Specifies the backup ID from which to create the disk.
	BackupId pulumi.StringPtrOutput `pulumi:"backupId"`
	// Whether the disk is bootable. **true**: The disk is bootable. **false**: The disk is not bootable.
	Bootable pulumi.StringOutput `pulumi:"bootable"`
	// Specifies the delete mode of snapshot. The default value is **false**. All snapshot
	// associated with the disk will also be deleted when the parameter is set to **true**.
	Cascade pulumi.BoolPtrOutput `pulumi:"cascade"`
	// Specifies the charging mode of the disk.
	// The valid values are as follows:
	// + **prePaid**: the yearly/monthly billing mode.
	// + **postPaid**: the pay-per-use billing mode.
	ChargingMode pulumi.StringOutput `pulumi:"chargingMode"`
	// The time when the disk was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Specifies the ID of the DSS storage pool accommodating the disk.
	DedicatedStorageId pulumi.StringPtrOutput `pulumi:"dedicatedStorageId"`
	// The name of the DSS storage pool accommodating the disk.
	DedicatedStorageName pulumi.StringOutput `pulumi:"dedicatedStorageName"`
	// Specifies the disk description. You can enter up to `85` characters.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies the device type of disk to create. Valid options are **VBD** and
	// **SCSI**. Defaults to **VBD**.
	DeviceType pulumi.StringPtrOutput `pulumi:"deviceType"`
	// Specifies the enterprise project ID of the disk.
	// For enterprise users, if omitted, default enterprise project will be used.
	EnterpriseProjectId pulumi.StringOutput `pulumi:"enterpriseProjectId"`
	// Specifies the image ID from which to create the disk.
	ImageId pulumi.StringPtrOutput `pulumi:"imageId"`
	// Specifies the IOPS(Input/Output Operations Per Second) for the volume.
	// The field is valid and required when `volumeType` is set to **GPSSD2** or **ESSD2**.
	// This field can be changed only when the disk status is Available or In-use.
	Iops pulumi.IntOutput `pulumi:"iops"`
	// The disk IOPS information. This attribute appears only for a general purpose SSD V2 or an extreme
	// SSD V2 disk. The iopsAttribute structure is documented below.
	IopsAttributes VolumeIopsAttributeArrayOutput `pulumi:"iopsAttributes"`
	// Specifies the Encryption KMS ID to create the disk.
	KmsId pulumi.StringPtrOutput `pulumi:"kmsId"`
	// The disk URI.
	// The links structure is documented below.
	Links VolumeLinkArrayOutput `pulumi:"links"`
	// Specifies whether the disk is shareable. Defaults to **false**.
	Multiattach pulumi.BoolPtrOutput `pulumi:"multiattach"`
	// Specifies the disk name. You can enter up to `64` characters.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the charging period of the disk.
	// + If `periodUnit` is set to **month**, the value ranges from `1` to `9`.
	// + If `periodUnit` is set to **year**, the valid value is `1`.
	Period pulumi.IntPtrOutput `pulumi:"period"`
	// Specifies the charging period unit of the disk.
	// Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
	PeriodUnit pulumi.StringPtrOutput `pulumi:"periodUnit"`
	// Specifies the region in which to create the disk. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// The disk serial number. This field is returned only for non-HyperMetro SCSI disks and is used for
	// disk mapping in the VM.
	SerialNumber pulumi.StringOutput `pulumi:"serialNumber"`
	// Specifies the server ID to which the cloud volume is to be mounted.
	// After specifying the value of this field, the cloud volume will be automatically attached on the cloud server.
	// The chargingMode of the created cloud volume will be consistent with that of the cloud server.
	// Currently, only ECS cloud-servers are supported, and BMS bare metal cloud-servers are not supported yet.
	ServerId pulumi.StringPtrOutput `pulumi:"serverId"`
	// The service type. Supported services are **EVS**, **DSS**, and **DESS**.
	ServiceType pulumi.StringOutput `pulumi:"serviceType"`
	// Specifies the disk size, in GB.
	// For system disk, the valid value ranges from `1` GB to `1,024` GB.
	// For data disk, the valid value ranges from `10` GB to `32,768` GB.
	Size pulumi.IntOutput `pulumi:"size"`
	// Specifies the snapshot ID from which to create the disk.
	SnapshotId pulumi.StringPtrOutput `pulumi:"snapshotId"`
	// The disk status.
	// Please refer to [EVS Disk Status](https://support.huaweicloud.com/intl/en-us/api-evs/evs_04_0040.html).
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the key/value pairs to associate with the disk.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Specifies the throughput for the volume. The Unit is MiB/s.
	// The field is valid and required when `volumeType` is set to **GPSSD2**.
	// This field can be changed only when the disk status is Available or In-use.
	Throughput pulumi.IntOutput `pulumi:"throughput"`
	// The disk throughput information. This attribute appears only for a general purpose SSD V2 disk.
	// The throughputAttribute structure is documented below.
	ThroughputAttributes VolumeThroughputAttributeArrayOutput `pulumi:"throughputAttributes"`
	// The time when the disk was updated.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// Specifies the disk type. Valid values are as follows:
	// + **SAS**: High I/O type.
	// + **SSD**: Ultra-high I/O type.
	// + **GPSSD**: General purpose SSD type.
	// + **ESSD**: Extreme SSD type.
	// + **GPSSD2**: General purpose SSD V2 type.
	// + **ESSD2**: Extreme SSD V2 type.
	VolumeType pulumi.StringOutput `pulumi:"volumeType"`
	// The unique identifier used for mounting the EVS disk.
	Wwn pulumi.StringOutput `pulumi:"wwn"`
}

// NewVolume registers a new resource with the given unique name, arguments, and options.
func NewVolume(ctx *pulumi.Context,
	name string, args *VolumeArgs, opts ...pulumi.ResourceOption) (*Volume, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AvailabilityZone == nil {
		return nil, errors.New("invalid value for required argument 'AvailabilityZone'")
	}
	if args.VolumeType == nil {
		return nil, errors.New("invalid value for required argument 'VolumeType'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Volume
	err := ctx.RegisterResource("huaweicloud:Evs/volume:Volume", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVolume gets an existing Volume resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolume(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VolumeState, opts ...pulumi.ResourceOption) (*Volume, error) {
	var resource Volume
	err := ctx.ReadResource("huaweicloud:Evs/volume:Volume", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Volume resources.
type volumeState struct {
	// The key-value pair disk metadata. Valid key-value pairs are as follows:
	// + **__system__cmkid**: The encryption CMK ID in metadata. This attribute is used together with **__system__encrypted**
	//   for encryption.
	// + **__system__encrypted**: The encryption field in metadata. The value can be `0` (no encryption) or `1` (encryption).
	//   If this attribute is not specified, the encryption attribute of the disk is the same as that of the data source.
	//   If the disk is not created from a data source, the disk is not encrypted by default.
	// + **full_clone**: The creation method when the disk is created from a snapshot. `0`: linked clone. `1`: full clone.
	// + **hw:passthrough**: If this attribute value is **true**, the disk device type is SCSI, which allows ECS OSs to directly
	//   access the underlying storage media and supports SCSI reservation commands. If this attribute is set to **false**,
	//   the disk device type is VBD, which is also the default type. VBD supports only simple SCSI read/write commands.
	//   If this attribute is not specified, the disk device type is VBD.
	// + **orderID**: The attribute that describes the disk billing mode in metadata. If this attribute has a value, the disk
	//   is billed on a yearly/monthly basis. If this attribute is empty, the disk is billed on a pay-per-use basis.
	AllMetadata map[string]string `pulumi:"allMetadata"`
	// The metadata of the disk image.
	AllVolumeImageMetadata map[string]string `pulumi:"allVolumeImageMetadata"`
	// If a disk is attached to an instance, this attribute will display the attachment ID, instance ID, and
	// the device as the instance sees it. The attachment structure is documented below.
	Attachments []VolumeAttachment `pulumi:"attachments"`
	// Deprecated: Deprecated
	AutoPay *string `pulumi:"autoPay"`
	// Specifies whether auto-renew is enabled.
	// Valid values are **true** and **false**. Defaults to **false**.
	AutoRenew *string `pulumi:"autoRenew"`
	// Specifies the availability zone for the disk.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// Specifies the backup ID from which to create the disk.
	BackupId *string `pulumi:"backupId"`
	// Whether the disk is bootable. **true**: The disk is bootable. **false**: The disk is not bootable.
	Bootable *string `pulumi:"bootable"`
	// Specifies the delete mode of snapshot. The default value is **false**. All snapshot
	// associated with the disk will also be deleted when the parameter is set to **true**.
	Cascade *bool `pulumi:"cascade"`
	// Specifies the charging mode of the disk.
	// The valid values are as follows:
	// + **prePaid**: the yearly/monthly billing mode.
	// + **postPaid**: the pay-per-use billing mode.
	ChargingMode *string `pulumi:"chargingMode"`
	// The time when the disk was created.
	CreatedAt *string `pulumi:"createdAt"`
	// Specifies the ID of the DSS storage pool accommodating the disk.
	DedicatedStorageId *string `pulumi:"dedicatedStorageId"`
	// The name of the DSS storage pool accommodating the disk.
	DedicatedStorageName *string `pulumi:"dedicatedStorageName"`
	// Specifies the disk description. You can enter up to `85` characters.
	Description *string `pulumi:"description"`
	// Specifies the device type of disk to create. Valid options are **VBD** and
	// **SCSI**. Defaults to **VBD**.
	DeviceType *string `pulumi:"deviceType"`
	// Specifies the enterprise project ID of the disk.
	// For enterprise users, if omitted, default enterprise project will be used.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies the image ID from which to create the disk.
	ImageId *string `pulumi:"imageId"`
	// Specifies the IOPS(Input/Output Operations Per Second) for the volume.
	// The field is valid and required when `volumeType` is set to **GPSSD2** or **ESSD2**.
	// This field can be changed only when the disk status is Available or In-use.
	Iops *int `pulumi:"iops"`
	// The disk IOPS information. This attribute appears only for a general purpose SSD V2 or an extreme
	// SSD V2 disk. The iopsAttribute structure is documented below.
	IopsAttributes []VolumeIopsAttribute `pulumi:"iopsAttributes"`
	// Specifies the Encryption KMS ID to create the disk.
	KmsId *string `pulumi:"kmsId"`
	// The disk URI.
	// The links structure is documented below.
	Links []VolumeLink `pulumi:"links"`
	// Specifies whether the disk is shareable. Defaults to **false**.
	Multiattach *bool `pulumi:"multiattach"`
	// Specifies the disk name. You can enter up to `64` characters.
	Name *string `pulumi:"name"`
	// Specifies the charging period of the disk.
	// + If `periodUnit` is set to **month**, the value ranges from `1` to `9`.
	// + If `periodUnit` is set to **year**, the valid value is `1`.
	Period *int `pulumi:"period"`
	// Specifies the charging period unit of the disk.
	// Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
	PeriodUnit *string `pulumi:"periodUnit"`
	// Specifies the region in which to create the disk. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// The disk serial number. This field is returned only for non-HyperMetro SCSI disks and is used for
	// disk mapping in the VM.
	SerialNumber *string `pulumi:"serialNumber"`
	// Specifies the server ID to which the cloud volume is to be mounted.
	// After specifying the value of this field, the cloud volume will be automatically attached on the cloud server.
	// The chargingMode of the created cloud volume will be consistent with that of the cloud server.
	// Currently, only ECS cloud-servers are supported, and BMS bare metal cloud-servers are not supported yet.
	ServerId *string `pulumi:"serverId"`
	// The service type. Supported services are **EVS**, **DSS**, and **DESS**.
	ServiceType *string `pulumi:"serviceType"`
	// Specifies the disk size, in GB.
	// For system disk, the valid value ranges from `1` GB to `1,024` GB.
	// For data disk, the valid value ranges from `10` GB to `32,768` GB.
	Size *int `pulumi:"size"`
	// Specifies the snapshot ID from which to create the disk.
	SnapshotId *string `pulumi:"snapshotId"`
	// The disk status.
	// Please refer to [EVS Disk Status](https://support.huaweicloud.com/intl/en-us/api-evs/evs_04_0040.html).
	Status *string `pulumi:"status"`
	// Specifies the key/value pairs to associate with the disk.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the throughput for the volume. The Unit is MiB/s.
	// The field is valid and required when `volumeType` is set to **GPSSD2**.
	// This field can be changed only when the disk status is Available or In-use.
	Throughput *int `pulumi:"throughput"`
	// The disk throughput information. This attribute appears only for a general purpose SSD V2 disk.
	// The throughputAttribute structure is documented below.
	ThroughputAttributes []VolumeThroughputAttribute `pulumi:"throughputAttributes"`
	// The time when the disk was updated.
	UpdatedAt *string `pulumi:"updatedAt"`
	// Specifies the disk type. Valid values are as follows:
	// + **SAS**: High I/O type.
	// + **SSD**: Ultra-high I/O type.
	// + **GPSSD**: General purpose SSD type.
	// + **ESSD**: Extreme SSD type.
	// + **GPSSD2**: General purpose SSD V2 type.
	// + **ESSD2**: Extreme SSD V2 type.
	VolumeType *string `pulumi:"volumeType"`
	// The unique identifier used for mounting the EVS disk.
	Wwn *string `pulumi:"wwn"`
}

type VolumeState struct {
	// The key-value pair disk metadata. Valid key-value pairs are as follows:
	// + **__system__cmkid**: The encryption CMK ID in metadata. This attribute is used together with **__system__encrypted**
	//   for encryption.
	// + **__system__encrypted**: The encryption field in metadata. The value can be `0` (no encryption) or `1` (encryption).
	//   If this attribute is not specified, the encryption attribute of the disk is the same as that of the data source.
	//   If the disk is not created from a data source, the disk is not encrypted by default.
	// + **full_clone**: The creation method when the disk is created from a snapshot. `0`: linked clone. `1`: full clone.
	// + **hw:passthrough**: If this attribute value is **true**, the disk device type is SCSI, which allows ECS OSs to directly
	//   access the underlying storage media and supports SCSI reservation commands. If this attribute is set to **false**,
	//   the disk device type is VBD, which is also the default type. VBD supports only simple SCSI read/write commands.
	//   If this attribute is not specified, the disk device type is VBD.
	// + **orderID**: The attribute that describes the disk billing mode in metadata. If this attribute has a value, the disk
	//   is billed on a yearly/monthly basis. If this attribute is empty, the disk is billed on a pay-per-use basis.
	AllMetadata pulumi.StringMapInput
	// The metadata of the disk image.
	AllVolumeImageMetadata pulumi.StringMapInput
	// If a disk is attached to an instance, this attribute will display the attachment ID, instance ID, and
	// the device as the instance sees it. The attachment structure is documented below.
	Attachments VolumeAttachmentArrayInput
	// Deprecated: Deprecated
	AutoPay pulumi.StringPtrInput
	// Specifies whether auto-renew is enabled.
	// Valid values are **true** and **false**. Defaults to **false**.
	AutoRenew pulumi.StringPtrInput
	// Specifies the availability zone for the disk.
	AvailabilityZone pulumi.StringPtrInput
	// Specifies the backup ID from which to create the disk.
	BackupId pulumi.StringPtrInput
	// Whether the disk is bootable. **true**: The disk is bootable. **false**: The disk is not bootable.
	Bootable pulumi.StringPtrInput
	// Specifies the delete mode of snapshot. The default value is **false**. All snapshot
	// associated with the disk will also be deleted when the parameter is set to **true**.
	Cascade pulumi.BoolPtrInput
	// Specifies the charging mode of the disk.
	// The valid values are as follows:
	// + **prePaid**: the yearly/monthly billing mode.
	// + **postPaid**: the pay-per-use billing mode.
	ChargingMode pulumi.StringPtrInput
	// The time when the disk was created.
	CreatedAt pulumi.StringPtrInput
	// Specifies the ID of the DSS storage pool accommodating the disk.
	DedicatedStorageId pulumi.StringPtrInput
	// The name of the DSS storage pool accommodating the disk.
	DedicatedStorageName pulumi.StringPtrInput
	// Specifies the disk description. You can enter up to `85` characters.
	Description pulumi.StringPtrInput
	// Specifies the device type of disk to create. Valid options are **VBD** and
	// **SCSI**. Defaults to **VBD**.
	DeviceType pulumi.StringPtrInput
	// Specifies the enterprise project ID of the disk.
	// For enterprise users, if omitted, default enterprise project will be used.
	EnterpriseProjectId pulumi.StringPtrInput
	// Specifies the image ID from which to create the disk.
	ImageId pulumi.StringPtrInput
	// Specifies the IOPS(Input/Output Operations Per Second) for the volume.
	// The field is valid and required when `volumeType` is set to **GPSSD2** or **ESSD2**.
	// This field can be changed only when the disk status is Available or In-use.
	Iops pulumi.IntPtrInput
	// The disk IOPS information. This attribute appears only for a general purpose SSD V2 or an extreme
	// SSD V2 disk. The iopsAttribute structure is documented below.
	IopsAttributes VolumeIopsAttributeArrayInput
	// Specifies the Encryption KMS ID to create the disk.
	KmsId pulumi.StringPtrInput
	// The disk URI.
	// The links structure is documented below.
	Links VolumeLinkArrayInput
	// Specifies whether the disk is shareable. Defaults to **false**.
	Multiattach pulumi.BoolPtrInput
	// Specifies the disk name. You can enter up to `64` characters.
	Name pulumi.StringPtrInput
	// Specifies the charging period of the disk.
	// + If `periodUnit` is set to **month**, the value ranges from `1` to `9`.
	// + If `periodUnit` is set to **year**, the valid value is `1`.
	Period pulumi.IntPtrInput
	// Specifies the charging period unit of the disk.
	// Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
	PeriodUnit pulumi.StringPtrInput
	// Specifies the region in which to create the disk. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// The disk serial number. This field is returned only for non-HyperMetro SCSI disks and is used for
	// disk mapping in the VM.
	SerialNumber pulumi.StringPtrInput
	// Specifies the server ID to which the cloud volume is to be mounted.
	// After specifying the value of this field, the cloud volume will be automatically attached on the cloud server.
	// The chargingMode of the created cloud volume will be consistent with that of the cloud server.
	// Currently, only ECS cloud-servers are supported, and BMS bare metal cloud-servers are not supported yet.
	ServerId pulumi.StringPtrInput
	// The service type. Supported services are **EVS**, **DSS**, and **DESS**.
	ServiceType pulumi.StringPtrInput
	// Specifies the disk size, in GB.
	// For system disk, the valid value ranges from `1` GB to `1,024` GB.
	// For data disk, the valid value ranges from `10` GB to `32,768` GB.
	Size pulumi.IntPtrInput
	// Specifies the snapshot ID from which to create the disk.
	SnapshotId pulumi.StringPtrInput
	// The disk status.
	// Please refer to [EVS Disk Status](https://support.huaweicloud.com/intl/en-us/api-evs/evs_04_0040.html).
	Status pulumi.StringPtrInput
	// Specifies the key/value pairs to associate with the disk.
	Tags pulumi.StringMapInput
	// Specifies the throughput for the volume. The Unit is MiB/s.
	// The field is valid and required when `volumeType` is set to **GPSSD2**.
	// This field can be changed only when the disk status is Available or In-use.
	Throughput pulumi.IntPtrInput
	// The disk throughput information. This attribute appears only for a general purpose SSD V2 disk.
	// The throughputAttribute structure is documented below.
	ThroughputAttributes VolumeThroughputAttributeArrayInput
	// The time when the disk was updated.
	UpdatedAt pulumi.StringPtrInput
	// Specifies the disk type. Valid values are as follows:
	// + **SAS**: High I/O type.
	// + **SSD**: Ultra-high I/O type.
	// + **GPSSD**: General purpose SSD type.
	// + **ESSD**: Extreme SSD type.
	// + **GPSSD2**: General purpose SSD V2 type.
	// + **ESSD2**: Extreme SSD V2 type.
	VolumeType pulumi.StringPtrInput
	// The unique identifier used for mounting the EVS disk.
	Wwn pulumi.StringPtrInput
}

func (VolumeState) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeState)(nil)).Elem()
}

type volumeArgs struct {
	// Deprecated: Deprecated
	AutoPay *string `pulumi:"autoPay"`
	// Specifies whether auto-renew is enabled.
	// Valid values are **true** and **false**. Defaults to **false**.
	AutoRenew *string `pulumi:"autoRenew"`
	// Specifies the availability zone for the disk.
	AvailabilityZone string `pulumi:"availabilityZone"`
	// Specifies the backup ID from which to create the disk.
	BackupId *string `pulumi:"backupId"`
	// Specifies the delete mode of snapshot. The default value is **false**. All snapshot
	// associated with the disk will also be deleted when the parameter is set to **true**.
	Cascade *bool `pulumi:"cascade"`
	// Specifies the charging mode of the disk.
	// The valid values are as follows:
	// + **prePaid**: the yearly/monthly billing mode.
	// + **postPaid**: the pay-per-use billing mode.
	ChargingMode *string `pulumi:"chargingMode"`
	// Specifies the ID of the DSS storage pool accommodating the disk.
	DedicatedStorageId *string `pulumi:"dedicatedStorageId"`
	// Specifies the disk description. You can enter up to `85` characters.
	Description *string `pulumi:"description"`
	// Specifies the device type of disk to create. Valid options are **VBD** and
	// **SCSI**. Defaults to **VBD**.
	DeviceType *string `pulumi:"deviceType"`
	// Specifies the enterprise project ID of the disk.
	// For enterprise users, if omitted, default enterprise project will be used.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies the image ID from which to create the disk.
	ImageId *string `pulumi:"imageId"`
	// Specifies the IOPS(Input/Output Operations Per Second) for the volume.
	// The field is valid and required when `volumeType` is set to **GPSSD2** or **ESSD2**.
	// This field can be changed only when the disk status is Available or In-use.
	Iops *int `pulumi:"iops"`
	// Specifies the Encryption KMS ID to create the disk.
	KmsId *string `pulumi:"kmsId"`
	// Specifies whether the disk is shareable. Defaults to **false**.
	Multiattach *bool `pulumi:"multiattach"`
	// Specifies the disk name. You can enter up to `64` characters.
	Name *string `pulumi:"name"`
	// Specifies the charging period of the disk.
	// + If `periodUnit` is set to **month**, the value ranges from `1` to `9`.
	// + If `periodUnit` is set to **year**, the valid value is `1`.
	Period *int `pulumi:"period"`
	// Specifies the charging period unit of the disk.
	// Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
	PeriodUnit *string `pulumi:"periodUnit"`
	// Specifies the region in which to create the disk. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the server ID to which the cloud volume is to be mounted.
	// After specifying the value of this field, the cloud volume will be automatically attached on the cloud server.
	// The chargingMode of the created cloud volume will be consistent with that of the cloud server.
	// Currently, only ECS cloud-servers are supported, and BMS bare metal cloud-servers are not supported yet.
	ServerId *string `pulumi:"serverId"`
	// Specifies the disk size, in GB.
	// For system disk, the valid value ranges from `1` GB to `1,024` GB.
	// For data disk, the valid value ranges from `10` GB to `32,768` GB.
	Size *int `pulumi:"size"`
	// Specifies the snapshot ID from which to create the disk.
	SnapshotId *string `pulumi:"snapshotId"`
	// Specifies the key/value pairs to associate with the disk.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the throughput for the volume. The Unit is MiB/s.
	// The field is valid and required when `volumeType` is set to **GPSSD2**.
	// This field can be changed only when the disk status is Available or In-use.
	Throughput *int `pulumi:"throughput"`
	// Specifies the disk type. Valid values are as follows:
	// + **SAS**: High I/O type.
	// + **SSD**: Ultra-high I/O type.
	// + **GPSSD**: General purpose SSD type.
	// + **ESSD**: Extreme SSD type.
	// + **GPSSD2**: General purpose SSD V2 type.
	// + **ESSD2**: Extreme SSD V2 type.
	VolumeType string `pulumi:"volumeType"`
}

// The set of arguments for constructing a Volume resource.
type VolumeArgs struct {
	// Deprecated: Deprecated
	AutoPay pulumi.StringPtrInput
	// Specifies whether auto-renew is enabled.
	// Valid values are **true** and **false**. Defaults to **false**.
	AutoRenew pulumi.StringPtrInput
	// Specifies the availability zone for the disk.
	AvailabilityZone pulumi.StringInput
	// Specifies the backup ID from which to create the disk.
	BackupId pulumi.StringPtrInput
	// Specifies the delete mode of snapshot. The default value is **false**. All snapshot
	// associated with the disk will also be deleted when the parameter is set to **true**.
	Cascade pulumi.BoolPtrInput
	// Specifies the charging mode of the disk.
	// The valid values are as follows:
	// + **prePaid**: the yearly/monthly billing mode.
	// + **postPaid**: the pay-per-use billing mode.
	ChargingMode pulumi.StringPtrInput
	// Specifies the ID of the DSS storage pool accommodating the disk.
	DedicatedStorageId pulumi.StringPtrInput
	// Specifies the disk description. You can enter up to `85` characters.
	Description pulumi.StringPtrInput
	// Specifies the device type of disk to create. Valid options are **VBD** and
	// **SCSI**. Defaults to **VBD**.
	DeviceType pulumi.StringPtrInput
	// Specifies the enterprise project ID of the disk.
	// For enterprise users, if omitted, default enterprise project will be used.
	EnterpriseProjectId pulumi.StringPtrInput
	// Specifies the image ID from which to create the disk.
	ImageId pulumi.StringPtrInput
	// Specifies the IOPS(Input/Output Operations Per Second) for the volume.
	// The field is valid and required when `volumeType` is set to **GPSSD2** or **ESSD2**.
	// This field can be changed only when the disk status is Available or In-use.
	Iops pulumi.IntPtrInput
	// Specifies the Encryption KMS ID to create the disk.
	KmsId pulumi.StringPtrInput
	// Specifies whether the disk is shareable. Defaults to **false**.
	Multiattach pulumi.BoolPtrInput
	// Specifies the disk name. You can enter up to `64` characters.
	Name pulumi.StringPtrInput
	// Specifies the charging period of the disk.
	// + If `periodUnit` is set to **month**, the value ranges from `1` to `9`.
	// + If `periodUnit` is set to **year**, the valid value is `1`.
	Period pulumi.IntPtrInput
	// Specifies the charging period unit of the disk.
	// Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
	PeriodUnit pulumi.StringPtrInput
	// Specifies the region in which to create the disk. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the server ID to which the cloud volume is to be mounted.
	// After specifying the value of this field, the cloud volume will be automatically attached on the cloud server.
	// The chargingMode of the created cloud volume will be consistent with that of the cloud server.
	// Currently, only ECS cloud-servers are supported, and BMS bare metal cloud-servers are not supported yet.
	ServerId pulumi.StringPtrInput
	// Specifies the disk size, in GB.
	// For system disk, the valid value ranges from `1` GB to `1,024` GB.
	// For data disk, the valid value ranges from `10` GB to `32,768` GB.
	Size pulumi.IntPtrInput
	// Specifies the snapshot ID from which to create the disk.
	SnapshotId pulumi.StringPtrInput
	// Specifies the key/value pairs to associate with the disk.
	Tags pulumi.StringMapInput
	// Specifies the throughput for the volume. The Unit is MiB/s.
	// The field is valid and required when `volumeType` is set to **GPSSD2**.
	// This field can be changed only when the disk status is Available or In-use.
	Throughput pulumi.IntPtrInput
	// Specifies the disk type. Valid values are as follows:
	// + **SAS**: High I/O type.
	// + **SSD**: Ultra-high I/O type.
	// + **GPSSD**: General purpose SSD type.
	// + **ESSD**: Extreme SSD type.
	// + **GPSSD2**: General purpose SSD V2 type.
	// + **ESSD2**: Extreme SSD V2 type.
	VolumeType pulumi.StringInput
}

func (VolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeArgs)(nil)).Elem()
}

type VolumeInput interface {
	pulumi.Input

	ToVolumeOutput() VolumeOutput
	ToVolumeOutputWithContext(ctx context.Context) VolumeOutput
}

func (*Volume) ElementType() reflect.Type {
	return reflect.TypeOf((**Volume)(nil)).Elem()
}

func (i *Volume) ToVolumeOutput() VolumeOutput {
	return i.ToVolumeOutputWithContext(context.Background())
}

func (i *Volume) ToVolumeOutputWithContext(ctx context.Context) VolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeOutput)
}

// VolumeArrayInput is an input type that accepts VolumeArray and VolumeArrayOutput values.
// You can construct a concrete instance of `VolumeArrayInput` via:
//
//	VolumeArray{ VolumeArgs{...} }
type VolumeArrayInput interface {
	pulumi.Input

	ToVolumeArrayOutput() VolumeArrayOutput
	ToVolumeArrayOutputWithContext(context.Context) VolumeArrayOutput
}

type VolumeArray []VolumeInput

func (VolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Volume)(nil)).Elem()
}

func (i VolumeArray) ToVolumeArrayOutput() VolumeArrayOutput {
	return i.ToVolumeArrayOutputWithContext(context.Background())
}

func (i VolumeArray) ToVolumeArrayOutputWithContext(ctx context.Context) VolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeArrayOutput)
}

// VolumeMapInput is an input type that accepts VolumeMap and VolumeMapOutput values.
// You can construct a concrete instance of `VolumeMapInput` via:
//
//	VolumeMap{ "key": VolumeArgs{...} }
type VolumeMapInput interface {
	pulumi.Input

	ToVolumeMapOutput() VolumeMapOutput
	ToVolumeMapOutputWithContext(context.Context) VolumeMapOutput
}

type VolumeMap map[string]VolumeInput

func (VolumeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Volume)(nil)).Elem()
}

func (i VolumeMap) ToVolumeMapOutput() VolumeMapOutput {
	return i.ToVolumeMapOutputWithContext(context.Background())
}

func (i VolumeMap) ToVolumeMapOutputWithContext(ctx context.Context) VolumeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeMapOutput)
}

type VolumeOutput struct{ *pulumi.OutputState }

func (VolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Volume)(nil)).Elem()
}

func (o VolumeOutput) ToVolumeOutput() VolumeOutput {
	return o
}

func (o VolumeOutput) ToVolumeOutputWithContext(ctx context.Context) VolumeOutput {
	return o
}

// The key-value pair disk metadata. Valid key-value pairs are as follows:
//   - **__system__cmkid**: The encryption CMK ID in metadata. This attribute is used together with **__system__encrypted**
//     for encryption.
//   - **__system__encrypted**: The encryption field in metadata. The value can be `0` (no encryption) or `1` (encryption).
//     If this attribute is not specified, the encryption attribute of the disk is the same as that of the data source.
//     If the disk is not created from a data source, the disk is not encrypted by default.
//   - **full_clone**: The creation method when the disk is created from a snapshot. `0`: linked clone. `1`: full clone.
//   - **hw:passthrough**: If this attribute value is **true**, the disk device type is SCSI, which allows ECS OSs to directly
//     access the underlying storage media and supports SCSI reservation commands. If this attribute is set to **false**,
//     the disk device type is VBD, which is also the default type. VBD supports only simple SCSI read/write commands.
//     If this attribute is not specified, the disk device type is VBD.
//   - **orderID**: The attribute that describes the disk billing mode in metadata. If this attribute has a value, the disk
//     is billed on a yearly/monthly basis. If this attribute is empty, the disk is billed on a pay-per-use basis.
func (o VolumeOutput) AllMetadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringMapOutput { return v.AllMetadata }).(pulumi.StringMapOutput)
}

// The metadata of the disk image.
func (o VolumeOutput) AllVolumeImageMetadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringMapOutput { return v.AllVolumeImageMetadata }).(pulumi.StringMapOutput)
}

// If a disk is attached to an instance, this attribute will display the attachment ID, instance ID, and
// the device as the instance sees it. The attachment structure is documented below.
func (o VolumeOutput) Attachments() VolumeAttachmentArrayOutput {
	return o.ApplyT(func(v *Volume) VolumeAttachmentArrayOutput { return v.Attachments }).(VolumeAttachmentArrayOutput)
}

// Deprecated: Deprecated
func (o VolumeOutput) AutoPay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringPtrOutput { return v.AutoPay }).(pulumi.StringPtrOutput)
}

// Specifies whether auto-renew is enabled.
// Valid values are **true** and **false**. Defaults to **false**.
func (o VolumeOutput) AutoRenew() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringPtrOutput { return v.AutoRenew }).(pulumi.StringPtrOutput)
}

// Specifies the availability zone for the disk.
func (o VolumeOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.AvailabilityZone }).(pulumi.StringOutput)
}

// Specifies the backup ID from which to create the disk.
func (o VolumeOutput) BackupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringPtrOutput { return v.BackupId }).(pulumi.StringPtrOutput)
}

// Whether the disk is bootable. **true**: The disk is bootable. **false**: The disk is not bootable.
func (o VolumeOutput) Bootable() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.Bootable }).(pulumi.StringOutput)
}

// Specifies the delete mode of snapshot. The default value is **false**. All snapshot
// associated with the disk will also be deleted when the parameter is set to **true**.
func (o VolumeOutput) Cascade() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.BoolPtrOutput { return v.Cascade }).(pulumi.BoolPtrOutput)
}

// Specifies the charging mode of the disk.
// The valid values are as follows:
// + **prePaid**: the yearly/monthly billing mode.
// + **postPaid**: the pay-per-use billing mode.
func (o VolumeOutput) ChargingMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.ChargingMode }).(pulumi.StringOutput)
}

// The time when the disk was created.
func (o VolumeOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Specifies the ID of the DSS storage pool accommodating the disk.
func (o VolumeOutput) DedicatedStorageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringPtrOutput { return v.DedicatedStorageId }).(pulumi.StringPtrOutput)
}

// The name of the DSS storage pool accommodating the disk.
func (o VolumeOutput) DedicatedStorageName() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.DedicatedStorageName }).(pulumi.StringOutput)
}

// Specifies the disk description. You can enter up to `85` characters.
func (o VolumeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the device type of disk to create. Valid options are **VBD** and
// **SCSI**. Defaults to **VBD**.
func (o VolumeOutput) DeviceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringPtrOutput { return v.DeviceType }).(pulumi.StringPtrOutput)
}

// Specifies the enterprise project ID of the disk.
// For enterprise users, if omitted, default enterprise project will be used.
func (o VolumeOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// Specifies the image ID from which to create the disk.
func (o VolumeOutput) ImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringPtrOutput { return v.ImageId }).(pulumi.StringPtrOutput)
}

// Specifies the IOPS(Input/Output Operations Per Second) for the volume.
// The field is valid and required when `volumeType` is set to **GPSSD2** or **ESSD2**.
// This field can be changed only when the disk status is Available or In-use.
func (o VolumeOutput) Iops() pulumi.IntOutput {
	return o.ApplyT(func(v *Volume) pulumi.IntOutput { return v.Iops }).(pulumi.IntOutput)
}

// The disk IOPS information. This attribute appears only for a general purpose SSD V2 or an extreme
// SSD V2 disk. The iopsAttribute structure is documented below.
func (o VolumeOutput) IopsAttributes() VolumeIopsAttributeArrayOutput {
	return o.ApplyT(func(v *Volume) VolumeIopsAttributeArrayOutput { return v.IopsAttributes }).(VolumeIopsAttributeArrayOutput)
}

// Specifies the Encryption KMS ID to create the disk.
func (o VolumeOutput) KmsId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringPtrOutput { return v.KmsId }).(pulumi.StringPtrOutput)
}

// The disk URI.
// The links structure is documented below.
func (o VolumeOutput) Links() VolumeLinkArrayOutput {
	return o.ApplyT(func(v *Volume) VolumeLinkArrayOutput { return v.Links }).(VolumeLinkArrayOutput)
}

// Specifies whether the disk is shareable. Defaults to **false**.
func (o VolumeOutput) Multiattach() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.BoolPtrOutput { return v.Multiattach }).(pulumi.BoolPtrOutput)
}

// Specifies the disk name. You can enter up to `64` characters.
func (o VolumeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the charging period of the disk.
// + If `periodUnit` is set to **month**, the value ranges from `1` to `9`.
// + If `periodUnit` is set to **year**, the valid value is `1`.
func (o VolumeOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.IntPtrOutput { return v.Period }).(pulumi.IntPtrOutput)
}

// Specifies the charging period unit of the disk.
// Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
func (o VolumeOutput) PeriodUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringPtrOutput { return v.PeriodUnit }).(pulumi.StringPtrOutput)
}

// Specifies the region in which to create the disk. If omitted, the
// provider-level region will be used. Changing this parameter will create a new resource.
func (o VolumeOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The disk serial number. This field is returned only for non-HyperMetro SCSI disks and is used for
// disk mapping in the VM.
func (o VolumeOutput) SerialNumber() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.SerialNumber }).(pulumi.StringOutput)
}

// Specifies the server ID to which the cloud volume is to be mounted.
// After specifying the value of this field, the cloud volume will be automatically attached on the cloud server.
// The chargingMode of the created cloud volume will be consistent with that of the cloud server.
// Currently, only ECS cloud-servers are supported, and BMS bare metal cloud-servers are not supported yet.
func (o VolumeOutput) ServerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringPtrOutput { return v.ServerId }).(pulumi.StringPtrOutput)
}

// The service type. Supported services are **EVS**, **DSS**, and **DESS**.
func (o VolumeOutput) ServiceType() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.ServiceType }).(pulumi.StringOutput)
}

// Specifies the disk size, in GB.
// For system disk, the valid value ranges from `1` GB to `1,024` GB.
// For data disk, the valid value ranges from `10` GB to `32,768` GB.
func (o VolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v *Volume) pulumi.IntOutput { return v.Size }).(pulumi.IntOutput)
}

// Specifies the snapshot ID from which to create the disk.
func (o VolumeOutput) SnapshotId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringPtrOutput { return v.SnapshotId }).(pulumi.StringPtrOutput)
}

// The disk status.
// Please refer to [EVS Disk Status](https://support.huaweicloud.com/intl/en-us/api-evs/evs_04_0040.html).
func (o VolumeOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specifies the key/value pairs to associate with the disk.
func (o VolumeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Specifies the throughput for the volume. The Unit is MiB/s.
// The field is valid and required when `volumeType` is set to **GPSSD2**.
// This field can be changed only when the disk status is Available or In-use.
func (o VolumeOutput) Throughput() pulumi.IntOutput {
	return o.ApplyT(func(v *Volume) pulumi.IntOutput { return v.Throughput }).(pulumi.IntOutput)
}

// The disk throughput information. This attribute appears only for a general purpose SSD V2 disk.
// The throughputAttribute structure is documented below.
func (o VolumeOutput) ThroughputAttributes() VolumeThroughputAttributeArrayOutput {
	return o.ApplyT(func(v *Volume) VolumeThroughputAttributeArrayOutput { return v.ThroughputAttributes }).(VolumeThroughputAttributeArrayOutput)
}

// The time when the disk was updated.
func (o VolumeOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// Specifies the disk type. Valid values are as follows:
// + **SAS**: High I/O type.
// + **SSD**: Ultra-high I/O type.
// + **GPSSD**: General purpose SSD type.
// + **ESSD**: Extreme SSD type.
// + **GPSSD2**: General purpose SSD V2 type.
// + **ESSD2**: Extreme SSD V2 type.
func (o VolumeOutput) VolumeType() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.VolumeType }).(pulumi.StringOutput)
}

// The unique identifier used for mounting the EVS disk.
func (o VolumeOutput) Wwn() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.Wwn }).(pulumi.StringOutput)
}

type VolumeArrayOutput struct{ *pulumi.OutputState }

func (VolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Volume)(nil)).Elem()
}

func (o VolumeArrayOutput) ToVolumeArrayOutput() VolumeArrayOutput {
	return o
}

func (o VolumeArrayOutput) ToVolumeArrayOutputWithContext(ctx context.Context) VolumeArrayOutput {
	return o
}

func (o VolumeArrayOutput) Index(i pulumi.IntInput) VolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Volume {
		return vs[0].([]*Volume)[vs[1].(int)]
	}).(VolumeOutput)
}

type VolumeMapOutput struct{ *pulumi.OutputState }

func (VolumeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Volume)(nil)).Elem()
}

func (o VolumeMapOutput) ToVolumeMapOutput() VolumeMapOutput {
	return o
}

func (o VolumeMapOutput) ToVolumeMapOutputWithContext(ctx context.Context) VolumeMapOutput {
	return o
}

func (o VolumeMapOutput) MapIndex(k pulumi.StringInput) VolumeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Volume {
		return vs[0].(map[string]*Volume)[vs[1].(string)]
	}).(VolumeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeInput)(nil)).Elem(), &Volume{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeArrayInput)(nil)).Elem(), VolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeMapInput)(nil)).Elem(), VolumeMap{})
	pulumi.RegisterOutputType(VolumeOutput{})
	pulumi.RegisterOutputType(VolumeArrayOutput{})
	pulumi.RegisterOutputType(VolumeMapOutput{})
}
