// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package evs

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an EVS snapshot resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Evs"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			testVolume, err := Evs.NewVolume(ctx, "testVolume", &Evs.VolumeArgs{
//				Description:      pulumi.String("my volume"),
//				VolumeType:       pulumi.String("SATA"),
//				Size:             pulumi.Int(20),
//				AvailabilityZone: pulumi.String("cn-north-4a"),
//				Tags: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//					"key": pulumi.String("value"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Evs.NewSnapshot(ctx, "testSnapshot", &Evs.SnapshotArgs{
//				Description: pulumi.String("Daily backup"),
//				VolumeId:    testVolume.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// EVS snapshot can be imported using the `id`, e.g. bash
//
// ```sh
//
//	$ pulumi import huaweicloud:Evs/snapshot:Snapshot test <id>
//
// ```
//
//	Note that the imported state may not be identical to your resource definition, due to some attributes missing from the API response, security or some other reason. The missing attributes include`metadata`, `force`. It is generally recommended running `terraform plan` after importing the resource. You can then decide if changes should be applied to the resource, or the resource definition should be updated to align with the snapshot. Also, you can ignore changes as below. hcl resource "huaweicloud_evs_snapshot" "test" {
//
//	...
//
//	lifecycle {
//
//	ignore_changes = [
//
//	metadata, force,
//
//	]
//
//	} }
type Snapshot struct {
	pulumi.CustomResourceState

	// The time when the snapshot was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The description of the snapshot. The value can contain a maximum of 255 bytes.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies the flag for forcibly creating a snapshot. Default to false.
	Force pulumi.BoolPtrOutput `pulumi:"force"`
	// Specifies the user-defined metadata key-value pair. Changing the parameter
	// creates a new snapshot.
	Metadata pulumi.StringMapOutput `pulumi:"metadata"`
	// The script configuration value of this change is also the original value used for comparison with the new value next
	// time the change is made. The corresponding parameter name is 'metadata'.
	MetadataOrigin pulumi.StringMapOutput `pulumi:"metadataOrigin"`
	// The name of the snapshot. The value can contain a maximum of 255 bytes.
	Name pulumi.StringOutput `pulumi:"name"`
	// The region in which to create the evs snapshot resource. If omitted, the
	// provider-level region will be used. Changing this creates a new EVS snapshot resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// The size of the snapshot in GB.
	Size pulumi.IntOutput `pulumi:"size"`
	// The status of the snapshot.
	Status pulumi.StringOutput `pulumi:"status"`
	// The time when the snapshot was updated.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// The id of the snapshot's source disk. Changing the parameter creates a new
	// snapshot.
	VolumeId pulumi.StringOutput `pulumi:"volumeId"`
}

// NewSnapshot registers a new resource with the given unique name, arguments, and options.
func NewSnapshot(ctx *pulumi.Context,
	name string, args *SnapshotArgs, opts ...pulumi.ResourceOption) (*Snapshot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.VolumeId == nil {
		return nil, errors.New("invalid value for required argument 'VolumeId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Snapshot
	err := ctx.RegisterResource("huaweicloud:Evs/snapshot:Snapshot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSnapshot gets an existing Snapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnapshot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SnapshotState, opts ...pulumi.ResourceOption) (*Snapshot, error) {
	var resource Snapshot
	err := ctx.ReadResource("huaweicloud:Evs/snapshot:Snapshot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Snapshot resources.
type snapshotState struct {
	// The time when the snapshot was created.
	CreatedAt *string `pulumi:"createdAt"`
	// The description of the snapshot. The value can contain a maximum of 255 bytes.
	Description *string `pulumi:"description"`
	// Specifies the flag for forcibly creating a snapshot. Default to false.
	Force *bool `pulumi:"force"`
	// Specifies the user-defined metadata key-value pair. Changing the parameter
	// creates a new snapshot.
	Metadata map[string]string `pulumi:"metadata"`
	// The script configuration value of this change is also the original value used for comparison with the new value next
	// time the change is made. The corresponding parameter name is 'metadata'.
	MetadataOrigin map[string]string `pulumi:"metadataOrigin"`
	// The name of the snapshot. The value can contain a maximum of 255 bytes.
	Name *string `pulumi:"name"`
	// The region in which to create the evs snapshot resource. If omitted, the
	// provider-level region will be used. Changing this creates a new EVS snapshot resource.
	Region *string `pulumi:"region"`
	// The size of the snapshot in GB.
	Size *int `pulumi:"size"`
	// The status of the snapshot.
	Status *string `pulumi:"status"`
	// The time when the snapshot was updated.
	UpdatedAt *string `pulumi:"updatedAt"`
	// The id of the snapshot's source disk. Changing the parameter creates a new
	// snapshot.
	VolumeId *string `pulumi:"volumeId"`
}

type SnapshotState struct {
	// The time when the snapshot was created.
	CreatedAt pulumi.StringPtrInput
	// The description of the snapshot. The value can contain a maximum of 255 bytes.
	Description pulumi.StringPtrInput
	// Specifies the flag for forcibly creating a snapshot. Default to false.
	Force pulumi.BoolPtrInput
	// Specifies the user-defined metadata key-value pair. Changing the parameter
	// creates a new snapshot.
	Metadata pulumi.StringMapInput
	// The script configuration value of this change is also the original value used for comparison with the new value next
	// time the change is made. The corresponding parameter name is 'metadata'.
	MetadataOrigin pulumi.StringMapInput
	// The name of the snapshot. The value can contain a maximum of 255 bytes.
	Name pulumi.StringPtrInput
	// The region in which to create the evs snapshot resource. If omitted, the
	// provider-level region will be used. Changing this creates a new EVS snapshot resource.
	Region pulumi.StringPtrInput
	// The size of the snapshot in GB.
	Size pulumi.IntPtrInput
	// The status of the snapshot.
	Status pulumi.StringPtrInput
	// The time when the snapshot was updated.
	UpdatedAt pulumi.StringPtrInput
	// The id of the snapshot's source disk. Changing the parameter creates a new
	// snapshot.
	VolumeId pulumi.StringPtrInput
}

func (SnapshotState) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotState)(nil)).Elem()
}

type snapshotArgs struct {
	// The description of the snapshot. The value can contain a maximum of 255 bytes.
	Description *string `pulumi:"description"`
	// Specifies the flag for forcibly creating a snapshot. Default to false.
	Force *bool `pulumi:"force"`
	// Specifies the user-defined metadata key-value pair. Changing the parameter
	// creates a new snapshot.
	Metadata map[string]string `pulumi:"metadata"`
	// The name of the snapshot. The value can contain a maximum of 255 bytes.
	Name *string `pulumi:"name"`
	// The region in which to create the evs snapshot resource. If omitted, the
	// provider-level region will be used. Changing this creates a new EVS snapshot resource.
	Region *string `pulumi:"region"`
	// The id of the snapshot's source disk. Changing the parameter creates a new
	// snapshot.
	VolumeId string `pulumi:"volumeId"`
}

// The set of arguments for constructing a Snapshot resource.
type SnapshotArgs struct {
	// The description of the snapshot. The value can contain a maximum of 255 bytes.
	Description pulumi.StringPtrInput
	// Specifies the flag for forcibly creating a snapshot. Default to false.
	Force pulumi.BoolPtrInput
	// Specifies the user-defined metadata key-value pair. Changing the parameter
	// creates a new snapshot.
	Metadata pulumi.StringMapInput
	// The name of the snapshot. The value can contain a maximum of 255 bytes.
	Name pulumi.StringPtrInput
	// The region in which to create the evs snapshot resource. If omitted, the
	// provider-level region will be used. Changing this creates a new EVS snapshot resource.
	Region pulumi.StringPtrInput
	// The id of the snapshot's source disk. Changing the parameter creates a new
	// snapshot.
	VolumeId pulumi.StringInput
}

func (SnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotArgs)(nil)).Elem()
}

type SnapshotInput interface {
	pulumi.Input

	ToSnapshotOutput() SnapshotOutput
	ToSnapshotOutputWithContext(ctx context.Context) SnapshotOutput
}

func (*Snapshot) ElementType() reflect.Type {
	return reflect.TypeOf((**Snapshot)(nil)).Elem()
}

func (i *Snapshot) ToSnapshotOutput() SnapshotOutput {
	return i.ToSnapshotOutputWithContext(context.Background())
}

func (i *Snapshot) ToSnapshotOutputWithContext(ctx context.Context) SnapshotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotOutput)
}

// SnapshotArrayInput is an input type that accepts SnapshotArray and SnapshotArrayOutput values.
// You can construct a concrete instance of `SnapshotArrayInput` via:
//
//	SnapshotArray{ SnapshotArgs{...} }
type SnapshotArrayInput interface {
	pulumi.Input

	ToSnapshotArrayOutput() SnapshotArrayOutput
	ToSnapshotArrayOutputWithContext(context.Context) SnapshotArrayOutput
}

type SnapshotArray []SnapshotInput

func (SnapshotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Snapshot)(nil)).Elem()
}

func (i SnapshotArray) ToSnapshotArrayOutput() SnapshotArrayOutput {
	return i.ToSnapshotArrayOutputWithContext(context.Background())
}

func (i SnapshotArray) ToSnapshotArrayOutputWithContext(ctx context.Context) SnapshotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotArrayOutput)
}

// SnapshotMapInput is an input type that accepts SnapshotMap and SnapshotMapOutput values.
// You can construct a concrete instance of `SnapshotMapInput` via:
//
//	SnapshotMap{ "key": SnapshotArgs{...} }
type SnapshotMapInput interface {
	pulumi.Input

	ToSnapshotMapOutput() SnapshotMapOutput
	ToSnapshotMapOutputWithContext(context.Context) SnapshotMapOutput
}

type SnapshotMap map[string]SnapshotInput

func (SnapshotMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Snapshot)(nil)).Elem()
}

func (i SnapshotMap) ToSnapshotMapOutput() SnapshotMapOutput {
	return i.ToSnapshotMapOutputWithContext(context.Background())
}

func (i SnapshotMap) ToSnapshotMapOutputWithContext(ctx context.Context) SnapshotMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotMapOutput)
}

type SnapshotOutput struct{ *pulumi.OutputState }

func (SnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Snapshot)(nil)).Elem()
}

func (o SnapshotOutput) ToSnapshotOutput() SnapshotOutput {
	return o
}

func (o SnapshotOutput) ToSnapshotOutputWithContext(ctx context.Context) SnapshotOutput {
	return o
}

// The time when the snapshot was created.
func (o SnapshotOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of the snapshot. The value can contain a maximum of 255 bytes.
func (o SnapshotOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the flag for forcibly creating a snapshot. Default to false.
func (o SnapshotOutput) Force() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.BoolPtrOutput { return v.Force }).(pulumi.BoolPtrOutput)
}

// Specifies the user-defined metadata key-value pair. Changing the parameter
// creates a new snapshot.
func (o SnapshotOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringMapOutput { return v.Metadata }).(pulumi.StringMapOutput)
}

// The script configuration value of this change is also the original value used for comparison with the new value next
// time the change is made. The corresponding parameter name is 'metadata'.
func (o SnapshotOutput) MetadataOrigin() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringMapOutput { return v.MetadataOrigin }).(pulumi.StringMapOutput)
}

// The name of the snapshot. The value can contain a maximum of 255 bytes.
func (o SnapshotOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The region in which to create the evs snapshot resource. If omitted, the
// provider-level region will be used. Changing this creates a new EVS snapshot resource.
func (o SnapshotOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The size of the snapshot in GB.
func (o SnapshotOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.IntOutput { return v.Size }).(pulumi.IntOutput)
}

// The status of the snapshot.
func (o SnapshotOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The time when the snapshot was updated.
func (o SnapshotOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The id of the snapshot's source disk. Changing the parameter creates a new
// snapshot.
func (o SnapshotOutput) VolumeId() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.VolumeId }).(pulumi.StringOutput)
}

type SnapshotArrayOutput struct{ *pulumi.OutputState }

func (SnapshotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Snapshot)(nil)).Elem()
}

func (o SnapshotArrayOutput) ToSnapshotArrayOutput() SnapshotArrayOutput {
	return o
}

func (o SnapshotArrayOutput) ToSnapshotArrayOutputWithContext(ctx context.Context) SnapshotArrayOutput {
	return o
}

func (o SnapshotArrayOutput) Index(i pulumi.IntInput) SnapshotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Snapshot {
		return vs[0].([]*Snapshot)[vs[1].(int)]
	}).(SnapshotOutput)
}

type SnapshotMapOutput struct{ *pulumi.OutputState }

func (SnapshotMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Snapshot)(nil)).Elem()
}

func (o SnapshotMapOutput) ToSnapshotMapOutput() SnapshotMapOutput {
	return o
}

func (o SnapshotMapOutput) ToSnapshotMapOutputWithContext(ctx context.Context) SnapshotMapOutput {
	return o
}

func (o SnapshotMapOutput) MapIndex(k pulumi.StringInput) SnapshotOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Snapshot {
		return vs[0].(map[string]*Snapshot)[vs[1].(string)]
	}).(SnapshotOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotInput)(nil)).Elem(), &Snapshot{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotArrayInput)(nil)).Elem(), SnapshotArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotMapInput)(nil)).Elem(), SnapshotMap{})
	pulumi.RegisterOutputType(SnapshotOutput{})
	pulumi.RegisterOutputType(SnapshotArrayOutput{})
	pulumi.RegisterOutputType(SnapshotMapOutput{})
}
