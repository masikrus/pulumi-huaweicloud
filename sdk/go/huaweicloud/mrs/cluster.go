// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mrs

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a cluster resource within HuaweiCloud MRS.
//
// ## Example Usage
// ### Create an analysis cluster
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud"
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Mrs"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Mrs"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			testAvailabilityZones, err := huaweicloud.GetAvailabilityZones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			cfg := config.New(ctx, "")
//			clusterName := cfg.RequireObject("clusterName")
//			password := cfg.RequireObject("password")
//			vpcId := cfg.RequireObject("vpcId")
//			subnetId := cfg.RequireObject("subnetId")
//			_, err = Mrs.Newcluster(ctx, "testcluster", &Mrs.clusterArgs{
//				AvailabilityZone: pulumi.String(testAvailabilityZones.Names[0]),
//				Version:          pulumi.String("MRS 1.9.2"),
//				Type:             pulumi.String("ANALYSIS"),
//				ComponentLists: pulumi.StringArray{
//					pulumi.String("Hadoop"),
//					pulumi.String("Hive"),
//					pulumi.String("Tez"),
//				},
//				ManagerAdminPass: pulumi.Any(password),
//				NodeAdminPass:    pulumi.Any(password),
//				VpcId:            pulumi.Any(vpcId),
//				SubnetId:         pulumi.Any(subnetId),
//				MasterNodes: &mrs.ClusterMasterNodesArgs{
//					Flavor:          pulumi.String("c6.2xlarge.4.linux.bigdata"),
//					NodeNumber:      pulumi.Int(2),
//					RootVolumeType:  pulumi.String("SAS"),
//					RootVolumeSize:  pulumi.Int(300),
//					DataVolumeType:  pulumi.String("SAS"),
//					DataVolumeSize:  pulumi.Int(480),
//					DataVolumeCount: pulumi.Int(1),
//				},
//				AnalysisCoreNodes: &mrs.ClusterAnalysisCoreNodesArgs{
//					Flavor:          pulumi.String("c6.2xlarge.4.linux.bigdata"),
//					NodeNumber:      pulumi.Int(2),
//					RootVolumeType:  pulumi.String("SAS"),
//					RootVolumeSize:  pulumi.Int(300),
//					DataVolumeType:  pulumi.String("SAS"),
//					DataVolumeSize:  pulumi.Int(480),
//					DataVolumeCount: pulumi.Int(1),
//				},
//				AnalysisTaskNodes: &mrs.ClusterAnalysisTaskNodesArgs{
//					Flavor:          pulumi.String("c6.2xlarge.4.linux.bigdata"),
//					NodeNumber:      pulumi.Int(1),
//					RootVolumeType:  pulumi.String("SAS"),
//					RootVolumeSize:  pulumi.Int(300),
//					DataVolumeType:  pulumi.String("SAS"),
//					DataVolumeSize:  pulumi.Int(480),
//					DataVolumeCount: pulumi.Int(1),
//				},
//				Tags: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//					"key": pulumi.String("value"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Create a stream cluster
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud"
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Mrs"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Mrs"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			testAvailabilityZones, err := huaweicloud.GetAvailabilityZones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			cfg := config.New(ctx, "")
//			clusterName := cfg.RequireObject("clusterName")
//			password := cfg.RequireObject("password")
//			vpcId := cfg.RequireObject("vpcId")
//			subnetId := cfg.RequireObject("subnetId")
//			_, err = Mrs.Newcluster(ctx, "testcluster", &Mrs.clusterArgs{
//				AvailabilityZone: pulumi.String(testAvailabilityZones.Names[0]),
//				Type:             pulumi.String("STREAMING"),
//				Version:          pulumi.String("MRS 1.9.2"),
//				ManagerAdminPass: pulumi.Any(password),
//				NodeAdminPass:    pulumi.Any(password),
//				VpcId:            pulumi.Any(vpcId),
//				SubnetId:         pulumi.Any(subnetId),
//				ComponentLists: pulumi.StringArray{
//					pulumi.String("Storm"),
//				},
//				MasterNodes: &mrs.ClusterMasterNodesArgs{
//					Flavor:          pulumi.String("c6.2xlarge.4.linux.bigdata"),
//					NodeNumber:      pulumi.Int(2),
//					RootVolumeType:  pulumi.String("SAS"),
//					RootVolumeSize:  pulumi.Int(300),
//					DataVolumeType:  pulumi.String("SAS"),
//					DataVolumeSize:  pulumi.Int(480),
//					DataVolumeCount: pulumi.Int(1),
//				},
//				StreamingCoreNodes: &mrs.ClusterStreamingCoreNodesArgs{
//					Flavor:          pulumi.String("c6.2xlarge.4.linux.bigdata"),
//					NodeNumber:      pulumi.Int(2),
//					RootVolumeType:  pulumi.String("SAS"),
//					RootVolumeSize:  pulumi.Int(300),
//					DataVolumeType:  pulumi.String("SAS"),
//					DataVolumeSize:  pulumi.Int(480),
//					DataVolumeCount: pulumi.Int(1),
//				},
//				Tags: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//					"key": pulumi.String("value"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Create a hybrid cluster
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud"
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Mrs"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Mrs"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			testAvailabilityZones, err := huaweicloud.GetAvailabilityZones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			cfg := config.New(ctx, "")
//			clusterName := cfg.RequireObject("clusterName")
//			password := cfg.RequireObject("password")
//			vpcId := cfg.RequireObject("vpcId")
//			subnetId := cfg.RequireObject("subnetId")
//			_, err = Mrs.Newcluster(ctx, "testcluster", &Mrs.clusterArgs{
//				AvailabilityZone: pulumi.String(testAvailabilityZones.Names[0]),
//				Version:          pulumi.String("MRS 3.1.5"),
//				Type:             pulumi.String("MIXED"),
//				ComponentLists: pulumi.StringArray{
//					pulumi.String("Hadoop"),
//					pulumi.String("ZooKeeper"),
//					pulumi.String("Ranger"),
//					pulumi.String("Tez"),
//					pulumi.String("Spark2x"),
//					pulumi.String("Hive"),
//					pulumi.String("Kafka"),
//					pulumi.String("Flume"),
//				},
//				ManagerAdminPass: pulumi.Any(password),
//				NodeAdminPass:    pulumi.Any(password),
//				VpcId:            pulumi.Any(vpcId),
//				SubnetId:         pulumi.Any(subnetId),
//				MasterNodes: &mrs.ClusterMasterNodesArgs{
//					Flavor:          pulumi.String("ac7.4xlarge.4.linux.bigdata"),
//					NodeNumber:      pulumi.Int(2),
//					RootVolumeType:  pulumi.String("SAS"),
//					RootVolumeSize:  pulumi.Int(100),
//					DataVolumeType:  pulumi.String("SAS"),
//					DataVolumeSize:  pulumi.Int(200),
//					DataVolumeCount: pulumi.Int(1),
//				},
//				AnalysisCoreNodes: &mrs.ClusterAnalysisCoreNodesArgs{
//					Flavor:          pulumi.String("ac7.4xlarge.4.linux.bigdata"),
//					NodeNumber:      pulumi.Int(2),
//					RootVolumeType:  pulumi.String("SAS"),
//					RootVolumeSize:  pulumi.Int(100),
//					DataVolumeType:  pulumi.String("SAS"),
//					DataVolumeSize:  pulumi.Int(200),
//					DataVolumeCount: pulumi.Int(1),
//				},
//				StreamingCoreNodes: &mrs.ClusterStreamingCoreNodesArgs{
//					Flavor:          pulumi.String("ac7.4xlarge.4.linux.bigdata"),
//					NodeNumber:      pulumi.Int(2),
//					RootVolumeType:  pulumi.String("SAS"),
//					RootVolumeSize:  pulumi.Int(100),
//					DataVolumeType:  pulumi.String("SAS"),
//					DataVolumeSize:  pulumi.Int(200),
//					DataVolumeCount: pulumi.Int(1),
//				},
//				AnalysisTaskNodes: &mrs.ClusterAnalysisTaskNodesArgs{
//					Flavor:          pulumi.String("ac7.4xlarge.4.linux.bigdata"),
//					NodeNumber:      pulumi.Int(2),
//					RootVolumeType:  pulumi.String("SAS"),
//					RootVolumeSize:  pulumi.Int(100),
//					DataVolumeType:  pulumi.String("SAS"),
//					DataVolumeSize:  pulumi.Int(200),
//					DataVolumeCount: pulumi.Int(1),
//				},
//				Tags: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//					"key": pulumi.String("value"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Create a custom cluster
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud"
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Mrs"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Mrs"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			testAvailabilityZones, err := huaweicloud.GetAvailabilityZones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			cfg := config.New(ctx, "")
//			clusterName := cfg.RequireObject("clusterName")
//			password := cfg.RequireObject("password")
//			vpcId := cfg.RequireObject("vpcId")
//			subnetId := cfg.RequireObject("subnetId")
//			_, err = Mrs.Newcluster(ctx, "testcluster", &Mrs.clusterArgs{
//				AvailabilityZone: pulumi.String(testAvailabilityZones.Names[0]),
//				Version:          pulumi.String("MRS 3.1.0"),
//				Type:             pulumi.String("CUSTOM"),
//				SafeMode:         pulumi.Bool(true),
//				ManagerAdminPass: pulumi.Any(password),
//				NodeAdminPass:    pulumi.Any(password),
//				VpcId:            pulumi.Any(vpcId),
//				SubnetId:         pulumi.Any(subnetId),
//				TemplateId:       pulumi.String("mgmt_control_combined_v4"),
//				ComponentLists: pulumi.StringArray{
//					pulumi.String("DBService"),
//					pulumi.String("Hadoop"),
//					pulumi.String("ZooKeeper"),
//					pulumi.String("Ranger"),
//				},
//				MasterNodes: &mrs.ClusterMasterNodesArgs{
//					Flavor:          pulumi.String("c6.4xlarge.4.linux.bigdata"),
//					NodeNumber:      pulumi.Int(3),
//					RootVolumeType:  pulumi.String("SAS"),
//					RootVolumeSize:  pulumi.Int(480),
//					DataVolumeType:  pulumi.String("SAS"),
//					DataVolumeSize:  pulumi.Int(600),
//					DataVolumeCount: pulumi.Int(1),
//					AssignedRoles: pulumi.StringArray{
//						pulumi.String("OMSServer:1,2"),
//						pulumi.String("SlapdServer:1,2"),
//						pulumi.String("KerberosServer:1,2"),
//						pulumi.String("KerberosAdmin:1,2"),
//						pulumi.String("quorumpeer:1,2,3"),
//						pulumi.String("NameNode:2,3"),
//						pulumi.String("Zkfc:2,3"),
//						pulumi.String("JournalNode:1,2,3"),
//						pulumi.String("ResourceManager:2,3"),
//						pulumi.String("JobHistoryServer:3"),
//						pulumi.String("DBServer:1,3"),
//						pulumi.String("HttpFS:1,3"),
//						pulumi.String("TimelineServer:3"),
//						pulumi.String("RangerAdmin:1,2"),
//						pulumi.String("UserSync:2"),
//						pulumi.String("TagSync:2"),
//						pulumi.String("KerberosClient"),
//						pulumi.String("SlapdClient"),
//						pulumi.String("meta"),
//					},
//				},
//				CustomNodes: mrs.ClusterCustomNodeArray{
//					&mrs.ClusterCustomNodeArgs{
//						GroupName:       pulumi.String("node_group_1"),
//						Flavor:          pulumi.String("c6.4xlarge.4.linux.bigdata"),
//						NodeNumber:      pulumi.Int(4),
//						RootVolumeType:  pulumi.String("SAS"),
//						RootVolumeSize:  pulumi.Int(480),
//						DataVolumeType:  pulumi.String("SAS"),
//						DataVolumeSize:  pulumi.Int(600),
//						DataVolumeCount: pulumi.Int(1),
//						AssignedRoles: pulumi.StringArray{
//							pulumi.String("DataNode"),
//							pulumi.String("NodeManager"),
//							pulumi.String("KerberosClient"),
//							pulumi.String("SlapdClient"),
//							pulumi.String("meta"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Create an analysis cluster and bind public IP
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud"
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Mrs"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Mrs"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			testAvailabilityZones, err := huaweicloud.GetAvailabilityZones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			cfg := config.New(ctx, "")
//			clusterName := cfg.RequireObject("clusterName")
//			password := cfg.RequireObject("password")
//			vpcId := cfg.RequireObject("vpcId")
//			subnetId := cfg.RequireObject("subnetId")
//			publicIp := cfg.RequireObject("publicIp")
//			_, err = Mrs.Newcluster(ctx, "testcluster", &Mrs.clusterArgs{
//				AvailabilityZone: pulumi.String(testAvailabilityZones.Names[0]),
//				Version:          pulumi.String("MRS 1.9.2"),
//				Type:             pulumi.String("ANALYSIS"),
//				ComponentLists: pulumi.StringArray{
//					pulumi.String("Hadoop"),
//					pulumi.String("Hive"),
//					pulumi.String("Tez"),
//				},
//				ManagerAdminPass: pulumi.Any(password),
//				NodeAdminPass:    pulumi.Any(password),
//				VpcId:            pulumi.Any(vpcId),
//				SubnetId:         pulumi.Any(subnetId),
//				PublicIp:         pulumi.Any(publicIp),
//				MasterNodes: &mrs.ClusterMasterNodesArgs{
//					Flavor:          pulumi.String("c6.2xlarge.4.linux.bigdata"),
//					NodeNumber:      pulumi.Int(2),
//					RootVolumeType:  pulumi.String("SAS"),
//					RootVolumeSize:  pulumi.Int(300),
//					DataVolumeType:  pulumi.String("SAS"),
//					DataVolumeSize:  pulumi.Int(480),
//					DataVolumeCount: pulumi.Int(1),
//				},
//				AnalysisCoreNodes: &mrs.ClusterAnalysisCoreNodesArgs{
//					Flavor:          pulumi.String("c6.2xlarge.4.linux.bigdata"),
//					NodeNumber:      pulumi.Int(2),
//					RootVolumeType:  pulumi.String("SAS"),
//					RootVolumeSize:  pulumi.Int(300),
//					DataVolumeType:  pulumi.String("SAS"),
//					DataVolumeSize:  pulumi.Int(480),
//					DataVolumeCount: pulumi.Int(1),
//				},
//				AnalysisTaskNodes: &mrs.ClusterAnalysisTaskNodesArgs{
//					Flavor:          pulumi.String("c6.2xlarge.4.linux.bigdata"),
//					NodeNumber:      pulumi.Int(1),
//					RootVolumeType:  pulumi.String("SAS"),
//					RootVolumeSize:  pulumi.Int(300),
//					DataVolumeType:  pulumi.String("SAS"),
//					DataVolumeSize:  pulumi.Int(480),
//					DataVolumeCount: pulumi.Int(1),
//				},
//				Tags: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//					"key": pulumi.String("value"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Create a prePaid stream cluster
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud"
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Mrs"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Mrs"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			testAvailabilityZones, err := huaweicloud.GetAvailabilityZones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			cfg := config.New(ctx, "")
//			clusterName := cfg.RequireObject("clusterName")
//			password := cfg.RequireObject("password")
//			vpcId := cfg.RequireObject("vpcId")
//			subnetId := cfg.RequireObject("subnetId")
//			period := cfg.RequireObject("period")
//			periodUnit := cfg.RequireObject("periodUnit")
//			_, err = Mrs.Newcluster(ctx, "testcluster", &Mrs.clusterArgs{
//				AvailabilityZone: pulumi.String(testAvailabilityZones.Names[0]),
//				Type:             pulumi.String("STREAMING"),
//				Version:          pulumi.String("MRS 1.9.2"),
//				ManagerAdminPass: pulumi.Any(password),
//				NodeAdminPass:    pulumi.Any(password),
//				VpcId:            pulumi.Any(vpcId),
//				SubnetId:         pulumi.Any(subnetId),
//				ComponentLists: pulumi.StringArray{
//					pulumi.String("Storm"),
//				},
//				ChargingMode: pulumi.String("prePaid"),
//				Period:       pulumi.Any(period),
//				PeriodUnit:   pulumi.Any(periodUnit),
//				MasterNodes: &mrs.ClusterMasterNodesArgs{
//					Flavor:          pulumi.String("c6.2xlarge.4.linux.bigdata"),
//					NodeNumber:      pulumi.Int(2),
//					RootVolumeType:  pulumi.String("SAS"),
//					RootVolumeSize:  pulumi.Int(300),
//					DataVolumeType:  pulumi.String("SAS"),
//					DataVolumeSize:  pulumi.Int(480),
//					DataVolumeCount: pulumi.Int(1),
//				},
//				StreamingCoreNodes: &mrs.ClusterStreamingCoreNodesArgs{
//					Flavor:          pulumi.String("c6.2xlarge.4.linux.bigdata"),
//					NodeNumber:      pulumi.Int(2),
//					RootVolumeType:  pulumi.String("SAS"),
//					RootVolumeSize:  pulumi.Int(300),
//					DataVolumeType:  pulumi.String("SAS"),
//					DataVolumeSize:  pulumi.Int(480),
//					DataVolumeCount: pulumi.Int(1),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Clusters can be imported by their `id`. For example, bash
//
// ```sh
//
//	$ pulumi import huaweicloud:Mrs/cluster:cluster test b11b407c-e604-4e8d-8bc4-92398320b847
//
// ```
//
//	Note that the imported state may not be identical to your resource definition, due to some attributes missing from the API response, security or some other reason. The missing attributes include`manager_admin_pass`, `node_admin_pass`,`template_id`, `assigned_roles`, `external_datasources`, `component_configs`, `smn_notify`, `charging_mode`, `period` and `period_unit`. It is generally recommended running `terraform plan` after importing a cluster. You can then decide if changes should be applied to the cluster, or the resource definition should be updated to align with the cluster. Also you can ignore changes as below. hcl resource "huaweicloud_mapreduce_cluster" "test" {
//
//	...
//
//	lifecycle {
//
//	ignore_changes = [
//
//	manager_admin_pass, node_admin_pass, template_id, assigned_roles, external_datasources, component_configs, smn_notify,
//
//	charging_mode, period, period_unit,
//
//	]
//
//	} }
type Cluster struct {
	pulumi.CustomResourceState

	// Specifies the informations about analysis core nodes in the
	// MapReduce cluster.
	// The masterNodes structure is documented below.
	// Changing this will create a new MapReduce cluster resource.
	AnalysisCoreNodes ClusterAnalysisCoreNodesPtrOutput `pulumi:"analysisCoreNodes"`
	// Specifies the informations about analysis task nodes in the
	// MapReduce cluster.
	// The masterNodes structure is documented below.
	// Changing this will create a new MapReduce cluster resource.
	AnalysisTaskNodes ClusterAnalysisTaskNodesPtrOutput `pulumi:"analysisTaskNodes"`
	// Specifies the availability zone in which to create the cluster.
	// Please following [reference](https://developer.huaweicloud.com/intl/en-us/endpoint?all)
	// Changing this will create a new MapReduce cluster resource.
	AvailabilityZone pulumi.StringOutput `pulumi:"availabilityZone"`
	// Specifies the bootstrap action scripts.
	// Bootstrap action scripts will be executed on specified cluster nodes before or after big data components are
	// started. You can execute bootstrap actions to install third-party software, modify the cluster running environment,
	// and customize cluster configuration. [Learn more](https://support.huaweicloud.com/intl/en-us/usermanual-mrs/mrs_01_0414.html)
	BootstrapScripts ClusterBootstrapScriptArrayOutput `pulumi:"bootstrapScripts"`
	// Specifies the charging mode of the cluster.\
	// Valid values are **prePaid** and **postPaid**, defaults to **postPaid**.
	// Changing this parameter will create a new MapReduce cluster resource.
	ChargingMode pulumi.StringOutput `pulumi:"chargingMode"`
	// The charging start time which is the start time of billing, in RFC-3339 format.
	ChargingStartTime pulumi.StringOutput `pulumi:"chargingStartTime"`
	// Specifies the component configurations of the cluster.
	// The object structure is documented below.
	// Changing this will create a new MapReduce cluster resource.
	ComponentConfigs ClusterComponentConfigArrayOutput `pulumi:"componentConfigs"`
	// Specifies the list of component names. For the components supported by
	// the cluster, please following [reference](https://support.huaweicloud.com/intl/en-us/productdesc-mrs/mrs_08_0005.html)
	// Changing this will create a new MapReduce cluster resource.
	ComponentLists pulumi.StringArrayOutput `pulumi:"componentLists"`
	// The cluster creation time, in RFC-3339 format.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Specifies the informations about custom nodes in the MapReduce cluster.\
	// The masterNodes structure is documented below.
	// Changing this will create a new MapReduce cluster resource.
	CustomNodes ClusterCustomNodeArrayOutput `pulumi:"customNodes"`
	// Specifies the EIP ID which bound to the MapReduce cluster.
	// The EIP must have been created and must be in the same region as the cluster.
	// Changing this will create a new MapReduce cluster resource.
	EipId pulumi.StringOutput `pulumi:"eipId"`
	// Specifies a unique ID in UUID format of enterprise project.
	EnterpriseProjectId pulumi.StringOutput `pulumi:"enterpriseProjectId"`
	// Specifies the external datasource configurations of the cluster.
	// The object structure is documented below.
	// Changing this will create a new MapReduce cluster resource.
	ExternalDatasources ClusterExternalDatasourceArrayOutput `pulumi:"externalDatasources"`
	// Specifies whether logs are collected when cluster installation fails.
	// Defaults to true. If `logCollection` set true, the OBS buckets will be created and only used to collect logs that
	// record MapReduce cluster creation failures. Changing this will create a new MapReduce cluster resource.
	LogCollection pulumi.BoolPtrOutput `pulumi:"logCollection"`
	// Specifies the administrator password, which is used to log in to
	// the cluster management page. The password can contain 8 to 26 characters and cannot be the username or the username
	// spelled backwards. The password must contain lowercase letters, uppercase letters, digits, spaces and the special
	// characters: `!?,.:-_{}[]@$^+=/`. Changing this will create a new MapReduce cluster resource.
	ManagerAdminPass pulumi.StringOutput `pulumi:"managerAdminPass"`
	// The IP address of the master node.
	MasterNodeIp pulumi.StringOutput `pulumi:"masterNodeIp"`
	// Specifies the informations about master nodes in the MapReduce cluster.
	// The masterNodes structure is documented below.
	// Changing this will create a new MapReduce cluster resource.
	MasterNodes ClusterMasterNodesOutput `pulumi:"masterNodes"`
	// Specifies the name of a bootstrap action script.
	// Changing this will create a new MapReduce cluster resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the administrator password, which is used to log in to the
	// each nodes(/ECSs). The password can contain 8 to 26 characters and cannot be the username or the username spelled
	// backwards. The password must contain lowercase letters, uppercase letters, digits, spaces and the special
	// characters: `!?,.:-_{}[]@$^+=/`. Changing this will create a new MapReduce cluster resource. This parameter
	// and `nodeKeyPair` are alternative.
	NodeAdminPass pulumi.StringPtrOutput `pulumi:"nodeAdminPass"`
	// Specifies the name of a key pair, which is used to log in to the each
	// nodes(/ECSs). Changing this will create a new MapReduce cluster resource.
	NodeKeyPair pulumi.StringPtrOutput `pulumi:"nodeKeyPair"`
	// Specifies the charging period of the cluster.\
	// If `periodUnit` is set to **month**, the value ranges from 1 to 9.
	// If `periodUnit` is set to **year**, the value ranges from 1 to 3.
	// This parameter is mandatory if `chargingMode` is set to **prePaid**.
	// Changing this parameter will create a new MapReduce cluster resource.
	Period pulumi.IntPtrOutput `pulumi:"period"`
	// Specifies the charging period unit of the cluster.\
	// Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
	// Changing this parameter will create a new MapReduce cluster resource.
	PeriodUnit pulumi.StringPtrOutput `pulumi:"periodUnit"`
	// The preferred private IP address of the master node.
	PrivateIp pulumi.StringOutput `pulumi:"privateIp"`
	// Specifies the EIP address which bound to the MapReduce cluster.
	// The EIP must have been created and must be in the same region as the cluster.
	// Changing this will create a new MapReduce cluster resource.
	PublicIp pulumi.StringOutput `pulumi:"publicIp"`
	// The region in which to create the MapReduce cluster resource. If omitted, the
	// provider-level region will be used. Changing this will create a new MapReduce cluster resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies whether the running mode of the MapReduce cluster is secure,
	// defaults to **true**. The options are as follows:
	// + **true**: enable Kerberos authentication.
	// + **false**: disable Kerberos authentication. Changing this will create a new MapReduce cluster resource.
	SafeMode pulumi.BoolPtrOutput `pulumi:"safeMode"`
	// Specifies an array of one or more security group ID to attach to the
	// MapReduce cluster. If using the specified security group, the group need to open the specified port (9022) rules.
	SecurityGroupIds pulumi.StringArrayOutput `pulumi:"securityGroupIds"`
	// Specifies the alarm configuration of the cluster. The smnNotify
	// structure is documented below.
	// Changing this will create a new MapReduce cluster resource.
	SmnNotify ClusterSmnNotifyPtrOutput `pulumi:"smnNotify"`
	// The cluster state, which include: running, frozen, abnormal and failed.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the informations about streaming core nodes in the
	// MapReduce cluster.
	// The masterNodes structure is documented below.
	// Changing this will create a new MapReduce cluster resource.
	StreamingCoreNodes ClusterStreamingCoreNodesPtrOutput `pulumi:"streamingCoreNodes"`
	// Specifies the informations about streaming task nodes in the
	// MapReduce cluster.
	// The masterNodes structure is documented below.
	// Changing this will create a new MapReduce cluster resource.
	StreamingTaskNodes ClusterStreamingTaskNodesPtrOutput `pulumi:"streamingTaskNodes"`
	// Specifies the network ID of a subnet which bound to the MapReduce cluster.
	// Changing this will create a new MapReduce cluster resource.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// Specifies the key/value pairs to associate with the cluster.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Specifies the template used for node deployment when the cluster type is
	// **CUSTOM**. The options are as follows:
	// + **mgmt_control_combined_v2**: template for jointly deploying the management and control nodes. The management and
	//   control roles are co-deployed on the Master node, and data instances are deployed in the same node group. This
	//   deployment mode applies to scenarios where the number of control nodes is less than 100, reducing costs.
	// + **mgmt_control_separated_v2**: The management and control roles are deployed on different master nodes, and data
	//   instances are deployed in the same node group. This deployment mode is applicable to a cluster with 100 to 500 nodes
	//   and delivers better performance in high-concurrency load scenarios.
	// + **mgmt_control_data_separated_v2**: The management role and control role are deployed on different Master nodes,
	//   and data instances are deployed in different node groups. This deployment mode is applicable to a cluster with more
	//   than 500 nodes. Components can be deployed separately, which can be used for a larger cluster scale.
	TemplateId pulumi.StringPtrOutput `pulumi:"templateId"`
	// The total number of nodes deployed in the cluster.
	TotalNodeNumber pulumi.IntOutput `pulumi:"totalNodeNumber"`
	// Specifies the type of the MapReduce cluster. The valid values are **ANALYSIS**,
	// **STREAMING** and **MIXED**, defaults to **ANALYSIS**. Changing this will create a new MapReduce cluster resource.
	Type pulumi.StringPtrOutput `pulumi:"type"`
	// The cluster update time, in RFC-3339 format.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// Specifies the MapReduce cluster version. The valid values are `MRS 1.9.2`
	// , `MRS 3.0.5` and `MRS 3.1.0`. Changing this will create a new MapReduce cluster resource.
	Version pulumi.StringOutput `pulumi:"version"`
	// Specifies the ID of the VPC which bound to the MapReduce cluster. Changing
	// this will create a new MapReduce cluster resource.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AvailabilityZone == nil {
		return nil, errors.New("invalid value for required argument 'AvailabilityZone'")
	}
	if args.ComponentLists == nil {
		return nil, errors.New("invalid value for required argument 'ComponentLists'")
	}
	if args.ManagerAdminPass == nil {
		return nil, errors.New("invalid value for required argument 'ManagerAdminPass'")
	}
	if args.MasterNodes == nil {
		return nil, errors.New("invalid value for required argument 'MasterNodes'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Cluster
	err := ctx.RegisterResource("huaweicloud:Mrs/cluster:cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("huaweicloud:Mrs/cluster:cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
	// Specifies the informations about analysis core nodes in the
	// MapReduce cluster.
	// The masterNodes structure is documented below.
	// Changing this will create a new MapReduce cluster resource.
	AnalysisCoreNodes *ClusterAnalysisCoreNodes `pulumi:"analysisCoreNodes"`
	// Specifies the informations about analysis task nodes in the
	// MapReduce cluster.
	// The masterNodes structure is documented below.
	// Changing this will create a new MapReduce cluster resource.
	AnalysisTaskNodes *ClusterAnalysisTaskNodes `pulumi:"analysisTaskNodes"`
	// Specifies the availability zone in which to create the cluster.
	// Please following [reference](https://developer.huaweicloud.com/intl/en-us/endpoint?all)
	// Changing this will create a new MapReduce cluster resource.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// Specifies the bootstrap action scripts.
	// Bootstrap action scripts will be executed on specified cluster nodes before or after big data components are
	// started. You can execute bootstrap actions to install third-party software, modify the cluster running environment,
	// and customize cluster configuration. [Learn more](https://support.huaweicloud.com/intl/en-us/usermanual-mrs/mrs_01_0414.html)
	BootstrapScripts []ClusterBootstrapScript `pulumi:"bootstrapScripts"`
	// Specifies the charging mode of the cluster.\
	// Valid values are **prePaid** and **postPaid**, defaults to **postPaid**.
	// Changing this parameter will create a new MapReduce cluster resource.
	ChargingMode *string `pulumi:"chargingMode"`
	// The charging start time which is the start time of billing, in RFC-3339 format.
	ChargingStartTime *string `pulumi:"chargingStartTime"`
	// Specifies the component configurations of the cluster.
	// The object structure is documented below.
	// Changing this will create a new MapReduce cluster resource.
	ComponentConfigs []ClusterComponentConfig `pulumi:"componentConfigs"`
	// Specifies the list of component names. For the components supported by
	// the cluster, please following [reference](https://support.huaweicloud.com/intl/en-us/productdesc-mrs/mrs_08_0005.html)
	// Changing this will create a new MapReduce cluster resource.
	ComponentLists []string `pulumi:"componentLists"`
	// The cluster creation time, in RFC-3339 format.
	CreateTime *string `pulumi:"createTime"`
	// Specifies the informations about custom nodes in the MapReduce cluster.\
	// The masterNodes structure is documented below.
	// Changing this will create a new MapReduce cluster resource.
	CustomNodes []ClusterCustomNode `pulumi:"customNodes"`
	// Specifies the EIP ID which bound to the MapReduce cluster.
	// The EIP must have been created and must be in the same region as the cluster.
	// Changing this will create a new MapReduce cluster resource.
	EipId *string `pulumi:"eipId"`
	// Specifies a unique ID in UUID format of enterprise project.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies the external datasource configurations of the cluster.
	// The object structure is documented below.
	// Changing this will create a new MapReduce cluster resource.
	ExternalDatasources []ClusterExternalDatasource `pulumi:"externalDatasources"`
	// Specifies whether logs are collected when cluster installation fails.
	// Defaults to true. If `logCollection` set true, the OBS buckets will be created and only used to collect logs that
	// record MapReduce cluster creation failures. Changing this will create a new MapReduce cluster resource.
	LogCollection *bool `pulumi:"logCollection"`
	// Specifies the administrator password, which is used to log in to
	// the cluster management page. The password can contain 8 to 26 characters and cannot be the username or the username
	// spelled backwards. The password must contain lowercase letters, uppercase letters, digits, spaces and the special
	// characters: `!?,.:-_{}[]@$^+=/`. Changing this will create a new MapReduce cluster resource.
	ManagerAdminPass *string `pulumi:"managerAdminPass"`
	// The IP address of the master node.
	MasterNodeIp *string `pulumi:"masterNodeIp"`
	// Specifies the informations about master nodes in the MapReduce cluster.
	// The masterNodes structure is documented below.
	// Changing this will create a new MapReduce cluster resource.
	MasterNodes *ClusterMasterNodes `pulumi:"masterNodes"`
	// Specifies the name of a bootstrap action script.
	// Changing this will create a new MapReduce cluster resource.
	Name *string `pulumi:"name"`
	// Specifies the administrator password, which is used to log in to the
	// each nodes(/ECSs). The password can contain 8 to 26 characters and cannot be the username or the username spelled
	// backwards. The password must contain lowercase letters, uppercase letters, digits, spaces and the special
	// characters: `!?,.:-_{}[]@$^+=/`. Changing this will create a new MapReduce cluster resource. This parameter
	// and `nodeKeyPair` are alternative.
	NodeAdminPass *string `pulumi:"nodeAdminPass"`
	// Specifies the name of a key pair, which is used to log in to the each
	// nodes(/ECSs). Changing this will create a new MapReduce cluster resource.
	NodeKeyPair *string `pulumi:"nodeKeyPair"`
	// Specifies the charging period of the cluster.\
	// If `periodUnit` is set to **month**, the value ranges from 1 to 9.
	// If `periodUnit` is set to **year**, the value ranges from 1 to 3.
	// This parameter is mandatory if `chargingMode` is set to **prePaid**.
	// Changing this parameter will create a new MapReduce cluster resource.
	Period *int `pulumi:"period"`
	// Specifies the charging period unit of the cluster.\
	// Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
	// Changing this parameter will create a new MapReduce cluster resource.
	PeriodUnit *string `pulumi:"periodUnit"`
	// The preferred private IP address of the master node.
	PrivateIp *string `pulumi:"privateIp"`
	// Specifies the EIP address which bound to the MapReduce cluster.
	// The EIP must have been created and must be in the same region as the cluster.
	// Changing this will create a new MapReduce cluster resource.
	PublicIp *string `pulumi:"publicIp"`
	// The region in which to create the MapReduce cluster resource. If omitted, the
	// provider-level region will be used. Changing this will create a new MapReduce cluster resource.
	Region *string `pulumi:"region"`
	// Specifies whether the running mode of the MapReduce cluster is secure,
	// defaults to **true**. The options are as follows:
	// + **true**: enable Kerberos authentication.
	// + **false**: disable Kerberos authentication. Changing this will create a new MapReduce cluster resource.
	SafeMode *bool `pulumi:"safeMode"`
	// Specifies an array of one or more security group ID to attach to the
	// MapReduce cluster. If using the specified security group, the group need to open the specified port (9022) rules.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// Specifies the alarm configuration of the cluster. The smnNotify
	// structure is documented below.
	// Changing this will create a new MapReduce cluster resource.
	SmnNotify *ClusterSmnNotify `pulumi:"smnNotify"`
	// The cluster state, which include: running, frozen, abnormal and failed.
	Status *string `pulumi:"status"`
	// Specifies the informations about streaming core nodes in the
	// MapReduce cluster.
	// The masterNodes structure is documented below.
	// Changing this will create a new MapReduce cluster resource.
	StreamingCoreNodes *ClusterStreamingCoreNodes `pulumi:"streamingCoreNodes"`
	// Specifies the informations about streaming task nodes in the
	// MapReduce cluster.
	// The masterNodes structure is documented below.
	// Changing this will create a new MapReduce cluster resource.
	StreamingTaskNodes *ClusterStreamingTaskNodes `pulumi:"streamingTaskNodes"`
	// Specifies the network ID of a subnet which bound to the MapReduce cluster.
	// Changing this will create a new MapReduce cluster resource.
	SubnetId *string `pulumi:"subnetId"`
	// Specifies the key/value pairs to associate with the cluster.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the template used for node deployment when the cluster type is
	// **CUSTOM**. The options are as follows:
	// + **mgmt_control_combined_v2**: template for jointly deploying the management and control nodes. The management and
	//   control roles are co-deployed on the Master node, and data instances are deployed in the same node group. This
	//   deployment mode applies to scenarios where the number of control nodes is less than 100, reducing costs.
	// + **mgmt_control_separated_v2**: The management and control roles are deployed on different master nodes, and data
	//   instances are deployed in the same node group. This deployment mode is applicable to a cluster with 100 to 500 nodes
	//   and delivers better performance in high-concurrency load scenarios.
	// + **mgmt_control_data_separated_v2**: The management role and control role are deployed on different Master nodes,
	//   and data instances are deployed in different node groups. This deployment mode is applicable to a cluster with more
	//   than 500 nodes. Components can be deployed separately, which can be used for a larger cluster scale.
	TemplateId *string `pulumi:"templateId"`
	// The total number of nodes deployed in the cluster.
	TotalNodeNumber *int `pulumi:"totalNodeNumber"`
	// Specifies the type of the MapReduce cluster. The valid values are **ANALYSIS**,
	// **STREAMING** and **MIXED**, defaults to **ANALYSIS**. Changing this will create a new MapReduce cluster resource.
	Type *string `pulumi:"type"`
	// The cluster update time, in RFC-3339 format.
	UpdateTime *string `pulumi:"updateTime"`
	// Specifies the MapReduce cluster version. The valid values are `MRS 1.9.2`
	// , `MRS 3.0.5` and `MRS 3.1.0`. Changing this will create a new MapReduce cluster resource.
	Version *string `pulumi:"version"`
	// Specifies the ID of the VPC which bound to the MapReduce cluster. Changing
	// this will create a new MapReduce cluster resource.
	VpcId *string `pulumi:"vpcId"`
}

type ClusterState struct {
	// Specifies the informations about analysis core nodes in the
	// MapReduce cluster.
	// The masterNodes structure is documented below.
	// Changing this will create a new MapReduce cluster resource.
	AnalysisCoreNodes ClusterAnalysisCoreNodesPtrInput
	// Specifies the informations about analysis task nodes in the
	// MapReduce cluster.
	// The masterNodes structure is documented below.
	// Changing this will create a new MapReduce cluster resource.
	AnalysisTaskNodes ClusterAnalysisTaskNodesPtrInput
	// Specifies the availability zone in which to create the cluster.
	// Please following [reference](https://developer.huaweicloud.com/intl/en-us/endpoint?all)
	// Changing this will create a new MapReduce cluster resource.
	AvailabilityZone pulumi.StringPtrInput
	// Specifies the bootstrap action scripts.
	// Bootstrap action scripts will be executed on specified cluster nodes before or after big data components are
	// started. You can execute bootstrap actions to install third-party software, modify the cluster running environment,
	// and customize cluster configuration. [Learn more](https://support.huaweicloud.com/intl/en-us/usermanual-mrs/mrs_01_0414.html)
	BootstrapScripts ClusterBootstrapScriptArrayInput
	// Specifies the charging mode of the cluster.\
	// Valid values are **prePaid** and **postPaid**, defaults to **postPaid**.
	// Changing this parameter will create a new MapReduce cluster resource.
	ChargingMode pulumi.StringPtrInput
	// The charging start time which is the start time of billing, in RFC-3339 format.
	ChargingStartTime pulumi.StringPtrInput
	// Specifies the component configurations of the cluster.
	// The object structure is documented below.
	// Changing this will create a new MapReduce cluster resource.
	ComponentConfigs ClusterComponentConfigArrayInput
	// Specifies the list of component names. For the components supported by
	// the cluster, please following [reference](https://support.huaweicloud.com/intl/en-us/productdesc-mrs/mrs_08_0005.html)
	// Changing this will create a new MapReduce cluster resource.
	ComponentLists pulumi.StringArrayInput
	// The cluster creation time, in RFC-3339 format.
	CreateTime pulumi.StringPtrInput
	// Specifies the informations about custom nodes in the MapReduce cluster.\
	// The masterNodes structure is documented below.
	// Changing this will create a new MapReduce cluster resource.
	CustomNodes ClusterCustomNodeArrayInput
	// Specifies the EIP ID which bound to the MapReduce cluster.
	// The EIP must have been created and must be in the same region as the cluster.
	// Changing this will create a new MapReduce cluster resource.
	EipId pulumi.StringPtrInput
	// Specifies a unique ID in UUID format of enterprise project.
	EnterpriseProjectId pulumi.StringPtrInput
	// Specifies the external datasource configurations of the cluster.
	// The object structure is documented below.
	// Changing this will create a new MapReduce cluster resource.
	ExternalDatasources ClusterExternalDatasourceArrayInput
	// Specifies whether logs are collected when cluster installation fails.
	// Defaults to true. If `logCollection` set true, the OBS buckets will be created and only used to collect logs that
	// record MapReduce cluster creation failures. Changing this will create a new MapReduce cluster resource.
	LogCollection pulumi.BoolPtrInput
	// Specifies the administrator password, which is used to log in to
	// the cluster management page. The password can contain 8 to 26 characters and cannot be the username or the username
	// spelled backwards. The password must contain lowercase letters, uppercase letters, digits, spaces and the special
	// characters: `!?,.:-_{}[]@$^+=/`. Changing this will create a new MapReduce cluster resource.
	ManagerAdminPass pulumi.StringPtrInput
	// The IP address of the master node.
	MasterNodeIp pulumi.StringPtrInput
	// Specifies the informations about master nodes in the MapReduce cluster.
	// The masterNodes structure is documented below.
	// Changing this will create a new MapReduce cluster resource.
	MasterNodes ClusterMasterNodesPtrInput
	// Specifies the name of a bootstrap action script.
	// Changing this will create a new MapReduce cluster resource.
	Name pulumi.StringPtrInput
	// Specifies the administrator password, which is used to log in to the
	// each nodes(/ECSs). The password can contain 8 to 26 characters and cannot be the username or the username spelled
	// backwards. The password must contain lowercase letters, uppercase letters, digits, spaces and the special
	// characters: `!?,.:-_{}[]@$^+=/`. Changing this will create a new MapReduce cluster resource. This parameter
	// and `nodeKeyPair` are alternative.
	NodeAdminPass pulumi.StringPtrInput
	// Specifies the name of a key pair, which is used to log in to the each
	// nodes(/ECSs). Changing this will create a new MapReduce cluster resource.
	NodeKeyPair pulumi.StringPtrInput
	// Specifies the charging period of the cluster.\
	// If `periodUnit` is set to **month**, the value ranges from 1 to 9.
	// If `periodUnit` is set to **year**, the value ranges from 1 to 3.
	// This parameter is mandatory if `chargingMode` is set to **prePaid**.
	// Changing this parameter will create a new MapReduce cluster resource.
	Period pulumi.IntPtrInput
	// Specifies the charging period unit of the cluster.\
	// Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
	// Changing this parameter will create a new MapReduce cluster resource.
	PeriodUnit pulumi.StringPtrInput
	// The preferred private IP address of the master node.
	PrivateIp pulumi.StringPtrInput
	// Specifies the EIP address which bound to the MapReduce cluster.
	// The EIP must have been created and must be in the same region as the cluster.
	// Changing this will create a new MapReduce cluster resource.
	PublicIp pulumi.StringPtrInput
	// The region in which to create the MapReduce cluster resource. If omitted, the
	// provider-level region will be used. Changing this will create a new MapReduce cluster resource.
	Region pulumi.StringPtrInput
	// Specifies whether the running mode of the MapReduce cluster is secure,
	// defaults to **true**. The options are as follows:
	// + **true**: enable Kerberos authentication.
	// + **false**: disable Kerberos authentication. Changing this will create a new MapReduce cluster resource.
	SafeMode pulumi.BoolPtrInput
	// Specifies an array of one or more security group ID to attach to the
	// MapReduce cluster. If using the specified security group, the group need to open the specified port (9022) rules.
	SecurityGroupIds pulumi.StringArrayInput
	// Specifies the alarm configuration of the cluster. The smnNotify
	// structure is documented below.
	// Changing this will create a new MapReduce cluster resource.
	SmnNotify ClusterSmnNotifyPtrInput
	// The cluster state, which include: running, frozen, abnormal and failed.
	Status pulumi.StringPtrInput
	// Specifies the informations about streaming core nodes in the
	// MapReduce cluster.
	// The masterNodes structure is documented below.
	// Changing this will create a new MapReduce cluster resource.
	StreamingCoreNodes ClusterStreamingCoreNodesPtrInput
	// Specifies the informations about streaming task nodes in the
	// MapReduce cluster.
	// The masterNodes structure is documented below.
	// Changing this will create a new MapReduce cluster resource.
	StreamingTaskNodes ClusterStreamingTaskNodesPtrInput
	// Specifies the network ID of a subnet which bound to the MapReduce cluster.
	// Changing this will create a new MapReduce cluster resource.
	SubnetId pulumi.StringPtrInput
	// Specifies the key/value pairs to associate with the cluster.
	Tags pulumi.StringMapInput
	// Specifies the template used for node deployment when the cluster type is
	// **CUSTOM**. The options are as follows:
	// + **mgmt_control_combined_v2**: template for jointly deploying the management and control nodes. The management and
	//   control roles are co-deployed on the Master node, and data instances are deployed in the same node group. This
	//   deployment mode applies to scenarios where the number of control nodes is less than 100, reducing costs.
	// + **mgmt_control_separated_v2**: The management and control roles are deployed on different master nodes, and data
	//   instances are deployed in the same node group. This deployment mode is applicable to a cluster with 100 to 500 nodes
	//   and delivers better performance in high-concurrency load scenarios.
	// + **mgmt_control_data_separated_v2**: The management role and control role are deployed on different Master nodes,
	//   and data instances are deployed in different node groups. This deployment mode is applicable to a cluster with more
	//   than 500 nodes. Components can be deployed separately, which can be used for a larger cluster scale.
	TemplateId pulumi.StringPtrInput
	// The total number of nodes deployed in the cluster.
	TotalNodeNumber pulumi.IntPtrInput
	// Specifies the type of the MapReduce cluster. The valid values are **ANALYSIS**,
	// **STREAMING** and **MIXED**, defaults to **ANALYSIS**. Changing this will create a new MapReduce cluster resource.
	Type pulumi.StringPtrInput
	// The cluster update time, in RFC-3339 format.
	UpdateTime pulumi.StringPtrInput
	// Specifies the MapReduce cluster version. The valid values are `MRS 1.9.2`
	// , `MRS 3.0.5` and `MRS 3.1.0`. Changing this will create a new MapReduce cluster resource.
	Version pulumi.StringPtrInput
	// Specifies the ID of the VPC which bound to the MapReduce cluster. Changing
	// this will create a new MapReduce cluster resource.
	VpcId pulumi.StringPtrInput
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	// Specifies the informations about analysis core nodes in the
	// MapReduce cluster.
	// The masterNodes structure is documented below.
	// Changing this will create a new MapReduce cluster resource.
	AnalysisCoreNodes *ClusterAnalysisCoreNodes `pulumi:"analysisCoreNodes"`
	// Specifies the informations about analysis task nodes in the
	// MapReduce cluster.
	// The masterNodes structure is documented below.
	// Changing this will create a new MapReduce cluster resource.
	AnalysisTaskNodes *ClusterAnalysisTaskNodes `pulumi:"analysisTaskNodes"`
	// Specifies the availability zone in which to create the cluster.
	// Please following [reference](https://developer.huaweicloud.com/intl/en-us/endpoint?all)
	// Changing this will create a new MapReduce cluster resource.
	AvailabilityZone string `pulumi:"availabilityZone"`
	// Specifies the bootstrap action scripts.
	// Bootstrap action scripts will be executed on specified cluster nodes before or after big data components are
	// started. You can execute bootstrap actions to install third-party software, modify the cluster running environment,
	// and customize cluster configuration. [Learn more](https://support.huaweicloud.com/intl/en-us/usermanual-mrs/mrs_01_0414.html)
	BootstrapScripts []ClusterBootstrapScript `pulumi:"bootstrapScripts"`
	// Specifies the charging mode of the cluster.\
	// Valid values are **prePaid** and **postPaid**, defaults to **postPaid**.
	// Changing this parameter will create a new MapReduce cluster resource.
	ChargingMode *string `pulumi:"chargingMode"`
	// Specifies the component configurations of the cluster.
	// The object structure is documented below.
	// Changing this will create a new MapReduce cluster resource.
	ComponentConfigs []ClusterComponentConfig `pulumi:"componentConfigs"`
	// Specifies the list of component names. For the components supported by
	// the cluster, please following [reference](https://support.huaweicloud.com/intl/en-us/productdesc-mrs/mrs_08_0005.html)
	// Changing this will create a new MapReduce cluster resource.
	ComponentLists []string `pulumi:"componentLists"`
	// Specifies the informations about custom nodes in the MapReduce cluster.\
	// The masterNodes structure is documented below.
	// Changing this will create a new MapReduce cluster resource.
	CustomNodes []ClusterCustomNode `pulumi:"customNodes"`
	// Specifies the EIP ID which bound to the MapReduce cluster.
	// The EIP must have been created and must be in the same region as the cluster.
	// Changing this will create a new MapReduce cluster resource.
	EipId *string `pulumi:"eipId"`
	// Specifies a unique ID in UUID format of enterprise project.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies the external datasource configurations of the cluster.
	// The object structure is documented below.
	// Changing this will create a new MapReduce cluster resource.
	ExternalDatasources []ClusterExternalDatasource `pulumi:"externalDatasources"`
	// Specifies whether logs are collected when cluster installation fails.
	// Defaults to true. If `logCollection` set true, the OBS buckets will be created and only used to collect logs that
	// record MapReduce cluster creation failures. Changing this will create a new MapReduce cluster resource.
	LogCollection *bool `pulumi:"logCollection"`
	// Specifies the administrator password, which is used to log in to
	// the cluster management page. The password can contain 8 to 26 characters and cannot be the username or the username
	// spelled backwards. The password must contain lowercase letters, uppercase letters, digits, spaces and the special
	// characters: `!?,.:-_{}[]@$^+=/`. Changing this will create a new MapReduce cluster resource.
	ManagerAdminPass string `pulumi:"managerAdminPass"`
	// Specifies the informations about master nodes in the MapReduce cluster.
	// The masterNodes structure is documented below.
	// Changing this will create a new MapReduce cluster resource.
	MasterNodes ClusterMasterNodes `pulumi:"masterNodes"`
	// Specifies the name of a bootstrap action script.
	// Changing this will create a new MapReduce cluster resource.
	Name *string `pulumi:"name"`
	// Specifies the administrator password, which is used to log in to the
	// each nodes(/ECSs). The password can contain 8 to 26 characters and cannot be the username or the username spelled
	// backwards. The password must contain lowercase letters, uppercase letters, digits, spaces and the special
	// characters: `!?,.:-_{}[]@$^+=/`. Changing this will create a new MapReduce cluster resource. This parameter
	// and `nodeKeyPair` are alternative.
	NodeAdminPass *string `pulumi:"nodeAdminPass"`
	// Specifies the name of a key pair, which is used to log in to the each
	// nodes(/ECSs). Changing this will create a new MapReduce cluster resource.
	NodeKeyPair *string `pulumi:"nodeKeyPair"`
	// Specifies the charging period of the cluster.\
	// If `periodUnit` is set to **month**, the value ranges from 1 to 9.
	// If `periodUnit` is set to **year**, the value ranges from 1 to 3.
	// This parameter is mandatory if `chargingMode` is set to **prePaid**.
	// Changing this parameter will create a new MapReduce cluster resource.
	Period *int `pulumi:"period"`
	// Specifies the charging period unit of the cluster.\
	// Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
	// Changing this parameter will create a new MapReduce cluster resource.
	PeriodUnit *string `pulumi:"periodUnit"`
	// Specifies the EIP address which bound to the MapReduce cluster.
	// The EIP must have been created and must be in the same region as the cluster.
	// Changing this will create a new MapReduce cluster resource.
	PublicIp *string `pulumi:"publicIp"`
	// The region in which to create the MapReduce cluster resource. If omitted, the
	// provider-level region will be used. Changing this will create a new MapReduce cluster resource.
	Region *string `pulumi:"region"`
	// Specifies whether the running mode of the MapReduce cluster is secure,
	// defaults to **true**. The options are as follows:
	// + **true**: enable Kerberos authentication.
	// + **false**: disable Kerberos authentication. Changing this will create a new MapReduce cluster resource.
	SafeMode *bool `pulumi:"safeMode"`
	// Specifies an array of one or more security group ID to attach to the
	// MapReduce cluster. If using the specified security group, the group need to open the specified port (9022) rules.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// Specifies the alarm configuration of the cluster. The smnNotify
	// structure is documented below.
	// Changing this will create a new MapReduce cluster resource.
	SmnNotify *ClusterSmnNotify `pulumi:"smnNotify"`
	// Specifies the informations about streaming core nodes in the
	// MapReduce cluster.
	// The masterNodes structure is documented below.
	// Changing this will create a new MapReduce cluster resource.
	StreamingCoreNodes *ClusterStreamingCoreNodes `pulumi:"streamingCoreNodes"`
	// Specifies the informations about streaming task nodes in the
	// MapReduce cluster.
	// The masterNodes structure is documented below.
	// Changing this will create a new MapReduce cluster resource.
	StreamingTaskNodes *ClusterStreamingTaskNodes `pulumi:"streamingTaskNodes"`
	// Specifies the network ID of a subnet which bound to the MapReduce cluster.
	// Changing this will create a new MapReduce cluster resource.
	SubnetId string `pulumi:"subnetId"`
	// Specifies the key/value pairs to associate with the cluster.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the template used for node deployment when the cluster type is
	// **CUSTOM**. The options are as follows:
	// + **mgmt_control_combined_v2**: template for jointly deploying the management and control nodes. The management and
	//   control roles are co-deployed on the Master node, and data instances are deployed in the same node group. This
	//   deployment mode applies to scenarios where the number of control nodes is less than 100, reducing costs.
	// + **mgmt_control_separated_v2**: The management and control roles are deployed on different master nodes, and data
	//   instances are deployed in the same node group. This deployment mode is applicable to a cluster with 100 to 500 nodes
	//   and delivers better performance in high-concurrency load scenarios.
	// + **mgmt_control_data_separated_v2**: The management role and control role are deployed on different Master nodes,
	//   and data instances are deployed in different node groups. This deployment mode is applicable to a cluster with more
	//   than 500 nodes. Components can be deployed separately, which can be used for a larger cluster scale.
	TemplateId *string `pulumi:"templateId"`
	// Specifies the type of the MapReduce cluster. The valid values are **ANALYSIS**,
	// **STREAMING** and **MIXED**, defaults to **ANALYSIS**. Changing this will create a new MapReduce cluster resource.
	Type *string `pulumi:"type"`
	// Specifies the MapReduce cluster version. The valid values are `MRS 1.9.2`
	// , `MRS 3.0.5` and `MRS 3.1.0`. Changing this will create a new MapReduce cluster resource.
	Version string `pulumi:"version"`
	// Specifies the ID of the VPC which bound to the MapReduce cluster. Changing
	// this will create a new MapReduce cluster resource.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// Specifies the informations about analysis core nodes in the
	// MapReduce cluster.
	// The masterNodes structure is documented below.
	// Changing this will create a new MapReduce cluster resource.
	AnalysisCoreNodes ClusterAnalysisCoreNodesPtrInput
	// Specifies the informations about analysis task nodes in the
	// MapReduce cluster.
	// The masterNodes structure is documented below.
	// Changing this will create a new MapReduce cluster resource.
	AnalysisTaskNodes ClusterAnalysisTaskNodesPtrInput
	// Specifies the availability zone in which to create the cluster.
	// Please following [reference](https://developer.huaweicloud.com/intl/en-us/endpoint?all)
	// Changing this will create a new MapReduce cluster resource.
	AvailabilityZone pulumi.StringInput
	// Specifies the bootstrap action scripts.
	// Bootstrap action scripts will be executed on specified cluster nodes before or after big data components are
	// started. You can execute bootstrap actions to install third-party software, modify the cluster running environment,
	// and customize cluster configuration. [Learn more](https://support.huaweicloud.com/intl/en-us/usermanual-mrs/mrs_01_0414.html)
	BootstrapScripts ClusterBootstrapScriptArrayInput
	// Specifies the charging mode of the cluster.\
	// Valid values are **prePaid** and **postPaid**, defaults to **postPaid**.
	// Changing this parameter will create a new MapReduce cluster resource.
	ChargingMode pulumi.StringPtrInput
	// Specifies the component configurations of the cluster.
	// The object structure is documented below.
	// Changing this will create a new MapReduce cluster resource.
	ComponentConfigs ClusterComponentConfigArrayInput
	// Specifies the list of component names. For the components supported by
	// the cluster, please following [reference](https://support.huaweicloud.com/intl/en-us/productdesc-mrs/mrs_08_0005.html)
	// Changing this will create a new MapReduce cluster resource.
	ComponentLists pulumi.StringArrayInput
	// Specifies the informations about custom nodes in the MapReduce cluster.\
	// The masterNodes structure is documented below.
	// Changing this will create a new MapReduce cluster resource.
	CustomNodes ClusterCustomNodeArrayInput
	// Specifies the EIP ID which bound to the MapReduce cluster.
	// The EIP must have been created and must be in the same region as the cluster.
	// Changing this will create a new MapReduce cluster resource.
	EipId pulumi.StringPtrInput
	// Specifies a unique ID in UUID format of enterprise project.
	EnterpriseProjectId pulumi.StringPtrInput
	// Specifies the external datasource configurations of the cluster.
	// The object structure is documented below.
	// Changing this will create a new MapReduce cluster resource.
	ExternalDatasources ClusterExternalDatasourceArrayInput
	// Specifies whether logs are collected when cluster installation fails.
	// Defaults to true. If `logCollection` set true, the OBS buckets will be created and only used to collect logs that
	// record MapReduce cluster creation failures. Changing this will create a new MapReduce cluster resource.
	LogCollection pulumi.BoolPtrInput
	// Specifies the administrator password, which is used to log in to
	// the cluster management page. The password can contain 8 to 26 characters and cannot be the username or the username
	// spelled backwards. The password must contain lowercase letters, uppercase letters, digits, spaces and the special
	// characters: `!?,.:-_{}[]@$^+=/`. Changing this will create a new MapReduce cluster resource.
	ManagerAdminPass pulumi.StringInput
	// Specifies the informations about master nodes in the MapReduce cluster.
	// The masterNodes structure is documented below.
	// Changing this will create a new MapReduce cluster resource.
	MasterNodes ClusterMasterNodesInput
	// Specifies the name of a bootstrap action script.
	// Changing this will create a new MapReduce cluster resource.
	Name pulumi.StringPtrInput
	// Specifies the administrator password, which is used to log in to the
	// each nodes(/ECSs). The password can contain 8 to 26 characters and cannot be the username or the username spelled
	// backwards. The password must contain lowercase letters, uppercase letters, digits, spaces and the special
	// characters: `!?,.:-_{}[]@$^+=/`. Changing this will create a new MapReduce cluster resource. This parameter
	// and `nodeKeyPair` are alternative.
	NodeAdminPass pulumi.StringPtrInput
	// Specifies the name of a key pair, which is used to log in to the each
	// nodes(/ECSs). Changing this will create a new MapReduce cluster resource.
	NodeKeyPair pulumi.StringPtrInput
	// Specifies the charging period of the cluster.\
	// If `periodUnit` is set to **month**, the value ranges from 1 to 9.
	// If `periodUnit` is set to **year**, the value ranges from 1 to 3.
	// This parameter is mandatory if `chargingMode` is set to **prePaid**.
	// Changing this parameter will create a new MapReduce cluster resource.
	Period pulumi.IntPtrInput
	// Specifies the charging period unit of the cluster.\
	// Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
	// Changing this parameter will create a new MapReduce cluster resource.
	PeriodUnit pulumi.StringPtrInput
	// Specifies the EIP address which bound to the MapReduce cluster.
	// The EIP must have been created and must be in the same region as the cluster.
	// Changing this will create a new MapReduce cluster resource.
	PublicIp pulumi.StringPtrInput
	// The region in which to create the MapReduce cluster resource. If omitted, the
	// provider-level region will be used. Changing this will create a new MapReduce cluster resource.
	Region pulumi.StringPtrInput
	// Specifies whether the running mode of the MapReduce cluster is secure,
	// defaults to **true**. The options are as follows:
	// + **true**: enable Kerberos authentication.
	// + **false**: disable Kerberos authentication. Changing this will create a new MapReduce cluster resource.
	SafeMode pulumi.BoolPtrInput
	// Specifies an array of one or more security group ID to attach to the
	// MapReduce cluster. If using the specified security group, the group need to open the specified port (9022) rules.
	SecurityGroupIds pulumi.StringArrayInput
	// Specifies the alarm configuration of the cluster. The smnNotify
	// structure is documented below.
	// Changing this will create a new MapReduce cluster resource.
	SmnNotify ClusterSmnNotifyPtrInput
	// Specifies the informations about streaming core nodes in the
	// MapReduce cluster.
	// The masterNodes structure is documented below.
	// Changing this will create a new MapReduce cluster resource.
	StreamingCoreNodes ClusterStreamingCoreNodesPtrInput
	// Specifies the informations about streaming task nodes in the
	// MapReduce cluster.
	// The masterNodes structure is documented below.
	// Changing this will create a new MapReduce cluster resource.
	StreamingTaskNodes ClusterStreamingTaskNodesPtrInput
	// Specifies the network ID of a subnet which bound to the MapReduce cluster.
	// Changing this will create a new MapReduce cluster resource.
	SubnetId pulumi.StringInput
	// Specifies the key/value pairs to associate with the cluster.
	Tags pulumi.StringMapInput
	// Specifies the template used for node deployment when the cluster type is
	// **CUSTOM**. The options are as follows:
	// + **mgmt_control_combined_v2**: template for jointly deploying the management and control nodes. The management and
	//   control roles are co-deployed on the Master node, and data instances are deployed in the same node group. This
	//   deployment mode applies to scenarios where the number of control nodes is less than 100, reducing costs.
	// + **mgmt_control_separated_v2**: The management and control roles are deployed on different master nodes, and data
	//   instances are deployed in the same node group. This deployment mode is applicable to a cluster with 100 to 500 nodes
	//   and delivers better performance in high-concurrency load scenarios.
	// + **mgmt_control_data_separated_v2**: The management role and control role are deployed on different Master nodes,
	//   and data instances are deployed in different node groups. This deployment mode is applicable to a cluster with more
	//   than 500 nodes. Components can be deployed separately, which can be used for a larger cluster scale.
	TemplateId pulumi.StringPtrInput
	// Specifies the type of the MapReduce cluster. The valid values are **ANALYSIS**,
	// **STREAMING** and **MIXED**, defaults to **ANALYSIS**. Changing this will create a new MapReduce cluster resource.
	Type pulumi.StringPtrInput
	// Specifies the MapReduce cluster version. The valid values are `MRS 1.9.2`
	// , `MRS 3.0.5` and `MRS 3.1.0`. Changing this will create a new MapReduce cluster resource.
	Version pulumi.StringInput
	// Specifies the ID of the VPC which bound to the MapReduce cluster. Changing
	// this will create a new MapReduce cluster resource.
	VpcId pulumi.StringInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterInput interface {
	pulumi.Input

	ToClusterOutput() ClusterOutput
	ToClusterOutputWithContext(ctx context.Context) ClusterOutput
}

func (*Cluster) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (i *Cluster) ToClusterOutput() ClusterOutput {
	return i.ToClusterOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput)
}

// ClusterArrayInput is an input type that accepts ClusterArray and ClusterArrayOutput values.
// You can construct a concrete instance of `ClusterArrayInput` via:
//
//	ClusterArray{ ClusterArgs{...} }
type ClusterArrayInput interface {
	pulumi.Input

	ToClusterArrayOutput() ClusterArrayOutput
	ToClusterArrayOutputWithContext(context.Context) ClusterArrayOutput
}

type ClusterArray []ClusterInput

func (ClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (i ClusterArray) ToClusterArrayOutput() ClusterArrayOutput {
	return i.ToClusterArrayOutputWithContext(context.Background())
}

func (i ClusterArray) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterArrayOutput)
}

// ClusterMapInput is an input type that accepts ClusterMap and ClusterMapOutput values.
// You can construct a concrete instance of `ClusterMapInput` via:
//
//	ClusterMap{ "key": ClusterArgs{...} }
type ClusterMapInput interface {
	pulumi.Input

	ToClusterMapOutput() ClusterMapOutput
	ToClusterMapOutputWithContext(context.Context) ClusterMapOutput
}

type ClusterMap map[string]ClusterInput

func (ClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (i ClusterMap) ToClusterMapOutput() ClusterMapOutput {
	return i.ToClusterMapOutputWithContext(context.Background())
}

func (i ClusterMap) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMapOutput)
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

// Specifies the informations about analysis core nodes in the
// MapReduce cluster.
// The masterNodes structure is documented below.
// Changing this will create a new MapReduce cluster resource.
func (o ClusterOutput) AnalysisCoreNodes() ClusterAnalysisCoreNodesPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterAnalysisCoreNodesPtrOutput { return v.AnalysisCoreNodes }).(ClusterAnalysisCoreNodesPtrOutput)
}

// Specifies the informations about analysis task nodes in the
// MapReduce cluster.
// The masterNodes structure is documented below.
// Changing this will create a new MapReduce cluster resource.
func (o ClusterOutput) AnalysisTaskNodes() ClusterAnalysisTaskNodesPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterAnalysisTaskNodesPtrOutput { return v.AnalysisTaskNodes }).(ClusterAnalysisTaskNodesPtrOutput)
}

// Specifies the availability zone in which to create the cluster.
// Please following [reference](https://developer.huaweicloud.com/intl/en-us/endpoint?all)
// Changing this will create a new MapReduce cluster resource.
func (o ClusterOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.AvailabilityZone }).(pulumi.StringOutput)
}

// Specifies the bootstrap action scripts.
// Bootstrap action scripts will be executed on specified cluster nodes before or after big data components are
// started. You can execute bootstrap actions to install third-party software, modify the cluster running environment,
// and customize cluster configuration. [Learn more](https://support.huaweicloud.com/intl/en-us/usermanual-mrs/mrs_01_0414.html)
func (o ClusterOutput) BootstrapScripts() ClusterBootstrapScriptArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterBootstrapScriptArrayOutput { return v.BootstrapScripts }).(ClusterBootstrapScriptArrayOutput)
}

// Specifies the charging mode of the cluster.\
// Valid values are **prePaid** and **postPaid**, defaults to **postPaid**.
// Changing this parameter will create a new MapReduce cluster resource.
func (o ClusterOutput) ChargingMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ChargingMode }).(pulumi.StringOutput)
}

// The charging start time which is the start time of billing, in RFC-3339 format.
func (o ClusterOutput) ChargingStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ChargingStartTime }).(pulumi.StringOutput)
}

// Specifies the component configurations of the cluster.
// The object structure is documented below.
// Changing this will create a new MapReduce cluster resource.
func (o ClusterOutput) ComponentConfigs() ClusterComponentConfigArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterComponentConfigArrayOutput { return v.ComponentConfigs }).(ClusterComponentConfigArrayOutput)
}

// Specifies the list of component names. For the components supported by
// the cluster, please following [reference](https://support.huaweicloud.com/intl/en-us/productdesc-mrs/mrs_08_0005.html)
// Changing this will create a new MapReduce cluster resource.
func (o ClusterOutput) ComponentLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringArrayOutput { return v.ComponentLists }).(pulumi.StringArrayOutput)
}

// The cluster creation time, in RFC-3339 format.
func (o ClusterOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Specifies the informations about custom nodes in the MapReduce cluster.\
// The masterNodes structure is documented below.
// Changing this will create a new MapReduce cluster resource.
func (o ClusterOutput) CustomNodes() ClusterCustomNodeArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterCustomNodeArrayOutput { return v.CustomNodes }).(ClusterCustomNodeArrayOutput)
}

// Specifies the EIP ID which bound to the MapReduce cluster.
// The EIP must have been created and must be in the same region as the cluster.
// Changing this will create a new MapReduce cluster resource.
func (o ClusterOutput) EipId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.EipId }).(pulumi.StringOutput)
}

// Specifies a unique ID in UUID format of enterprise project.
func (o ClusterOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// Specifies the external datasource configurations of the cluster.
// The object structure is documented below.
// Changing this will create a new MapReduce cluster resource.
func (o ClusterOutput) ExternalDatasources() ClusterExternalDatasourceArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterExternalDatasourceArrayOutput { return v.ExternalDatasources }).(ClusterExternalDatasourceArrayOutput)
}

// Specifies whether logs are collected when cluster installation fails.
// Defaults to true. If `logCollection` set true, the OBS buckets will be created and only used to collect logs that
// record MapReduce cluster creation failures. Changing this will create a new MapReduce cluster resource.
func (o ClusterOutput) LogCollection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.BoolPtrOutput { return v.LogCollection }).(pulumi.BoolPtrOutput)
}

// Specifies the administrator password, which is used to log in to
// the cluster management page. The password can contain 8 to 26 characters and cannot be the username or the username
// spelled backwards. The password must contain lowercase letters, uppercase letters, digits, spaces and the special
// characters: `!?,.:-_{}[]@$^+=/`. Changing this will create a new MapReduce cluster resource.
func (o ClusterOutput) ManagerAdminPass() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ManagerAdminPass }).(pulumi.StringOutput)
}

// The IP address of the master node.
func (o ClusterOutput) MasterNodeIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.MasterNodeIp }).(pulumi.StringOutput)
}

// Specifies the informations about master nodes in the MapReduce cluster.
// The masterNodes structure is documented below.
// Changing this will create a new MapReduce cluster resource.
func (o ClusterOutput) MasterNodes() ClusterMasterNodesOutput {
	return o.ApplyT(func(v *Cluster) ClusterMasterNodesOutput { return v.MasterNodes }).(ClusterMasterNodesOutput)
}

// Specifies the name of a bootstrap action script.
// Changing this will create a new MapReduce cluster resource.
func (o ClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the administrator password, which is used to log in to the
// each nodes(/ECSs). The password can contain 8 to 26 characters and cannot be the username or the username spelled
// backwards. The password must contain lowercase letters, uppercase letters, digits, spaces and the special
// characters: `!?,.:-_{}[]@$^+=/`. Changing this will create a new MapReduce cluster resource. This parameter
// and `nodeKeyPair` are alternative.
func (o ClusterOutput) NodeAdminPass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.NodeAdminPass }).(pulumi.StringPtrOutput)
}

// Specifies the name of a key pair, which is used to log in to the each
// nodes(/ECSs). Changing this will create a new MapReduce cluster resource.
func (o ClusterOutput) NodeKeyPair() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.NodeKeyPair }).(pulumi.StringPtrOutput)
}

// Specifies the charging period of the cluster.\
// If `periodUnit` is set to **month**, the value ranges from 1 to 9.
// If `periodUnit` is set to **year**, the value ranges from 1 to 3.
// This parameter is mandatory if `chargingMode` is set to **prePaid**.
// Changing this parameter will create a new MapReduce cluster resource.
func (o ClusterOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntPtrOutput { return v.Period }).(pulumi.IntPtrOutput)
}

// Specifies the charging period unit of the cluster.\
// Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
// Changing this parameter will create a new MapReduce cluster resource.
func (o ClusterOutput) PeriodUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.PeriodUnit }).(pulumi.StringPtrOutput)
}

// The preferred private IP address of the master node.
func (o ClusterOutput) PrivateIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.PrivateIp }).(pulumi.StringOutput)
}

// Specifies the EIP address which bound to the MapReduce cluster.
// The EIP must have been created and must be in the same region as the cluster.
// Changing this will create a new MapReduce cluster resource.
func (o ClusterOutput) PublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.PublicIp }).(pulumi.StringOutput)
}

// The region in which to create the MapReduce cluster resource. If omitted, the
// provider-level region will be used. Changing this will create a new MapReduce cluster resource.
func (o ClusterOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies whether the running mode of the MapReduce cluster is secure,
// defaults to **true**. The options are as follows:
// + **true**: enable Kerberos authentication.
// + **false**: disable Kerberos authentication. Changing this will create a new MapReduce cluster resource.
func (o ClusterOutput) SafeMode() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.BoolPtrOutput { return v.SafeMode }).(pulumi.BoolPtrOutput)
}

// Specifies an array of one or more security group ID to attach to the
// MapReduce cluster. If using the specified security group, the group need to open the specified port (9022) rules.
func (o ClusterOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringArrayOutput { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// Specifies the alarm configuration of the cluster. The smnNotify
// structure is documented below.
// Changing this will create a new MapReduce cluster resource.
func (o ClusterOutput) SmnNotify() ClusterSmnNotifyPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterSmnNotifyPtrOutput { return v.SmnNotify }).(ClusterSmnNotifyPtrOutput)
}

// The cluster state, which include: running, frozen, abnormal and failed.
func (o ClusterOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specifies the informations about streaming core nodes in the
// MapReduce cluster.
// The masterNodes structure is documented below.
// Changing this will create a new MapReduce cluster resource.
func (o ClusterOutput) StreamingCoreNodes() ClusterStreamingCoreNodesPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterStreamingCoreNodesPtrOutput { return v.StreamingCoreNodes }).(ClusterStreamingCoreNodesPtrOutput)
}

// Specifies the informations about streaming task nodes in the
// MapReduce cluster.
// The masterNodes structure is documented below.
// Changing this will create a new MapReduce cluster resource.
func (o ClusterOutput) StreamingTaskNodes() ClusterStreamingTaskNodesPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterStreamingTaskNodesPtrOutput { return v.StreamingTaskNodes }).(ClusterStreamingTaskNodesPtrOutput)
}

// Specifies the network ID of a subnet which bound to the MapReduce cluster.
// Changing this will create a new MapReduce cluster resource.
func (o ClusterOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// Specifies the key/value pairs to associate with the cluster.
func (o ClusterOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Specifies the template used for node deployment when the cluster type is
// **CUSTOM**. The options are as follows:
//   - **mgmt_control_combined_v2**: template for jointly deploying the management and control nodes. The management and
//     control roles are co-deployed on the Master node, and data instances are deployed in the same node group. This
//     deployment mode applies to scenarios where the number of control nodes is less than 100, reducing costs.
//   - **mgmt_control_separated_v2**: The management and control roles are deployed on different master nodes, and data
//     instances are deployed in the same node group. This deployment mode is applicable to a cluster with 100 to 500 nodes
//     and delivers better performance in high-concurrency load scenarios.
//   - **mgmt_control_data_separated_v2**: The management role and control role are deployed on different Master nodes,
//     and data instances are deployed in different node groups. This deployment mode is applicable to a cluster with more
//     than 500 nodes. Components can be deployed separately, which can be used for a larger cluster scale.
func (o ClusterOutput) TemplateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.TemplateId }).(pulumi.StringPtrOutput)
}

// The total number of nodes deployed in the cluster.
func (o ClusterOutput) TotalNodeNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.TotalNodeNumber }).(pulumi.IntOutput)
}

// Specifies the type of the MapReduce cluster. The valid values are **ANALYSIS**,
// **STREAMING** and **MIXED**, defaults to **ANALYSIS**. Changing this will create a new MapReduce cluster resource.
func (o ClusterOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

// The cluster update time, in RFC-3339 format.
func (o ClusterOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// Specifies the MapReduce cluster version. The valid values are `MRS 1.9.2`
// , `MRS 3.0.5` and `MRS 3.1.0`. Changing this will create a new MapReduce cluster resource.
func (o ClusterOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

// Specifies the ID of the VPC which bound to the MapReduce cluster. Changing
// this will create a new MapReduce cluster resource.
func (o ClusterOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type ClusterArrayOutput struct{ *pulumi.OutputState }

func (ClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (o ClusterArrayOutput) ToClusterArrayOutput() ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) Index(i pulumi.IntInput) ClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].([]*Cluster)[vs[1].(int)]
	}).(ClusterOutput)
}

type ClusterMapOutput struct{ *pulumi.OutputState }

func (ClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (o ClusterMapOutput) ToClusterMapOutput() ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) MapIndex(k pulumi.StringInput) ClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].(map[string]*Cluster)[vs[1].(string)]
	}).(ClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInput)(nil)).Elem(), &Cluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterArrayInput)(nil)).Elem(), ClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMapInput)(nil)).Elem(), ClusterMap{})
	pulumi.RegisterOutputType(ClusterOutput{})
	pulumi.RegisterOutputType(ClusterArrayOutput{})
	pulumi.RegisterOutputType(ClusterMapOutput{})
}
