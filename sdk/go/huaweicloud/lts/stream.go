// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lts

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manage a log stream resource within HuaweiCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Lts"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			groupId := cfg.RequireObject("groupId")
//			_, err := Lts.NewStream(ctx, "test", &Lts.StreamArgs{
//				GroupId:    pulumi.Any(groupId),
//				StreamName: pulumi.String("testacc_stream"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The log stream can be imported using the group ID and stream ID separated by a slash, e.g. bash
//
// ```sh
//
//	$ pulumi import huaweicloud:Lts/stream:Stream test <group_id>/<id>
//
// ```
type Stream struct {
	pulumi.CustomResourceState

	// The creation time of the log stream.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Specifies the enterprise project ID.
	// Changing this parameter will create a new resource.
	EnterpriseProjectId pulumi.StringOutput `pulumi:"enterpriseProjectId"`
	// Number of log stream filters.
	FilterCount pulumi.IntOutput `pulumi:"filterCount"`
	// Specifies the ID of a created log group. Changing this parameter will create
	// a new resource.
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// Specifies whether to favorite the log stream.\
	// Defaults to **false**.
	IsFavorite pulumi.BoolPtrOutput `pulumi:"isFavorite"`
	// Specifies the region in which to create the log stream resource. If omitted, the
	// provider-level region will be used. Changing this creates a new log stream resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the log stream name. Changing this parameter will create a new
	// resource.
	StreamName pulumi.StringOutput `pulumi:"streamName"`
	// Specifies the key/value pairs of the log stream.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Specifies the log expiration time (days).
	// The valid value is a non-zero integer from `-1` to `365`, defaults to `-1` which means inherit the log group settings.
	TtlInDays pulumi.IntOutput `pulumi:"ttlInDays"`
}

// NewStream registers a new resource with the given unique name, arguments, and options.
func NewStream(ctx *pulumi.Context,
	name string, args *StreamArgs, opts ...pulumi.ResourceOption) (*Stream, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.StreamName == nil {
		return nil, errors.New("invalid value for required argument 'StreamName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Stream
	err := ctx.RegisterResource("huaweicloud:Lts/stream:Stream", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStream gets an existing Stream resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStream(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StreamState, opts ...pulumi.ResourceOption) (*Stream, error) {
	var resource Stream
	err := ctx.ReadResource("huaweicloud:Lts/stream:Stream", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Stream resources.
type streamState struct {
	// The creation time of the log stream.
	CreatedAt *string `pulumi:"createdAt"`
	// Specifies the enterprise project ID.
	// Changing this parameter will create a new resource.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Number of log stream filters.
	FilterCount *int `pulumi:"filterCount"`
	// Specifies the ID of a created log group. Changing this parameter will create
	// a new resource.
	GroupId *string `pulumi:"groupId"`
	// Specifies whether to favorite the log stream.\
	// Defaults to **false**.
	IsFavorite *bool `pulumi:"isFavorite"`
	// Specifies the region in which to create the log stream resource. If omitted, the
	// provider-level region will be used. Changing this creates a new log stream resource.
	Region *string `pulumi:"region"`
	// Specifies the log stream name. Changing this parameter will create a new
	// resource.
	StreamName *string `pulumi:"streamName"`
	// Specifies the key/value pairs of the log stream.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the log expiration time (days).
	// The valid value is a non-zero integer from `-1` to `365`, defaults to `-1` which means inherit the log group settings.
	TtlInDays *int `pulumi:"ttlInDays"`
}

type StreamState struct {
	// The creation time of the log stream.
	CreatedAt pulumi.StringPtrInput
	// Specifies the enterprise project ID.
	// Changing this parameter will create a new resource.
	EnterpriseProjectId pulumi.StringPtrInput
	// Number of log stream filters.
	FilterCount pulumi.IntPtrInput
	// Specifies the ID of a created log group. Changing this parameter will create
	// a new resource.
	GroupId pulumi.StringPtrInput
	// Specifies whether to favorite the log stream.\
	// Defaults to **false**.
	IsFavorite pulumi.BoolPtrInput
	// Specifies the region in which to create the log stream resource. If omitted, the
	// provider-level region will be used. Changing this creates a new log stream resource.
	Region pulumi.StringPtrInput
	// Specifies the log stream name. Changing this parameter will create a new
	// resource.
	StreamName pulumi.StringPtrInput
	// Specifies the key/value pairs of the log stream.
	Tags pulumi.StringMapInput
	// Specifies the log expiration time (days).
	// The valid value is a non-zero integer from `-1` to `365`, defaults to `-1` which means inherit the log group settings.
	TtlInDays pulumi.IntPtrInput
}

func (StreamState) ElementType() reflect.Type {
	return reflect.TypeOf((*streamState)(nil)).Elem()
}

type streamArgs struct {
	// Specifies the enterprise project ID.
	// Changing this parameter will create a new resource.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies the ID of a created log group. Changing this parameter will create
	// a new resource.
	GroupId string `pulumi:"groupId"`
	// Specifies whether to favorite the log stream.\
	// Defaults to **false**.
	IsFavorite *bool `pulumi:"isFavorite"`
	// Specifies the region in which to create the log stream resource. If omitted, the
	// provider-level region will be used. Changing this creates a new log stream resource.
	Region *string `pulumi:"region"`
	// Specifies the log stream name. Changing this parameter will create a new
	// resource.
	StreamName string `pulumi:"streamName"`
	// Specifies the key/value pairs of the log stream.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the log expiration time (days).
	// The valid value is a non-zero integer from `-1` to `365`, defaults to `-1` which means inherit the log group settings.
	TtlInDays *int `pulumi:"ttlInDays"`
}

// The set of arguments for constructing a Stream resource.
type StreamArgs struct {
	// Specifies the enterprise project ID.
	// Changing this parameter will create a new resource.
	EnterpriseProjectId pulumi.StringPtrInput
	// Specifies the ID of a created log group. Changing this parameter will create
	// a new resource.
	GroupId pulumi.StringInput
	// Specifies whether to favorite the log stream.\
	// Defaults to **false**.
	IsFavorite pulumi.BoolPtrInput
	// Specifies the region in which to create the log stream resource. If omitted, the
	// provider-level region will be used. Changing this creates a new log stream resource.
	Region pulumi.StringPtrInput
	// Specifies the log stream name. Changing this parameter will create a new
	// resource.
	StreamName pulumi.StringInput
	// Specifies the key/value pairs of the log stream.
	Tags pulumi.StringMapInput
	// Specifies the log expiration time (days).
	// The valid value is a non-zero integer from `-1` to `365`, defaults to `-1` which means inherit the log group settings.
	TtlInDays pulumi.IntPtrInput
}

func (StreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*streamArgs)(nil)).Elem()
}

type StreamInput interface {
	pulumi.Input

	ToStreamOutput() StreamOutput
	ToStreamOutputWithContext(ctx context.Context) StreamOutput
}

func (*Stream) ElementType() reflect.Type {
	return reflect.TypeOf((**Stream)(nil)).Elem()
}

func (i *Stream) ToStreamOutput() StreamOutput {
	return i.ToStreamOutputWithContext(context.Background())
}

func (i *Stream) ToStreamOutputWithContext(ctx context.Context) StreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamOutput)
}

// StreamArrayInput is an input type that accepts StreamArray and StreamArrayOutput values.
// You can construct a concrete instance of `StreamArrayInput` via:
//
//	StreamArray{ StreamArgs{...} }
type StreamArrayInput interface {
	pulumi.Input

	ToStreamArrayOutput() StreamArrayOutput
	ToStreamArrayOutputWithContext(context.Context) StreamArrayOutput
}

type StreamArray []StreamInput

func (StreamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Stream)(nil)).Elem()
}

func (i StreamArray) ToStreamArrayOutput() StreamArrayOutput {
	return i.ToStreamArrayOutputWithContext(context.Background())
}

func (i StreamArray) ToStreamArrayOutputWithContext(ctx context.Context) StreamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamArrayOutput)
}

// StreamMapInput is an input type that accepts StreamMap and StreamMapOutput values.
// You can construct a concrete instance of `StreamMapInput` via:
//
//	StreamMap{ "key": StreamArgs{...} }
type StreamMapInput interface {
	pulumi.Input

	ToStreamMapOutput() StreamMapOutput
	ToStreamMapOutputWithContext(context.Context) StreamMapOutput
}

type StreamMap map[string]StreamInput

func (StreamMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Stream)(nil)).Elem()
}

func (i StreamMap) ToStreamMapOutput() StreamMapOutput {
	return i.ToStreamMapOutputWithContext(context.Background())
}

func (i StreamMap) ToStreamMapOutputWithContext(ctx context.Context) StreamMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamMapOutput)
}

type StreamOutput struct{ *pulumi.OutputState }

func (StreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Stream)(nil)).Elem()
}

func (o StreamOutput) ToStreamOutput() StreamOutput {
	return o
}

func (o StreamOutput) ToStreamOutputWithContext(ctx context.Context) StreamOutput {
	return o
}

// The creation time of the log stream.
func (o StreamOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Stream) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Specifies the enterprise project ID.
// Changing this parameter will create a new resource.
func (o StreamOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Stream) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// Number of log stream filters.
func (o StreamOutput) FilterCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Stream) pulumi.IntOutput { return v.FilterCount }).(pulumi.IntOutput)
}

// Specifies the ID of a created log group. Changing this parameter will create
// a new resource.
func (o StreamOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Stream) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

// Specifies whether to favorite the log stream.\
// Defaults to **false**.
func (o StreamOutput) IsFavorite() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Stream) pulumi.BoolPtrOutput { return v.IsFavorite }).(pulumi.BoolPtrOutput)
}

// Specifies the region in which to create the log stream resource. If omitted, the
// provider-level region will be used. Changing this creates a new log stream resource.
func (o StreamOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Stream) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the log stream name. Changing this parameter will create a new
// resource.
func (o StreamOutput) StreamName() pulumi.StringOutput {
	return o.ApplyT(func(v *Stream) pulumi.StringOutput { return v.StreamName }).(pulumi.StringOutput)
}

// Specifies the key/value pairs of the log stream.
func (o StreamOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Stream) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Specifies the log expiration time (days).
// The valid value is a non-zero integer from `-1` to `365`, defaults to `-1` which means inherit the log group settings.
func (o StreamOutput) TtlInDays() pulumi.IntOutput {
	return o.ApplyT(func(v *Stream) pulumi.IntOutput { return v.TtlInDays }).(pulumi.IntOutput)
}

type StreamArrayOutput struct{ *pulumi.OutputState }

func (StreamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Stream)(nil)).Elem()
}

func (o StreamArrayOutput) ToStreamArrayOutput() StreamArrayOutput {
	return o
}

func (o StreamArrayOutput) ToStreamArrayOutputWithContext(ctx context.Context) StreamArrayOutput {
	return o
}

func (o StreamArrayOutput) Index(i pulumi.IntInput) StreamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Stream {
		return vs[0].([]*Stream)[vs[1].(int)]
	}).(StreamOutput)
}

type StreamMapOutput struct{ *pulumi.OutputState }

func (StreamMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Stream)(nil)).Elem()
}

func (o StreamMapOutput) ToStreamMapOutput() StreamMapOutput {
	return o
}

func (o StreamMapOutput) ToStreamMapOutputWithContext(ctx context.Context) StreamMapOutput {
	return o
}

func (o StreamMapOutput) MapIndex(k pulumi.StringInput) StreamOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Stream {
		return vs[0].(map[string]*Stream)[vs[1].(string)]
	}).(StreamOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StreamInput)(nil)).Elem(), &Stream{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamArrayInput)(nil)).Elem(), StreamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamMapInput)(nil)).Elem(), StreamMap{})
	pulumi.RegisterOutputType(StreamOutput{})
	pulumi.RegisterOutputType(StreamArrayOutput{})
	pulumi.RegisterOutputType(StreamMapOutput{})
}
