// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dedicatedelb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an ELB pool resource within HuaweiCloud.
//
// ## Example Usage
// ### Create a Pool and Associate a Load Balancer
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/DedicatedElb"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/DedicatedElb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			loadbalancerId := cfg.RequireObject("loadbalancerId")
//			_, err := DedicatedElb.NewPool(ctx, "pool1", &DedicatedElb.PoolArgs{
//				Protocol:          pulumi.String("HTTP"),
//				LbMethod:          pulumi.String("ROUND_ROBIN"),
//				LoadbalancerId:    pulumi.Any(loadbalancerId),
//				SlowStartEnabled:  pulumi.Bool(true),
//				SlowStartDuration: pulumi.Int(100),
//				ProtectionStatus:  pulumi.String("consoleProtection"),
//				ProtectionReason:  pulumi.String("test reason"),
//				Persistence: &dedicatedelb.PoolPersistenceArgs{
//					Type:       pulumi.String("APP_COOKIE"),
//					CookieName: pulumi.String("testCookie"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Create a Pool and Associate a Listener
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/DedicatedElb"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/DedicatedElb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			listenerId := cfg.RequireObject("listenerId")
//			_, err := DedicatedElb.NewPool(ctx, "pool1", &DedicatedElb.PoolArgs{
//				Protocol:          pulumi.String("HTTP"),
//				LbMethod:          pulumi.String("ROUND_ROBIN"),
//				ListenerId:        pulumi.Any(listenerId),
//				SlowStartEnabled:  pulumi.Bool(true),
//				SlowStartDuration: pulumi.Int(100),
//				ProtectionStatus:  pulumi.String("consoleProtection"),
//				ProtectionReason:  pulumi.String("test reason"),
//				Persistence: &dedicatedelb.PoolPersistenceArgs{
//					Type:       pulumi.String("APP_COOKIE"),
//					CookieName: pulumi.String("testCookie"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Create a Pool and Associate later
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/DedicatedElb"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/DedicatedElb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			vpcId := cfg.RequireObject("vpcId")
//			_, err := DedicatedElb.NewPool(ctx, "pool1", &DedicatedElb.PoolArgs{
//				Protocol:          pulumi.String("HTTP"),
//				LbMethod:          pulumi.String("ROUND_ROBIN"),
//				Type:              pulumi.String("instance"),
//				VpcId:             pulumi.Any(vpcId),
//				SlowStartEnabled:  pulumi.Bool(true),
//				SlowStartDuration: pulumi.Int(100),
//				ProtectionStatus:  pulumi.String("consoleProtection"),
//				ProtectionReason:  pulumi.String("test reason"),
//				Persistence: &dedicatedelb.PoolPersistenceArgs{
//					Type:       pulumi.String("APP_COOKIE"),
//					CookieName: pulumi.String("testCookie"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ELB pool can be imported using the pool `id`, e.g. bash
//
// ```sh
//
//	$ pulumi import huaweicloud:DedicatedElb/pool:Pool pool_1 <id>
//
// ```
//
//	Note that the imported state may not be identical to your resource definition, due to some attributes missing from the API response, security or some other reason. The missing attributes include`deletion_protection_enable`. It is generally recommended running **terraform plan** after importing a pool. You can then decide if changes should be applied to the pool, or the resource definition should be updated to align with the pool. Also you can ignore changes as below. hcl resource "huaweicloud_elb_pool" "test" {
//
//	...
//
//	lifecycle {
//
//	ignore_changes = [
//
//	deletion_protection_enable,
//
//	]
//
//	} }
type Pool struct {
	pulumi.CustomResourceState

	// Specifies whether to enable transparent port transmission on the backend.
	// If enable, the port of the backend server will be same as the port of the listener.
	AnyPortEnable pulumi.BoolOutput `pulumi:"anyPortEnable"`
	// Specifies whether to enable delayed logout. This parameter can be set to
	// **true** when the `protocol` is set to **TCP**, **UDP** or **QUIC**, and the value of `protocol` of the associated
	// listener must be **TCP** or **UDP**. It will be triggered for the following scenes:
	// + The pool member is removed from the pool.
	// + The health monitor status is abnormal.
	// + The pool member weight is changed to `0`.
	ConnectionDrainEnabled pulumi.BoolOutput `pulumi:"connectionDrainEnabled"`
	// Specifies the timeout of the delayed logout in seconds.\
	// Value ranges from `10` to `4000`.
	ConnectionDrainTimeout pulumi.IntOutput `pulumi:"connectionDrainTimeout"`
	// The creation time of the pool.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Specifies whether to enable deletion protection.
	DeletionProtectionEnable pulumi.BoolPtrOutput `pulumi:"deletionProtectionEnable"`
	// Specifies the description of the pool.
	Description    pulumi.StringPtrOutput `pulumi:"description"`
	EnableForceNew pulumi.StringPtrOutput `pulumi:"enableForceNew"`
	// The ID of the enterprise project.
	EnterpriseProjectId pulumi.StringOutput `pulumi:"enterpriseProjectId"`
	// Specifies the IP address version supported by the backend server group.
	// The value can be **dualstack**, **v6**, or **v4**. If the protocol of the backend server group is HTTP, the value is **v4**.
	IpVersion pulumi.StringOutput `pulumi:"ipVersion"`
	// Specifies the load balancing algorithm used by the load balancer to route requests
	// to backend servers in the associated backend server group. Value options:
	// + **ROUND_ROBIN**: weighted round-robin.
	// + **LEAST_CONNECTIONS**: weighted least connections.
	// + **SOURCE_IP**: source IP hash.
	// + **QUIC_CID**: connection ID.
	// + **2_TUPLE_HASH**: 2-tuple hash that is only available for IP backend server groups.
	// + **3_TUPLE_HASH**: 3-tuple hash that is only available for IP backend server groups.
	// + **5_TUPLE_HASH**: 5-tuple hash that is only available for IP backend server groups Note.
	LbMethod pulumi.StringOutput `pulumi:"lbMethod"`
	// Specifies the ID of the listener with which the backend server group is
	// associated.
	ListenerId pulumi.StringOutput `pulumi:"listenerId"`
	// Specifies the ID of the load balancer with which the backend server
	// group is associated.
	LoadbalancerId pulumi.StringOutput `pulumi:"loadbalancerId"`
	// Specifies the minimum healthy member count. When the number of online
	// members in the health check is less than this number, the status of the pool is determined to be unhealthy. Value options:
	// + **0** (default value): Not take effect.
	// + **1**: Take effect when all member offline.
	MinimumHealthyMemberCount pulumi.IntOutput `pulumi:"minimumHealthyMemberCount"`
	// The ID of the health check configured for the backend server group.
	MonitorId pulumi.StringOutput `pulumi:"monitorId"`
	// Specifies the backend server group name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the sticky session.
	// The object structure is documented below.
	Persistence PoolPersistencePtrOutput `pulumi:"persistence"`
	// The reason for update protection. Only valid when `protectionStatus` is
	// **consoleProtection**.
	ProtectionReason pulumi.StringPtrOutput `pulumi:"protectionReason"`
	// The protection status for update. Value options:
	// + **nonProtection**: No protection.
	// + **consoleProtection**: Console modification protection.
	ProtectionStatus pulumi.StringOutput `pulumi:"protectionStatus"`
	// Specifies the protocol used by the backend server group to receive requests.
	// Value options: **TCP**, **UDP**, **HTTP**, **HTTPS**, **QUIC**, **GRPC** or **TLS**.
	// + If the listener's protocol is **UDP**, the value must be **UDP** or **QUIC**.
	// + If the listener's protocol is **TCP**, the value must be **TCP**.
	// + If the listener's protocol is **IP**, the value must be **IP**.
	// + If the listener's protocol is **HTTP**, the value must be **HTTP**.
	// + If the listener's protocol is **HTTPS**, the value must be **HTTP** or **HTTPS**.
	// + If the listener's protocol is **TERMINATED_HTTPS**, the value must be **HTTP**.
	// + If the listener's protocol is **QUIC**, the value must be **HTTP**„ÄÅ**HTTPS** or **GRPC**.
	// + If the listener's protocol is **TLS**, the value must be **TLS** or **TCP**.
	// + If the value is **QUIC**, sticky session must be enabled with `type` set to **SOURCE_IP**.
	// + If the value is **GRPC**, the value of `http2Enable` of the associated listener must be **true**.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// Specifies the public border group.
	PublicBorderGroup pulumi.StringOutput `pulumi:"publicBorderGroup"`
	// Specifies the region in which to create the ELB pool resource. If omitted, the
	// provider-level region will be used. Changing this creates a new pool.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the slow start duration, in seconds.\
	// Value ranges from `30` to `1,200`. Defaults to `30`.
	SlowStartDuration pulumi.IntOutput `pulumi:"slowStartDuration"`
	// Specifies whether to enable slow start. After you enable slow start, new
	// backend servers added to the backend server group are warmed up, and the number of requests they can receive
	// increases linearly during the configured slow start duration. Defaults to **false**.
	SlowStartEnabled pulumi.BoolOutput `pulumi:"slowStartEnabled"`
	// Specifies the sticky session type. Value options: **SOURCE_IP**,
	// **HTTP_COOKIE**, and **APP_COOKIE**.
	Type pulumi.StringOutput `pulumi:"type"`
	// The update time of the pool.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// Specifies the ID of the VPC where the backend server group works.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewPool registers a new resource with the given unique name, arguments, and options.
func NewPool(ctx *pulumi.Context,
	name string, args *PoolArgs, opts ...pulumi.ResourceOption) (*Pool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LbMethod == nil {
		return nil, errors.New("invalid value for required argument 'LbMethod'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Pool
	err := ctx.RegisterResource("huaweicloud:DedicatedElb/pool:Pool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPool gets an existing Pool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PoolState, opts ...pulumi.ResourceOption) (*Pool, error) {
	var resource Pool
	err := ctx.ReadResource("huaweicloud:DedicatedElb/pool:Pool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Pool resources.
type poolState struct {
	// Specifies whether to enable transparent port transmission on the backend.
	// If enable, the port of the backend server will be same as the port of the listener.
	AnyPortEnable *bool `pulumi:"anyPortEnable"`
	// Specifies whether to enable delayed logout. This parameter can be set to
	// **true** when the `protocol` is set to **TCP**, **UDP** or **QUIC**, and the value of `protocol` of the associated
	// listener must be **TCP** or **UDP**. It will be triggered for the following scenes:
	// + The pool member is removed from the pool.
	// + The health monitor status is abnormal.
	// + The pool member weight is changed to `0`.
	ConnectionDrainEnabled *bool `pulumi:"connectionDrainEnabled"`
	// Specifies the timeout of the delayed logout in seconds.\
	// Value ranges from `10` to `4000`.
	ConnectionDrainTimeout *int `pulumi:"connectionDrainTimeout"`
	// The creation time of the pool.
	CreatedAt *string `pulumi:"createdAt"`
	// Specifies whether to enable deletion protection.
	DeletionProtectionEnable *bool `pulumi:"deletionProtectionEnable"`
	// Specifies the description of the pool.
	Description    *string `pulumi:"description"`
	EnableForceNew *string `pulumi:"enableForceNew"`
	// The ID of the enterprise project.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies the IP address version supported by the backend server group.
	// The value can be **dualstack**, **v6**, or **v4**. If the protocol of the backend server group is HTTP, the value is **v4**.
	IpVersion *string `pulumi:"ipVersion"`
	// Specifies the load balancing algorithm used by the load balancer to route requests
	// to backend servers in the associated backend server group. Value options:
	// + **ROUND_ROBIN**: weighted round-robin.
	// + **LEAST_CONNECTIONS**: weighted least connections.
	// + **SOURCE_IP**: source IP hash.
	// + **QUIC_CID**: connection ID.
	// + **2_TUPLE_HASH**: 2-tuple hash that is only available for IP backend server groups.
	// + **3_TUPLE_HASH**: 3-tuple hash that is only available for IP backend server groups.
	// + **5_TUPLE_HASH**: 5-tuple hash that is only available for IP backend server groups Note.
	LbMethod *string `pulumi:"lbMethod"`
	// Specifies the ID of the listener with which the backend server group is
	// associated.
	ListenerId *string `pulumi:"listenerId"`
	// Specifies the ID of the load balancer with which the backend server
	// group is associated.
	LoadbalancerId *string `pulumi:"loadbalancerId"`
	// Specifies the minimum healthy member count. When the number of online
	// members in the health check is less than this number, the status of the pool is determined to be unhealthy. Value options:
	// + **0** (default value): Not take effect.
	// + **1**: Take effect when all member offline.
	MinimumHealthyMemberCount *int `pulumi:"minimumHealthyMemberCount"`
	// The ID of the health check configured for the backend server group.
	MonitorId *string `pulumi:"monitorId"`
	// Specifies the backend server group name.
	Name *string `pulumi:"name"`
	// Specifies the sticky session.
	// The object structure is documented below.
	Persistence *PoolPersistence `pulumi:"persistence"`
	// The reason for update protection. Only valid when `protectionStatus` is
	// **consoleProtection**.
	ProtectionReason *string `pulumi:"protectionReason"`
	// The protection status for update. Value options:
	// + **nonProtection**: No protection.
	// + **consoleProtection**: Console modification protection.
	ProtectionStatus *string `pulumi:"protectionStatus"`
	// Specifies the protocol used by the backend server group to receive requests.
	// Value options: **TCP**, **UDP**, **HTTP**, **HTTPS**, **QUIC**, **GRPC** or **TLS**.
	// + If the listener's protocol is **UDP**, the value must be **UDP** or **QUIC**.
	// + If the listener's protocol is **TCP**, the value must be **TCP**.
	// + If the listener's protocol is **IP**, the value must be **IP**.
	// + If the listener's protocol is **HTTP**, the value must be **HTTP**.
	// + If the listener's protocol is **HTTPS**, the value must be **HTTP** or **HTTPS**.
	// + If the listener's protocol is **TERMINATED_HTTPS**, the value must be **HTTP**.
	// + If the listener's protocol is **QUIC**, the value must be **HTTP**„ÄÅ**HTTPS** or **GRPC**.
	// + If the listener's protocol is **TLS**, the value must be **TLS** or **TCP**.
	// + If the value is **QUIC**, sticky session must be enabled with `type` set to **SOURCE_IP**.
	// + If the value is **GRPC**, the value of `http2Enable` of the associated listener must be **true**.
	Protocol *string `pulumi:"protocol"`
	// Specifies the public border group.
	PublicBorderGroup *string `pulumi:"publicBorderGroup"`
	// Specifies the region in which to create the ELB pool resource. If omitted, the
	// provider-level region will be used. Changing this creates a new pool.
	Region *string `pulumi:"region"`
	// Specifies the slow start duration, in seconds.\
	// Value ranges from `30` to `1,200`. Defaults to `30`.
	SlowStartDuration *int `pulumi:"slowStartDuration"`
	// Specifies whether to enable slow start. After you enable slow start, new
	// backend servers added to the backend server group are warmed up, and the number of requests they can receive
	// increases linearly during the configured slow start duration. Defaults to **false**.
	SlowStartEnabled *bool `pulumi:"slowStartEnabled"`
	// Specifies the sticky session type. Value options: **SOURCE_IP**,
	// **HTTP_COOKIE**, and **APP_COOKIE**.
	Type *string `pulumi:"type"`
	// The update time of the pool.
	UpdatedAt *string `pulumi:"updatedAt"`
	// Specifies the ID of the VPC where the backend server group works.
	VpcId *string `pulumi:"vpcId"`
}

type PoolState struct {
	// Specifies whether to enable transparent port transmission on the backend.
	// If enable, the port of the backend server will be same as the port of the listener.
	AnyPortEnable pulumi.BoolPtrInput
	// Specifies whether to enable delayed logout. This parameter can be set to
	// **true** when the `protocol` is set to **TCP**, **UDP** or **QUIC**, and the value of `protocol` of the associated
	// listener must be **TCP** or **UDP**. It will be triggered for the following scenes:
	// + The pool member is removed from the pool.
	// + The health monitor status is abnormal.
	// + The pool member weight is changed to `0`.
	ConnectionDrainEnabled pulumi.BoolPtrInput
	// Specifies the timeout of the delayed logout in seconds.\
	// Value ranges from `10` to `4000`.
	ConnectionDrainTimeout pulumi.IntPtrInput
	// The creation time of the pool.
	CreatedAt pulumi.StringPtrInput
	// Specifies whether to enable deletion protection.
	DeletionProtectionEnable pulumi.BoolPtrInput
	// Specifies the description of the pool.
	Description    pulumi.StringPtrInput
	EnableForceNew pulumi.StringPtrInput
	// The ID of the enterprise project.
	EnterpriseProjectId pulumi.StringPtrInput
	// Specifies the IP address version supported by the backend server group.
	// The value can be **dualstack**, **v6**, or **v4**. If the protocol of the backend server group is HTTP, the value is **v4**.
	IpVersion pulumi.StringPtrInput
	// Specifies the load balancing algorithm used by the load balancer to route requests
	// to backend servers in the associated backend server group. Value options:
	// + **ROUND_ROBIN**: weighted round-robin.
	// + **LEAST_CONNECTIONS**: weighted least connections.
	// + **SOURCE_IP**: source IP hash.
	// + **QUIC_CID**: connection ID.
	// + **2_TUPLE_HASH**: 2-tuple hash that is only available for IP backend server groups.
	// + **3_TUPLE_HASH**: 3-tuple hash that is only available for IP backend server groups.
	// + **5_TUPLE_HASH**: 5-tuple hash that is only available for IP backend server groups Note.
	LbMethod pulumi.StringPtrInput
	// Specifies the ID of the listener with which the backend server group is
	// associated.
	ListenerId pulumi.StringPtrInput
	// Specifies the ID of the load balancer with which the backend server
	// group is associated.
	LoadbalancerId pulumi.StringPtrInput
	// Specifies the minimum healthy member count. When the number of online
	// members in the health check is less than this number, the status of the pool is determined to be unhealthy. Value options:
	// + **0** (default value): Not take effect.
	// + **1**: Take effect when all member offline.
	MinimumHealthyMemberCount pulumi.IntPtrInput
	// The ID of the health check configured for the backend server group.
	MonitorId pulumi.StringPtrInput
	// Specifies the backend server group name.
	Name pulumi.StringPtrInput
	// Specifies the sticky session.
	// The object structure is documented below.
	Persistence PoolPersistencePtrInput
	// The reason for update protection. Only valid when `protectionStatus` is
	// **consoleProtection**.
	ProtectionReason pulumi.StringPtrInput
	// The protection status for update. Value options:
	// + **nonProtection**: No protection.
	// + **consoleProtection**: Console modification protection.
	ProtectionStatus pulumi.StringPtrInput
	// Specifies the protocol used by the backend server group to receive requests.
	// Value options: **TCP**, **UDP**, **HTTP**, **HTTPS**, **QUIC**, **GRPC** or **TLS**.
	// + If the listener's protocol is **UDP**, the value must be **UDP** or **QUIC**.
	// + If the listener's protocol is **TCP**, the value must be **TCP**.
	// + If the listener's protocol is **IP**, the value must be **IP**.
	// + If the listener's protocol is **HTTP**, the value must be **HTTP**.
	// + If the listener's protocol is **HTTPS**, the value must be **HTTP** or **HTTPS**.
	// + If the listener's protocol is **TERMINATED_HTTPS**, the value must be **HTTP**.
	// + If the listener's protocol is **QUIC**, the value must be **HTTP**„ÄÅ**HTTPS** or **GRPC**.
	// + If the listener's protocol is **TLS**, the value must be **TLS** or **TCP**.
	// + If the value is **QUIC**, sticky session must be enabled with `type` set to **SOURCE_IP**.
	// + If the value is **GRPC**, the value of `http2Enable` of the associated listener must be **true**.
	Protocol pulumi.StringPtrInput
	// Specifies the public border group.
	PublicBorderGroup pulumi.StringPtrInput
	// Specifies the region in which to create the ELB pool resource. If omitted, the
	// provider-level region will be used. Changing this creates a new pool.
	Region pulumi.StringPtrInput
	// Specifies the slow start duration, in seconds.\
	// Value ranges from `30` to `1,200`. Defaults to `30`.
	SlowStartDuration pulumi.IntPtrInput
	// Specifies whether to enable slow start. After you enable slow start, new
	// backend servers added to the backend server group are warmed up, and the number of requests they can receive
	// increases linearly during the configured slow start duration. Defaults to **false**.
	SlowStartEnabled pulumi.BoolPtrInput
	// Specifies the sticky session type. Value options: **SOURCE_IP**,
	// **HTTP_COOKIE**, and **APP_COOKIE**.
	Type pulumi.StringPtrInput
	// The update time of the pool.
	UpdatedAt pulumi.StringPtrInput
	// Specifies the ID of the VPC where the backend server group works.
	VpcId pulumi.StringPtrInput
}

func (PoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*poolState)(nil)).Elem()
}

type poolArgs struct {
	// Specifies whether to enable transparent port transmission on the backend.
	// If enable, the port of the backend server will be same as the port of the listener.
	AnyPortEnable *bool `pulumi:"anyPortEnable"`
	// Specifies whether to enable delayed logout. This parameter can be set to
	// **true** when the `protocol` is set to **TCP**, **UDP** or **QUIC**, and the value of `protocol` of the associated
	// listener must be **TCP** or **UDP**. It will be triggered for the following scenes:
	// + The pool member is removed from the pool.
	// + The health monitor status is abnormal.
	// + The pool member weight is changed to `0`.
	ConnectionDrainEnabled *bool `pulumi:"connectionDrainEnabled"`
	// Specifies the timeout of the delayed logout in seconds.\
	// Value ranges from `10` to `4000`.
	ConnectionDrainTimeout *int `pulumi:"connectionDrainTimeout"`
	// Specifies whether to enable deletion protection.
	DeletionProtectionEnable *bool `pulumi:"deletionProtectionEnable"`
	// Specifies the description of the pool.
	Description    *string `pulumi:"description"`
	EnableForceNew *string `pulumi:"enableForceNew"`
	// Specifies the IP address version supported by the backend server group.
	// The value can be **dualstack**, **v6**, or **v4**. If the protocol of the backend server group is HTTP, the value is **v4**.
	IpVersion *string `pulumi:"ipVersion"`
	// Specifies the load balancing algorithm used by the load balancer to route requests
	// to backend servers in the associated backend server group. Value options:
	// + **ROUND_ROBIN**: weighted round-robin.
	// + **LEAST_CONNECTIONS**: weighted least connections.
	// + **SOURCE_IP**: source IP hash.
	// + **QUIC_CID**: connection ID.
	// + **2_TUPLE_HASH**: 2-tuple hash that is only available for IP backend server groups.
	// + **3_TUPLE_HASH**: 3-tuple hash that is only available for IP backend server groups.
	// + **5_TUPLE_HASH**: 5-tuple hash that is only available for IP backend server groups Note.
	LbMethod string `pulumi:"lbMethod"`
	// Specifies the ID of the listener with which the backend server group is
	// associated.
	ListenerId *string `pulumi:"listenerId"`
	// Specifies the ID of the load balancer with which the backend server
	// group is associated.
	LoadbalancerId *string `pulumi:"loadbalancerId"`
	// Specifies the minimum healthy member count. When the number of online
	// members in the health check is less than this number, the status of the pool is determined to be unhealthy. Value options:
	// + **0** (default value): Not take effect.
	// + **1**: Take effect when all member offline.
	MinimumHealthyMemberCount *int `pulumi:"minimumHealthyMemberCount"`
	// Specifies the backend server group name.
	Name *string `pulumi:"name"`
	// Specifies the sticky session.
	// The object structure is documented below.
	Persistence *PoolPersistence `pulumi:"persistence"`
	// The reason for update protection. Only valid when `protectionStatus` is
	// **consoleProtection**.
	ProtectionReason *string `pulumi:"protectionReason"`
	// The protection status for update. Value options:
	// + **nonProtection**: No protection.
	// + **consoleProtection**: Console modification protection.
	ProtectionStatus *string `pulumi:"protectionStatus"`
	// Specifies the protocol used by the backend server group to receive requests.
	// Value options: **TCP**, **UDP**, **HTTP**, **HTTPS**, **QUIC**, **GRPC** or **TLS**.
	// + If the listener's protocol is **UDP**, the value must be **UDP** or **QUIC**.
	// + If the listener's protocol is **TCP**, the value must be **TCP**.
	// + If the listener's protocol is **IP**, the value must be **IP**.
	// + If the listener's protocol is **HTTP**, the value must be **HTTP**.
	// + If the listener's protocol is **HTTPS**, the value must be **HTTP** or **HTTPS**.
	// + If the listener's protocol is **TERMINATED_HTTPS**, the value must be **HTTP**.
	// + If the listener's protocol is **QUIC**, the value must be **HTTP**„ÄÅ**HTTPS** or **GRPC**.
	// + If the listener's protocol is **TLS**, the value must be **TLS** or **TCP**.
	// + If the value is **QUIC**, sticky session must be enabled with `type` set to **SOURCE_IP**.
	// + If the value is **GRPC**, the value of `http2Enable` of the associated listener must be **true**.
	Protocol string `pulumi:"protocol"`
	// Specifies the public border group.
	PublicBorderGroup *string `pulumi:"publicBorderGroup"`
	// Specifies the region in which to create the ELB pool resource. If omitted, the
	// provider-level region will be used. Changing this creates a new pool.
	Region *string `pulumi:"region"`
	// Specifies the slow start duration, in seconds.\
	// Value ranges from `30` to `1,200`. Defaults to `30`.
	SlowStartDuration *int `pulumi:"slowStartDuration"`
	// Specifies whether to enable slow start. After you enable slow start, new
	// backend servers added to the backend server group are warmed up, and the number of requests they can receive
	// increases linearly during the configured slow start duration. Defaults to **false**.
	SlowStartEnabled *bool `pulumi:"slowStartEnabled"`
	// Specifies the sticky session type. Value options: **SOURCE_IP**,
	// **HTTP_COOKIE**, and **APP_COOKIE**.
	Type *string `pulumi:"type"`
	// Specifies the ID of the VPC where the backend server group works.
	VpcId *string `pulumi:"vpcId"`
}

// The set of arguments for constructing a Pool resource.
type PoolArgs struct {
	// Specifies whether to enable transparent port transmission on the backend.
	// If enable, the port of the backend server will be same as the port of the listener.
	AnyPortEnable pulumi.BoolPtrInput
	// Specifies whether to enable delayed logout. This parameter can be set to
	// **true** when the `protocol` is set to **TCP**, **UDP** or **QUIC**, and the value of `protocol` of the associated
	// listener must be **TCP** or **UDP**. It will be triggered for the following scenes:
	// + The pool member is removed from the pool.
	// + The health monitor status is abnormal.
	// + The pool member weight is changed to `0`.
	ConnectionDrainEnabled pulumi.BoolPtrInput
	// Specifies the timeout of the delayed logout in seconds.\
	// Value ranges from `10` to `4000`.
	ConnectionDrainTimeout pulumi.IntPtrInput
	// Specifies whether to enable deletion protection.
	DeletionProtectionEnable pulumi.BoolPtrInput
	// Specifies the description of the pool.
	Description    pulumi.StringPtrInput
	EnableForceNew pulumi.StringPtrInput
	// Specifies the IP address version supported by the backend server group.
	// The value can be **dualstack**, **v6**, or **v4**. If the protocol of the backend server group is HTTP, the value is **v4**.
	IpVersion pulumi.StringPtrInput
	// Specifies the load balancing algorithm used by the load balancer to route requests
	// to backend servers in the associated backend server group. Value options:
	// + **ROUND_ROBIN**: weighted round-robin.
	// + **LEAST_CONNECTIONS**: weighted least connections.
	// + **SOURCE_IP**: source IP hash.
	// + **QUIC_CID**: connection ID.
	// + **2_TUPLE_HASH**: 2-tuple hash that is only available for IP backend server groups.
	// + **3_TUPLE_HASH**: 3-tuple hash that is only available for IP backend server groups.
	// + **5_TUPLE_HASH**: 5-tuple hash that is only available for IP backend server groups Note.
	LbMethod pulumi.StringInput
	// Specifies the ID of the listener with which the backend server group is
	// associated.
	ListenerId pulumi.StringPtrInput
	// Specifies the ID of the load balancer with which the backend server
	// group is associated.
	LoadbalancerId pulumi.StringPtrInput
	// Specifies the minimum healthy member count. When the number of online
	// members in the health check is less than this number, the status of the pool is determined to be unhealthy. Value options:
	// + **0** (default value): Not take effect.
	// + **1**: Take effect when all member offline.
	MinimumHealthyMemberCount pulumi.IntPtrInput
	// Specifies the backend server group name.
	Name pulumi.StringPtrInput
	// Specifies the sticky session.
	// The object structure is documented below.
	Persistence PoolPersistencePtrInput
	// The reason for update protection. Only valid when `protectionStatus` is
	// **consoleProtection**.
	ProtectionReason pulumi.StringPtrInput
	// The protection status for update. Value options:
	// + **nonProtection**: No protection.
	// + **consoleProtection**: Console modification protection.
	ProtectionStatus pulumi.StringPtrInput
	// Specifies the protocol used by the backend server group to receive requests.
	// Value options: **TCP**, **UDP**, **HTTP**, **HTTPS**, **QUIC**, **GRPC** or **TLS**.
	// + If the listener's protocol is **UDP**, the value must be **UDP** or **QUIC**.
	// + If the listener's protocol is **TCP**, the value must be **TCP**.
	// + If the listener's protocol is **IP**, the value must be **IP**.
	// + If the listener's protocol is **HTTP**, the value must be **HTTP**.
	// + If the listener's protocol is **HTTPS**, the value must be **HTTP** or **HTTPS**.
	// + If the listener's protocol is **TERMINATED_HTTPS**, the value must be **HTTP**.
	// + If the listener's protocol is **QUIC**, the value must be **HTTP**„ÄÅ**HTTPS** or **GRPC**.
	// + If the listener's protocol is **TLS**, the value must be **TLS** or **TCP**.
	// + If the value is **QUIC**, sticky session must be enabled with `type` set to **SOURCE_IP**.
	// + If the value is **GRPC**, the value of `http2Enable` of the associated listener must be **true**.
	Protocol pulumi.StringInput
	// Specifies the public border group.
	PublicBorderGroup pulumi.StringPtrInput
	// Specifies the region in which to create the ELB pool resource. If omitted, the
	// provider-level region will be used. Changing this creates a new pool.
	Region pulumi.StringPtrInput
	// Specifies the slow start duration, in seconds.\
	// Value ranges from `30` to `1,200`. Defaults to `30`.
	SlowStartDuration pulumi.IntPtrInput
	// Specifies whether to enable slow start. After you enable slow start, new
	// backend servers added to the backend server group are warmed up, and the number of requests they can receive
	// increases linearly during the configured slow start duration. Defaults to **false**.
	SlowStartEnabled pulumi.BoolPtrInput
	// Specifies the sticky session type. Value options: **SOURCE_IP**,
	// **HTTP_COOKIE**, and **APP_COOKIE**.
	Type pulumi.StringPtrInput
	// Specifies the ID of the VPC where the backend server group works.
	VpcId pulumi.StringPtrInput
}

func (PoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*poolArgs)(nil)).Elem()
}

type PoolInput interface {
	pulumi.Input

	ToPoolOutput() PoolOutput
	ToPoolOutputWithContext(ctx context.Context) PoolOutput
}

func (*Pool) ElementType() reflect.Type {
	return reflect.TypeOf((**Pool)(nil)).Elem()
}

func (i *Pool) ToPoolOutput() PoolOutput {
	return i.ToPoolOutputWithContext(context.Background())
}

func (i *Pool) ToPoolOutputWithContext(ctx context.Context) PoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolOutput)
}

// PoolArrayInput is an input type that accepts PoolArray and PoolArrayOutput values.
// You can construct a concrete instance of `PoolArrayInput` via:
//
//	PoolArray{ PoolArgs{...} }
type PoolArrayInput interface {
	pulumi.Input

	ToPoolArrayOutput() PoolArrayOutput
	ToPoolArrayOutputWithContext(context.Context) PoolArrayOutput
}

type PoolArray []PoolInput

func (PoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Pool)(nil)).Elem()
}

func (i PoolArray) ToPoolArrayOutput() PoolArrayOutput {
	return i.ToPoolArrayOutputWithContext(context.Background())
}

func (i PoolArray) ToPoolArrayOutputWithContext(ctx context.Context) PoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolArrayOutput)
}

// PoolMapInput is an input type that accepts PoolMap and PoolMapOutput values.
// You can construct a concrete instance of `PoolMapInput` via:
//
//	PoolMap{ "key": PoolArgs{...} }
type PoolMapInput interface {
	pulumi.Input

	ToPoolMapOutput() PoolMapOutput
	ToPoolMapOutputWithContext(context.Context) PoolMapOutput
}

type PoolMap map[string]PoolInput

func (PoolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Pool)(nil)).Elem()
}

func (i PoolMap) ToPoolMapOutput() PoolMapOutput {
	return i.ToPoolMapOutputWithContext(context.Background())
}

func (i PoolMap) ToPoolMapOutputWithContext(ctx context.Context) PoolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolMapOutput)
}

type PoolOutput struct{ *pulumi.OutputState }

func (PoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Pool)(nil)).Elem()
}

func (o PoolOutput) ToPoolOutput() PoolOutput {
	return o
}

func (o PoolOutput) ToPoolOutputWithContext(ctx context.Context) PoolOutput {
	return o
}

// Specifies whether to enable transparent port transmission on the backend.
// If enable, the port of the backend server will be same as the port of the listener.
func (o PoolOutput) AnyPortEnable() pulumi.BoolOutput {
	return o.ApplyT(func(v *Pool) pulumi.BoolOutput { return v.AnyPortEnable }).(pulumi.BoolOutput)
}

// Specifies whether to enable delayed logout. This parameter can be set to
// **true** when the `protocol` is set to **TCP**, **UDP** or **QUIC**, and the value of `protocol` of the associated
// listener must be **TCP** or **UDP**. It will be triggered for the following scenes:
// + The pool member is removed from the pool.
// + The health monitor status is abnormal.
// + The pool member weight is changed to `0`.
func (o PoolOutput) ConnectionDrainEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Pool) pulumi.BoolOutput { return v.ConnectionDrainEnabled }).(pulumi.BoolOutput)
}

// Specifies the timeout of the delayed logout in seconds.\
// Value ranges from `10` to `4000`.
func (o PoolOutput) ConnectionDrainTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *Pool) pulumi.IntOutput { return v.ConnectionDrainTimeout }).(pulumi.IntOutput)
}

// The creation time of the pool.
func (o PoolOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Pool) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Specifies whether to enable deletion protection.
func (o PoolOutput) DeletionProtectionEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Pool) pulumi.BoolPtrOutput { return v.DeletionProtectionEnable }).(pulumi.BoolPtrOutput)
}

// Specifies the description of the pool.
func (o PoolOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Pool) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o PoolOutput) EnableForceNew() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Pool) pulumi.StringPtrOutput { return v.EnableForceNew }).(pulumi.StringPtrOutput)
}

// The ID of the enterprise project.
func (o PoolOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Pool) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// Specifies the IP address version supported by the backend server group.
// The value can be **dualstack**, **v6**, or **v4**. If the protocol of the backend server group is HTTP, the value is **v4**.
func (o PoolOutput) IpVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Pool) pulumi.StringOutput { return v.IpVersion }).(pulumi.StringOutput)
}

// Specifies the load balancing algorithm used by the load balancer to route requests
// to backend servers in the associated backend server group. Value options:
// + **ROUND_ROBIN**: weighted round-robin.
// + **LEAST_CONNECTIONS**: weighted least connections.
// + **SOURCE_IP**: source IP hash.
// + **QUIC_CID**: connection ID.
// + **2_TUPLE_HASH**: 2-tuple hash that is only available for IP backend server groups.
// + **3_TUPLE_HASH**: 3-tuple hash that is only available for IP backend server groups.
// + **5_TUPLE_HASH**: 5-tuple hash that is only available for IP backend server groups Note.
func (o PoolOutput) LbMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *Pool) pulumi.StringOutput { return v.LbMethod }).(pulumi.StringOutput)
}

// Specifies the ID of the listener with which the backend server group is
// associated.
func (o PoolOutput) ListenerId() pulumi.StringOutput {
	return o.ApplyT(func(v *Pool) pulumi.StringOutput { return v.ListenerId }).(pulumi.StringOutput)
}

// Specifies the ID of the load balancer with which the backend server
// group is associated.
func (o PoolOutput) LoadbalancerId() pulumi.StringOutput {
	return o.ApplyT(func(v *Pool) pulumi.StringOutput { return v.LoadbalancerId }).(pulumi.StringOutput)
}

// Specifies the minimum healthy member count. When the number of online
// members in the health check is less than this number, the status of the pool is determined to be unhealthy. Value options:
// + **0** (default value): Not take effect.
// + **1**: Take effect when all member offline.
func (o PoolOutput) MinimumHealthyMemberCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Pool) pulumi.IntOutput { return v.MinimumHealthyMemberCount }).(pulumi.IntOutput)
}

// The ID of the health check configured for the backend server group.
func (o PoolOutput) MonitorId() pulumi.StringOutput {
	return o.ApplyT(func(v *Pool) pulumi.StringOutput { return v.MonitorId }).(pulumi.StringOutput)
}

// Specifies the backend server group name.
func (o PoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Pool) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the sticky session.
// The object structure is documented below.
func (o PoolOutput) Persistence() PoolPersistencePtrOutput {
	return o.ApplyT(func(v *Pool) PoolPersistencePtrOutput { return v.Persistence }).(PoolPersistencePtrOutput)
}

// The reason for update protection. Only valid when `protectionStatus` is
// **consoleProtection**.
func (o PoolOutput) ProtectionReason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Pool) pulumi.StringPtrOutput { return v.ProtectionReason }).(pulumi.StringPtrOutput)
}

// The protection status for update. Value options:
// + **nonProtection**: No protection.
// + **consoleProtection**: Console modification protection.
func (o PoolOutput) ProtectionStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Pool) pulumi.StringOutput { return v.ProtectionStatus }).(pulumi.StringOutput)
}

// Specifies the protocol used by the backend server group to receive requests.
// Value options: **TCP**, **UDP**, **HTTP**, **HTTPS**, **QUIC**, **GRPC** or **TLS**.
// + If the listener's protocol is **UDP**, the value must be **UDP** or **QUIC**.
// + If the listener's protocol is **TCP**, the value must be **TCP**.
// + If the listener's protocol is **IP**, the value must be **IP**.
// + If the listener's protocol is **HTTP**, the value must be **HTTP**.
// + If the listener's protocol is **HTTPS**, the value must be **HTTP** or **HTTPS**.
// + If the listener's protocol is **TERMINATED_HTTPS**, the value must be **HTTP**.
// + If the listener's protocol is **QUIC**, the value must be **HTTP**„ÄÅ**HTTPS** or **GRPC**.
// + If the listener's protocol is **TLS**, the value must be **TLS** or **TCP**.
// + If the value is **QUIC**, sticky session must be enabled with `type` set to **SOURCE_IP**.
// + If the value is **GRPC**, the value of `http2Enable` of the associated listener must be **true**.
func (o PoolOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *Pool) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// Specifies the public border group.
func (o PoolOutput) PublicBorderGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *Pool) pulumi.StringOutput { return v.PublicBorderGroup }).(pulumi.StringOutput)
}

// Specifies the region in which to create the ELB pool resource. If omitted, the
// provider-level region will be used. Changing this creates a new pool.
func (o PoolOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Pool) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the slow start duration, in seconds.\
// Value ranges from `30` to `1,200`. Defaults to `30`.
func (o PoolOutput) SlowStartDuration() pulumi.IntOutput {
	return o.ApplyT(func(v *Pool) pulumi.IntOutput { return v.SlowStartDuration }).(pulumi.IntOutput)
}

// Specifies whether to enable slow start. After you enable slow start, new
// backend servers added to the backend server group are warmed up, and the number of requests they can receive
// increases linearly during the configured slow start duration. Defaults to **false**.
func (o PoolOutput) SlowStartEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Pool) pulumi.BoolOutput { return v.SlowStartEnabled }).(pulumi.BoolOutput)
}

// Specifies the sticky session type. Value options: **SOURCE_IP**,
// **HTTP_COOKIE**, and **APP_COOKIE**.
func (o PoolOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Pool) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The update time of the pool.
func (o PoolOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Pool) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// Specifies the ID of the VPC where the backend server group works.
func (o PoolOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Pool) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type PoolArrayOutput struct{ *pulumi.OutputState }

func (PoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Pool)(nil)).Elem()
}

func (o PoolArrayOutput) ToPoolArrayOutput() PoolArrayOutput {
	return o
}

func (o PoolArrayOutput) ToPoolArrayOutputWithContext(ctx context.Context) PoolArrayOutput {
	return o
}

func (o PoolArrayOutput) Index(i pulumi.IntInput) PoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Pool {
		return vs[0].([]*Pool)[vs[1].(int)]
	}).(PoolOutput)
}

type PoolMapOutput struct{ *pulumi.OutputState }

func (PoolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Pool)(nil)).Elem()
}

func (o PoolMapOutput) ToPoolMapOutput() PoolMapOutput {
	return o
}

func (o PoolMapOutput) ToPoolMapOutputWithContext(ctx context.Context) PoolMapOutput {
	return o
}

func (o PoolMapOutput) MapIndex(k pulumi.StringInput) PoolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Pool {
		return vs[0].(map[string]*Pool)[vs[1].(string)]
	}).(PoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PoolInput)(nil)).Elem(), &Pool{})
	pulumi.RegisterInputType(reflect.TypeOf((*PoolArrayInput)(nil)).Elem(), PoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PoolMapInput)(nil)).Elem(), PoolMap{})
	pulumi.RegisterOutputType(PoolOutput{})
	pulumi.RegisterOutputType(PoolArrayOutput{})
	pulumi.RegisterOutputType(PoolMapOutput{})
}
