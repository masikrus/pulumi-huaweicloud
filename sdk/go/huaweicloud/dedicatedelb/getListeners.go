// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dedicatedelb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get the list of ELB listeners.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/DedicatedElb"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/DedicatedElb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			listenerName := cfg.RequireObject("listenerName")
//			_, err := DedicatedElb.GetListeners(ctx, &dedicatedelb.GetListenersArgs{
//				Name: pulumi.StringRef(listenerName),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetListeners(ctx *pulumi.Context, args *GetListenersArgs, opts ...pulumi.InvokeOption) (*GetListenersResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetListenersResult
	err := ctx.Invoke("huaweicloud:DedicatedElb/getListeners:getListeners", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getListeners.
type GetListenersArgs struct {
	// Specifies whether the advanced forwarding is enabled. Value options:
	// **true**, **false**.
	AdvancedForwardingEnabled *string `pulumi:"advancedForwardingEnabled"`
	// Specifies the ID of the CA certificate used by the listener.
	CaCertificate *string `pulumi:"caCertificate"`
	// Specifies the ID of the default pool with which the listener is associated.
	DefaultPoolId *string `pulumi:"defaultPoolId"`
	// Specifies the description of the ELB listener.
	Description *string `pulumi:"description"`
	// Specifies whether the health check retries for backend servers is enabled.
	// Value options: **true**, **false**.
	EnableMemberRetry *string `pulumi:"enableMemberRetry"`
	// Specifies the enterprise project ID.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies whether the HTTP/2 is used. Value options: **true**, **false**.
	Http2Enable *string `pulumi:"http2Enable"`
	// Specifies the idle timeout for the listener.
	IdleTimeout *int `pulumi:"idleTimeout"`
	// Specifies the ID of the ELB listener.
	ListenerId *string `pulumi:"listenerId"`
	// Specifies the ID of the load balancer that the listener is added to.
	LoadbalancerId *string `pulumi:"loadbalancerId"`
	// Specifies the private IP address bound to the backend server.
	MemberAddress *string `pulumi:"memberAddress"`
	// Specifies the ID of the cloud server that serves as a backend server.
	MemberDeviceId *string `pulumi:"memberDeviceId"`
	// Specifies the backend server ID.
	MemberInstanceId *string `pulumi:"memberInstanceId"`
	// Specifies the name of the ELB listener.
	Name *string `pulumi:"name"`
	// Specifies the protection status.
	ProtectionStatus *string `pulumi:"protectionStatus"`
	// Specifies the protocol of the ELB listener. Value options:
	// **TCP**, **UDP**, **HTTP**, **HTTPS** or **QUIC**.
	Protocol *string `pulumi:"protocol"`
	// Specifies the port used by the listener.
	ProtocolPort *int `pulumi:"protocolPort"`
	// Specifies whether the proxy protocol option to pass the source IP addresses
	// of the clients to backend servers is enabled. Value options: **true**, **false**.
	ProxyProtocolEnable *string `pulumi:"proxyProtocolEnable"`
	// Specifies the region in which to query the data source.
	// If omitted, the provider-level region will be used.
	Region *string `pulumi:"region"`
	// Specifies the request timeout for the listener. Value range: **1** to **300**.
	RequestTimeout *int `pulumi:"requestTimeout"`
	// Specifies the response timeout for the listener.
	ResponseTimeout *int `pulumi:"responseTimeout"`
	// Specifies the ID of the server certificate used by the listener.
	ServerCertificate *string `pulumi:"serverCertificate"`
	// Specifies whether the 0-RTT capability is enabled. Value options: **true**,
	// **false**.
	SslEarlyDataEnable *string `pulumi:"sslEarlyDataEnable"`
	// Specifies the TLS cipher policy for the listener.
	TlsCiphersPolicy *string `pulumi:"tlsCiphersPolicy"`
}

// A collection of values returned by getListeners.
type GetListenersResult struct {
	// Whether to enable advanced forwarding.
	AdvancedForwardingEnabled *string `pulumi:"advancedForwardingEnabled"`
	// The ID of the CA certificate used by the listener.
	CaCertificate *string `pulumi:"caCertificate"`
	// The ID of the default backend server group.
	DefaultPoolId *string `pulumi:"defaultPoolId"`
	// The description of the listener.
	Description *string `pulumi:"description"`
	// Whether the health check retries for backend servers is enabled.
	EnableMemberRetry *string `pulumi:"enableMemberRetry"`
	// The ID of the enterprise project.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Whether to use HTTP/2 if you want the clients to use HTTP/2 to communicate with the listener.
	Http2Enable *string `pulumi:"http2Enable"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The idle timeout duration, in seconds.
	IdleTimeout *int    `pulumi:"idleTimeout"`
	ListenerId  *string `pulumi:"listenerId"`
	// Lists the listeners.
	// The listeners structure is documented below.
	Listeners []GetListenersListener `pulumi:"listeners"`
	// The ID of the load balancer that the listener is added to.
	LoadbalancerId   *string `pulumi:"loadbalancerId"`
	MemberAddress    *string `pulumi:"memberAddress"`
	MemberDeviceId   *string `pulumi:"memberDeviceId"`
	MemberInstanceId *string `pulumi:"memberInstanceId"`
	// The listener name.
	Name *string `pulumi:"name"`
	// The protection status for update.
	ProtectionStatus *string `pulumi:"protectionStatus"`
	// The protocol used by the listener.
	Protocol *string `pulumi:"protocol"`
	// The port used by the listener.
	ProtocolPort *int `pulumi:"protocolPort"`
	// Whether to enable the proxy protocol option to pass the source IP addresses of the clients
	// to backend servers.
	ProxyProtocolEnable *string `pulumi:"proxyProtocolEnable"`
	Region              string  `pulumi:"region"`
	// The timeout duration for waiting for a response from a client, in seconds.
	RequestTimeout *int `pulumi:"requestTimeout"`
	// The timeout duration for waiting for a response from a backend server, in seconds.
	ResponseTimeout *int `pulumi:"responseTimeout"`
	// The ID of the server certificate used by the listener.
	ServerCertificate *string `pulumi:"serverCertificate"`
	// Whether the 0-RTT capability is enabled.
	SslEarlyDataEnable *string `pulumi:"sslEarlyDataEnable"`
	// The security policy used by the listener.
	TlsCiphersPolicy *string `pulumi:"tlsCiphersPolicy"`
}

func GetListenersOutput(ctx *pulumi.Context, args GetListenersOutputArgs, opts ...pulumi.InvokeOption) GetListenersResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetListenersResult, error) {
			args := v.(GetListenersArgs)
			r, err := GetListeners(ctx, &args, opts...)
			var s GetListenersResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetListenersResultOutput)
}

// A collection of arguments for invoking getListeners.
type GetListenersOutputArgs struct {
	// Specifies whether the advanced forwarding is enabled. Value options:
	// **true**, **false**.
	AdvancedForwardingEnabled pulumi.StringPtrInput `pulumi:"advancedForwardingEnabled"`
	// Specifies the ID of the CA certificate used by the listener.
	CaCertificate pulumi.StringPtrInput `pulumi:"caCertificate"`
	// Specifies the ID of the default pool with which the listener is associated.
	DefaultPoolId pulumi.StringPtrInput `pulumi:"defaultPoolId"`
	// Specifies the description of the ELB listener.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specifies whether the health check retries for backend servers is enabled.
	// Value options: **true**, **false**.
	EnableMemberRetry pulumi.StringPtrInput `pulumi:"enableMemberRetry"`
	// Specifies the enterprise project ID.
	EnterpriseProjectId pulumi.StringPtrInput `pulumi:"enterpriseProjectId"`
	// Specifies whether the HTTP/2 is used. Value options: **true**, **false**.
	Http2Enable pulumi.StringPtrInput `pulumi:"http2Enable"`
	// Specifies the idle timeout for the listener.
	IdleTimeout pulumi.IntPtrInput `pulumi:"idleTimeout"`
	// Specifies the ID of the ELB listener.
	ListenerId pulumi.StringPtrInput `pulumi:"listenerId"`
	// Specifies the ID of the load balancer that the listener is added to.
	LoadbalancerId pulumi.StringPtrInput `pulumi:"loadbalancerId"`
	// Specifies the private IP address bound to the backend server.
	MemberAddress pulumi.StringPtrInput `pulumi:"memberAddress"`
	// Specifies the ID of the cloud server that serves as a backend server.
	MemberDeviceId pulumi.StringPtrInput `pulumi:"memberDeviceId"`
	// Specifies the backend server ID.
	MemberInstanceId pulumi.StringPtrInput `pulumi:"memberInstanceId"`
	// Specifies the name of the ELB listener.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies the protection status.
	ProtectionStatus pulumi.StringPtrInput `pulumi:"protectionStatus"`
	// Specifies the protocol of the ELB listener. Value options:
	// **TCP**, **UDP**, **HTTP**, **HTTPS** or **QUIC**.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// Specifies the port used by the listener.
	ProtocolPort pulumi.IntPtrInput `pulumi:"protocolPort"`
	// Specifies whether the proxy protocol option to pass the source IP addresses
	// of the clients to backend servers is enabled. Value options: **true**, **false**.
	ProxyProtocolEnable pulumi.StringPtrInput `pulumi:"proxyProtocolEnable"`
	// Specifies the region in which to query the data source.
	// If omitted, the provider-level region will be used.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Specifies the request timeout for the listener. Value range: **1** to **300**.
	RequestTimeout pulumi.IntPtrInput `pulumi:"requestTimeout"`
	// Specifies the response timeout for the listener.
	ResponseTimeout pulumi.IntPtrInput `pulumi:"responseTimeout"`
	// Specifies the ID of the server certificate used by the listener.
	ServerCertificate pulumi.StringPtrInput `pulumi:"serverCertificate"`
	// Specifies whether the 0-RTT capability is enabled. Value options: **true**,
	// **false**.
	SslEarlyDataEnable pulumi.StringPtrInput `pulumi:"sslEarlyDataEnable"`
	// Specifies the TLS cipher policy for the listener.
	TlsCiphersPolicy pulumi.StringPtrInput `pulumi:"tlsCiphersPolicy"`
}

func (GetListenersOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListenersArgs)(nil)).Elem()
}

// A collection of values returned by getListeners.
type GetListenersResultOutput struct{ *pulumi.OutputState }

func (GetListenersResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListenersResult)(nil)).Elem()
}

func (o GetListenersResultOutput) ToGetListenersResultOutput() GetListenersResultOutput {
	return o
}

func (o GetListenersResultOutput) ToGetListenersResultOutputWithContext(ctx context.Context) GetListenersResultOutput {
	return o
}

// Whether to enable advanced forwarding.
func (o GetListenersResultOutput) AdvancedForwardingEnabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetListenersResult) *string { return v.AdvancedForwardingEnabled }).(pulumi.StringPtrOutput)
}

// The ID of the CA certificate used by the listener.
func (o GetListenersResultOutput) CaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetListenersResult) *string { return v.CaCertificate }).(pulumi.StringPtrOutput)
}

// The ID of the default backend server group.
func (o GetListenersResultOutput) DefaultPoolId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetListenersResult) *string { return v.DefaultPoolId }).(pulumi.StringPtrOutput)
}

// The description of the listener.
func (o GetListenersResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetListenersResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether the health check retries for backend servers is enabled.
func (o GetListenersResultOutput) EnableMemberRetry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetListenersResult) *string { return v.EnableMemberRetry }).(pulumi.StringPtrOutput)
}

// The ID of the enterprise project.
func (o GetListenersResultOutput) EnterpriseProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetListenersResult) *string { return v.EnterpriseProjectId }).(pulumi.StringPtrOutput)
}

// Whether to use HTTP/2 if you want the clients to use HTTP/2 to communicate with the listener.
func (o GetListenersResultOutput) Http2Enable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetListenersResult) *string { return v.Http2Enable }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetListenersResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetListenersResult) string { return v.Id }).(pulumi.StringOutput)
}

// The idle timeout duration, in seconds.
func (o GetListenersResultOutput) IdleTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetListenersResult) *int { return v.IdleTimeout }).(pulumi.IntPtrOutput)
}

func (o GetListenersResultOutput) ListenerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetListenersResult) *string { return v.ListenerId }).(pulumi.StringPtrOutput)
}

// Lists the listeners.
// The listeners structure is documented below.
func (o GetListenersResultOutput) Listeners() GetListenersListenerArrayOutput {
	return o.ApplyT(func(v GetListenersResult) []GetListenersListener { return v.Listeners }).(GetListenersListenerArrayOutput)
}

// The ID of the load balancer that the listener is added to.
func (o GetListenersResultOutput) LoadbalancerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetListenersResult) *string { return v.LoadbalancerId }).(pulumi.StringPtrOutput)
}

func (o GetListenersResultOutput) MemberAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetListenersResult) *string { return v.MemberAddress }).(pulumi.StringPtrOutput)
}

func (o GetListenersResultOutput) MemberDeviceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetListenersResult) *string { return v.MemberDeviceId }).(pulumi.StringPtrOutput)
}

func (o GetListenersResultOutput) MemberInstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetListenersResult) *string { return v.MemberInstanceId }).(pulumi.StringPtrOutput)
}

// The listener name.
func (o GetListenersResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetListenersResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The protection status for update.
func (o GetListenersResultOutput) ProtectionStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetListenersResult) *string { return v.ProtectionStatus }).(pulumi.StringPtrOutput)
}

// The protocol used by the listener.
func (o GetListenersResultOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetListenersResult) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// The port used by the listener.
func (o GetListenersResultOutput) ProtocolPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetListenersResult) *int { return v.ProtocolPort }).(pulumi.IntPtrOutput)
}

// Whether to enable the proxy protocol option to pass the source IP addresses of the clients
// to backend servers.
func (o GetListenersResultOutput) ProxyProtocolEnable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetListenersResult) *string { return v.ProxyProtocolEnable }).(pulumi.StringPtrOutput)
}

func (o GetListenersResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetListenersResult) string { return v.Region }).(pulumi.StringOutput)
}

// The timeout duration for waiting for a response from a client, in seconds.
func (o GetListenersResultOutput) RequestTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetListenersResult) *int { return v.RequestTimeout }).(pulumi.IntPtrOutput)
}

// The timeout duration for waiting for a response from a backend server, in seconds.
func (o GetListenersResultOutput) ResponseTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetListenersResult) *int { return v.ResponseTimeout }).(pulumi.IntPtrOutput)
}

// The ID of the server certificate used by the listener.
func (o GetListenersResultOutput) ServerCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetListenersResult) *string { return v.ServerCertificate }).(pulumi.StringPtrOutput)
}

// Whether the 0-RTT capability is enabled.
func (o GetListenersResultOutput) SslEarlyDataEnable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetListenersResult) *string { return v.SslEarlyDataEnable }).(pulumi.StringPtrOutput)
}

// The security policy used by the listener.
func (o GetListenersResultOutput) TlsCiphersPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetListenersResult) *string { return v.TlsCiphersPolicy }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetListenersResultOutput{})
}
