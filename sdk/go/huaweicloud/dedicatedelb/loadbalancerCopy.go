// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dedicatedelb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Dedicated load balancer copy resource within HuaweiCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/DedicatedElb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			loadbalancerId := cfg.RequireObject("loadbalancerId")
//			ipv4SubnetId := cfg.RequireObject("ipv4SubnetId")
//			ipv6NetworkId := cfg.RequireObject("ipv6NetworkId")
//			backendSubnetId := cfg.RequireObject("backendSubnetId")
//			l4FlavorId := cfg.RequireObject("l4FlavorId")
//			l7FlavorId := cfg.RequireObject("l7FlavorId")
//			ipv6BandwidthId := cfg.RequireObject("ipv6BandwidthId")
//			_, err := DedicatedElb.NewLoadbalancerCopy(ctx, "test", &DedicatedElb.LoadbalancerCopyArgs{
//				LoadbalancerId: pulumi.Any(loadbalancerId),
//				AvailabilityZones: pulumi.StringArray{
//					pulumi.String("cn-north-4a"),
//					pulumi.String("cn-north-4b"),
//				},
//				Ipv4SubnetId:  pulumi.Any(ipv4SubnetId),
//				Ipv4Address:   pulumi.String("192.168.0.216"),
//				Ipv6NetworkId: pulumi.Any(ipv6NetworkId),
//				Ipv6Address:   pulumi.String("2407:c080:1200:2a02:34e6:8059:ce7f:1add"),
//				BackendSubnets: pulumi.StringArray{
//					pulumi.Any(backendSubnetId),
//				},
//				L4FlavorId:               pulumi.Any(l4FlavorId),
//				L7FlavorId:               pulumi.Any(l7FlavorId),
//				ReusePool:                pulumi.String("true"),
//				Description:              pulumi.String("test elb description"),
//				Ipv6BandwidthId:          pulumi.Any(ipv6BandwidthId),
//				CrossVpcBackend:          pulumi.String("true"),
//				ProtectionStatus:         pulumi.String("consoleProtection"),
//				ProtectionReason:         pulumi.String("test protection reason"),
//				DeletionProtectionEnable: pulumi.String("true"),
//				WafFailureAction:         pulumi.String("discard"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The ELB load balancer copy can be imported using the `id`, e.g. bash
//
// ```sh
//
//	$ pulumi import huaweicloud:DedicatedElb/loadbalancerCopy:LoadbalancerCopy test <id>
//
// ```
//
//	Note that the imported state may not be identical to your resource definition, due to some attributes missing from the API response, security or some other reason. The missing attributes include`loadbalancer_id`, `ipv6_bandwidth_id`, `deletion_protection_enable`, `reuse_pool`,
//
// `period_unit`, `period`, `auto_renew` and `force_delete`. It is generally recommended running `terraform plan` after importing a load balancer copy. You can then decide if changes should be applied to the load balancer copy, or the resource definition should be updated to align with the load balancer. Also you can ignore changes as below. hcl resource "huaweicloud_elb_loadbalancer_copy" "test" {
//
//	...
//
//	lifecycle {
//
//	ignore_changes = [
//
//	loadbalancer_id, ipv6_bandwidth_id, deletion_protection_enable, reuse_pool, period_unit, period, auto_renew,
//
//	force_delete,
//
//	]
//
//	} }
type LoadbalancerCopy struct {
	pulumi.CustomResourceState

	// Specifies whether auto-renew is enabled. Valid values are **true** and **false**.
	AutoRenew pulumi.StringPtrOutput `pulumi:"autoRenew"`
	// Specifies the list of AZ names.
	AvailabilityZones pulumi.StringArrayOutput `pulumi:"availabilityZones"`
	// Specifies the ID of the backend subnet of the load balancer. If it is not specified,
	// the backend subnet of the original load balancer is used. The subnets where the original and new load balancers work must
	// be in the same VPC.
	BackendSubnets pulumi.StringArrayOutput `pulumi:"backendSubnets"`
	// Indicates the billing mode. The value can be:
	// + **flavor**: Billed by the specifications you will select.
	// + **lcu**: Billed by LCU usage.
	ChargeMode pulumi.StringOutput `pulumi:"chargeMode"`
	// Specifies the charging mode of the ELB load balancer.
	// Valid values are **prePaid** and **postPaid**, defaults to **postPaid**.
	ChargingMode pulumi.StringOutput `pulumi:"chargingMode"`
	// Indicates the time when the load balancer was created, in RFC3339 format.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Specifies whether to add backend servers that are not in the load balancer's
	// VPC. Can only be **true** when updating. Value options: **true**, **false**.
	CrossVpcBackend pulumi.StringOutput `pulumi:"crossVpcBackend"`
	// Specifies whether to enable deletion protection for the load balancer.
	// Value options:
	// + **true**: Enable deletion protection.
	// + **false**: Disable deletion protection.
	DeletionProtectionEnable pulumi.StringOutput `pulumi:"deletionProtectionEnable"`
	// Specifies the description of the load balancer.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Indicates the type of the subnet on the downstream plane. The value can be:
	// + **ipv4**: IPv4 subnet
	// + **dualstack**: subnet that supports IPv4/IPv6 dual stack
	ElbVirsubnetType pulumi.StringOutput    `pulumi:"elbVirsubnetType"`
	EnableForceNew   pulumi.StringPtrOutput `pulumi:"enableForceNew"`
	// The enterprise project ID of the load balancer.
	EnterpriseProjectId pulumi.StringOutput `pulumi:"enterpriseProjectId"`
	// Specifies whether to forcibly delete the load balancer, remove the load
	// balancer, listeners, unbind associated pools. Defaults to **false**.
	ForceDelete pulumi.BoolPtrOutput `pulumi:"forceDelete"`
	// Indicates the scenario where the load balancer is frozen. Multiple values are separated using commas (,).
	// The value can be:
	// + **POLICE**: The load balancer is frozen due to security reasons.
	// + **ILLEGAL**: The load balancer is frozen due to violation of laws and regulations.
	// + **VERIFY**: Your account has not completed real-name authentication.
	// + **PARTNER**: The load balancer is frozen by the partner.
	// + **ARREAR**: Your account is in arrears.
	FrozenScene pulumi.StringOutput `pulumi:"frozenScene"`
	// Indicates the flavor ID of the gateway load balancer.
	GwFlavorId pulumi.StringOutput `pulumi:"gwFlavorId"`
	// Specifies the private IPv4 address of the load balancer.
	Ipv4Address pulumi.StringOutput `pulumi:"ipv4Address"`
	// Indicates the ID of the port bound to the private IPv4 address of the load balancer.
	Ipv4PortId pulumi.StringOutput `pulumi:"ipv4PortId"`
	// Specifies the ID of the IPv4 subnet where the load balancer works. If it is not
	// specified, the IPv4 subnet of the original load balancer is used. The subnets where the original and new load balancers
	// work must be in the same VPC.
	Ipv4SubnetId pulumi.StringOutput `pulumi:"ipv4SubnetId"`
	// Specifies the private IPv6 address of the load balancer.
	Ipv6Address pulumi.StringOutput `pulumi:"ipv6Address"`
	// Specifies the ipv6 bandwidth ID. Only support shared bandwidth.
	Ipv6BandwidthId pulumi.StringPtrOutput `pulumi:"ipv6BandwidthId"`
	// Specifies the ID of the IPv6 subnet where the new load balancer works. If it is
	// not specified, the IPv6 subnet of the original load balancer is used. The subnets where the original and new load
	// balancers work must be in the same VPC.
	Ipv6NetworkId pulumi.StringOutput `pulumi:"ipv6NetworkId"`
	// Specifies the Layer 4 specifications of the new load balancer. If it is not specified,
	// the Layer 4 specifications of the original load balancer are used.
	L4FlavorId pulumi.StringOutput `pulumi:"l4FlavorId"`
	// Specifies the Layer 7 specifications of the new load balancer. If it is not specified,
	// the Layer 7 specifications of the original load balancer are used.
	L7FlavorId pulumi.StringOutput `pulumi:"l7FlavorId"`
	// Specifies the source load balancer ID.
	LoadbalancerId pulumi.StringOutput `pulumi:"loadbalancerId"`
	// Indicates the type of the load balancer.
	LoadbalancerType pulumi.StringOutput `pulumi:"loadbalancerType"`
	// Specifies the load balancer name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Indicates the operating status of the load balancer. The value can be:
	// + **ONLINE**: indicates that the load balancer is running normally.
	// + **FROZEN**: indicates that the load balancer is frozen.
	OperatingStatus pulumi.StringOutput `pulumi:"operatingStatus"`
	// Specifies the charging period of the ELB load balancer.
	// If `periodUnit` is set to **month**, the value ranges from `1` to `9`.
	// If `periodUnit` is set to **year**, the value ranges from `1` to `3`.
	// This parameter is mandatory if `chargingMode` is set to **prePaid**.
	Period pulumi.IntPtrOutput `pulumi:"period"`
	// Specifies the charging period unit of the ELB load balancer.
	// Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
	PeriodUnit pulumi.StringPtrOutput `pulumi:"periodUnit"`
	// Specifies the reason for update protection. Only valid when `protectionStatus`
	// is **consoleProtection**.
	ProtectionReason pulumi.StringPtrOutput `pulumi:"protectionReason"`
	// Specifies the protection status for update. Value options:
	// + **nonProtection**: No protection.
	// + **consoleProtection**: Console modification protection.
	ProtectionStatus pulumi.StringOutput `pulumi:"protectionStatus"`
	// Indicates the AZ group to which the load balancer belongs.
	PublicBorderGroup pulumi.StringOutput `pulumi:"publicBorderGroup"`
	// The region in which to create the load balancer resource. If omitted, the
	// provider-level region will be used. Changing this creates a new load balancer.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies whether to reuse the backend server group and backend server
	// ID of the original load balancer.
	// + If it is set to **true**, the backend server group of the original load balancer will be used.
	// + If no backend server group is selected, a new backend server group is created by default.
	// + It is invalid when `enterpriseProjectId` is set to another enterprise project.
	ReusePool pulumi.StringPtrOutput `pulumi:"reusePool"`
	// The key/value pairs to associate with the load balancer.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Indicates the time when the load balancer was updated, in RFC3339 format.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// Indicates the ID of the VPC where the load balancer resides.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
	// Specifies traffic distributing policies when the WAF is faulty.
	// Value options:
	// + **discard**: Traffic will not be distributed.
	// + **forward**: Traffic will be distributed to the default backend servers.
	WafFailureAction pulumi.StringOutput `pulumi:"wafFailureAction"`
}

// NewLoadbalancerCopy registers a new resource with the given unique name, arguments, and options.
func NewLoadbalancerCopy(ctx *pulumi.Context,
	name string, args *LoadbalancerCopyArgs, opts ...pulumi.ResourceOption) (*LoadbalancerCopy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LoadbalancerId == nil {
		return nil, errors.New("invalid value for required argument 'LoadbalancerId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource LoadbalancerCopy
	err := ctx.RegisterResource("huaweicloud:DedicatedElb/loadbalancerCopy:LoadbalancerCopy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadbalancerCopy gets an existing LoadbalancerCopy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadbalancerCopy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadbalancerCopyState, opts ...pulumi.ResourceOption) (*LoadbalancerCopy, error) {
	var resource LoadbalancerCopy
	err := ctx.ReadResource("huaweicloud:DedicatedElb/loadbalancerCopy:LoadbalancerCopy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoadbalancerCopy resources.
type loadbalancerCopyState struct {
	// Specifies whether auto-renew is enabled. Valid values are **true** and **false**.
	AutoRenew *string `pulumi:"autoRenew"`
	// Specifies the list of AZ names.
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// Specifies the ID of the backend subnet of the load balancer. If it is not specified,
	// the backend subnet of the original load balancer is used. The subnets where the original and new load balancers work must
	// be in the same VPC.
	BackendSubnets []string `pulumi:"backendSubnets"`
	// Indicates the billing mode. The value can be:
	// + **flavor**: Billed by the specifications you will select.
	// + **lcu**: Billed by LCU usage.
	ChargeMode *string `pulumi:"chargeMode"`
	// Specifies the charging mode of the ELB load balancer.
	// Valid values are **prePaid** and **postPaid**, defaults to **postPaid**.
	ChargingMode *string `pulumi:"chargingMode"`
	// Indicates the time when the load balancer was created, in RFC3339 format.
	CreatedAt *string `pulumi:"createdAt"`
	// Specifies whether to add backend servers that are not in the load balancer's
	// VPC. Can only be **true** when updating. Value options: **true**, **false**.
	CrossVpcBackend *string `pulumi:"crossVpcBackend"`
	// Specifies whether to enable deletion protection for the load balancer.
	// Value options:
	// + **true**: Enable deletion protection.
	// + **false**: Disable deletion protection.
	DeletionProtectionEnable *string `pulumi:"deletionProtectionEnable"`
	// Specifies the description of the load balancer.
	Description *string `pulumi:"description"`
	// Indicates the type of the subnet on the downstream plane. The value can be:
	// + **ipv4**: IPv4 subnet
	// + **dualstack**: subnet that supports IPv4/IPv6 dual stack
	ElbVirsubnetType *string `pulumi:"elbVirsubnetType"`
	EnableForceNew   *string `pulumi:"enableForceNew"`
	// The enterprise project ID of the load balancer.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies whether to forcibly delete the load balancer, remove the load
	// balancer, listeners, unbind associated pools. Defaults to **false**.
	ForceDelete *bool `pulumi:"forceDelete"`
	// Indicates the scenario where the load balancer is frozen. Multiple values are separated using commas (,).
	// The value can be:
	// + **POLICE**: The load balancer is frozen due to security reasons.
	// + **ILLEGAL**: The load balancer is frozen due to violation of laws and regulations.
	// + **VERIFY**: Your account has not completed real-name authentication.
	// + **PARTNER**: The load balancer is frozen by the partner.
	// + **ARREAR**: Your account is in arrears.
	FrozenScene *string `pulumi:"frozenScene"`
	// Indicates the flavor ID of the gateway load balancer.
	GwFlavorId *string `pulumi:"gwFlavorId"`
	// Specifies the private IPv4 address of the load balancer.
	Ipv4Address *string `pulumi:"ipv4Address"`
	// Indicates the ID of the port bound to the private IPv4 address of the load balancer.
	Ipv4PortId *string `pulumi:"ipv4PortId"`
	// Specifies the ID of the IPv4 subnet where the load balancer works. If it is not
	// specified, the IPv4 subnet of the original load balancer is used. The subnets where the original and new load balancers
	// work must be in the same VPC.
	Ipv4SubnetId *string `pulumi:"ipv4SubnetId"`
	// Specifies the private IPv6 address of the load balancer.
	Ipv6Address *string `pulumi:"ipv6Address"`
	// Specifies the ipv6 bandwidth ID. Only support shared bandwidth.
	Ipv6BandwidthId *string `pulumi:"ipv6BandwidthId"`
	// Specifies the ID of the IPv6 subnet where the new load balancer works. If it is
	// not specified, the IPv6 subnet of the original load balancer is used. The subnets where the original and new load
	// balancers work must be in the same VPC.
	Ipv6NetworkId *string `pulumi:"ipv6NetworkId"`
	// Specifies the Layer 4 specifications of the new load balancer. If it is not specified,
	// the Layer 4 specifications of the original load balancer are used.
	L4FlavorId *string `pulumi:"l4FlavorId"`
	// Specifies the Layer 7 specifications of the new load balancer. If it is not specified,
	// the Layer 7 specifications of the original load balancer are used.
	L7FlavorId *string `pulumi:"l7FlavorId"`
	// Specifies the source load balancer ID.
	LoadbalancerId *string `pulumi:"loadbalancerId"`
	// Indicates the type of the load balancer.
	LoadbalancerType *string `pulumi:"loadbalancerType"`
	// Specifies the load balancer name.
	Name *string `pulumi:"name"`
	// Indicates the operating status of the load balancer. The value can be:
	// + **ONLINE**: indicates that the load balancer is running normally.
	// + **FROZEN**: indicates that the load balancer is frozen.
	OperatingStatus *string `pulumi:"operatingStatus"`
	// Specifies the charging period of the ELB load balancer.
	// If `periodUnit` is set to **month**, the value ranges from `1` to `9`.
	// If `periodUnit` is set to **year**, the value ranges from `1` to `3`.
	// This parameter is mandatory if `chargingMode` is set to **prePaid**.
	Period *int `pulumi:"period"`
	// Specifies the charging period unit of the ELB load balancer.
	// Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
	PeriodUnit *string `pulumi:"periodUnit"`
	// Specifies the reason for update protection. Only valid when `protectionStatus`
	// is **consoleProtection**.
	ProtectionReason *string `pulumi:"protectionReason"`
	// Specifies the protection status for update. Value options:
	// + **nonProtection**: No protection.
	// + **consoleProtection**: Console modification protection.
	ProtectionStatus *string `pulumi:"protectionStatus"`
	// Indicates the AZ group to which the load balancer belongs.
	PublicBorderGroup *string `pulumi:"publicBorderGroup"`
	// The region in which to create the load balancer resource. If omitted, the
	// provider-level region will be used. Changing this creates a new load balancer.
	Region *string `pulumi:"region"`
	// Specifies whether to reuse the backend server group and backend server
	// ID of the original load balancer.
	// + If it is set to **true**, the backend server group of the original load balancer will be used.
	// + If no backend server group is selected, a new backend server group is created by default.
	// + It is invalid when `enterpriseProjectId` is set to another enterprise project.
	ReusePool *string `pulumi:"reusePool"`
	// The key/value pairs to associate with the load balancer.
	Tags map[string]string `pulumi:"tags"`
	// Indicates the time when the load balancer was updated, in RFC3339 format.
	UpdatedAt *string `pulumi:"updatedAt"`
	// Indicates the ID of the VPC where the load balancer resides.
	VpcId *string `pulumi:"vpcId"`
	// Specifies traffic distributing policies when the WAF is faulty.
	// Value options:
	// + **discard**: Traffic will not be distributed.
	// + **forward**: Traffic will be distributed to the default backend servers.
	WafFailureAction *string `pulumi:"wafFailureAction"`
}

type LoadbalancerCopyState struct {
	// Specifies whether auto-renew is enabled. Valid values are **true** and **false**.
	AutoRenew pulumi.StringPtrInput
	// Specifies the list of AZ names.
	AvailabilityZones pulumi.StringArrayInput
	// Specifies the ID of the backend subnet of the load balancer. If it is not specified,
	// the backend subnet of the original load balancer is used. The subnets where the original and new load balancers work must
	// be in the same VPC.
	BackendSubnets pulumi.StringArrayInput
	// Indicates the billing mode. The value can be:
	// + **flavor**: Billed by the specifications you will select.
	// + **lcu**: Billed by LCU usage.
	ChargeMode pulumi.StringPtrInput
	// Specifies the charging mode of the ELB load balancer.
	// Valid values are **prePaid** and **postPaid**, defaults to **postPaid**.
	ChargingMode pulumi.StringPtrInput
	// Indicates the time when the load balancer was created, in RFC3339 format.
	CreatedAt pulumi.StringPtrInput
	// Specifies whether to add backend servers that are not in the load balancer's
	// VPC. Can only be **true** when updating. Value options: **true**, **false**.
	CrossVpcBackend pulumi.StringPtrInput
	// Specifies whether to enable deletion protection for the load balancer.
	// Value options:
	// + **true**: Enable deletion protection.
	// + **false**: Disable deletion protection.
	DeletionProtectionEnable pulumi.StringPtrInput
	// Specifies the description of the load balancer.
	Description pulumi.StringPtrInput
	// Indicates the type of the subnet on the downstream plane. The value can be:
	// + **ipv4**: IPv4 subnet
	// + **dualstack**: subnet that supports IPv4/IPv6 dual stack
	ElbVirsubnetType pulumi.StringPtrInput
	EnableForceNew   pulumi.StringPtrInput
	// The enterprise project ID of the load balancer.
	EnterpriseProjectId pulumi.StringPtrInput
	// Specifies whether to forcibly delete the load balancer, remove the load
	// balancer, listeners, unbind associated pools. Defaults to **false**.
	ForceDelete pulumi.BoolPtrInput
	// Indicates the scenario where the load balancer is frozen. Multiple values are separated using commas (,).
	// The value can be:
	// + **POLICE**: The load balancer is frozen due to security reasons.
	// + **ILLEGAL**: The load balancer is frozen due to violation of laws and regulations.
	// + **VERIFY**: Your account has not completed real-name authentication.
	// + **PARTNER**: The load balancer is frozen by the partner.
	// + **ARREAR**: Your account is in arrears.
	FrozenScene pulumi.StringPtrInput
	// Indicates the flavor ID of the gateway load balancer.
	GwFlavorId pulumi.StringPtrInput
	// Specifies the private IPv4 address of the load balancer.
	Ipv4Address pulumi.StringPtrInput
	// Indicates the ID of the port bound to the private IPv4 address of the load balancer.
	Ipv4PortId pulumi.StringPtrInput
	// Specifies the ID of the IPv4 subnet where the load balancer works. If it is not
	// specified, the IPv4 subnet of the original load balancer is used. The subnets where the original and new load balancers
	// work must be in the same VPC.
	Ipv4SubnetId pulumi.StringPtrInput
	// Specifies the private IPv6 address of the load balancer.
	Ipv6Address pulumi.StringPtrInput
	// Specifies the ipv6 bandwidth ID. Only support shared bandwidth.
	Ipv6BandwidthId pulumi.StringPtrInput
	// Specifies the ID of the IPv6 subnet where the new load balancer works. If it is
	// not specified, the IPv6 subnet of the original load balancer is used. The subnets where the original and new load
	// balancers work must be in the same VPC.
	Ipv6NetworkId pulumi.StringPtrInput
	// Specifies the Layer 4 specifications of the new load balancer. If it is not specified,
	// the Layer 4 specifications of the original load balancer are used.
	L4FlavorId pulumi.StringPtrInput
	// Specifies the Layer 7 specifications of the new load balancer. If it is not specified,
	// the Layer 7 specifications of the original load balancer are used.
	L7FlavorId pulumi.StringPtrInput
	// Specifies the source load balancer ID.
	LoadbalancerId pulumi.StringPtrInput
	// Indicates the type of the load balancer.
	LoadbalancerType pulumi.StringPtrInput
	// Specifies the load balancer name.
	Name pulumi.StringPtrInput
	// Indicates the operating status of the load balancer. The value can be:
	// + **ONLINE**: indicates that the load balancer is running normally.
	// + **FROZEN**: indicates that the load balancer is frozen.
	OperatingStatus pulumi.StringPtrInput
	// Specifies the charging period of the ELB load balancer.
	// If `periodUnit` is set to **month**, the value ranges from `1` to `9`.
	// If `periodUnit` is set to **year**, the value ranges from `1` to `3`.
	// This parameter is mandatory if `chargingMode` is set to **prePaid**.
	Period pulumi.IntPtrInput
	// Specifies the charging period unit of the ELB load balancer.
	// Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
	PeriodUnit pulumi.StringPtrInput
	// Specifies the reason for update protection. Only valid when `protectionStatus`
	// is **consoleProtection**.
	ProtectionReason pulumi.StringPtrInput
	// Specifies the protection status for update. Value options:
	// + **nonProtection**: No protection.
	// + **consoleProtection**: Console modification protection.
	ProtectionStatus pulumi.StringPtrInput
	// Indicates the AZ group to which the load balancer belongs.
	PublicBorderGroup pulumi.StringPtrInput
	// The region in which to create the load balancer resource. If omitted, the
	// provider-level region will be used. Changing this creates a new load balancer.
	Region pulumi.StringPtrInput
	// Specifies whether to reuse the backend server group and backend server
	// ID of the original load balancer.
	// + If it is set to **true**, the backend server group of the original load balancer will be used.
	// + If no backend server group is selected, a new backend server group is created by default.
	// + It is invalid when `enterpriseProjectId` is set to another enterprise project.
	ReusePool pulumi.StringPtrInput
	// The key/value pairs to associate with the load balancer.
	Tags pulumi.StringMapInput
	// Indicates the time when the load balancer was updated, in RFC3339 format.
	UpdatedAt pulumi.StringPtrInput
	// Indicates the ID of the VPC where the load balancer resides.
	VpcId pulumi.StringPtrInput
	// Specifies traffic distributing policies when the WAF is faulty.
	// Value options:
	// + **discard**: Traffic will not be distributed.
	// + **forward**: Traffic will be distributed to the default backend servers.
	WafFailureAction pulumi.StringPtrInput
}

func (LoadbalancerCopyState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadbalancerCopyState)(nil)).Elem()
}

type loadbalancerCopyArgs struct {
	// Specifies whether auto-renew is enabled. Valid values are **true** and **false**.
	AutoRenew *string `pulumi:"autoRenew"`
	// Specifies the list of AZ names.
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// Specifies the ID of the backend subnet of the load balancer. If it is not specified,
	// the backend subnet of the original load balancer is used. The subnets where the original and new load balancers work must
	// be in the same VPC.
	BackendSubnets []string `pulumi:"backendSubnets"`
	// Specifies the charging mode of the ELB load balancer.
	// Valid values are **prePaid** and **postPaid**, defaults to **postPaid**.
	ChargingMode *string `pulumi:"chargingMode"`
	// Specifies whether to add backend servers that are not in the load balancer's
	// VPC. Can only be **true** when updating. Value options: **true**, **false**.
	CrossVpcBackend *string `pulumi:"crossVpcBackend"`
	// Specifies whether to enable deletion protection for the load balancer.
	// Value options:
	// + **true**: Enable deletion protection.
	// + **false**: Disable deletion protection.
	DeletionProtectionEnable *string `pulumi:"deletionProtectionEnable"`
	// Specifies the description of the load balancer.
	Description    *string `pulumi:"description"`
	EnableForceNew *string `pulumi:"enableForceNew"`
	// The enterprise project ID of the load balancer.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies whether to forcibly delete the load balancer, remove the load
	// balancer, listeners, unbind associated pools. Defaults to **false**.
	ForceDelete *bool `pulumi:"forceDelete"`
	// Specifies the private IPv4 address of the load balancer.
	Ipv4Address *string `pulumi:"ipv4Address"`
	// Specifies the ID of the IPv4 subnet where the load balancer works. If it is not
	// specified, the IPv4 subnet of the original load balancer is used. The subnets where the original and new load balancers
	// work must be in the same VPC.
	Ipv4SubnetId *string `pulumi:"ipv4SubnetId"`
	// Specifies the private IPv6 address of the load balancer.
	Ipv6Address *string `pulumi:"ipv6Address"`
	// Specifies the ipv6 bandwidth ID. Only support shared bandwidth.
	Ipv6BandwidthId *string `pulumi:"ipv6BandwidthId"`
	// Specifies the ID of the IPv6 subnet where the new load balancer works. If it is
	// not specified, the IPv6 subnet of the original load balancer is used. The subnets where the original and new load
	// balancers work must be in the same VPC.
	Ipv6NetworkId *string `pulumi:"ipv6NetworkId"`
	// Specifies the Layer 4 specifications of the new load balancer. If it is not specified,
	// the Layer 4 specifications of the original load balancer are used.
	L4FlavorId *string `pulumi:"l4FlavorId"`
	// Specifies the Layer 7 specifications of the new load balancer. If it is not specified,
	// the Layer 7 specifications of the original load balancer are used.
	L7FlavorId *string `pulumi:"l7FlavorId"`
	// Specifies the source load balancer ID.
	LoadbalancerId string `pulumi:"loadbalancerId"`
	// Specifies the load balancer name.
	Name *string `pulumi:"name"`
	// Specifies the charging period of the ELB load balancer.
	// If `periodUnit` is set to **month**, the value ranges from `1` to `9`.
	// If `periodUnit` is set to **year**, the value ranges from `1` to `3`.
	// This parameter is mandatory if `chargingMode` is set to **prePaid**.
	Period *int `pulumi:"period"`
	// Specifies the charging period unit of the ELB load balancer.
	// Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
	PeriodUnit *string `pulumi:"periodUnit"`
	// Specifies the reason for update protection. Only valid when `protectionStatus`
	// is **consoleProtection**.
	ProtectionReason *string `pulumi:"protectionReason"`
	// Specifies the protection status for update. Value options:
	// + **nonProtection**: No protection.
	// + **consoleProtection**: Console modification protection.
	ProtectionStatus *string `pulumi:"protectionStatus"`
	// The region in which to create the load balancer resource. If omitted, the
	// provider-level region will be used. Changing this creates a new load balancer.
	Region *string `pulumi:"region"`
	// Specifies whether to reuse the backend server group and backend server
	// ID of the original load balancer.
	// + If it is set to **true**, the backend server group of the original load balancer will be used.
	// + If no backend server group is selected, a new backend server group is created by default.
	// + It is invalid when `enterpriseProjectId` is set to another enterprise project.
	ReusePool *string `pulumi:"reusePool"`
	// The key/value pairs to associate with the load balancer.
	Tags map[string]string `pulumi:"tags"`
	// Specifies traffic distributing policies when the WAF is faulty.
	// Value options:
	// + **discard**: Traffic will not be distributed.
	// + **forward**: Traffic will be distributed to the default backend servers.
	WafFailureAction *string `pulumi:"wafFailureAction"`
}

// The set of arguments for constructing a LoadbalancerCopy resource.
type LoadbalancerCopyArgs struct {
	// Specifies whether auto-renew is enabled. Valid values are **true** and **false**.
	AutoRenew pulumi.StringPtrInput
	// Specifies the list of AZ names.
	AvailabilityZones pulumi.StringArrayInput
	// Specifies the ID of the backend subnet of the load balancer. If it is not specified,
	// the backend subnet of the original load balancer is used. The subnets where the original and new load balancers work must
	// be in the same VPC.
	BackendSubnets pulumi.StringArrayInput
	// Specifies the charging mode of the ELB load balancer.
	// Valid values are **prePaid** and **postPaid**, defaults to **postPaid**.
	ChargingMode pulumi.StringPtrInput
	// Specifies whether to add backend servers that are not in the load balancer's
	// VPC. Can only be **true** when updating. Value options: **true**, **false**.
	CrossVpcBackend pulumi.StringPtrInput
	// Specifies whether to enable deletion protection for the load balancer.
	// Value options:
	// + **true**: Enable deletion protection.
	// + **false**: Disable deletion protection.
	DeletionProtectionEnable pulumi.StringPtrInput
	// Specifies the description of the load balancer.
	Description    pulumi.StringPtrInput
	EnableForceNew pulumi.StringPtrInput
	// The enterprise project ID of the load balancer.
	EnterpriseProjectId pulumi.StringPtrInput
	// Specifies whether to forcibly delete the load balancer, remove the load
	// balancer, listeners, unbind associated pools. Defaults to **false**.
	ForceDelete pulumi.BoolPtrInput
	// Specifies the private IPv4 address of the load balancer.
	Ipv4Address pulumi.StringPtrInput
	// Specifies the ID of the IPv4 subnet where the load balancer works. If it is not
	// specified, the IPv4 subnet of the original load balancer is used. The subnets where the original and new load balancers
	// work must be in the same VPC.
	Ipv4SubnetId pulumi.StringPtrInput
	// Specifies the private IPv6 address of the load balancer.
	Ipv6Address pulumi.StringPtrInput
	// Specifies the ipv6 bandwidth ID. Only support shared bandwidth.
	Ipv6BandwidthId pulumi.StringPtrInput
	// Specifies the ID of the IPv6 subnet where the new load balancer works. If it is
	// not specified, the IPv6 subnet of the original load balancer is used. The subnets where the original and new load
	// balancers work must be in the same VPC.
	Ipv6NetworkId pulumi.StringPtrInput
	// Specifies the Layer 4 specifications of the new load balancer. If it is not specified,
	// the Layer 4 specifications of the original load balancer are used.
	L4FlavorId pulumi.StringPtrInput
	// Specifies the Layer 7 specifications of the new load balancer. If it is not specified,
	// the Layer 7 specifications of the original load balancer are used.
	L7FlavorId pulumi.StringPtrInput
	// Specifies the source load balancer ID.
	LoadbalancerId pulumi.StringInput
	// Specifies the load balancer name.
	Name pulumi.StringPtrInput
	// Specifies the charging period of the ELB load balancer.
	// If `periodUnit` is set to **month**, the value ranges from `1` to `9`.
	// If `periodUnit` is set to **year**, the value ranges from `1` to `3`.
	// This parameter is mandatory if `chargingMode` is set to **prePaid**.
	Period pulumi.IntPtrInput
	// Specifies the charging period unit of the ELB load balancer.
	// Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
	PeriodUnit pulumi.StringPtrInput
	// Specifies the reason for update protection. Only valid when `protectionStatus`
	// is **consoleProtection**.
	ProtectionReason pulumi.StringPtrInput
	// Specifies the protection status for update. Value options:
	// + **nonProtection**: No protection.
	// + **consoleProtection**: Console modification protection.
	ProtectionStatus pulumi.StringPtrInput
	// The region in which to create the load balancer resource. If omitted, the
	// provider-level region will be used. Changing this creates a new load balancer.
	Region pulumi.StringPtrInput
	// Specifies whether to reuse the backend server group and backend server
	// ID of the original load balancer.
	// + If it is set to **true**, the backend server group of the original load balancer will be used.
	// + If no backend server group is selected, a new backend server group is created by default.
	// + It is invalid when `enterpriseProjectId` is set to another enterprise project.
	ReusePool pulumi.StringPtrInput
	// The key/value pairs to associate with the load balancer.
	Tags pulumi.StringMapInput
	// Specifies traffic distributing policies when the WAF is faulty.
	// Value options:
	// + **discard**: Traffic will not be distributed.
	// + **forward**: Traffic will be distributed to the default backend servers.
	WafFailureAction pulumi.StringPtrInput
}

func (LoadbalancerCopyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadbalancerCopyArgs)(nil)).Elem()
}

type LoadbalancerCopyInput interface {
	pulumi.Input

	ToLoadbalancerCopyOutput() LoadbalancerCopyOutput
	ToLoadbalancerCopyOutputWithContext(ctx context.Context) LoadbalancerCopyOutput
}

func (*LoadbalancerCopy) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadbalancerCopy)(nil)).Elem()
}

func (i *LoadbalancerCopy) ToLoadbalancerCopyOutput() LoadbalancerCopyOutput {
	return i.ToLoadbalancerCopyOutputWithContext(context.Background())
}

func (i *LoadbalancerCopy) ToLoadbalancerCopyOutputWithContext(ctx context.Context) LoadbalancerCopyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerCopyOutput)
}

// LoadbalancerCopyArrayInput is an input type that accepts LoadbalancerCopyArray and LoadbalancerCopyArrayOutput values.
// You can construct a concrete instance of `LoadbalancerCopyArrayInput` via:
//
//	LoadbalancerCopyArray{ LoadbalancerCopyArgs{...} }
type LoadbalancerCopyArrayInput interface {
	pulumi.Input

	ToLoadbalancerCopyArrayOutput() LoadbalancerCopyArrayOutput
	ToLoadbalancerCopyArrayOutputWithContext(context.Context) LoadbalancerCopyArrayOutput
}

type LoadbalancerCopyArray []LoadbalancerCopyInput

func (LoadbalancerCopyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadbalancerCopy)(nil)).Elem()
}

func (i LoadbalancerCopyArray) ToLoadbalancerCopyArrayOutput() LoadbalancerCopyArrayOutput {
	return i.ToLoadbalancerCopyArrayOutputWithContext(context.Background())
}

func (i LoadbalancerCopyArray) ToLoadbalancerCopyArrayOutputWithContext(ctx context.Context) LoadbalancerCopyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerCopyArrayOutput)
}

// LoadbalancerCopyMapInput is an input type that accepts LoadbalancerCopyMap and LoadbalancerCopyMapOutput values.
// You can construct a concrete instance of `LoadbalancerCopyMapInput` via:
//
//	LoadbalancerCopyMap{ "key": LoadbalancerCopyArgs{...} }
type LoadbalancerCopyMapInput interface {
	pulumi.Input

	ToLoadbalancerCopyMapOutput() LoadbalancerCopyMapOutput
	ToLoadbalancerCopyMapOutputWithContext(context.Context) LoadbalancerCopyMapOutput
}

type LoadbalancerCopyMap map[string]LoadbalancerCopyInput

func (LoadbalancerCopyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadbalancerCopy)(nil)).Elem()
}

func (i LoadbalancerCopyMap) ToLoadbalancerCopyMapOutput() LoadbalancerCopyMapOutput {
	return i.ToLoadbalancerCopyMapOutputWithContext(context.Background())
}

func (i LoadbalancerCopyMap) ToLoadbalancerCopyMapOutputWithContext(ctx context.Context) LoadbalancerCopyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerCopyMapOutput)
}

type LoadbalancerCopyOutput struct{ *pulumi.OutputState }

func (LoadbalancerCopyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadbalancerCopy)(nil)).Elem()
}

func (o LoadbalancerCopyOutput) ToLoadbalancerCopyOutput() LoadbalancerCopyOutput {
	return o
}

func (o LoadbalancerCopyOutput) ToLoadbalancerCopyOutputWithContext(ctx context.Context) LoadbalancerCopyOutput {
	return o
}

// Specifies whether auto-renew is enabled. Valid values are **true** and **false**.
func (o LoadbalancerCopyOutput) AutoRenew() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadbalancerCopy) pulumi.StringPtrOutput { return v.AutoRenew }).(pulumi.StringPtrOutput)
}

// Specifies the list of AZ names.
func (o LoadbalancerCopyOutput) AvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LoadbalancerCopy) pulumi.StringArrayOutput { return v.AvailabilityZones }).(pulumi.StringArrayOutput)
}

// Specifies the ID of the backend subnet of the load balancer. If it is not specified,
// the backend subnet of the original load balancer is used. The subnets where the original and new load balancers work must
// be in the same VPC.
func (o LoadbalancerCopyOutput) BackendSubnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LoadbalancerCopy) pulumi.StringArrayOutput { return v.BackendSubnets }).(pulumi.StringArrayOutput)
}

// Indicates the billing mode. The value can be:
// + **flavor**: Billed by the specifications you will select.
// + **lcu**: Billed by LCU usage.
func (o LoadbalancerCopyOutput) ChargeMode() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerCopy) pulumi.StringOutput { return v.ChargeMode }).(pulumi.StringOutput)
}

// Specifies the charging mode of the ELB load balancer.
// Valid values are **prePaid** and **postPaid**, defaults to **postPaid**.
func (o LoadbalancerCopyOutput) ChargingMode() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerCopy) pulumi.StringOutput { return v.ChargingMode }).(pulumi.StringOutput)
}

// Indicates the time when the load balancer was created, in RFC3339 format.
func (o LoadbalancerCopyOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerCopy) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Specifies whether to add backend servers that are not in the load balancer's
// VPC. Can only be **true** when updating. Value options: **true**, **false**.
func (o LoadbalancerCopyOutput) CrossVpcBackend() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerCopy) pulumi.StringOutput { return v.CrossVpcBackend }).(pulumi.StringOutput)
}

// Specifies whether to enable deletion protection for the load balancer.
// Value options:
// + **true**: Enable deletion protection.
// + **false**: Disable deletion protection.
func (o LoadbalancerCopyOutput) DeletionProtectionEnable() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerCopy) pulumi.StringOutput { return v.DeletionProtectionEnable }).(pulumi.StringOutput)
}

// Specifies the description of the load balancer.
func (o LoadbalancerCopyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadbalancerCopy) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicates the type of the subnet on the downstream plane. The value can be:
// + **ipv4**: IPv4 subnet
// + **dualstack**: subnet that supports IPv4/IPv6 dual stack
func (o LoadbalancerCopyOutput) ElbVirsubnetType() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerCopy) pulumi.StringOutput { return v.ElbVirsubnetType }).(pulumi.StringOutput)
}

func (o LoadbalancerCopyOutput) EnableForceNew() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadbalancerCopy) pulumi.StringPtrOutput { return v.EnableForceNew }).(pulumi.StringPtrOutput)
}

// The enterprise project ID of the load balancer.
func (o LoadbalancerCopyOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerCopy) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// Specifies whether to forcibly delete the load balancer, remove the load
// balancer, listeners, unbind associated pools. Defaults to **false**.
func (o LoadbalancerCopyOutput) ForceDelete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LoadbalancerCopy) pulumi.BoolPtrOutput { return v.ForceDelete }).(pulumi.BoolPtrOutput)
}

// Indicates the scenario where the load balancer is frozen. Multiple values are separated using commas (,).
// The value can be:
// + **POLICE**: The load balancer is frozen due to security reasons.
// + **ILLEGAL**: The load balancer is frozen due to violation of laws and regulations.
// + **VERIFY**: Your account has not completed real-name authentication.
// + **PARTNER**: The load balancer is frozen by the partner.
// + **ARREAR**: Your account is in arrears.
func (o LoadbalancerCopyOutput) FrozenScene() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerCopy) pulumi.StringOutput { return v.FrozenScene }).(pulumi.StringOutput)
}

// Indicates the flavor ID of the gateway load balancer.
func (o LoadbalancerCopyOutput) GwFlavorId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerCopy) pulumi.StringOutput { return v.GwFlavorId }).(pulumi.StringOutput)
}

// Specifies the private IPv4 address of the load balancer.
func (o LoadbalancerCopyOutput) Ipv4Address() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerCopy) pulumi.StringOutput { return v.Ipv4Address }).(pulumi.StringOutput)
}

// Indicates the ID of the port bound to the private IPv4 address of the load balancer.
func (o LoadbalancerCopyOutput) Ipv4PortId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerCopy) pulumi.StringOutput { return v.Ipv4PortId }).(pulumi.StringOutput)
}

// Specifies the ID of the IPv4 subnet where the load balancer works. If it is not
// specified, the IPv4 subnet of the original load balancer is used. The subnets where the original and new load balancers
// work must be in the same VPC.
func (o LoadbalancerCopyOutput) Ipv4SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerCopy) pulumi.StringOutput { return v.Ipv4SubnetId }).(pulumi.StringOutput)
}

// Specifies the private IPv6 address of the load balancer.
func (o LoadbalancerCopyOutput) Ipv6Address() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerCopy) pulumi.StringOutput { return v.Ipv6Address }).(pulumi.StringOutput)
}

// Specifies the ipv6 bandwidth ID. Only support shared bandwidth.
func (o LoadbalancerCopyOutput) Ipv6BandwidthId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadbalancerCopy) pulumi.StringPtrOutput { return v.Ipv6BandwidthId }).(pulumi.StringPtrOutput)
}

// Specifies the ID of the IPv6 subnet where the new load balancer works. If it is
// not specified, the IPv6 subnet of the original load balancer is used. The subnets where the original and new load
// balancers work must be in the same VPC.
func (o LoadbalancerCopyOutput) Ipv6NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerCopy) pulumi.StringOutput { return v.Ipv6NetworkId }).(pulumi.StringOutput)
}

// Specifies the Layer 4 specifications of the new load balancer. If it is not specified,
// the Layer 4 specifications of the original load balancer are used.
func (o LoadbalancerCopyOutput) L4FlavorId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerCopy) pulumi.StringOutput { return v.L4FlavorId }).(pulumi.StringOutput)
}

// Specifies the Layer 7 specifications of the new load balancer. If it is not specified,
// the Layer 7 specifications of the original load balancer are used.
func (o LoadbalancerCopyOutput) L7FlavorId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerCopy) pulumi.StringOutput { return v.L7FlavorId }).(pulumi.StringOutput)
}

// Specifies the source load balancer ID.
func (o LoadbalancerCopyOutput) LoadbalancerId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerCopy) pulumi.StringOutput { return v.LoadbalancerId }).(pulumi.StringOutput)
}

// Indicates the type of the load balancer.
func (o LoadbalancerCopyOutput) LoadbalancerType() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerCopy) pulumi.StringOutput { return v.LoadbalancerType }).(pulumi.StringOutput)
}

// Specifies the load balancer name.
func (o LoadbalancerCopyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerCopy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Indicates the operating status of the load balancer. The value can be:
// + **ONLINE**: indicates that the load balancer is running normally.
// + **FROZEN**: indicates that the load balancer is frozen.
func (o LoadbalancerCopyOutput) OperatingStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerCopy) pulumi.StringOutput { return v.OperatingStatus }).(pulumi.StringOutput)
}

// Specifies the charging period of the ELB load balancer.
// If `periodUnit` is set to **month**, the value ranges from `1` to `9`.
// If `periodUnit` is set to **year**, the value ranges from `1` to `3`.
// This parameter is mandatory if `chargingMode` is set to **prePaid**.
func (o LoadbalancerCopyOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LoadbalancerCopy) pulumi.IntPtrOutput { return v.Period }).(pulumi.IntPtrOutput)
}

// Specifies the charging period unit of the ELB load balancer.
// Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
func (o LoadbalancerCopyOutput) PeriodUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadbalancerCopy) pulumi.StringPtrOutput { return v.PeriodUnit }).(pulumi.StringPtrOutput)
}

// Specifies the reason for update protection. Only valid when `protectionStatus`
// is **consoleProtection**.
func (o LoadbalancerCopyOutput) ProtectionReason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadbalancerCopy) pulumi.StringPtrOutput { return v.ProtectionReason }).(pulumi.StringPtrOutput)
}

// Specifies the protection status for update. Value options:
// + **nonProtection**: No protection.
// + **consoleProtection**: Console modification protection.
func (o LoadbalancerCopyOutput) ProtectionStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerCopy) pulumi.StringOutput { return v.ProtectionStatus }).(pulumi.StringOutput)
}

// Indicates the AZ group to which the load balancer belongs.
func (o LoadbalancerCopyOutput) PublicBorderGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerCopy) pulumi.StringOutput { return v.PublicBorderGroup }).(pulumi.StringOutput)
}

// The region in which to create the load balancer resource. If omitted, the
// provider-level region will be used. Changing this creates a new load balancer.
func (o LoadbalancerCopyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerCopy) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies whether to reuse the backend server group and backend server
// ID of the original load balancer.
// + If it is set to **true**, the backend server group of the original load balancer will be used.
// + If no backend server group is selected, a new backend server group is created by default.
// + It is invalid when `enterpriseProjectId` is set to another enterprise project.
func (o LoadbalancerCopyOutput) ReusePool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadbalancerCopy) pulumi.StringPtrOutput { return v.ReusePool }).(pulumi.StringPtrOutput)
}

// The key/value pairs to associate with the load balancer.
func (o LoadbalancerCopyOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LoadbalancerCopy) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Indicates the time when the load balancer was updated, in RFC3339 format.
func (o LoadbalancerCopyOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerCopy) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// Indicates the ID of the VPC where the load balancer resides.
func (o LoadbalancerCopyOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerCopy) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

// Specifies traffic distributing policies when the WAF is faulty.
// Value options:
// + **discard**: Traffic will not be distributed.
// + **forward**: Traffic will be distributed to the default backend servers.
func (o LoadbalancerCopyOutput) WafFailureAction() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerCopy) pulumi.StringOutput { return v.WafFailureAction }).(pulumi.StringOutput)
}

type LoadbalancerCopyArrayOutput struct{ *pulumi.OutputState }

func (LoadbalancerCopyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadbalancerCopy)(nil)).Elem()
}

func (o LoadbalancerCopyArrayOutput) ToLoadbalancerCopyArrayOutput() LoadbalancerCopyArrayOutput {
	return o
}

func (o LoadbalancerCopyArrayOutput) ToLoadbalancerCopyArrayOutputWithContext(ctx context.Context) LoadbalancerCopyArrayOutput {
	return o
}

func (o LoadbalancerCopyArrayOutput) Index(i pulumi.IntInput) LoadbalancerCopyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LoadbalancerCopy {
		return vs[0].([]*LoadbalancerCopy)[vs[1].(int)]
	}).(LoadbalancerCopyOutput)
}

type LoadbalancerCopyMapOutput struct{ *pulumi.OutputState }

func (LoadbalancerCopyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadbalancerCopy)(nil)).Elem()
}

func (o LoadbalancerCopyMapOutput) ToLoadbalancerCopyMapOutput() LoadbalancerCopyMapOutput {
	return o
}

func (o LoadbalancerCopyMapOutput) ToLoadbalancerCopyMapOutputWithContext(ctx context.Context) LoadbalancerCopyMapOutput {
	return o
}

func (o LoadbalancerCopyMapOutput) MapIndex(k pulumi.StringInput) LoadbalancerCopyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LoadbalancerCopy {
		return vs[0].(map[string]*LoadbalancerCopy)[vs[1].(string)]
	}).(LoadbalancerCopyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerCopyInput)(nil)).Elem(), &LoadbalancerCopy{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerCopyArrayInput)(nil)).Elem(), LoadbalancerCopyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerCopyMapInput)(nil)).Elem(), LoadbalancerCopyMap{})
	pulumi.RegisterOutputType(LoadbalancerCopyOutput{})
	pulumi.RegisterOutputType(LoadbalancerCopyArrayOutput{})
	pulumi.RegisterOutputType(LoadbalancerCopyMapOutput{})
}
