// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dedicatedelb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an ELB member resource within HuaweiCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/DedicatedElb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			elbPoolId := cfg.RequireObject("elbPoolId")
//			ipv4SubnetId := cfg.RequireObject("ipv4SubnetId")
//			_, err := DedicatedElb.NewMember(ctx, "member1", &DedicatedElb.MemberArgs{
//				Address:      pulumi.String("192.168.199.23"),
//				ProtocolPort: pulumi.Int(8080),
//				PoolId:       pulumi.Any(elbPoolId),
//				SubnetId:     pulumi.Any(ipv4SubnetId),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ELB member can be imported using the `pool_id` and `id` separated by a slash, e.g. bash
//
// ```sh
//
//	$ pulumi import huaweicloud:DedicatedElb/member:Member member_1 <pool_id>/<id>
//
// ```
type Member struct {
	pulumi.CustomResourceState

	// The IP address of the member to receive traffic from the load balancer.
	// Changing this creates a new member.
	Address pulumi.StringOutput `pulumi:"address"`
	// The time when the backend server was added. The format is **yyyy-MM-dd'T'HH:mm:ss'Z' (UTC time)**.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The ID of the instance associated with the backend server. If this parameter is left blank, the backend
	// server is not a real device. It may be an IP address.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The IP version supported by the backend server. The value can be **v4 (IPv4)** or **v6 (IPv6)**, depending
	// on the value of address returned by the system.
	IpVersion pulumi.StringOutput `pulumi:"ipVersion"`
	// The type of the backend server. The value can be:
	// + **ip**: IP as backend servers
	// + **instance**: ECSs used as backend servers
	MemberType pulumi.StringOutput `pulumi:"memberType"`
	// Human-readable name for the member.
	Name pulumi.StringOutput `pulumi:"name"`
	// The health status of the backend server.
	OperatingStatus pulumi.StringOutput `pulumi:"operatingStatus"`
	// The id of the pool that this member will be assigned to.
	PoolId pulumi.StringOutput `pulumi:"poolId"`
	// The port on which to listen for client traffic. It must be set to `0` for gateway
	// load balancers with IP backend server groups associated. It can be left blank because it does not take effect if
	// `anyPortEnable` is set to **true** for a backend server group.
	ProtocolPort pulumi.IntOutput `pulumi:"protocolPort"`
	// Why health check fails.
	// The reason structure is documented below.
	Reasons MemberReasonArrayOutput `pulumi:"reasons"`
	// The region in which to create the ELB member resource. If omitted, the the
	// provider-level region will be used. Changing this creates a new member.
	Region pulumi.StringOutput `pulumi:"region"`
	// The health status of the backend server if `listenerId` under status is specified. If `listenerId` under
	// `status` is not specified, `operatingStatus` of member takes precedence.
	// The status structure is documented below.
	Statuses MemberStatusArrayOutput `pulumi:"statuses"`
	// The **IPv4 or IPv6 subnet ID** of the subnet in which to access the member.
	// + The IPv4 or IPv6 subnet must be in the same VPC as the subnet of the load balancer.
	// + This parameter must be specified for gateway load balancers. The subnet of the backend server must be in the same
	//   VPC as that of the load balancer, and it must be different from the subnet of the load balancer.
	// + If this parameter is not specified, **cross-VPC backend** has been enabled for the load balancer.
	//   In this case, cross-VPC backend servers must use private IPv4 addresses,
	//   and the protocol of the backend server group must be TCP, HTTP, or HTTPS.
	SubnetId pulumi.StringPtrOutput `pulumi:"subnetId"`
	// The time when the backend server was updated. The format is **yyyy-MM-dd'T'HH:mm:ss'Z' (UTC time)**.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// A positive integer value that indicates the relative portion of traffic that this member
	// should receive from the pool. For example, a member with a weight of 10 receives five times as much traffic as a
	// member with a weight of 2.
	Weight pulumi.IntOutput `pulumi:"weight"`
}

// NewMember registers a new resource with the given unique name, arguments, and options.
func NewMember(ctx *pulumi.Context,
	name string, args *MemberArgs, opts ...pulumi.ResourceOption) (*Member, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Address == nil {
		return nil, errors.New("invalid value for required argument 'Address'")
	}
	if args.PoolId == nil {
		return nil, errors.New("invalid value for required argument 'PoolId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Member
	err := ctx.RegisterResource("huaweicloud:DedicatedElb/member:Member", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMember gets an existing Member resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MemberState, opts ...pulumi.ResourceOption) (*Member, error) {
	var resource Member
	err := ctx.ReadResource("huaweicloud:DedicatedElb/member:Member", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Member resources.
type memberState struct {
	// The IP address of the member to receive traffic from the load balancer.
	// Changing this creates a new member.
	Address *string `pulumi:"address"`
	// The time when the backend server was added. The format is **yyyy-MM-dd'T'HH:mm:ss'Z' (UTC time)**.
	CreatedAt *string `pulumi:"createdAt"`
	// The ID of the instance associated with the backend server. If this parameter is left blank, the backend
	// server is not a real device. It may be an IP address.
	InstanceId *string `pulumi:"instanceId"`
	// The IP version supported by the backend server. The value can be **v4 (IPv4)** or **v6 (IPv6)**, depending
	// on the value of address returned by the system.
	IpVersion *string `pulumi:"ipVersion"`
	// The type of the backend server. The value can be:
	// + **ip**: IP as backend servers
	// + **instance**: ECSs used as backend servers
	MemberType *string `pulumi:"memberType"`
	// Human-readable name for the member.
	Name *string `pulumi:"name"`
	// The health status of the backend server.
	OperatingStatus *string `pulumi:"operatingStatus"`
	// The id of the pool that this member will be assigned to.
	PoolId *string `pulumi:"poolId"`
	// The port on which to listen for client traffic. It must be set to `0` for gateway
	// load balancers with IP backend server groups associated. It can be left blank because it does not take effect if
	// `anyPortEnable` is set to **true** for a backend server group.
	ProtocolPort *int `pulumi:"protocolPort"`
	// Why health check fails.
	// The reason structure is documented below.
	Reasons []MemberReason `pulumi:"reasons"`
	// The region in which to create the ELB member resource. If omitted, the the
	// provider-level region will be used. Changing this creates a new member.
	Region *string `pulumi:"region"`
	// The health status of the backend server if `listenerId` under status is specified. If `listenerId` under
	// `status` is not specified, `operatingStatus` of member takes precedence.
	// The status structure is documented below.
	Statuses []MemberStatus `pulumi:"statuses"`
	// The **IPv4 or IPv6 subnet ID** of the subnet in which to access the member.
	// + The IPv4 or IPv6 subnet must be in the same VPC as the subnet of the load balancer.
	// + This parameter must be specified for gateway load balancers. The subnet of the backend server must be in the same
	//   VPC as that of the load balancer, and it must be different from the subnet of the load balancer.
	// + If this parameter is not specified, **cross-VPC backend** has been enabled for the load balancer.
	//   In this case, cross-VPC backend servers must use private IPv4 addresses,
	//   and the protocol of the backend server group must be TCP, HTTP, or HTTPS.
	SubnetId *string `pulumi:"subnetId"`
	// The time when the backend server was updated. The format is **yyyy-MM-dd'T'HH:mm:ss'Z' (UTC time)**.
	UpdatedAt *string `pulumi:"updatedAt"`
	// A positive integer value that indicates the relative portion of traffic that this member
	// should receive from the pool. For example, a member with a weight of 10 receives five times as much traffic as a
	// member with a weight of 2.
	Weight *int `pulumi:"weight"`
}

type MemberState struct {
	// The IP address of the member to receive traffic from the load balancer.
	// Changing this creates a new member.
	Address pulumi.StringPtrInput
	// The time when the backend server was added. The format is **yyyy-MM-dd'T'HH:mm:ss'Z' (UTC time)**.
	CreatedAt pulumi.StringPtrInput
	// The ID of the instance associated with the backend server. If this parameter is left blank, the backend
	// server is not a real device. It may be an IP address.
	InstanceId pulumi.StringPtrInput
	// The IP version supported by the backend server. The value can be **v4 (IPv4)** or **v6 (IPv6)**, depending
	// on the value of address returned by the system.
	IpVersion pulumi.StringPtrInput
	// The type of the backend server. The value can be:
	// + **ip**: IP as backend servers
	// + **instance**: ECSs used as backend servers
	MemberType pulumi.StringPtrInput
	// Human-readable name for the member.
	Name pulumi.StringPtrInput
	// The health status of the backend server.
	OperatingStatus pulumi.StringPtrInput
	// The id of the pool that this member will be assigned to.
	PoolId pulumi.StringPtrInput
	// The port on which to listen for client traffic. It must be set to `0` for gateway
	// load balancers with IP backend server groups associated. It can be left blank because it does not take effect if
	// `anyPortEnable` is set to **true** for a backend server group.
	ProtocolPort pulumi.IntPtrInput
	// Why health check fails.
	// The reason structure is documented below.
	Reasons MemberReasonArrayInput
	// The region in which to create the ELB member resource. If omitted, the the
	// provider-level region will be used. Changing this creates a new member.
	Region pulumi.StringPtrInput
	// The health status of the backend server if `listenerId` under status is specified. If `listenerId` under
	// `status` is not specified, `operatingStatus` of member takes precedence.
	// The status structure is documented below.
	Statuses MemberStatusArrayInput
	// The **IPv4 or IPv6 subnet ID** of the subnet in which to access the member.
	// + The IPv4 or IPv6 subnet must be in the same VPC as the subnet of the load balancer.
	// + This parameter must be specified for gateway load balancers. The subnet of the backend server must be in the same
	//   VPC as that of the load balancer, and it must be different from the subnet of the load balancer.
	// + If this parameter is not specified, **cross-VPC backend** has been enabled for the load balancer.
	//   In this case, cross-VPC backend servers must use private IPv4 addresses,
	//   and the protocol of the backend server group must be TCP, HTTP, or HTTPS.
	SubnetId pulumi.StringPtrInput
	// The time when the backend server was updated. The format is **yyyy-MM-dd'T'HH:mm:ss'Z' (UTC time)**.
	UpdatedAt pulumi.StringPtrInput
	// A positive integer value that indicates the relative portion of traffic that this member
	// should receive from the pool. For example, a member with a weight of 10 receives five times as much traffic as a
	// member with a weight of 2.
	Weight pulumi.IntPtrInput
}

func (MemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*memberState)(nil)).Elem()
}

type memberArgs struct {
	// The IP address of the member to receive traffic from the load balancer.
	// Changing this creates a new member.
	Address string `pulumi:"address"`
	// Human-readable name for the member.
	Name *string `pulumi:"name"`
	// The id of the pool that this member will be assigned to.
	PoolId string `pulumi:"poolId"`
	// The port on which to listen for client traffic. It must be set to `0` for gateway
	// load balancers with IP backend server groups associated. It can be left blank because it does not take effect if
	// `anyPortEnable` is set to **true** for a backend server group.
	ProtocolPort *int `pulumi:"protocolPort"`
	// The region in which to create the ELB member resource. If omitted, the the
	// provider-level region will be used. Changing this creates a new member.
	Region *string `pulumi:"region"`
	// The **IPv4 or IPv6 subnet ID** of the subnet in which to access the member.
	// + The IPv4 or IPv6 subnet must be in the same VPC as the subnet of the load balancer.
	// + This parameter must be specified for gateway load balancers. The subnet of the backend server must be in the same
	//   VPC as that of the load balancer, and it must be different from the subnet of the load balancer.
	// + If this parameter is not specified, **cross-VPC backend** has been enabled for the load balancer.
	//   In this case, cross-VPC backend servers must use private IPv4 addresses,
	//   and the protocol of the backend server group must be TCP, HTTP, or HTTPS.
	SubnetId *string `pulumi:"subnetId"`
	// A positive integer value that indicates the relative portion of traffic that this member
	// should receive from the pool. For example, a member with a weight of 10 receives five times as much traffic as a
	// member with a weight of 2.
	Weight *int `pulumi:"weight"`
}

// The set of arguments for constructing a Member resource.
type MemberArgs struct {
	// The IP address of the member to receive traffic from the load balancer.
	// Changing this creates a new member.
	Address pulumi.StringInput
	// Human-readable name for the member.
	Name pulumi.StringPtrInput
	// The id of the pool that this member will be assigned to.
	PoolId pulumi.StringInput
	// The port on which to listen for client traffic. It must be set to `0` for gateway
	// load balancers with IP backend server groups associated. It can be left blank because it does not take effect if
	// `anyPortEnable` is set to **true** for a backend server group.
	ProtocolPort pulumi.IntPtrInput
	// The region in which to create the ELB member resource. If omitted, the the
	// provider-level region will be used. Changing this creates a new member.
	Region pulumi.StringPtrInput
	// The **IPv4 or IPv6 subnet ID** of the subnet in which to access the member.
	// + The IPv4 or IPv6 subnet must be in the same VPC as the subnet of the load balancer.
	// + This parameter must be specified for gateway load balancers. The subnet of the backend server must be in the same
	//   VPC as that of the load balancer, and it must be different from the subnet of the load balancer.
	// + If this parameter is not specified, **cross-VPC backend** has been enabled for the load balancer.
	//   In this case, cross-VPC backend servers must use private IPv4 addresses,
	//   and the protocol of the backend server group must be TCP, HTTP, or HTTPS.
	SubnetId pulumi.StringPtrInput
	// A positive integer value that indicates the relative portion of traffic that this member
	// should receive from the pool. For example, a member with a weight of 10 receives five times as much traffic as a
	// member with a weight of 2.
	Weight pulumi.IntPtrInput
}

func (MemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*memberArgs)(nil)).Elem()
}

type MemberInput interface {
	pulumi.Input

	ToMemberOutput() MemberOutput
	ToMemberOutputWithContext(ctx context.Context) MemberOutput
}

func (*Member) ElementType() reflect.Type {
	return reflect.TypeOf((**Member)(nil)).Elem()
}

func (i *Member) ToMemberOutput() MemberOutput {
	return i.ToMemberOutputWithContext(context.Background())
}

func (i *Member) ToMemberOutputWithContext(ctx context.Context) MemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MemberOutput)
}

// MemberArrayInput is an input type that accepts MemberArray and MemberArrayOutput values.
// You can construct a concrete instance of `MemberArrayInput` via:
//
//	MemberArray{ MemberArgs{...} }
type MemberArrayInput interface {
	pulumi.Input

	ToMemberArrayOutput() MemberArrayOutput
	ToMemberArrayOutputWithContext(context.Context) MemberArrayOutput
}

type MemberArray []MemberInput

func (MemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Member)(nil)).Elem()
}

func (i MemberArray) ToMemberArrayOutput() MemberArrayOutput {
	return i.ToMemberArrayOutputWithContext(context.Background())
}

func (i MemberArray) ToMemberArrayOutputWithContext(ctx context.Context) MemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MemberArrayOutput)
}

// MemberMapInput is an input type that accepts MemberMap and MemberMapOutput values.
// You can construct a concrete instance of `MemberMapInput` via:
//
//	MemberMap{ "key": MemberArgs{...} }
type MemberMapInput interface {
	pulumi.Input

	ToMemberMapOutput() MemberMapOutput
	ToMemberMapOutputWithContext(context.Context) MemberMapOutput
}

type MemberMap map[string]MemberInput

func (MemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Member)(nil)).Elem()
}

func (i MemberMap) ToMemberMapOutput() MemberMapOutput {
	return i.ToMemberMapOutputWithContext(context.Background())
}

func (i MemberMap) ToMemberMapOutputWithContext(ctx context.Context) MemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MemberMapOutput)
}

type MemberOutput struct{ *pulumi.OutputState }

func (MemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Member)(nil)).Elem()
}

func (o MemberOutput) ToMemberOutput() MemberOutput {
	return o
}

func (o MemberOutput) ToMemberOutputWithContext(ctx context.Context) MemberOutput {
	return o
}

// The IP address of the member to receive traffic from the load balancer.
// Changing this creates a new member.
func (o MemberOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v *Member) pulumi.StringOutput { return v.Address }).(pulumi.StringOutput)
}

// The time when the backend server was added. The format is **yyyy-MM-dd'T'HH:mm:ss'Z' (UTC time)**.
func (o MemberOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Member) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The ID of the instance associated with the backend server. If this parameter is left blank, the backend
// server is not a real device. It may be an IP address.
func (o MemberOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Member) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The IP version supported by the backend server. The value can be **v4 (IPv4)** or **v6 (IPv6)**, depending
// on the value of address returned by the system.
func (o MemberOutput) IpVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Member) pulumi.StringOutput { return v.IpVersion }).(pulumi.StringOutput)
}

// The type of the backend server. The value can be:
// + **ip**: IP as backend servers
// + **instance**: ECSs used as backend servers
func (o MemberOutput) MemberType() pulumi.StringOutput {
	return o.ApplyT(func(v *Member) pulumi.StringOutput { return v.MemberType }).(pulumi.StringOutput)
}

// Human-readable name for the member.
func (o MemberOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Member) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The health status of the backend server.
func (o MemberOutput) OperatingStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Member) pulumi.StringOutput { return v.OperatingStatus }).(pulumi.StringOutput)
}

// The id of the pool that this member will be assigned to.
func (o MemberOutput) PoolId() pulumi.StringOutput {
	return o.ApplyT(func(v *Member) pulumi.StringOutput { return v.PoolId }).(pulumi.StringOutput)
}

// The port on which to listen for client traffic. It must be set to `0` for gateway
// load balancers with IP backend server groups associated. It can be left blank because it does not take effect if
// `anyPortEnable` is set to **true** for a backend server group.
func (o MemberOutput) ProtocolPort() pulumi.IntOutput {
	return o.ApplyT(func(v *Member) pulumi.IntOutput { return v.ProtocolPort }).(pulumi.IntOutput)
}

// Why health check fails.
// The reason structure is documented below.
func (o MemberOutput) Reasons() MemberReasonArrayOutput {
	return o.ApplyT(func(v *Member) MemberReasonArrayOutput { return v.Reasons }).(MemberReasonArrayOutput)
}

// The region in which to create the ELB member resource. If omitted, the the
// provider-level region will be used. Changing this creates a new member.
func (o MemberOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Member) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The health status of the backend server if `listenerId` under status is specified. If `listenerId` under
// `status` is not specified, `operatingStatus` of member takes precedence.
// The status structure is documented below.
func (o MemberOutput) Statuses() MemberStatusArrayOutput {
	return o.ApplyT(func(v *Member) MemberStatusArrayOutput { return v.Statuses }).(MemberStatusArrayOutput)
}

// The **IPv4 or IPv6 subnet ID** of the subnet in which to access the member.
//   - The IPv4 or IPv6 subnet must be in the same VPC as the subnet of the load balancer.
//   - This parameter must be specified for gateway load balancers. The subnet of the backend server must be in the same
//     VPC as that of the load balancer, and it must be different from the subnet of the load balancer.
//   - If this parameter is not specified, **cross-VPC backend** has been enabled for the load balancer.
//     In this case, cross-VPC backend servers must use private IPv4 addresses,
//     and the protocol of the backend server group must be TCP, HTTP, or HTTPS.
func (o MemberOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Member) pulumi.StringPtrOutput { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// The time when the backend server was updated. The format is **yyyy-MM-dd'T'HH:mm:ss'Z' (UTC time)**.
func (o MemberOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Member) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// A positive integer value that indicates the relative portion of traffic that this member
// should receive from the pool. For example, a member with a weight of 10 receives five times as much traffic as a
// member with a weight of 2.
func (o MemberOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v *Member) pulumi.IntOutput { return v.Weight }).(pulumi.IntOutput)
}

type MemberArrayOutput struct{ *pulumi.OutputState }

func (MemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Member)(nil)).Elem()
}

func (o MemberArrayOutput) ToMemberArrayOutput() MemberArrayOutput {
	return o
}

func (o MemberArrayOutput) ToMemberArrayOutputWithContext(ctx context.Context) MemberArrayOutput {
	return o
}

func (o MemberArrayOutput) Index(i pulumi.IntInput) MemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Member {
		return vs[0].([]*Member)[vs[1].(int)]
	}).(MemberOutput)
}

type MemberMapOutput struct{ *pulumi.OutputState }

func (MemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Member)(nil)).Elem()
}

func (o MemberMapOutput) ToMemberMapOutput() MemberMapOutput {
	return o
}

func (o MemberMapOutput) ToMemberMapOutputWithContext(ctx context.Context) MemberMapOutput {
	return o
}

func (o MemberMapOutput) MapIndex(k pulumi.StringInput) MemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Member {
		return vs[0].(map[string]*Member)[vs[1].(string)]
	}).(MemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MemberInput)(nil)).Elem(), &Member{})
	pulumi.RegisterInputType(reflect.TypeOf((*MemberArrayInput)(nil)).Elem(), MemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MemberMapInput)(nil)).Elem(), MemberMap{})
	pulumi.RegisterOutputType(MemberOutput{})
	pulumi.RegisterOutputType(MemberArrayOutput{})
	pulumi.RegisterOutputType(MemberMapOutput{})
}
