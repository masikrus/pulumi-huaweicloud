// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dedicatedelb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get the list of ELB L7 policies.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/DedicatedElb"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/DedicatedElb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			policyName := cfg.RequireObject("policyName")
//			_, err := DedicatedElb.GetL7policies(ctx, &dedicatedelb.GetL7policiesArgs{
//				Name: pulumi.StringRef(policyName),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetL7policies(ctx *pulumi.Context, args *GetL7policiesArgs, opts ...pulumi.InvokeOption) (*GetL7policiesResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetL7policiesResult
	err := ctx.Invoke("huaweicloud:DedicatedElb/getL7policies:getL7policies", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getL7policies.
type GetL7policiesArgs struct {
	// Specifies the requests are forwarded. The value can be one of the following:
	// + **REDIRECT_TO_POOL**: Requests are forwarded to another backend server group.
	// + **REDIRECT_TO_LISTENER**: Requests are redirected to an HTTPS listener.
	// + **REDIRECT_TO_URL**: Requests are redirected to another URL.
	// + **FIXED_RESPONSE**: A fixed response body is returned.
	Action *string `pulumi:"action"`
	// Specifies the supplementary information about the forwarding policy.
	Description *string `pulumi:"description"`
	// Specifies the enterprise project ID.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies the forwarding policy ID.
	L7policyId *string `pulumi:"l7policyId"`
	// Specifies the ID of the listener to which the forwarding policy is added.
	ListenerId *string `pulumi:"listenerId"`
	// Specifies the forwarding policy name.
	Name *string `pulumi:"name"`
	// Specifies the forwarding policy priority.
	Priority *int `pulumi:"priority"`
	// Specifies the provisioning status of the forwarding policy.
	ProvisioningStatus *string `pulumi:"provisioningStatus"`
	// Specifies the ID of the listener to which requests are redirected.
	RedirectListenerId *string `pulumi:"redirectListenerId"`
	// Specifies the ID of the backend server group to which requests will be forwarded.
	RedirectPoolId *string `pulumi:"redirectPoolId"`
	// Specifies the region in which to query the data source. If omitted, the provider-level
	// region will be used.
	Region *string `pulumi:"region"`
}

// A collection of values returned by getL7policies.
type GetL7policiesResult struct {
	// The requests will be forwarded.
	Action *string `pulumi:"action"`
	// The supplementary information about the forwarding policy.
	Description *string `pulumi:"description"`
	// The enterprise project ID.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Lists the L7 policies.
	// The l7policies structure is documented below.
	L7policies []GetL7policiesL7policy `pulumi:"l7policies"`
	L7policyId *string                 `pulumi:"l7policyId"`
	// The ID of the listener to which the forwarding policy is added.
	ListenerId *string `pulumi:"listenerId"`
	// The forwarding policy name.
	Name *string `pulumi:"name"`
	// The forwarding policy priority.
	Priority *int `pulumi:"priority"`
	// The provisioning status of the forwarding policy.
	ProvisioningStatus *string `pulumi:"provisioningStatus"`
	// The ID of the listener to which requests are redirected.
	RedirectListenerId *string `pulumi:"redirectListenerId"`
	// The ID of the backend server group that requests will be forwarded to.
	RedirectPoolId *string `pulumi:"redirectPoolId"`
	Region         string  `pulumi:"region"`
}

func GetL7policiesOutput(ctx *pulumi.Context, args GetL7policiesOutputArgs, opts ...pulumi.InvokeOption) GetL7policiesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetL7policiesResult, error) {
			args := v.(GetL7policiesArgs)
			r, err := GetL7policies(ctx, &args, opts...)
			var s GetL7policiesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetL7policiesResultOutput)
}

// A collection of arguments for invoking getL7policies.
type GetL7policiesOutputArgs struct {
	// Specifies the requests are forwarded. The value can be one of the following:
	// + **REDIRECT_TO_POOL**: Requests are forwarded to another backend server group.
	// + **REDIRECT_TO_LISTENER**: Requests are redirected to an HTTPS listener.
	// + **REDIRECT_TO_URL**: Requests are redirected to another URL.
	// + **FIXED_RESPONSE**: A fixed response body is returned.
	Action pulumi.StringPtrInput `pulumi:"action"`
	// Specifies the supplementary information about the forwarding policy.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specifies the enterprise project ID.
	EnterpriseProjectId pulumi.StringPtrInput `pulumi:"enterpriseProjectId"`
	// Specifies the forwarding policy ID.
	L7policyId pulumi.StringPtrInput `pulumi:"l7policyId"`
	// Specifies the ID of the listener to which the forwarding policy is added.
	ListenerId pulumi.StringPtrInput `pulumi:"listenerId"`
	// Specifies the forwarding policy name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies the forwarding policy priority.
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// Specifies the provisioning status of the forwarding policy.
	ProvisioningStatus pulumi.StringPtrInput `pulumi:"provisioningStatus"`
	// Specifies the ID of the listener to which requests are redirected.
	RedirectListenerId pulumi.StringPtrInput `pulumi:"redirectListenerId"`
	// Specifies the ID of the backend server group to which requests will be forwarded.
	RedirectPoolId pulumi.StringPtrInput `pulumi:"redirectPoolId"`
	// Specifies the region in which to query the data source. If omitted, the provider-level
	// region will be used.
	Region pulumi.StringPtrInput `pulumi:"region"`
}

func (GetL7policiesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetL7policiesArgs)(nil)).Elem()
}

// A collection of values returned by getL7policies.
type GetL7policiesResultOutput struct{ *pulumi.OutputState }

func (GetL7policiesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetL7policiesResult)(nil)).Elem()
}

func (o GetL7policiesResultOutput) ToGetL7policiesResultOutput() GetL7policiesResultOutput {
	return o
}

func (o GetL7policiesResultOutput) ToGetL7policiesResultOutputWithContext(ctx context.Context) GetL7policiesResultOutput {
	return o
}

// The requests will be forwarded.
func (o GetL7policiesResultOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetL7policiesResult) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// The supplementary information about the forwarding policy.
func (o GetL7policiesResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetL7policiesResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The enterprise project ID.
func (o GetL7policiesResultOutput) EnterpriseProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetL7policiesResult) *string { return v.EnterpriseProjectId }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetL7policiesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetL7policiesResult) string { return v.Id }).(pulumi.StringOutput)
}

// Lists the L7 policies.
// The l7policies structure is documented below.
func (o GetL7policiesResultOutput) L7policies() GetL7policiesL7policyArrayOutput {
	return o.ApplyT(func(v GetL7policiesResult) []GetL7policiesL7policy { return v.L7policies }).(GetL7policiesL7policyArrayOutput)
}

func (o GetL7policiesResultOutput) L7policyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetL7policiesResult) *string { return v.L7policyId }).(pulumi.StringPtrOutput)
}

// The ID of the listener to which the forwarding policy is added.
func (o GetL7policiesResultOutput) ListenerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetL7policiesResult) *string { return v.ListenerId }).(pulumi.StringPtrOutput)
}

// The forwarding policy name.
func (o GetL7policiesResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetL7policiesResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The forwarding policy priority.
func (o GetL7policiesResultOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetL7policiesResult) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// The provisioning status of the forwarding policy.
func (o GetL7policiesResultOutput) ProvisioningStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetL7policiesResult) *string { return v.ProvisioningStatus }).(pulumi.StringPtrOutput)
}

// The ID of the listener to which requests are redirected.
func (o GetL7policiesResultOutput) RedirectListenerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetL7policiesResult) *string { return v.RedirectListenerId }).(pulumi.StringPtrOutput)
}

// The ID of the backend server group that requests will be forwarded to.
func (o GetL7policiesResultOutput) RedirectPoolId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetL7policiesResult) *string { return v.RedirectPoolId }).(pulumi.StringPtrOutput)
}

func (o GetL7policiesResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetL7policiesResult) string { return v.Region }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetL7policiesResultOutput{})
}
