// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dedicatedelb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get the list of active standby ELB pools.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/DedicatedElb"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/DedicatedElb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			poolName := cfg.RequireObject("poolName")
//			_, err := DedicatedElb.GetActiveStandbyPools(ctx, &dedicatedelb.GetActiveStandbyPoolsArgs{
//				Name: pulumi.StringRef(poolName),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetActiveStandbyPools(ctx *pulumi.Context, args *GetActiveStandbyPoolsArgs, opts ...pulumi.InvokeOption) (*GetActiveStandbyPoolsResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetActiveStandbyPoolsResult
	err := ctx.Invoke("huaweicloud:DedicatedElb/getActiveStandbyPools:getActiveStandbyPools", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getActiveStandbyPools.
type GetActiveStandbyPoolsArgs struct {
	// Specifies whether delayed logout is enabled. Value options:
	// + **false**: Disable this option.
	// + **true**: Enable this option.
	ConnectionDrain *string `pulumi:"connectionDrain"`
	// Specifies supplementary information about the active-standby pool.
	Description *string `pulumi:"description"`
	// Specifies the ID of the health check configured for the active-standby pool.
	HealthmonitorId *string `pulumi:"healthmonitorId"`
	// Specifies the IP address version supported by the pool.
	IpVersion *string `pulumi:"ipVersion"`
	// Specifies the load balancing algorithm used by the load balancer to route requests
	// to backend servers in the associated pool. Value options:
	// + **ROUND_ROBIN**: weighted round robin.
	// + **LEAST_CONNECTIONS**: weighted least connections.
	// + **SOURCE_IP**: source IP hash.
	// + **QUIC_CID**: connection ID.
	LbAlgorithm *string `pulumi:"lbAlgorithm"`
	// Specifies the ID of the listener to which the forwarding policy is added.
	ListenerId *string `pulumi:"listenerId"`
	// Specifies the ID of the load balancer with which the active-standby pool is
	// associated.
	LoadbalancerId *string `pulumi:"loadbalancerId"`
	// Specifies the private IP address bound to the member. This parameter is used
	// only as a query condition and is not included in the response.
	MemberAddress *string `pulumi:"memberAddress"`
	// Specifies the ID of the ECS used as the member. This parameter is used only
	// as a query condition and is not included in the response.
	MemberInstanceId *string `pulumi:"memberInstanceId"`
	// Specifies the name of the active-standby pool.
	Name *string `pulumi:"name"`
	// Specifies the ID of the active-standby pool.
	PoolId *string `pulumi:"poolId"`
	// Specifies the protocol used by the active-standby pool to receive requests from the
	// load balancer. Value options: **TCP**, **UDP**, **QUIC** or **TLS**.
	Protocol *string `pulumi:"protocol"`
	// Specifies the region in which to query the data source.
	// If omitted, the provider-level region will be used.
	Region *string `pulumi:"region"`
	// Specifies the type of the active-standby pool.
	// The valid values are as follows:
	// + **instance**: Any type of backend servers can be added.
	// + **ip**: Only IP as backend servers can be added.
	Type *string `pulumi:"type"`
	// Specifies the ID of the VPC where the active-standby pool works.
	VpcId *string `pulumi:"vpcId"`
}

// A collection of values returned by getActiveStandbyPools.
type GetActiveStandbyPoolsResult struct {
	ConnectionDrain *string `pulumi:"connectionDrain"`
	// The description of the active-standby pool.
	Description     *string `pulumi:"description"`
	HealthmonitorId *string `pulumi:"healthmonitorId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The IP version supported by the member.
	IpVersion *string `pulumi:"ipVersion"`
	// The load balancing algorithm used by the load balancer to route requests to backend servers in the
	// associated pool.
	LbAlgorithm *string `pulumi:"lbAlgorithm"`
	// The ID of the listener associated with the backend server.
	ListenerId       *string `pulumi:"listenerId"`
	LoadbalancerId   *string `pulumi:"loadbalancerId"`
	MemberAddress    *string `pulumi:"memberAddress"`
	MemberInstanceId *string `pulumi:"memberInstanceId"`
	// The health check name.
	Name   *string `pulumi:"name"`
	PoolId *string `pulumi:"poolId"`
	// The pool list. For details, see data structure of the pool field.
	// The pools structure is documented below.
	Pools []GetActiveStandbyPoolsPool `pulumi:"pools"`
	// The protocol used by the active-standby pool to receive requests.
	Protocol *string `pulumi:"protocol"`
	Region   *string `pulumi:"region"`
	// The health check protocol.
	Type *string `pulumi:"type"`
	// The ID of the VPC where the active-standby pool works.
	VpcId *string `pulumi:"vpcId"`
}

func GetActiveStandbyPoolsOutput(ctx *pulumi.Context, args GetActiveStandbyPoolsOutputArgs, opts ...pulumi.InvokeOption) GetActiveStandbyPoolsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetActiveStandbyPoolsResult, error) {
			args := v.(GetActiveStandbyPoolsArgs)
			r, err := GetActiveStandbyPools(ctx, &args, opts...)
			var s GetActiveStandbyPoolsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetActiveStandbyPoolsResultOutput)
}

// A collection of arguments for invoking getActiveStandbyPools.
type GetActiveStandbyPoolsOutputArgs struct {
	// Specifies whether delayed logout is enabled. Value options:
	// + **false**: Disable this option.
	// + **true**: Enable this option.
	ConnectionDrain pulumi.StringPtrInput `pulumi:"connectionDrain"`
	// Specifies supplementary information about the active-standby pool.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specifies the ID of the health check configured for the active-standby pool.
	HealthmonitorId pulumi.StringPtrInput `pulumi:"healthmonitorId"`
	// Specifies the IP address version supported by the pool.
	IpVersion pulumi.StringPtrInput `pulumi:"ipVersion"`
	// Specifies the load balancing algorithm used by the load balancer to route requests
	// to backend servers in the associated pool. Value options:
	// + **ROUND_ROBIN**: weighted round robin.
	// + **LEAST_CONNECTIONS**: weighted least connections.
	// + **SOURCE_IP**: source IP hash.
	// + **QUIC_CID**: connection ID.
	LbAlgorithm pulumi.StringPtrInput `pulumi:"lbAlgorithm"`
	// Specifies the ID of the listener to which the forwarding policy is added.
	ListenerId pulumi.StringPtrInput `pulumi:"listenerId"`
	// Specifies the ID of the load balancer with which the active-standby pool is
	// associated.
	LoadbalancerId pulumi.StringPtrInput `pulumi:"loadbalancerId"`
	// Specifies the private IP address bound to the member. This parameter is used
	// only as a query condition and is not included in the response.
	MemberAddress pulumi.StringPtrInput `pulumi:"memberAddress"`
	// Specifies the ID of the ECS used as the member. This parameter is used only
	// as a query condition and is not included in the response.
	MemberInstanceId pulumi.StringPtrInput `pulumi:"memberInstanceId"`
	// Specifies the name of the active-standby pool.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies the ID of the active-standby pool.
	PoolId pulumi.StringPtrInput `pulumi:"poolId"`
	// Specifies the protocol used by the active-standby pool to receive requests from the
	// load balancer. Value options: **TCP**, **UDP**, **QUIC** or **TLS**.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// Specifies the region in which to query the data source.
	// If omitted, the provider-level region will be used.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Specifies the type of the active-standby pool.
	// The valid values are as follows:
	// + **instance**: Any type of backend servers can be added.
	// + **ip**: Only IP as backend servers can be added.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Specifies the ID of the VPC where the active-standby pool works.
	VpcId pulumi.StringPtrInput `pulumi:"vpcId"`
}

func (GetActiveStandbyPoolsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetActiveStandbyPoolsArgs)(nil)).Elem()
}

// A collection of values returned by getActiveStandbyPools.
type GetActiveStandbyPoolsResultOutput struct{ *pulumi.OutputState }

func (GetActiveStandbyPoolsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetActiveStandbyPoolsResult)(nil)).Elem()
}

func (o GetActiveStandbyPoolsResultOutput) ToGetActiveStandbyPoolsResultOutput() GetActiveStandbyPoolsResultOutput {
	return o
}

func (o GetActiveStandbyPoolsResultOutput) ToGetActiveStandbyPoolsResultOutputWithContext(ctx context.Context) GetActiveStandbyPoolsResultOutput {
	return o
}

func (o GetActiveStandbyPoolsResultOutput) ConnectionDrain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetActiveStandbyPoolsResult) *string { return v.ConnectionDrain }).(pulumi.StringPtrOutput)
}

// The description of the active-standby pool.
func (o GetActiveStandbyPoolsResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetActiveStandbyPoolsResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o GetActiveStandbyPoolsResultOutput) HealthmonitorId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetActiveStandbyPoolsResult) *string { return v.HealthmonitorId }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetActiveStandbyPoolsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetActiveStandbyPoolsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The IP version supported by the member.
func (o GetActiveStandbyPoolsResultOutput) IpVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetActiveStandbyPoolsResult) *string { return v.IpVersion }).(pulumi.StringPtrOutput)
}

// The load balancing algorithm used by the load balancer to route requests to backend servers in the
// associated pool.
func (o GetActiveStandbyPoolsResultOutput) LbAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetActiveStandbyPoolsResult) *string { return v.LbAlgorithm }).(pulumi.StringPtrOutput)
}

// The ID of the listener associated with the backend server.
func (o GetActiveStandbyPoolsResultOutput) ListenerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetActiveStandbyPoolsResult) *string { return v.ListenerId }).(pulumi.StringPtrOutput)
}

func (o GetActiveStandbyPoolsResultOutput) LoadbalancerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetActiveStandbyPoolsResult) *string { return v.LoadbalancerId }).(pulumi.StringPtrOutput)
}

func (o GetActiveStandbyPoolsResultOutput) MemberAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetActiveStandbyPoolsResult) *string { return v.MemberAddress }).(pulumi.StringPtrOutput)
}

func (o GetActiveStandbyPoolsResultOutput) MemberInstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetActiveStandbyPoolsResult) *string { return v.MemberInstanceId }).(pulumi.StringPtrOutput)
}

// The health check name.
func (o GetActiveStandbyPoolsResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetActiveStandbyPoolsResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o GetActiveStandbyPoolsResultOutput) PoolId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetActiveStandbyPoolsResult) *string { return v.PoolId }).(pulumi.StringPtrOutput)
}

// The pool list. For details, see data structure of the pool field.
// The pools structure is documented below.
func (o GetActiveStandbyPoolsResultOutput) Pools() GetActiveStandbyPoolsPoolArrayOutput {
	return o.ApplyT(func(v GetActiveStandbyPoolsResult) []GetActiveStandbyPoolsPool { return v.Pools }).(GetActiveStandbyPoolsPoolArrayOutput)
}

// The protocol used by the active-standby pool to receive requests.
func (o GetActiveStandbyPoolsResultOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetActiveStandbyPoolsResult) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

func (o GetActiveStandbyPoolsResultOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetActiveStandbyPoolsResult) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The health check protocol.
func (o GetActiveStandbyPoolsResultOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetActiveStandbyPoolsResult) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The ID of the VPC where the active-standby pool works.
func (o GetActiveStandbyPoolsResultOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetActiveStandbyPoolsResult) *string { return v.VpcId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetActiveStandbyPoolsResultOutput{})
}
