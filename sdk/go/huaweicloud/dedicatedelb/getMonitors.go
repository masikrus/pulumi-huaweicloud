// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dedicatedelb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get the list of ELB monitors.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/DedicatedElb"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/DedicatedElb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			domainName := cfg.RequireObject("domainName")
//			_, err := DedicatedElb.GetMonitors(ctx, &dedicatedelb.GetMonitorsArgs{
//				DomainName: pulumi.StringRef(domainName),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetMonitors(ctx *pulumi.Context, args *GetMonitorsArgs, opts ...pulumi.InvokeOption) (*GetMonitorsResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetMonitorsResult
	err := ctx.Invoke("huaweicloud:DedicatedElb/getMonitors:getMonitors", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMonitors.
type GetMonitorsArgs struct {
	// Specifies the domain name to which HTTP requests are sent during the health check.
	// The value can be digits, letters, hyphens (-), or periods (.) and must start with a digit or letter.
	DomainName *string `pulumi:"domainName"`
	// Specifies the enterprise project ID.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies the HTTP method. Value options: **GET**, **HEAD**, **POST**.
	HttpMethod *string `pulumi:"httpMethod"`
	// Specifies the interval between health checks, in seconds.\
	// The value ranges from `1` to `50`.
	Interval *int `pulumi:"interval"`
	// Specifies the number of consecutive health checks when the health check result of a
	// backend server changes from **OFFLINE** to **ONLINE**.
	MaxRetries *int `pulumi:"maxRetries"`
	// Specifies the number of consecutive health checks when the health check result of
	// a backend server changes from **ONLINE** to **OFFLINE**. The value ranges from `1` to `10`.
	MaxRetriesDown *int `pulumi:"maxRetriesDown"`
	// Specifies the health check ID.
	MonitorId *string `pulumi:"monitorId"`
	// Specifies the health check name.
	Name *string `pulumi:"name"`
	// Specifies the ID of backend server groups for which the health check is configured.
	PoolId *string `pulumi:"poolId"`
	// Specifies the port used for the health check.
	Port *int `pulumi:"port"`
	// Specifies the health check protocol. The value can be **TCP**, **UDP_CONNECT**,
	// **HTTP**, **HTTPS**, **GRPC** or **TLS**.
	Protocol *string `pulumi:"protocol"`
	// Specifies the region in which to query the data source. If omitted, the provider-level
	// region will be used.
	Region *string `pulumi:"region"`
	// Specifies the expected HTTP status code. This parameter will take effect only when
	// type is set to **HTTP** or **HTTPS**.Value options:
	// + A specific value, for example, **200**
	// + A list of values that are separated with commas (,), for example, **200**, **202**
	// + A value range, for example, **200**-**204**
	StatusCode *string `pulumi:"statusCode"`
	// Specifies the maximum time required for waiting for a response from the health check, in
	// seconds.
	Timeout *int `pulumi:"timeout"`
	// Specifies the HTTP request path for the health check. The value must start with a slash
	// (/), and the default value is **/**. This parameter is available only when type is set to **HTTP**.
	UrlPath *string `pulumi:"urlPath"`
}

// A collection of values returned by getMonitors.
type GetMonitorsResult struct {
	// The domain name that HTTP requests are sent to during the health check.
	DomainName          *string `pulumi:"domainName"`
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// The HTTP method
	HttpMethod *string `pulumi:"httpMethod"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The interval between health checks, in seconds.
	Interval *int `pulumi:"interval"`
	// The number of consecutive health checks when the health check result of a backend server changes from
	// **OFFLINE** to **ONLINE**.
	MaxRetries *int `pulumi:"maxRetries"`
	// The number of consecutive health checks when the health check result of a backend server changes from
	// **ONLINE** to **OFFLINE**.
	MaxRetriesDown *int    `pulumi:"maxRetriesDown"`
	MonitorId      *string `pulumi:"monitorId"`
	// Lists the monitors.
	// The monitors structure is documented below.
	Monitors []GetMonitorsMonitor `pulumi:"monitors"`
	// The health check name.
	Name *string `pulumi:"name"`
	// The ID of backend server groups for which the health check is configured.
	PoolId *string `pulumi:"poolId"`
	// The port used for the health check.
	Port *int `pulumi:"port"`
	// The health check protocol.
	Protocol *string `pulumi:"protocol"`
	Region   string  `pulumi:"region"`
	// The expected HTTP status code.
	StatusCode *string `pulumi:"statusCode"`
	// The maximum time required for waiting for a response from the health check, in seconds.
	Timeout *int `pulumi:"timeout"`
	// The HTTP request path for the health check.
	UrlPath *string `pulumi:"urlPath"`
}

func GetMonitorsOutput(ctx *pulumi.Context, args GetMonitorsOutputArgs, opts ...pulumi.InvokeOption) GetMonitorsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetMonitorsResult, error) {
			args := v.(GetMonitorsArgs)
			r, err := GetMonitors(ctx, &args, opts...)
			var s GetMonitorsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetMonitorsResultOutput)
}

// A collection of arguments for invoking getMonitors.
type GetMonitorsOutputArgs struct {
	// Specifies the domain name to which HTTP requests are sent during the health check.
	// The value can be digits, letters, hyphens (-), or periods (.) and must start with a digit or letter.
	DomainName pulumi.StringPtrInput `pulumi:"domainName"`
	// Specifies the enterprise project ID.
	EnterpriseProjectId pulumi.StringPtrInput `pulumi:"enterpriseProjectId"`
	// Specifies the HTTP method. Value options: **GET**, **HEAD**, **POST**.
	HttpMethod pulumi.StringPtrInput `pulumi:"httpMethod"`
	// Specifies the interval between health checks, in seconds.\
	// The value ranges from `1` to `50`.
	Interval pulumi.IntPtrInput `pulumi:"interval"`
	// Specifies the number of consecutive health checks when the health check result of a
	// backend server changes from **OFFLINE** to **ONLINE**.
	MaxRetries pulumi.IntPtrInput `pulumi:"maxRetries"`
	// Specifies the number of consecutive health checks when the health check result of
	// a backend server changes from **ONLINE** to **OFFLINE**. The value ranges from `1` to `10`.
	MaxRetriesDown pulumi.IntPtrInput `pulumi:"maxRetriesDown"`
	// Specifies the health check ID.
	MonitorId pulumi.StringPtrInput `pulumi:"monitorId"`
	// Specifies the health check name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies the ID of backend server groups for which the health check is configured.
	PoolId pulumi.StringPtrInput `pulumi:"poolId"`
	// Specifies the port used for the health check.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Specifies the health check protocol. The value can be **TCP**, **UDP_CONNECT**,
	// **HTTP**, **HTTPS**, **GRPC** or **TLS**.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// Specifies the region in which to query the data source. If omitted, the provider-level
	// region will be used.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Specifies the expected HTTP status code. This parameter will take effect only when
	// type is set to **HTTP** or **HTTPS**.Value options:
	// + A specific value, for example, **200**
	// + A list of values that are separated with commas (,), for example, **200**, **202**
	// + A value range, for example, **200**-**204**
	StatusCode pulumi.StringPtrInput `pulumi:"statusCode"`
	// Specifies the maximum time required for waiting for a response from the health check, in
	// seconds.
	Timeout pulumi.IntPtrInput `pulumi:"timeout"`
	// Specifies the HTTP request path for the health check. The value must start with a slash
	// (/), and the default value is **/**. This parameter is available only when type is set to **HTTP**.
	UrlPath pulumi.StringPtrInput `pulumi:"urlPath"`
}

func (GetMonitorsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMonitorsArgs)(nil)).Elem()
}

// A collection of values returned by getMonitors.
type GetMonitorsResultOutput struct{ *pulumi.OutputState }

func (GetMonitorsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMonitorsResult)(nil)).Elem()
}

func (o GetMonitorsResultOutput) ToGetMonitorsResultOutput() GetMonitorsResultOutput {
	return o
}

func (o GetMonitorsResultOutput) ToGetMonitorsResultOutputWithContext(ctx context.Context) GetMonitorsResultOutput {
	return o
}

// The domain name that HTTP requests are sent to during the health check.
func (o GetMonitorsResultOutput) DomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMonitorsResult) *string { return v.DomainName }).(pulumi.StringPtrOutput)
}

func (o GetMonitorsResultOutput) EnterpriseProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMonitorsResult) *string { return v.EnterpriseProjectId }).(pulumi.StringPtrOutput)
}

// The HTTP method
func (o GetMonitorsResultOutput) HttpMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMonitorsResult) *string { return v.HttpMethod }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetMonitorsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetMonitorsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The interval between health checks, in seconds.
func (o GetMonitorsResultOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetMonitorsResult) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

// The number of consecutive health checks when the health check result of a backend server changes from
// **OFFLINE** to **ONLINE**.
func (o GetMonitorsResultOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetMonitorsResult) *int { return v.MaxRetries }).(pulumi.IntPtrOutput)
}

// The number of consecutive health checks when the health check result of a backend server changes from
// **ONLINE** to **OFFLINE**.
func (o GetMonitorsResultOutput) MaxRetriesDown() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetMonitorsResult) *int { return v.MaxRetriesDown }).(pulumi.IntPtrOutput)
}

func (o GetMonitorsResultOutput) MonitorId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMonitorsResult) *string { return v.MonitorId }).(pulumi.StringPtrOutput)
}

// Lists the monitors.
// The monitors structure is documented below.
func (o GetMonitorsResultOutput) Monitors() GetMonitorsMonitorArrayOutput {
	return o.ApplyT(func(v GetMonitorsResult) []GetMonitorsMonitor { return v.Monitors }).(GetMonitorsMonitorArrayOutput)
}

// The health check name.
func (o GetMonitorsResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMonitorsResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The ID of backend server groups for which the health check is configured.
func (o GetMonitorsResultOutput) PoolId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMonitorsResult) *string { return v.PoolId }).(pulumi.StringPtrOutput)
}

// The port used for the health check.
func (o GetMonitorsResultOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetMonitorsResult) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The health check protocol.
func (o GetMonitorsResultOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMonitorsResult) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

func (o GetMonitorsResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetMonitorsResult) string { return v.Region }).(pulumi.StringOutput)
}

// The expected HTTP status code.
func (o GetMonitorsResultOutput) StatusCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMonitorsResult) *string { return v.StatusCode }).(pulumi.StringPtrOutput)
}

// The maximum time required for waiting for a response from the health check, in seconds.
func (o GetMonitorsResultOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetMonitorsResult) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

// The HTTP request path for the health check.
func (o GetMonitorsResultOutput) UrlPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMonitorsResult) *string { return v.UrlPath }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetMonitorsResultOutput{})
}
