// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ims

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an IMS image copy resource within HuaweiCloud.
//
// ## Example Usage
// ### Copy image within region
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Ims"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			sourceImageId := cfg.RequireObject("sourceImageId")
//			name := cfg.RequireObject("name")
//			kmsKeyId := cfg.RequireObject("kmsKeyId")
//			_, err := Ims.NewImageCopy(ctx, "test", &Ims.ImageCopyArgs{
//				SourceImageId: pulumi.Any(sourceImageId),
//				KmsKeyId:      pulumi.Any(kmsKeyId),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Copy image cross region
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Ims"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			sourceImageId := cfg.RequireObject("sourceImageId")
//			name := cfg.RequireObject("name")
//			targetRegion := cfg.RequireObject("targetRegion")
//			agencyName := cfg.RequireObject("agencyName")
//			_, err := Ims.NewImageCopy(ctx, "test", &Ims.ImageCopyArgs{
//				SourceImageId: pulumi.Any(sourceImageId),
//				TargetRegion:  pulumi.Any(targetRegion),
//				AgencyName:    pulumi.Any(agencyName),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ImageCopy struct {
	pulumi.CustomResourceState

	// The time when the image status changes to active, in RFC3339 format.
	ActiveAt pulumi.StringOutput `pulumi:"activeAt"`
	// Specifies the agency name. It is required in the cross-region scene.
	// Changing this parameter will create a new resource.
	AgencyName pulumi.StringOutput `pulumi:"agencyName"`
	// checksum is deprecated
	Checksum pulumi.StringOutput `pulumi:"checksum"`
	// The creation time of the image, in RFC3339 format.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Indicates the image source.
	// The format is **image,region,source_image_id**, e.g. **image,cn-north-4,xxxxxx**.
	DataOrigin pulumi.StringOutput `pulumi:"dataOrigin"`
	// Specifies the description of the copy image.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Indicates the image file format.
	// The value can be **zvhd2**, **vhd**, **zvhd**, **raw**, **qcow2**, or **iso**.
	DiskFormat pulumi.StringOutput `pulumi:"diskFormat"`
	// Specifies the enterprise project ID of the image.
	// Only copying scene within a region is supported, for enterprise users, if omitted, default enterprise project will
	// be used.
	EnterpriseProjectId pulumi.StringOutput `pulumi:"enterpriseProjectId"`
	// Indicates the size(bytes) of the image file.
	ImageSize pulumi.StringOutput `pulumi:"imageSize"`
	// Indicates the ID of the ECS that needs to be converted into an image.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Specifies the master key used for encrypting an image.
	// Only copying scene within a region is supported. Changing this parameter will create a new resource.
	KmsKeyId pulumi.StringOutput `pulumi:"kmsKeyId"`
	// Specifies the maximum memory of the copy image in the unit of MB.
	MaxRam pulumi.IntOutput `pulumi:"maxRam"`
	// The minimum disk space required to run an image, in GB unit.
	MinDisk pulumi.IntOutput `pulumi:"minDisk"`
	// Specifies the minimum memory of the copy image in the unit of MB. The default value is
	// `0`, indicating that the memory is not restricted.
	MinRam pulumi.IntOutput `pulumi:"minRam"`
	// Specifies the name of the copy image. The name can contain `1` to `128` characters,
	// only Chinese and English letters, digits, underscore (_), hyphens (-), dots (.) and space are allowed, but it cannot
	// start or end with a space.
	Name pulumi.StringOutput `pulumi:"name"`
	// Indicates the OS version.
	OsVersion pulumi.StringOutput `pulumi:"osVersion"`
	// Specifies the region to which the source image belongs.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the ID of the copied image.
	// Changing this parameter will create a new resource.
	SourceImageId pulumi.StringOutput `pulumi:"sourceImageId"`
	// Indicates the status of the image. The value can be **active**, **queued**, **saving**, **deleted**,
	// or **killed*, only image with a status of **active** can be used.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the key/value pairs to associate with the copy image.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Specifies the target region name.
	// If specified, it means cross-region replication.
	TargetRegion pulumi.StringOutput `pulumi:"targetRegion"`
	// The last update time of the image, in RFC3339 format.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// Specifies the ID of the vault. It is used in the cross-region scene, it is
	// mandatory if you are replicating a full-ECS image, and the region to which the vault belongs must be consistent with
	// the value of `targetRegion`.
	// Changing this parameter will create a new resource.
	VaultId pulumi.StringOutput `pulumi:"vaultId"`
	// Indicates whether the image is visible to other tenants.
	Visibility pulumi.StringOutput `pulumi:"visibility"`
}

// NewImageCopy registers a new resource with the given unique name, arguments, and options.
func NewImageCopy(ctx *pulumi.Context,
	name string, args *ImageCopyArgs, opts ...pulumi.ResourceOption) (*ImageCopy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SourceImageId == nil {
		return nil, errors.New("invalid value for required argument 'SourceImageId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ImageCopy
	err := ctx.RegisterResource("huaweicloud:Ims/imageCopy:ImageCopy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImageCopy gets an existing ImageCopy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImageCopy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImageCopyState, opts ...pulumi.ResourceOption) (*ImageCopy, error) {
	var resource ImageCopy
	err := ctx.ReadResource("huaweicloud:Ims/imageCopy:ImageCopy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ImageCopy resources.
type imageCopyState struct {
	// The time when the image status changes to active, in RFC3339 format.
	ActiveAt *string `pulumi:"activeAt"`
	// Specifies the agency name. It is required in the cross-region scene.
	// Changing this parameter will create a new resource.
	AgencyName *string `pulumi:"agencyName"`
	// checksum is deprecated
	Checksum *string `pulumi:"checksum"`
	// The creation time of the image, in RFC3339 format.
	CreatedAt *string `pulumi:"createdAt"`
	// Indicates the image source.
	// The format is **image,region,source_image_id**, e.g. **image,cn-north-4,xxxxxx**.
	DataOrigin *string `pulumi:"dataOrigin"`
	// Specifies the description of the copy image.
	Description *string `pulumi:"description"`
	// Indicates the image file format.
	// The value can be **zvhd2**, **vhd**, **zvhd**, **raw**, **qcow2**, or **iso**.
	DiskFormat *string `pulumi:"diskFormat"`
	// Specifies the enterprise project ID of the image.
	// Only copying scene within a region is supported, for enterprise users, if omitted, default enterprise project will
	// be used.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Indicates the size(bytes) of the image file.
	ImageSize *string `pulumi:"imageSize"`
	// Indicates the ID of the ECS that needs to be converted into an image.
	InstanceId *string `pulumi:"instanceId"`
	// Specifies the master key used for encrypting an image.
	// Only copying scene within a region is supported. Changing this parameter will create a new resource.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// Specifies the maximum memory of the copy image in the unit of MB.
	MaxRam *int `pulumi:"maxRam"`
	// The minimum disk space required to run an image, in GB unit.
	MinDisk *int `pulumi:"minDisk"`
	// Specifies the minimum memory of the copy image in the unit of MB. The default value is
	// `0`, indicating that the memory is not restricted.
	MinRam *int `pulumi:"minRam"`
	// Specifies the name of the copy image. The name can contain `1` to `128` characters,
	// only Chinese and English letters, digits, underscore (_), hyphens (-), dots (.) and space are allowed, but it cannot
	// start or end with a space.
	Name *string `pulumi:"name"`
	// Indicates the OS version.
	OsVersion *string `pulumi:"osVersion"`
	// Specifies the region to which the source image belongs.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the ID of the copied image.
	// Changing this parameter will create a new resource.
	SourceImageId *string `pulumi:"sourceImageId"`
	// Indicates the status of the image. The value can be **active**, **queued**, **saving**, **deleted**,
	// or **killed*, only image with a status of **active** can be used.
	Status *string `pulumi:"status"`
	// Specifies the key/value pairs to associate with the copy image.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the target region name.
	// If specified, it means cross-region replication.
	TargetRegion *string `pulumi:"targetRegion"`
	// The last update time of the image, in RFC3339 format.
	UpdatedAt *string `pulumi:"updatedAt"`
	// Specifies the ID of the vault. It is used in the cross-region scene, it is
	// mandatory if you are replicating a full-ECS image, and the region to which the vault belongs must be consistent with
	// the value of `targetRegion`.
	// Changing this parameter will create a new resource.
	VaultId *string `pulumi:"vaultId"`
	// Indicates whether the image is visible to other tenants.
	Visibility *string `pulumi:"visibility"`
}

type ImageCopyState struct {
	// The time when the image status changes to active, in RFC3339 format.
	ActiveAt pulumi.StringPtrInput
	// Specifies the agency name. It is required in the cross-region scene.
	// Changing this parameter will create a new resource.
	AgencyName pulumi.StringPtrInput
	// checksum is deprecated
	Checksum pulumi.StringPtrInput
	// The creation time of the image, in RFC3339 format.
	CreatedAt pulumi.StringPtrInput
	// Indicates the image source.
	// The format is **image,region,source_image_id**, e.g. **image,cn-north-4,xxxxxx**.
	DataOrigin pulumi.StringPtrInput
	// Specifies the description of the copy image.
	Description pulumi.StringPtrInput
	// Indicates the image file format.
	// The value can be **zvhd2**, **vhd**, **zvhd**, **raw**, **qcow2**, or **iso**.
	DiskFormat pulumi.StringPtrInput
	// Specifies the enterprise project ID of the image.
	// Only copying scene within a region is supported, for enterprise users, if omitted, default enterprise project will
	// be used.
	EnterpriseProjectId pulumi.StringPtrInput
	// Indicates the size(bytes) of the image file.
	ImageSize pulumi.StringPtrInput
	// Indicates the ID of the ECS that needs to be converted into an image.
	InstanceId pulumi.StringPtrInput
	// Specifies the master key used for encrypting an image.
	// Only copying scene within a region is supported. Changing this parameter will create a new resource.
	KmsKeyId pulumi.StringPtrInput
	// Specifies the maximum memory of the copy image in the unit of MB.
	MaxRam pulumi.IntPtrInput
	// The minimum disk space required to run an image, in GB unit.
	MinDisk pulumi.IntPtrInput
	// Specifies the minimum memory of the copy image in the unit of MB. The default value is
	// `0`, indicating that the memory is not restricted.
	MinRam pulumi.IntPtrInput
	// Specifies the name of the copy image. The name can contain `1` to `128` characters,
	// only Chinese and English letters, digits, underscore (_), hyphens (-), dots (.) and space are allowed, but it cannot
	// start or end with a space.
	Name pulumi.StringPtrInput
	// Indicates the OS version.
	OsVersion pulumi.StringPtrInput
	// Specifies the region to which the source image belongs.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the ID of the copied image.
	// Changing this parameter will create a new resource.
	SourceImageId pulumi.StringPtrInput
	// Indicates the status of the image. The value can be **active**, **queued**, **saving**, **deleted**,
	// or **killed*, only image with a status of **active** can be used.
	Status pulumi.StringPtrInput
	// Specifies the key/value pairs to associate with the copy image.
	Tags pulumi.StringMapInput
	// Specifies the target region name.
	// If specified, it means cross-region replication.
	TargetRegion pulumi.StringPtrInput
	// The last update time of the image, in RFC3339 format.
	UpdatedAt pulumi.StringPtrInput
	// Specifies the ID of the vault. It is used in the cross-region scene, it is
	// mandatory if you are replicating a full-ECS image, and the region to which the vault belongs must be consistent with
	// the value of `targetRegion`.
	// Changing this parameter will create a new resource.
	VaultId pulumi.StringPtrInput
	// Indicates whether the image is visible to other tenants.
	Visibility pulumi.StringPtrInput
}

func (ImageCopyState) ElementType() reflect.Type {
	return reflect.TypeOf((*imageCopyState)(nil)).Elem()
}

type imageCopyArgs struct {
	// Specifies the agency name. It is required in the cross-region scene.
	// Changing this parameter will create a new resource.
	AgencyName *string `pulumi:"agencyName"`
	// Specifies the description of the copy image.
	Description *string `pulumi:"description"`
	// Specifies the enterprise project ID of the image.
	// Only copying scene within a region is supported, for enterprise users, if omitted, default enterprise project will
	// be used.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies the master key used for encrypting an image.
	// Only copying scene within a region is supported. Changing this parameter will create a new resource.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// Specifies the maximum memory of the copy image in the unit of MB.
	MaxRam *int `pulumi:"maxRam"`
	// Specifies the minimum memory of the copy image in the unit of MB. The default value is
	// `0`, indicating that the memory is not restricted.
	MinRam *int `pulumi:"minRam"`
	// Specifies the name of the copy image. The name can contain `1` to `128` characters,
	// only Chinese and English letters, digits, underscore (_), hyphens (-), dots (.) and space are allowed, but it cannot
	// start or end with a space.
	Name *string `pulumi:"name"`
	// Specifies the region to which the source image belongs.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the ID of the copied image.
	// Changing this parameter will create a new resource.
	SourceImageId string `pulumi:"sourceImageId"`
	// Specifies the key/value pairs to associate with the copy image.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the target region name.
	// If specified, it means cross-region replication.
	TargetRegion *string `pulumi:"targetRegion"`
	// Specifies the ID of the vault. It is used in the cross-region scene, it is
	// mandatory if you are replicating a full-ECS image, and the region to which the vault belongs must be consistent with
	// the value of `targetRegion`.
	// Changing this parameter will create a new resource.
	VaultId *string `pulumi:"vaultId"`
}

// The set of arguments for constructing a ImageCopy resource.
type ImageCopyArgs struct {
	// Specifies the agency name. It is required in the cross-region scene.
	// Changing this parameter will create a new resource.
	AgencyName pulumi.StringPtrInput
	// Specifies the description of the copy image.
	Description pulumi.StringPtrInput
	// Specifies the enterprise project ID of the image.
	// Only copying scene within a region is supported, for enterprise users, if omitted, default enterprise project will
	// be used.
	EnterpriseProjectId pulumi.StringPtrInput
	// Specifies the master key used for encrypting an image.
	// Only copying scene within a region is supported. Changing this parameter will create a new resource.
	KmsKeyId pulumi.StringPtrInput
	// Specifies the maximum memory of the copy image in the unit of MB.
	MaxRam pulumi.IntPtrInput
	// Specifies the minimum memory of the copy image in the unit of MB. The default value is
	// `0`, indicating that the memory is not restricted.
	MinRam pulumi.IntPtrInput
	// Specifies the name of the copy image. The name can contain `1` to `128` characters,
	// only Chinese and English letters, digits, underscore (_), hyphens (-), dots (.) and space are allowed, but it cannot
	// start or end with a space.
	Name pulumi.StringPtrInput
	// Specifies the region to which the source image belongs.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the ID of the copied image.
	// Changing this parameter will create a new resource.
	SourceImageId pulumi.StringInput
	// Specifies the key/value pairs to associate with the copy image.
	Tags pulumi.StringMapInput
	// Specifies the target region name.
	// If specified, it means cross-region replication.
	TargetRegion pulumi.StringPtrInput
	// Specifies the ID of the vault. It is used in the cross-region scene, it is
	// mandatory if you are replicating a full-ECS image, and the region to which the vault belongs must be consistent with
	// the value of `targetRegion`.
	// Changing this parameter will create a new resource.
	VaultId pulumi.StringPtrInput
}

func (ImageCopyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*imageCopyArgs)(nil)).Elem()
}

type ImageCopyInput interface {
	pulumi.Input

	ToImageCopyOutput() ImageCopyOutput
	ToImageCopyOutputWithContext(ctx context.Context) ImageCopyOutput
}

func (*ImageCopy) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageCopy)(nil)).Elem()
}

func (i *ImageCopy) ToImageCopyOutput() ImageCopyOutput {
	return i.ToImageCopyOutputWithContext(context.Background())
}

func (i *ImageCopy) ToImageCopyOutputWithContext(ctx context.Context) ImageCopyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageCopyOutput)
}

// ImageCopyArrayInput is an input type that accepts ImageCopyArray and ImageCopyArrayOutput values.
// You can construct a concrete instance of `ImageCopyArrayInput` via:
//
//	ImageCopyArray{ ImageCopyArgs{...} }
type ImageCopyArrayInput interface {
	pulumi.Input

	ToImageCopyArrayOutput() ImageCopyArrayOutput
	ToImageCopyArrayOutputWithContext(context.Context) ImageCopyArrayOutput
}

type ImageCopyArray []ImageCopyInput

func (ImageCopyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImageCopy)(nil)).Elem()
}

func (i ImageCopyArray) ToImageCopyArrayOutput() ImageCopyArrayOutput {
	return i.ToImageCopyArrayOutputWithContext(context.Background())
}

func (i ImageCopyArray) ToImageCopyArrayOutputWithContext(ctx context.Context) ImageCopyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageCopyArrayOutput)
}

// ImageCopyMapInput is an input type that accepts ImageCopyMap and ImageCopyMapOutput values.
// You can construct a concrete instance of `ImageCopyMapInput` via:
//
//	ImageCopyMap{ "key": ImageCopyArgs{...} }
type ImageCopyMapInput interface {
	pulumi.Input

	ToImageCopyMapOutput() ImageCopyMapOutput
	ToImageCopyMapOutputWithContext(context.Context) ImageCopyMapOutput
}

type ImageCopyMap map[string]ImageCopyInput

func (ImageCopyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImageCopy)(nil)).Elem()
}

func (i ImageCopyMap) ToImageCopyMapOutput() ImageCopyMapOutput {
	return i.ToImageCopyMapOutputWithContext(context.Background())
}

func (i ImageCopyMap) ToImageCopyMapOutputWithContext(ctx context.Context) ImageCopyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageCopyMapOutput)
}

type ImageCopyOutput struct{ *pulumi.OutputState }

func (ImageCopyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageCopy)(nil)).Elem()
}

func (o ImageCopyOutput) ToImageCopyOutput() ImageCopyOutput {
	return o
}

func (o ImageCopyOutput) ToImageCopyOutputWithContext(ctx context.Context) ImageCopyOutput {
	return o
}

// The time when the image status changes to active, in RFC3339 format.
func (o ImageCopyOutput) ActiveAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageCopy) pulumi.StringOutput { return v.ActiveAt }).(pulumi.StringOutput)
}

// Specifies the agency name. It is required in the cross-region scene.
// Changing this parameter will create a new resource.
func (o ImageCopyOutput) AgencyName() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageCopy) pulumi.StringOutput { return v.AgencyName }).(pulumi.StringOutput)
}

// checksum is deprecated
func (o ImageCopyOutput) Checksum() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageCopy) pulumi.StringOutput { return v.Checksum }).(pulumi.StringOutput)
}

// The creation time of the image, in RFC3339 format.
func (o ImageCopyOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageCopy) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Indicates the image source.
// The format is **image,region,source_image_id**, e.g. **image,cn-north-4,xxxxxx**.
func (o ImageCopyOutput) DataOrigin() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageCopy) pulumi.StringOutput { return v.DataOrigin }).(pulumi.StringOutput)
}

// Specifies the description of the copy image.
func (o ImageCopyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageCopy) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicates the image file format.
// The value can be **zvhd2**, **vhd**, **zvhd**, **raw**, **qcow2**, or **iso**.
func (o ImageCopyOutput) DiskFormat() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageCopy) pulumi.StringOutput { return v.DiskFormat }).(pulumi.StringOutput)
}

// Specifies the enterprise project ID of the image.
// Only copying scene within a region is supported, for enterprise users, if omitted, default enterprise project will
// be used.
func (o ImageCopyOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageCopy) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// Indicates the size(bytes) of the image file.
func (o ImageCopyOutput) ImageSize() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageCopy) pulumi.StringOutput { return v.ImageSize }).(pulumi.StringOutput)
}

// Indicates the ID of the ECS that needs to be converted into an image.
func (o ImageCopyOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageCopy) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Specifies the master key used for encrypting an image.
// Only copying scene within a region is supported. Changing this parameter will create a new resource.
func (o ImageCopyOutput) KmsKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageCopy) pulumi.StringOutput { return v.KmsKeyId }).(pulumi.StringOutput)
}

// Specifies the maximum memory of the copy image in the unit of MB.
func (o ImageCopyOutput) MaxRam() pulumi.IntOutput {
	return o.ApplyT(func(v *ImageCopy) pulumi.IntOutput { return v.MaxRam }).(pulumi.IntOutput)
}

// The minimum disk space required to run an image, in GB unit.
func (o ImageCopyOutput) MinDisk() pulumi.IntOutput {
	return o.ApplyT(func(v *ImageCopy) pulumi.IntOutput { return v.MinDisk }).(pulumi.IntOutput)
}

// Specifies the minimum memory of the copy image in the unit of MB. The default value is
// `0`, indicating that the memory is not restricted.
func (o ImageCopyOutput) MinRam() pulumi.IntOutput {
	return o.ApplyT(func(v *ImageCopy) pulumi.IntOutput { return v.MinRam }).(pulumi.IntOutput)
}

// Specifies the name of the copy image. The name can contain `1` to `128` characters,
// only Chinese and English letters, digits, underscore (_), hyphens (-), dots (.) and space are allowed, but it cannot
// start or end with a space.
func (o ImageCopyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageCopy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Indicates the OS version.
func (o ImageCopyOutput) OsVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageCopy) pulumi.StringOutput { return v.OsVersion }).(pulumi.StringOutput)
}

// Specifies the region to which the source image belongs.
// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
func (o ImageCopyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageCopy) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the ID of the copied image.
// Changing this parameter will create a new resource.
func (o ImageCopyOutput) SourceImageId() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageCopy) pulumi.StringOutput { return v.SourceImageId }).(pulumi.StringOutput)
}

// Indicates the status of the image. The value can be **active**, **queued**, **saving**, **deleted**,
// or **killed*, only image with a status of **active** can be used.
func (o ImageCopyOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageCopy) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specifies the key/value pairs to associate with the copy image.
func (o ImageCopyOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ImageCopy) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Specifies the target region name.
// If specified, it means cross-region replication.
func (o ImageCopyOutput) TargetRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageCopy) pulumi.StringOutput { return v.TargetRegion }).(pulumi.StringOutput)
}

// The last update time of the image, in RFC3339 format.
func (o ImageCopyOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageCopy) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// Specifies the ID of the vault. It is used in the cross-region scene, it is
// mandatory if you are replicating a full-ECS image, and the region to which the vault belongs must be consistent with
// the value of `targetRegion`.
// Changing this parameter will create a new resource.
func (o ImageCopyOutput) VaultId() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageCopy) pulumi.StringOutput { return v.VaultId }).(pulumi.StringOutput)
}

// Indicates whether the image is visible to other tenants.
func (o ImageCopyOutput) Visibility() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageCopy) pulumi.StringOutput { return v.Visibility }).(pulumi.StringOutput)
}

type ImageCopyArrayOutput struct{ *pulumi.OutputState }

func (ImageCopyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImageCopy)(nil)).Elem()
}

func (o ImageCopyArrayOutput) ToImageCopyArrayOutput() ImageCopyArrayOutput {
	return o
}

func (o ImageCopyArrayOutput) ToImageCopyArrayOutputWithContext(ctx context.Context) ImageCopyArrayOutput {
	return o
}

func (o ImageCopyArrayOutput) Index(i pulumi.IntInput) ImageCopyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ImageCopy {
		return vs[0].([]*ImageCopy)[vs[1].(int)]
	}).(ImageCopyOutput)
}

type ImageCopyMapOutput struct{ *pulumi.OutputState }

func (ImageCopyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImageCopy)(nil)).Elem()
}

func (o ImageCopyMapOutput) ToImageCopyMapOutput() ImageCopyMapOutput {
	return o
}

func (o ImageCopyMapOutput) ToImageCopyMapOutputWithContext(ctx context.Context) ImageCopyMapOutput {
	return o
}

func (o ImageCopyMapOutput) MapIndex(k pulumi.StringInput) ImageCopyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ImageCopy {
		return vs[0].(map[string]*ImageCopy)[vs[1].(string)]
	}).(ImageCopyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ImageCopyInput)(nil)).Elem(), &ImageCopy{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageCopyArrayInput)(nil)).Elem(), ImageCopyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageCopyMapInput)(nil)).Elem(), ImageCopyMap{})
	pulumi.RegisterOutputType(ImageCopyOutput{})
	pulumi.RegisterOutputType(ImageCopyArrayOutput{})
	pulumi.RegisterOutputType(ImageCopyMapOutput{})
}
