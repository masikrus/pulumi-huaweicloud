// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ims

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get available IMS images within HuaweiCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Ims"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Ims"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			imageId := cfg.RequireObject("imageId")
//			_, err := Ims.GetImage(ctx, &ims.GetImageArgs{
//				ImageId: pulumi.StringRef(imageId),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = Ims.GetImages(ctx, &ims.GetImagesArgs{
//				Name:       pulumi.StringRef("Ubuntu 18.04 server 64bit"),
//				Visibility: pulumi.StringRef("public"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = Ims.GetImages(ctx, &ims.GetImagesArgs{
//				Architecture: pulumi.StringRef("x86"),
//				Os:           pulumi.StringRef("CentOS"),
//				Visibility:   pulumi.StringRef("public"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = Ims.GetImages(ctx, &ims.GetImagesArgs{
//				Architecture: pulumi.StringRef("x86"),
//				NameRegex:    pulumi.StringRef("^CentOS 7.4"),
//				Visibility:   pulumi.StringRef("public"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = Ims.GetImages(ctx, &ims.GetImagesArgs{
//				Architecture: pulumi.StringRef("x86"),
//				ImageType:    pulumi.StringRef("Ironic"),
//				Visibility:   pulumi.StringRef("public"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetImages(ctx *pulumi.Context, args *GetImagesArgs, opts ...pulumi.InvokeOption) (*GetImagesResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetImagesResult
	err := ctx.Invoke("huaweicloud:Ims/getImages:getImages", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getImages.
type GetImagesArgs struct {
	// Specifies whether the image supports host security or host monitoring.
	// The valid values are as follows:
	// + **hss**: Host security.
	// + **ces**: Host monitoring.
	// + **hss,ces**: Both support.
	__supportAgentList *string `pulumi:"__supportAgentList"`
	// Specifies the image architecture type. The value can be **x86** or **arm**.
	Architecture *string `pulumi:"architecture"`
	// Specifies the enterprise project ID of the image.
	// For enterprise users, if omitted, will query the images under all enterprise projects.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies the ECS flavor ID used to filter out available images.
	// You can specify only one flavor ID and only ECS flavor ID is valid, BMS flavor is not supported.
	FlavorId *string `pulumi:"flavorId"`
	// Specifies the ID of the image.
	ImageId *string `pulumi:"imageId"`
	// Specifies the environment where the image is used.
	// The valid values are as follows:
	// + **FusionCompute**: Cloud server image, also known as system disk image.
	// + **DataImage**: Data disk image.
	// + **Ironic**: Bare metal server image.
	// + **IsoImage**: ISO image.
	ImageType *string `pulumi:"imageType"`
	// Specifies whether it is a whole image. The valid value is **true** or **false**.
	// Defaults to **false**.
	IsWholeImage *bool `pulumi:"isWholeImage"`
	// Specifies the name of the image. Cannot be used simultaneously with `nameRegex`.
	Name *string `pulumi:"name"`
	// Specifies the regular expression of the name of the image.
	// Cannot be used simultaneously with `name`.
	NameRegex *string `pulumi:"nameRegex"`
	// Specifies the image OS type. The value can be **Windows**, **Ubuntu**, **RedHat**, **SUSE**,
	// **CentOS**, **Debian**, **OpenSUSE**, **Oracle Linux**, **Fedora**, **Other**, **CoreOS**, or **EulerOS**.
	Os *string `pulumi:"os"`
	// The operating system version of the image.
	OsVersion *string `pulumi:"osVersion"`
	// Specifies the owner (UUID) of the image.
	Owner *string `pulumi:"owner"`
	// Specifies the region in which to obtain the images.
	// If omitted, the provider-level region will be used.
	Region *string `pulumi:"region"`
	// Specifies whether to sort the query results in ascending or descending order.
	// The valid values are as follows:
	// + **asc**: Ascending order.
	// + **desc**: Descending order.
	SortDirection *string `pulumi:"sortDirection"`
	// Specifies which field to use for sorting. The valid values are **name**,
	// **container_format**, **disk_format**, **status**, **id**, **size**, and **created_at**. Defaults to **name**.
	SortKey *string `pulumi:"sortKey"`
	// Specifies the image tag in **Key=Value** format.
	Tag *string `pulumi:"tag"`
	// Specifies the visibility of the image. Must be one of **public**, **private**,
	// **market** or **shared**.
	Visibility *string `pulumi:"visibility"`
}

// A collection of values returned by getImages.
type GetImagesResult struct {
	// Does the image support host security or host monitoring.
	// The valid value is **hss**, **ces**, or **hss,ces**. If it is empty, it means that the image does not support host
	// security or host monitoring.
	__supportAgentList *string `pulumi:"__supportAgentList"`
	// The image architecture type.
	Architecture *string `pulumi:"architecture"`
	// The enterprise project ID of the image.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	FlavorId            *string `pulumi:"flavorId"`
	// The provider-assigned unique ID for this managed resource.
	Id      string  `pulumi:"id"`
	ImageId *string `pulumi:"imageId"`
	// The environment where the image is used.
	ImageType *string `pulumi:"imageType"`
	// All images that match the filter parameters.
	// The images structure is documented below.
	Images       []GetImagesImage `pulumi:"images"`
	IsWholeImage *bool            `pulumi:"isWholeImage"`
	// The name of the image.
	Name      *string `pulumi:"name"`
	NameRegex *string `pulumi:"nameRegex"`
	// The image OS type.
	Os *string `pulumi:"os"`
	// The operating system version of the image.
	OsVersion *string `pulumi:"osVersion"`
	// The owner (UUID) of the image.
	Owner         *string `pulumi:"owner"`
	Region        string  `pulumi:"region"`
	SortDirection *string `pulumi:"sortDirection"`
	SortKey       *string `pulumi:"sortKey"`
	Tag           *string `pulumi:"tag"`
	// The visibility of the image.
	Visibility *string `pulumi:"visibility"`
}

func GetImagesOutput(ctx *pulumi.Context, args GetImagesOutputArgs, opts ...pulumi.InvokeOption) GetImagesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetImagesResult, error) {
			args := v.(GetImagesArgs)
			r, err := GetImages(ctx, &args, opts...)
			var s GetImagesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetImagesResultOutput)
}

// A collection of arguments for invoking getImages.
type GetImagesOutputArgs struct {
	// Specifies whether the image supports host security or host monitoring.
	// The valid values are as follows:
	// + **hss**: Host security.
	// + **ces**: Host monitoring.
	// + **hss,ces**: Both support.
	__supportAgentList pulumi.StringPtrInput `pulumi:"__supportAgentList"`
	// Specifies the image architecture type. The value can be **x86** or **arm**.
	Architecture pulumi.StringPtrInput `pulumi:"architecture"`
	// Specifies the enterprise project ID of the image.
	// For enterprise users, if omitted, will query the images under all enterprise projects.
	EnterpriseProjectId pulumi.StringPtrInput `pulumi:"enterpriseProjectId"`
	// Specifies the ECS flavor ID used to filter out available images.
	// You can specify only one flavor ID and only ECS flavor ID is valid, BMS flavor is not supported.
	FlavorId pulumi.StringPtrInput `pulumi:"flavorId"`
	// Specifies the ID of the image.
	ImageId pulumi.StringPtrInput `pulumi:"imageId"`
	// Specifies the environment where the image is used.
	// The valid values are as follows:
	// + **FusionCompute**: Cloud server image, also known as system disk image.
	// + **DataImage**: Data disk image.
	// + **Ironic**: Bare metal server image.
	// + **IsoImage**: ISO image.
	ImageType pulumi.StringPtrInput `pulumi:"imageType"`
	// Specifies whether it is a whole image. The valid value is **true** or **false**.
	// Defaults to **false**.
	IsWholeImage pulumi.BoolPtrInput `pulumi:"isWholeImage"`
	// Specifies the name of the image. Cannot be used simultaneously with `nameRegex`.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies the regular expression of the name of the image.
	// Cannot be used simultaneously with `name`.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// Specifies the image OS type. The value can be **Windows**, **Ubuntu**, **RedHat**, **SUSE**,
	// **CentOS**, **Debian**, **OpenSUSE**, **Oracle Linux**, **Fedora**, **Other**, **CoreOS**, or **EulerOS**.
	Os pulumi.StringPtrInput `pulumi:"os"`
	// The operating system version of the image.
	OsVersion pulumi.StringPtrInput `pulumi:"osVersion"`
	// Specifies the owner (UUID) of the image.
	Owner pulumi.StringPtrInput `pulumi:"owner"`
	// Specifies the region in which to obtain the images.
	// If omitted, the provider-level region will be used.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Specifies whether to sort the query results in ascending or descending order.
	// The valid values are as follows:
	// + **asc**: Ascending order.
	// + **desc**: Descending order.
	SortDirection pulumi.StringPtrInput `pulumi:"sortDirection"`
	// Specifies which field to use for sorting. The valid values are **name**,
	// **container_format**, **disk_format**, **status**, **id**, **size**, and **created_at**. Defaults to **name**.
	SortKey pulumi.StringPtrInput `pulumi:"sortKey"`
	// Specifies the image tag in **Key=Value** format.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
	// Specifies the visibility of the image. Must be one of **public**, **private**,
	// **market** or **shared**.
	Visibility pulumi.StringPtrInput `pulumi:"visibility"`
}

func (GetImagesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImagesArgs)(nil)).Elem()
}

// A collection of values returned by getImages.
type GetImagesResultOutput struct{ *pulumi.OutputState }

func (GetImagesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImagesResult)(nil)).Elem()
}

func (o GetImagesResultOutput) ToGetImagesResultOutput() GetImagesResultOutput {
	return o
}

func (o GetImagesResultOutput) ToGetImagesResultOutputWithContext(ctx context.Context) GetImagesResultOutput {
	return o
}

// Does the image support host security or host monitoring.
// The valid value is **hss**, **ces**, or **hss,ces**. If it is empty, it means that the image does not support host
// security or host monitoring.
func (o GetImagesResultOutput) __supportAgentList() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetImagesResult) *string { return v.__supportAgentList }).(pulumi.StringPtrOutput)
}

// The image architecture type.
func (o GetImagesResultOutput) Architecture() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetImagesResult) *string { return v.Architecture }).(pulumi.StringPtrOutput)
}

// The enterprise project ID of the image.
func (o GetImagesResultOutput) EnterpriseProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetImagesResult) *string { return v.EnterpriseProjectId }).(pulumi.StringPtrOutput)
}

func (o GetImagesResultOutput) FlavorId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetImagesResult) *string { return v.FlavorId }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetImagesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetImagesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetImagesResultOutput) ImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetImagesResult) *string { return v.ImageId }).(pulumi.StringPtrOutput)
}

// The environment where the image is used.
func (o GetImagesResultOutput) ImageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetImagesResult) *string { return v.ImageType }).(pulumi.StringPtrOutput)
}

// All images that match the filter parameters.
// The images structure is documented below.
func (o GetImagesResultOutput) Images() GetImagesImageArrayOutput {
	return o.ApplyT(func(v GetImagesResult) []GetImagesImage { return v.Images }).(GetImagesImageArrayOutput)
}

func (o GetImagesResultOutput) IsWholeImage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetImagesResult) *bool { return v.IsWholeImage }).(pulumi.BoolPtrOutput)
}

// The name of the image.
func (o GetImagesResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetImagesResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o GetImagesResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetImagesResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

// The image OS type.
func (o GetImagesResultOutput) Os() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetImagesResult) *string { return v.Os }).(pulumi.StringPtrOutput)
}

// The operating system version of the image.
func (o GetImagesResultOutput) OsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetImagesResult) *string { return v.OsVersion }).(pulumi.StringPtrOutput)
}

// The owner (UUID) of the image.
func (o GetImagesResultOutput) Owner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetImagesResult) *string { return v.Owner }).(pulumi.StringPtrOutput)
}

func (o GetImagesResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetImagesResult) string { return v.Region }).(pulumi.StringOutput)
}

func (o GetImagesResultOutput) SortDirection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetImagesResult) *string { return v.SortDirection }).(pulumi.StringPtrOutput)
}

func (o GetImagesResultOutput) SortKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetImagesResult) *string { return v.SortKey }).(pulumi.StringPtrOutput)
}

func (o GetImagesResultOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetImagesResult) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

// The visibility of the image.
func (o GetImagesResultOutput) Visibility() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetImagesResult) *string { return v.Visibility }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetImagesResultOutput{})
}
