// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ims

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an IMS image export resource within HuaweiCloud.
//
// > 1. The whole image, ISO image, private images created by public images of Windows, SUSE, Red Hat, Ubuntu, and
// >       Oracle Linux, and private images created by market images are not allowed to be exported.
// >       <br/>2. The image size must be less than `1` TB. The images larger than `128` GB only support fast export, the
// >       maximum image size supported for export in some regions may be greater than `128` GB, please refer to the actual
// >       operation prompts on the console for accuracy.<br/>3. Destroying resource does not change the current action of the
// >       image export resource.
//
// ## Example Usage
// ### Ordinary export image
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Ims"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			imageId := cfg.RequireObject("imageId")
//			bucketUrl := cfg.RequireObject("bucketUrl")
//			fileFormat := cfg.RequireObject("fileFormat")
//			_, err := Ims.NewImageExport(ctx, "test", &Ims.ImageExportArgs{
//				ImageId:    pulumi.Any(imageId),
//				BucketUrl:  pulumi.Any(bucketUrl),
//				FileFormat: pulumi.Any(fileFormat),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Quickly export image
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Ims"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			imageId := cfg.RequireObject("imageId")
//			bucketUrl := cfg.RequireObject("bucketUrl")
//			_, err := Ims.NewImageExport(ctx, "test", &Ims.ImageExportArgs{
//				ImageId:       pulumi.Any(imageId),
//				BucketUrl:     pulumi.Any(bucketUrl),
//				IsQuickExport: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ImageExport struct {
	pulumi.CustomResourceState

	// Specifies the URL of the image file to be exported to the OBS bucket, the
	// format is **OBS bucket name:image file name**, e.g. **test_bucket:test_image_file**. The storage category of the OBS
	// bucket and image file here must be OBS standard storage. Changing this parameter will create a new resource.
	BucketUrl pulumi.StringOutput `pulumi:"bucketUrl"`
	// Specifies the format of the image file to be exported. The valid values
	// are **qcow2**, **vhd**, **zvhd**, or **vmdk**. Changing this parameter will create a new resource.
	FileFormat pulumi.StringPtrOutput `pulumi:"fileFormat"`
	// Specifies the image ID to export.
	// Changing this parameter will create a new resource.
	ImageId pulumi.StringOutput `pulumi:"imageId"`
	// Specifies whether to use quick export. The valid value is **true** or
	// **false**. Changing this parameter will create a new resource.
	IsQuickExport pulumi.BoolPtrOutput `pulumi:"isQuickExport"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewImageExport registers a new resource with the given unique name, arguments, and options.
func NewImageExport(ctx *pulumi.Context,
	name string, args *ImageExportArgs, opts ...pulumi.ResourceOption) (*ImageExport, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BucketUrl == nil {
		return nil, errors.New("invalid value for required argument 'BucketUrl'")
	}
	if args.ImageId == nil {
		return nil, errors.New("invalid value for required argument 'ImageId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ImageExport
	err := ctx.RegisterResource("huaweicloud:Ims/imageExport:ImageExport", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImageExport gets an existing ImageExport resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImageExport(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImageExportState, opts ...pulumi.ResourceOption) (*ImageExport, error) {
	var resource ImageExport
	err := ctx.ReadResource("huaweicloud:Ims/imageExport:ImageExport", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ImageExport resources.
type imageExportState struct {
	// Specifies the URL of the image file to be exported to the OBS bucket, the
	// format is **OBS bucket name:image file name**, e.g. **test_bucket:test_image_file**. The storage category of the OBS
	// bucket and image file here must be OBS standard storage. Changing this parameter will create a new resource.
	BucketUrl *string `pulumi:"bucketUrl"`
	// Specifies the format of the image file to be exported. The valid values
	// are **qcow2**, **vhd**, **zvhd**, or **vmdk**. Changing this parameter will create a new resource.
	FileFormat *string `pulumi:"fileFormat"`
	// Specifies the image ID to export.
	// Changing this parameter will create a new resource.
	ImageId *string `pulumi:"imageId"`
	// Specifies whether to use quick export. The valid value is **true** or
	// **false**. Changing this parameter will create a new resource.
	IsQuickExport *bool `pulumi:"isQuickExport"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
}

type ImageExportState struct {
	// Specifies the URL of the image file to be exported to the OBS bucket, the
	// format is **OBS bucket name:image file name**, e.g. **test_bucket:test_image_file**. The storage category of the OBS
	// bucket and image file here must be OBS standard storage. Changing this parameter will create a new resource.
	BucketUrl pulumi.StringPtrInput
	// Specifies the format of the image file to be exported. The valid values
	// are **qcow2**, **vhd**, **zvhd**, or **vmdk**. Changing this parameter will create a new resource.
	FileFormat pulumi.StringPtrInput
	// Specifies the image ID to export.
	// Changing this parameter will create a new resource.
	ImageId pulumi.StringPtrInput
	// Specifies whether to use quick export. The valid value is **true** or
	// **false**. Changing this parameter will create a new resource.
	IsQuickExport pulumi.BoolPtrInput
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
}

func (ImageExportState) ElementType() reflect.Type {
	return reflect.TypeOf((*imageExportState)(nil)).Elem()
}

type imageExportArgs struct {
	// Specifies the URL of the image file to be exported to the OBS bucket, the
	// format is **OBS bucket name:image file name**, e.g. **test_bucket:test_image_file**. The storage category of the OBS
	// bucket and image file here must be OBS standard storage. Changing this parameter will create a new resource.
	BucketUrl string `pulumi:"bucketUrl"`
	// Specifies the format of the image file to be exported. The valid values
	// are **qcow2**, **vhd**, **zvhd**, or **vmdk**. Changing this parameter will create a new resource.
	FileFormat *string `pulumi:"fileFormat"`
	// Specifies the image ID to export.
	// Changing this parameter will create a new resource.
	ImageId string `pulumi:"imageId"`
	// Specifies whether to use quick export. The valid value is **true** or
	// **false**. Changing this parameter will create a new resource.
	IsQuickExport *bool `pulumi:"isQuickExport"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a ImageExport resource.
type ImageExportArgs struct {
	// Specifies the URL of the image file to be exported to the OBS bucket, the
	// format is **OBS bucket name:image file name**, e.g. **test_bucket:test_image_file**. The storage category of the OBS
	// bucket and image file here must be OBS standard storage. Changing this parameter will create a new resource.
	BucketUrl pulumi.StringInput
	// Specifies the format of the image file to be exported. The valid values
	// are **qcow2**, **vhd**, **zvhd**, or **vmdk**. Changing this parameter will create a new resource.
	FileFormat pulumi.StringPtrInput
	// Specifies the image ID to export.
	// Changing this parameter will create a new resource.
	ImageId pulumi.StringInput
	// Specifies whether to use quick export. The valid value is **true** or
	// **false**. Changing this parameter will create a new resource.
	IsQuickExport pulumi.BoolPtrInput
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
}

func (ImageExportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*imageExportArgs)(nil)).Elem()
}

type ImageExportInput interface {
	pulumi.Input

	ToImageExportOutput() ImageExportOutput
	ToImageExportOutputWithContext(ctx context.Context) ImageExportOutput
}

func (*ImageExport) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageExport)(nil)).Elem()
}

func (i *ImageExport) ToImageExportOutput() ImageExportOutput {
	return i.ToImageExportOutputWithContext(context.Background())
}

func (i *ImageExport) ToImageExportOutputWithContext(ctx context.Context) ImageExportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageExportOutput)
}

// ImageExportArrayInput is an input type that accepts ImageExportArray and ImageExportArrayOutput values.
// You can construct a concrete instance of `ImageExportArrayInput` via:
//
//	ImageExportArray{ ImageExportArgs{...} }
type ImageExportArrayInput interface {
	pulumi.Input

	ToImageExportArrayOutput() ImageExportArrayOutput
	ToImageExportArrayOutputWithContext(context.Context) ImageExportArrayOutput
}

type ImageExportArray []ImageExportInput

func (ImageExportArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImageExport)(nil)).Elem()
}

func (i ImageExportArray) ToImageExportArrayOutput() ImageExportArrayOutput {
	return i.ToImageExportArrayOutputWithContext(context.Background())
}

func (i ImageExportArray) ToImageExportArrayOutputWithContext(ctx context.Context) ImageExportArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageExportArrayOutput)
}

// ImageExportMapInput is an input type that accepts ImageExportMap and ImageExportMapOutput values.
// You can construct a concrete instance of `ImageExportMapInput` via:
//
//	ImageExportMap{ "key": ImageExportArgs{...} }
type ImageExportMapInput interface {
	pulumi.Input

	ToImageExportMapOutput() ImageExportMapOutput
	ToImageExportMapOutputWithContext(context.Context) ImageExportMapOutput
}

type ImageExportMap map[string]ImageExportInput

func (ImageExportMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImageExport)(nil)).Elem()
}

func (i ImageExportMap) ToImageExportMapOutput() ImageExportMapOutput {
	return i.ToImageExportMapOutputWithContext(context.Background())
}

func (i ImageExportMap) ToImageExportMapOutputWithContext(ctx context.Context) ImageExportMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageExportMapOutput)
}

type ImageExportOutput struct{ *pulumi.OutputState }

func (ImageExportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageExport)(nil)).Elem()
}

func (o ImageExportOutput) ToImageExportOutput() ImageExportOutput {
	return o
}

func (o ImageExportOutput) ToImageExportOutputWithContext(ctx context.Context) ImageExportOutput {
	return o
}

// Specifies the URL of the image file to be exported to the OBS bucket, the
// format is **OBS bucket name:image file name**, e.g. **test_bucket:test_image_file**. The storage category of the OBS
// bucket and image file here must be OBS standard storage. Changing this parameter will create a new resource.
func (o ImageExportOutput) BucketUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageExport) pulumi.StringOutput { return v.BucketUrl }).(pulumi.StringOutput)
}

// Specifies the format of the image file to be exported. The valid values
// are **qcow2**, **vhd**, **zvhd**, or **vmdk**. Changing this parameter will create a new resource.
func (o ImageExportOutput) FileFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageExport) pulumi.StringPtrOutput { return v.FileFormat }).(pulumi.StringPtrOutput)
}

// Specifies the image ID to export.
// Changing this parameter will create a new resource.
func (o ImageExportOutput) ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageExport) pulumi.StringOutput { return v.ImageId }).(pulumi.StringOutput)
}

// Specifies whether to use quick export. The valid value is **true** or
// **false**. Changing this parameter will create a new resource.
func (o ImageExportOutput) IsQuickExport() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageExport) pulumi.BoolPtrOutput { return v.IsQuickExport }).(pulumi.BoolPtrOutput)
}

// Specifies the region in which to create the resource.
// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
func (o ImageExportOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageExport) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type ImageExportArrayOutput struct{ *pulumi.OutputState }

func (ImageExportArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImageExport)(nil)).Elem()
}

func (o ImageExportArrayOutput) ToImageExportArrayOutput() ImageExportArrayOutput {
	return o
}

func (o ImageExportArrayOutput) ToImageExportArrayOutputWithContext(ctx context.Context) ImageExportArrayOutput {
	return o
}

func (o ImageExportArrayOutput) Index(i pulumi.IntInput) ImageExportOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ImageExport {
		return vs[0].([]*ImageExport)[vs[1].(int)]
	}).(ImageExportOutput)
}

type ImageExportMapOutput struct{ *pulumi.OutputState }

func (ImageExportMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImageExport)(nil)).Elem()
}

func (o ImageExportMapOutput) ToImageExportMapOutput() ImageExportMapOutput {
	return o
}

func (o ImageExportMapOutput) ToImageExportMapOutputWithContext(ctx context.Context) ImageExportMapOutput {
	return o
}

func (o ImageExportMapOutput) MapIndex(k pulumi.StringInput) ImageExportOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ImageExport {
		return vs[0].(map[string]*ImageExport)[vs[1].(string)]
	}).(ImageExportOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ImageExportInput)(nil)).Elem(), &ImageExport{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageExportArrayInput)(nil)).Elem(), ImageExportArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageExportMapInput)(nil)).Elem(), ImageExportMap{})
	pulumi.RegisterOutputType(ImageExportOutput{})
	pulumi.RegisterOutputType(ImageExportArrayOutput{})
	pulumi.RegisterOutputType(ImageExportMapOutput{})
}
