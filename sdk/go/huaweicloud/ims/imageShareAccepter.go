// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ims

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an IMS image share accepter resource within HuaweiCloud.
//
// > Creating resource means accepting shared image, while destroying resource means rejecting shared image.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Ims"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			imageId := cfg.RequireObject("imageId")
//			_, err := Ims.NewImageShareAccepter(ctx, "test", &Ims.ImageShareAccepterArgs{
//				ImageId: pulumi.Any(imageId),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ImageShareAccepter struct {
	pulumi.CustomResourceState

	// Specifies the ID of the image.
	ImageId pulumi.StringOutput `pulumi:"imageId"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the ID of a vault. This parameter is mandatory if you want
	// to accept a shared full-ECS image created from a CBR backup.
	VaultId pulumi.StringOutput `pulumi:"vaultId"`
}

// NewImageShareAccepter registers a new resource with the given unique name, arguments, and options.
func NewImageShareAccepter(ctx *pulumi.Context,
	name string, args *ImageShareAccepterArgs, opts ...pulumi.ResourceOption) (*ImageShareAccepter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ImageId == nil {
		return nil, errors.New("invalid value for required argument 'ImageId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ImageShareAccepter
	err := ctx.RegisterResource("huaweicloud:Ims/imageShareAccepter:ImageShareAccepter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImageShareAccepter gets an existing ImageShareAccepter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImageShareAccepter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImageShareAccepterState, opts ...pulumi.ResourceOption) (*ImageShareAccepter, error) {
	var resource ImageShareAccepter
	err := ctx.ReadResource("huaweicloud:Ims/imageShareAccepter:ImageShareAccepter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ImageShareAccepter resources.
type imageShareAccepterState struct {
	// Specifies the ID of the image.
	ImageId *string `pulumi:"imageId"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the ID of a vault. This parameter is mandatory if you want
	// to accept a shared full-ECS image created from a CBR backup.
	VaultId *string `pulumi:"vaultId"`
}

type ImageShareAccepterState struct {
	// Specifies the ID of the image.
	ImageId pulumi.StringPtrInput
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the ID of a vault. This parameter is mandatory if you want
	// to accept a shared full-ECS image created from a CBR backup.
	VaultId pulumi.StringPtrInput
}

func (ImageShareAccepterState) ElementType() reflect.Type {
	return reflect.TypeOf((*imageShareAccepterState)(nil)).Elem()
}

type imageShareAccepterArgs struct {
	// Specifies the ID of the image.
	ImageId string `pulumi:"imageId"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the ID of a vault. This parameter is mandatory if you want
	// to accept a shared full-ECS image created from a CBR backup.
	VaultId *string `pulumi:"vaultId"`
}

// The set of arguments for constructing a ImageShareAccepter resource.
type ImageShareAccepterArgs struct {
	// Specifies the ID of the image.
	ImageId pulumi.StringInput
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the ID of a vault. This parameter is mandatory if you want
	// to accept a shared full-ECS image created from a CBR backup.
	VaultId pulumi.StringPtrInput
}

func (ImageShareAccepterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*imageShareAccepterArgs)(nil)).Elem()
}

type ImageShareAccepterInput interface {
	pulumi.Input

	ToImageShareAccepterOutput() ImageShareAccepterOutput
	ToImageShareAccepterOutputWithContext(ctx context.Context) ImageShareAccepterOutput
}

func (*ImageShareAccepter) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageShareAccepter)(nil)).Elem()
}

func (i *ImageShareAccepter) ToImageShareAccepterOutput() ImageShareAccepterOutput {
	return i.ToImageShareAccepterOutputWithContext(context.Background())
}

func (i *ImageShareAccepter) ToImageShareAccepterOutputWithContext(ctx context.Context) ImageShareAccepterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageShareAccepterOutput)
}

// ImageShareAccepterArrayInput is an input type that accepts ImageShareAccepterArray and ImageShareAccepterArrayOutput values.
// You can construct a concrete instance of `ImageShareAccepterArrayInput` via:
//
//	ImageShareAccepterArray{ ImageShareAccepterArgs{...} }
type ImageShareAccepterArrayInput interface {
	pulumi.Input

	ToImageShareAccepterArrayOutput() ImageShareAccepterArrayOutput
	ToImageShareAccepterArrayOutputWithContext(context.Context) ImageShareAccepterArrayOutput
}

type ImageShareAccepterArray []ImageShareAccepterInput

func (ImageShareAccepterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImageShareAccepter)(nil)).Elem()
}

func (i ImageShareAccepterArray) ToImageShareAccepterArrayOutput() ImageShareAccepterArrayOutput {
	return i.ToImageShareAccepterArrayOutputWithContext(context.Background())
}

func (i ImageShareAccepterArray) ToImageShareAccepterArrayOutputWithContext(ctx context.Context) ImageShareAccepterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageShareAccepterArrayOutput)
}

// ImageShareAccepterMapInput is an input type that accepts ImageShareAccepterMap and ImageShareAccepterMapOutput values.
// You can construct a concrete instance of `ImageShareAccepterMapInput` via:
//
//	ImageShareAccepterMap{ "key": ImageShareAccepterArgs{...} }
type ImageShareAccepterMapInput interface {
	pulumi.Input

	ToImageShareAccepterMapOutput() ImageShareAccepterMapOutput
	ToImageShareAccepterMapOutputWithContext(context.Context) ImageShareAccepterMapOutput
}

type ImageShareAccepterMap map[string]ImageShareAccepterInput

func (ImageShareAccepterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImageShareAccepter)(nil)).Elem()
}

func (i ImageShareAccepterMap) ToImageShareAccepterMapOutput() ImageShareAccepterMapOutput {
	return i.ToImageShareAccepterMapOutputWithContext(context.Background())
}

func (i ImageShareAccepterMap) ToImageShareAccepterMapOutputWithContext(ctx context.Context) ImageShareAccepterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageShareAccepterMapOutput)
}

type ImageShareAccepterOutput struct{ *pulumi.OutputState }

func (ImageShareAccepterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageShareAccepter)(nil)).Elem()
}

func (o ImageShareAccepterOutput) ToImageShareAccepterOutput() ImageShareAccepterOutput {
	return o
}

func (o ImageShareAccepterOutput) ToImageShareAccepterOutputWithContext(ctx context.Context) ImageShareAccepterOutput {
	return o
}

// Specifies the ID of the image.
func (o ImageShareAccepterOutput) ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageShareAccepter) pulumi.StringOutput { return v.ImageId }).(pulumi.StringOutput)
}

// Specifies the region in which to create the resource.
// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
func (o ImageShareAccepterOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageShareAccepter) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the ID of a vault. This parameter is mandatory if you want
// to accept a shared full-ECS image created from a CBR backup.
func (o ImageShareAccepterOutput) VaultId() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageShareAccepter) pulumi.StringOutput { return v.VaultId }).(pulumi.StringOutput)
}

type ImageShareAccepterArrayOutput struct{ *pulumi.OutputState }

func (ImageShareAccepterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImageShareAccepter)(nil)).Elem()
}

func (o ImageShareAccepterArrayOutput) ToImageShareAccepterArrayOutput() ImageShareAccepterArrayOutput {
	return o
}

func (o ImageShareAccepterArrayOutput) ToImageShareAccepterArrayOutputWithContext(ctx context.Context) ImageShareAccepterArrayOutput {
	return o
}

func (o ImageShareAccepterArrayOutput) Index(i pulumi.IntInput) ImageShareAccepterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ImageShareAccepter {
		return vs[0].([]*ImageShareAccepter)[vs[1].(int)]
	}).(ImageShareAccepterOutput)
}

type ImageShareAccepterMapOutput struct{ *pulumi.OutputState }

func (ImageShareAccepterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImageShareAccepter)(nil)).Elem()
}

func (o ImageShareAccepterMapOutput) ToImageShareAccepterMapOutput() ImageShareAccepterMapOutput {
	return o
}

func (o ImageShareAccepterMapOutput) ToImageShareAccepterMapOutputWithContext(ctx context.Context) ImageShareAccepterMapOutput {
	return o
}

func (o ImageShareAccepterMapOutput) MapIndex(k pulumi.StringInput) ImageShareAccepterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ImageShareAccepter {
		return vs[0].(map[string]*ImageShareAccepter)[vs[1].(string)]
	}).(ImageShareAccepterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ImageShareAccepterInput)(nil)).Elem(), &ImageShareAccepter{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageShareAccepterArrayInput)(nil)).Elem(), ImageShareAccepterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageShareAccepterMapInput)(nil)).Elem(), ImageShareAccepterMap{})
	pulumi.RegisterOutputType(ImageShareAccepterOutput{})
	pulumi.RegisterOutputType(ImageShareAccepterArrayOutput{})
	pulumi.RegisterOutputType(ImageShareAccepterMapOutput{})
}
