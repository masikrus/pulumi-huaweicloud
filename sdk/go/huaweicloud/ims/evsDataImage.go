// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ims

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an IMS data image resource created from EVS volume within HuaweiCloud.
//
// > The volume must be bound to the ECS instance.
//
// ## Example Usage
// ### Creating an IMS data image from EVS volume
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Ims"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := cfg.RequireObject("name")
//			volumeId := cfg.RequireObject("volumeId")
//			_, err := Ims.NewEvsDataImage(ctx, "test", &Ims.EvsDataImageArgs{
//				VolumeId: pulumi.Any(volumeId),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The IMS EVS data image resource can be imported using the `id`, e.g. bash
//
// ```sh
//
//	$ pulumi import huaweicloud:Ims/evsDataImage:EvsDataImage test <id>
//
// ```
type EvsDataImage struct {
	pulumi.CustomResourceState

	// The time when the image status changes to active, in RFC3339 format.
	ActiveAt pulumi.StringOutput `pulumi:"activeAt"`
	// The creation time of the image, in RFC3339 format.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The image source. The format is **volume,volume_id**.
	DataOrigin pulumi.StringOutput `pulumi:"dataOrigin"`
	// Specifies the description of the image.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The image format. The value can be **zvhd2**, **vhd**, **zvhd**, **raw**, or **qcow2**.
	DiskFormat pulumi.StringOutput `pulumi:"diskFormat"`
	// Specifies the enterprise project ID to which the IMS image belongs.
	// For enterprise users, if omitted, default enterprise project will be used.
	EnterpriseProjectId pulumi.StringOutput `pulumi:"enterpriseProjectId"`
	// The size of the image file, in bytes unit.
	ImageSize pulumi.StringOutput `pulumi:"imageSize"`
	// The minimum disk space required to run an image, in GB unit.
	// + When the operating system is Linux, the value ranges from `10` to `1,024`.
	// + When the operating system is Windows, the value ranges from `20` to `1,024`.
	MinDisk pulumi.IntOutput `pulumi:"minDisk"`
	// Specifies the name of the image.
	// The valid length is limited from `1` to `128` characters.
	// The first and last letters of the name cannot be spaces.
	// The name can contain uppercase letters, lowercase letters, numbers, spaces, chinese, and special characters (-._).
	Name pulumi.StringOutput `pulumi:"name"`
	// The operating system type. The value can be **Linux**, **Windows**, or **Other**.
	OsType pulumi.StringOutput `pulumi:"osType"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// The status of the image. The value can be **active**, **queued**, **saving**, **deleted**, or **killed*,
	// only image with a status of **active** can be used.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the key/value pairs to associate with the image.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The last update time of the image, in RFC3339 format.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// Whether the image is visible to other tenants.
	Visibility pulumi.StringOutput `pulumi:"visibility"`
	// Specifies the EVS volume ID used to create the image.
	// Changing this parameter will create a new resource.
	VolumeId pulumi.StringOutput `pulumi:"volumeId"`
}

// NewEvsDataImage registers a new resource with the given unique name, arguments, and options.
func NewEvsDataImage(ctx *pulumi.Context,
	name string, args *EvsDataImageArgs, opts ...pulumi.ResourceOption) (*EvsDataImage, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.VolumeId == nil {
		return nil, errors.New("invalid value for required argument 'VolumeId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource EvsDataImage
	err := ctx.RegisterResource("huaweicloud:Ims/evsDataImage:EvsDataImage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEvsDataImage gets an existing EvsDataImage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEvsDataImage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EvsDataImageState, opts ...pulumi.ResourceOption) (*EvsDataImage, error) {
	var resource EvsDataImage
	err := ctx.ReadResource("huaweicloud:Ims/evsDataImage:EvsDataImage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EvsDataImage resources.
type evsDataImageState struct {
	// The time when the image status changes to active, in RFC3339 format.
	ActiveAt *string `pulumi:"activeAt"`
	// The creation time of the image, in RFC3339 format.
	CreatedAt *string `pulumi:"createdAt"`
	// The image source. The format is **volume,volume_id**.
	DataOrigin *string `pulumi:"dataOrigin"`
	// Specifies the description of the image.
	Description *string `pulumi:"description"`
	// The image format. The value can be **zvhd2**, **vhd**, **zvhd**, **raw**, or **qcow2**.
	DiskFormat *string `pulumi:"diskFormat"`
	// Specifies the enterprise project ID to which the IMS image belongs.
	// For enterprise users, if omitted, default enterprise project will be used.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// The size of the image file, in bytes unit.
	ImageSize *string `pulumi:"imageSize"`
	// The minimum disk space required to run an image, in GB unit.
	// + When the operating system is Linux, the value ranges from `10` to `1,024`.
	// + When the operating system is Windows, the value ranges from `20` to `1,024`.
	MinDisk *int `pulumi:"minDisk"`
	// Specifies the name of the image.
	// The valid length is limited from `1` to `128` characters.
	// The first and last letters of the name cannot be spaces.
	// The name can contain uppercase letters, lowercase letters, numbers, spaces, chinese, and special characters (-._).
	Name *string `pulumi:"name"`
	// The operating system type. The value can be **Linux**, **Windows**, or **Other**.
	OsType *string `pulumi:"osType"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// The status of the image. The value can be **active**, **queued**, **saving**, **deleted**, or **killed*,
	// only image with a status of **active** can be used.
	Status *string `pulumi:"status"`
	// Specifies the key/value pairs to associate with the image.
	Tags map[string]string `pulumi:"tags"`
	// The last update time of the image, in RFC3339 format.
	UpdatedAt *string `pulumi:"updatedAt"`
	// Whether the image is visible to other tenants.
	Visibility *string `pulumi:"visibility"`
	// Specifies the EVS volume ID used to create the image.
	// Changing this parameter will create a new resource.
	VolumeId *string `pulumi:"volumeId"`
}

type EvsDataImageState struct {
	// The time when the image status changes to active, in RFC3339 format.
	ActiveAt pulumi.StringPtrInput
	// The creation time of the image, in RFC3339 format.
	CreatedAt pulumi.StringPtrInput
	// The image source. The format is **volume,volume_id**.
	DataOrigin pulumi.StringPtrInput
	// Specifies the description of the image.
	Description pulumi.StringPtrInput
	// The image format. The value can be **zvhd2**, **vhd**, **zvhd**, **raw**, or **qcow2**.
	DiskFormat pulumi.StringPtrInput
	// Specifies the enterprise project ID to which the IMS image belongs.
	// For enterprise users, if omitted, default enterprise project will be used.
	EnterpriseProjectId pulumi.StringPtrInput
	// The size of the image file, in bytes unit.
	ImageSize pulumi.StringPtrInput
	// The minimum disk space required to run an image, in GB unit.
	// + When the operating system is Linux, the value ranges from `10` to `1,024`.
	// + When the operating system is Windows, the value ranges from `20` to `1,024`.
	MinDisk pulumi.IntPtrInput
	// Specifies the name of the image.
	// The valid length is limited from `1` to `128` characters.
	// The first and last letters of the name cannot be spaces.
	// The name can contain uppercase letters, lowercase letters, numbers, spaces, chinese, and special characters (-._).
	Name pulumi.StringPtrInput
	// The operating system type. The value can be **Linux**, **Windows**, or **Other**.
	OsType pulumi.StringPtrInput
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// The status of the image. The value can be **active**, **queued**, **saving**, **deleted**, or **killed*,
	// only image with a status of **active** can be used.
	Status pulumi.StringPtrInput
	// Specifies the key/value pairs to associate with the image.
	Tags pulumi.StringMapInput
	// The last update time of the image, in RFC3339 format.
	UpdatedAt pulumi.StringPtrInput
	// Whether the image is visible to other tenants.
	Visibility pulumi.StringPtrInput
	// Specifies the EVS volume ID used to create the image.
	// Changing this parameter will create a new resource.
	VolumeId pulumi.StringPtrInput
}

func (EvsDataImageState) ElementType() reflect.Type {
	return reflect.TypeOf((*evsDataImageState)(nil)).Elem()
}

type evsDataImageArgs struct {
	// Specifies the description of the image.
	Description *string `pulumi:"description"`
	// Specifies the enterprise project ID to which the IMS image belongs.
	// For enterprise users, if omitted, default enterprise project will be used.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies the name of the image.
	// The valid length is limited from `1` to `128` characters.
	// The first and last letters of the name cannot be spaces.
	// The name can contain uppercase letters, lowercase letters, numbers, spaces, chinese, and special characters (-._).
	Name *string `pulumi:"name"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the key/value pairs to associate with the image.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the EVS volume ID used to create the image.
	// Changing this parameter will create a new resource.
	VolumeId string `pulumi:"volumeId"`
}

// The set of arguments for constructing a EvsDataImage resource.
type EvsDataImageArgs struct {
	// Specifies the description of the image.
	Description pulumi.StringPtrInput
	// Specifies the enterprise project ID to which the IMS image belongs.
	// For enterprise users, if omitted, default enterprise project will be used.
	EnterpriseProjectId pulumi.StringPtrInput
	// Specifies the name of the image.
	// The valid length is limited from `1` to `128` characters.
	// The first and last letters of the name cannot be spaces.
	// The name can contain uppercase letters, lowercase letters, numbers, spaces, chinese, and special characters (-._).
	Name pulumi.StringPtrInput
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the key/value pairs to associate with the image.
	Tags pulumi.StringMapInput
	// Specifies the EVS volume ID used to create the image.
	// Changing this parameter will create a new resource.
	VolumeId pulumi.StringInput
}

func (EvsDataImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*evsDataImageArgs)(nil)).Elem()
}

type EvsDataImageInput interface {
	pulumi.Input

	ToEvsDataImageOutput() EvsDataImageOutput
	ToEvsDataImageOutputWithContext(ctx context.Context) EvsDataImageOutput
}

func (*EvsDataImage) ElementType() reflect.Type {
	return reflect.TypeOf((**EvsDataImage)(nil)).Elem()
}

func (i *EvsDataImage) ToEvsDataImageOutput() EvsDataImageOutput {
	return i.ToEvsDataImageOutputWithContext(context.Background())
}

func (i *EvsDataImage) ToEvsDataImageOutputWithContext(ctx context.Context) EvsDataImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EvsDataImageOutput)
}

// EvsDataImageArrayInput is an input type that accepts EvsDataImageArray and EvsDataImageArrayOutput values.
// You can construct a concrete instance of `EvsDataImageArrayInput` via:
//
//	EvsDataImageArray{ EvsDataImageArgs{...} }
type EvsDataImageArrayInput interface {
	pulumi.Input

	ToEvsDataImageArrayOutput() EvsDataImageArrayOutput
	ToEvsDataImageArrayOutputWithContext(context.Context) EvsDataImageArrayOutput
}

type EvsDataImageArray []EvsDataImageInput

func (EvsDataImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EvsDataImage)(nil)).Elem()
}

func (i EvsDataImageArray) ToEvsDataImageArrayOutput() EvsDataImageArrayOutput {
	return i.ToEvsDataImageArrayOutputWithContext(context.Background())
}

func (i EvsDataImageArray) ToEvsDataImageArrayOutputWithContext(ctx context.Context) EvsDataImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EvsDataImageArrayOutput)
}

// EvsDataImageMapInput is an input type that accepts EvsDataImageMap and EvsDataImageMapOutput values.
// You can construct a concrete instance of `EvsDataImageMapInput` via:
//
//	EvsDataImageMap{ "key": EvsDataImageArgs{...} }
type EvsDataImageMapInput interface {
	pulumi.Input

	ToEvsDataImageMapOutput() EvsDataImageMapOutput
	ToEvsDataImageMapOutputWithContext(context.Context) EvsDataImageMapOutput
}

type EvsDataImageMap map[string]EvsDataImageInput

func (EvsDataImageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EvsDataImage)(nil)).Elem()
}

func (i EvsDataImageMap) ToEvsDataImageMapOutput() EvsDataImageMapOutput {
	return i.ToEvsDataImageMapOutputWithContext(context.Background())
}

func (i EvsDataImageMap) ToEvsDataImageMapOutputWithContext(ctx context.Context) EvsDataImageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EvsDataImageMapOutput)
}

type EvsDataImageOutput struct{ *pulumi.OutputState }

func (EvsDataImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EvsDataImage)(nil)).Elem()
}

func (o EvsDataImageOutput) ToEvsDataImageOutput() EvsDataImageOutput {
	return o
}

func (o EvsDataImageOutput) ToEvsDataImageOutputWithContext(ctx context.Context) EvsDataImageOutput {
	return o
}

// The time when the image status changes to active, in RFC3339 format.
func (o EvsDataImageOutput) ActiveAt() pulumi.StringOutput {
	return o.ApplyT(func(v *EvsDataImage) pulumi.StringOutput { return v.ActiveAt }).(pulumi.StringOutput)
}

// The creation time of the image, in RFC3339 format.
func (o EvsDataImageOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *EvsDataImage) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The image source. The format is **volume,volume_id**.
func (o EvsDataImageOutput) DataOrigin() pulumi.StringOutput {
	return o.ApplyT(func(v *EvsDataImage) pulumi.StringOutput { return v.DataOrigin }).(pulumi.StringOutput)
}

// Specifies the description of the image.
func (o EvsDataImageOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EvsDataImage) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The image format. The value can be **zvhd2**, **vhd**, **zvhd**, **raw**, or **qcow2**.
func (o EvsDataImageOutput) DiskFormat() pulumi.StringOutput {
	return o.ApplyT(func(v *EvsDataImage) pulumi.StringOutput { return v.DiskFormat }).(pulumi.StringOutput)
}

// Specifies the enterprise project ID to which the IMS image belongs.
// For enterprise users, if omitted, default enterprise project will be used.
func (o EvsDataImageOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *EvsDataImage) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// The size of the image file, in bytes unit.
func (o EvsDataImageOutput) ImageSize() pulumi.StringOutput {
	return o.ApplyT(func(v *EvsDataImage) pulumi.StringOutput { return v.ImageSize }).(pulumi.StringOutput)
}

// The minimum disk space required to run an image, in GB unit.
// + When the operating system is Linux, the value ranges from `10` to `1,024`.
// + When the operating system is Windows, the value ranges from `20` to `1,024`.
func (o EvsDataImageOutput) MinDisk() pulumi.IntOutput {
	return o.ApplyT(func(v *EvsDataImage) pulumi.IntOutput { return v.MinDisk }).(pulumi.IntOutput)
}

// Specifies the name of the image.
// The valid length is limited from `1` to `128` characters.
// The first and last letters of the name cannot be spaces.
// The name can contain uppercase letters, lowercase letters, numbers, spaces, chinese, and special characters (-._).
func (o EvsDataImageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EvsDataImage) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The operating system type. The value can be **Linux**, **Windows**, or **Other**.
func (o EvsDataImageOutput) OsType() pulumi.StringOutput {
	return o.ApplyT(func(v *EvsDataImage) pulumi.StringOutput { return v.OsType }).(pulumi.StringOutput)
}

// Specifies the region in which to create the resource.
// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
func (o EvsDataImageOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *EvsDataImage) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The status of the image. The value can be **active**, **queued**, **saving**, **deleted**, or **killed*,
// only image with a status of **active** can be used.
func (o EvsDataImageOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *EvsDataImage) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specifies the key/value pairs to associate with the image.
func (o EvsDataImageOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EvsDataImage) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The last update time of the image, in RFC3339 format.
func (o EvsDataImageOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *EvsDataImage) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// Whether the image is visible to other tenants.
func (o EvsDataImageOutput) Visibility() pulumi.StringOutput {
	return o.ApplyT(func(v *EvsDataImage) pulumi.StringOutput { return v.Visibility }).(pulumi.StringOutput)
}

// Specifies the EVS volume ID used to create the image.
// Changing this parameter will create a new resource.
func (o EvsDataImageOutput) VolumeId() pulumi.StringOutput {
	return o.ApplyT(func(v *EvsDataImage) pulumi.StringOutput { return v.VolumeId }).(pulumi.StringOutput)
}

type EvsDataImageArrayOutput struct{ *pulumi.OutputState }

func (EvsDataImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EvsDataImage)(nil)).Elem()
}

func (o EvsDataImageArrayOutput) ToEvsDataImageArrayOutput() EvsDataImageArrayOutput {
	return o
}

func (o EvsDataImageArrayOutput) ToEvsDataImageArrayOutputWithContext(ctx context.Context) EvsDataImageArrayOutput {
	return o
}

func (o EvsDataImageArrayOutput) Index(i pulumi.IntInput) EvsDataImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EvsDataImage {
		return vs[0].([]*EvsDataImage)[vs[1].(int)]
	}).(EvsDataImageOutput)
}

type EvsDataImageMapOutput struct{ *pulumi.OutputState }

func (EvsDataImageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EvsDataImage)(nil)).Elem()
}

func (o EvsDataImageMapOutput) ToEvsDataImageMapOutput() EvsDataImageMapOutput {
	return o
}

func (o EvsDataImageMapOutput) ToEvsDataImageMapOutputWithContext(ctx context.Context) EvsDataImageMapOutput {
	return o
}

func (o EvsDataImageMapOutput) MapIndex(k pulumi.StringInput) EvsDataImageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EvsDataImage {
		return vs[0].(map[string]*EvsDataImage)[vs[1].(string)]
	}).(EvsDataImageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EvsDataImageInput)(nil)).Elem(), &EvsDataImage{})
	pulumi.RegisterInputType(reflect.TypeOf((*EvsDataImageArrayInput)(nil)).Elem(), EvsDataImageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EvsDataImageMapInput)(nil)).Elem(), EvsDataImageMap{})
	pulumi.RegisterOutputType(EvsDataImageOutput{})
	pulumi.RegisterOutputType(EvsDataImageArrayOutput{})
	pulumi.RegisterOutputType(EvsDataImageMapOutput{})
}
