// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ims

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an IMS data image resource created from external image file in the OBS bucket within HuaweiCloud.
//
// ## Example Usage
// ### Creating an IMS data image from an external image file in the OBS bucket
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Ims"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := cfg.RequireObject("name")
//			imageUrl := cfg.RequireObject("imageUrl")
//			minDisk := cfg.RequireObject("minDisk")
//			_, err := Ims.NewObsDataImage(ctx, "test", &Ims.ObsDataImageArgs{
//				ImageUrl: pulumi.Any(imageUrl),
//				MinDisk:  pulumi.Any(minDisk),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The IMS OBS data image resource can be imported using the `id`, e.g. bash
//
// ```sh
//
//	$ pulumi import huaweicloud:Ims/obsDataImage:ObsDataImage test <id>
//
// ```
type ObsDataImage struct {
	pulumi.CustomResourceState

	// The time when the image status changes to active, in RFC3339 format.
	ActiveAt pulumi.StringOutput `pulumi:"activeAt"`
	// Specifies the custom key for creating encrypted image.
	// Changing this parameter will create a new resource.
	CmkId pulumi.StringOutput `pulumi:"cmkId"`
	// The creation time of the image, in RFC3339 format.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The image source. The format is **file,image_url**.
	DataOrigin pulumi.StringOutput `pulumi:"dataOrigin"`
	// Specifies the description of the image.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The image format. The value can be **zvhd2**, **vhd**, **zvhd**, **raw**, **qcow2**, or **iso**.
	DiskFormat pulumi.StringOutput `pulumi:"diskFormat"`
	// Specifies the enterprise project ID to which the IMS image belongs.
	// For enterprise users, if omitted, default enterprise project will be used.
	EnterpriseProjectId pulumi.StringOutput `pulumi:"enterpriseProjectId"`
	// The size of the image file, in bytes unit.
	ImageSize pulumi.StringOutput `pulumi:"imageSize"`
	// Specifies the URL of the external image file in the OBS bucket, the format
	// is **OBS bucket name:image file name**. The storage category for OBS bucket and image file must be OBS standard
	// storage. Changing this parameter will create a new resource.
	ImageUrl pulumi.StringOutput `pulumi:"imageUrl"`
	// Specifies the minimum size of the system disk, in GB unit. The value ranges
	// from `40` to `2,048`. Changing this parameter will create a new resource.
	MinDisk pulumi.IntOutput `pulumi:"minDisk"`
	// Specifies the name of the image.
	// The valid length is limited from `1` to `128` characters.
	// The first and last letters of the name cannot be spaces.
	// The name can contain uppercase letters, lowercase letters, numbers, spaces, chinese, and special characters (-._).
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the operating system type of the image. The value can be
	// **Windows** or **Linux**. Defaults to **Linux**. Changing this parameter will create a new resource.
	OsType pulumi.StringOutput `pulumi:"osType"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// The status of the image. The value can be **active**, **queued**, **saving**, **deleted**, or **killed*,
	// only image with a status of **active** can be used.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the key/value pairs to associate with the image.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The last update time of the image, in RFC3339 format.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// Whether the image is visible to other tenants.
	Visibility pulumi.StringOutput `pulumi:"visibility"`
}

// NewObsDataImage registers a new resource with the given unique name, arguments, and options.
func NewObsDataImage(ctx *pulumi.Context,
	name string, args *ObsDataImageArgs, opts ...pulumi.ResourceOption) (*ObsDataImage, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ImageUrl == nil {
		return nil, errors.New("invalid value for required argument 'ImageUrl'")
	}
	if args.MinDisk == nil {
		return nil, errors.New("invalid value for required argument 'MinDisk'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ObsDataImage
	err := ctx.RegisterResource("huaweicloud:Ims/obsDataImage:ObsDataImage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetObsDataImage gets an existing ObsDataImage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetObsDataImage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ObsDataImageState, opts ...pulumi.ResourceOption) (*ObsDataImage, error) {
	var resource ObsDataImage
	err := ctx.ReadResource("huaweicloud:Ims/obsDataImage:ObsDataImage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ObsDataImage resources.
type obsDataImageState struct {
	// The time when the image status changes to active, in RFC3339 format.
	ActiveAt *string `pulumi:"activeAt"`
	// Specifies the custom key for creating encrypted image.
	// Changing this parameter will create a new resource.
	CmkId *string `pulumi:"cmkId"`
	// The creation time of the image, in RFC3339 format.
	CreatedAt *string `pulumi:"createdAt"`
	// The image source. The format is **file,image_url**.
	DataOrigin *string `pulumi:"dataOrigin"`
	// Specifies the description of the image.
	Description *string `pulumi:"description"`
	// The image format. The value can be **zvhd2**, **vhd**, **zvhd**, **raw**, **qcow2**, or **iso**.
	DiskFormat *string `pulumi:"diskFormat"`
	// Specifies the enterprise project ID to which the IMS image belongs.
	// For enterprise users, if omitted, default enterprise project will be used.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// The size of the image file, in bytes unit.
	ImageSize *string `pulumi:"imageSize"`
	// Specifies the URL of the external image file in the OBS bucket, the format
	// is **OBS bucket name:image file name**. The storage category for OBS bucket and image file must be OBS standard
	// storage. Changing this parameter will create a new resource.
	ImageUrl *string `pulumi:"imageUrl"`
	// Specifies the minimum size of the system disk, in GB unit. The value ranges
	// from `40` to `2,048`. Changing this parameter will create a new resource.
	MinDisk *int `pulumi:"minDisk"`
	// Specifies the name of the image.
	// The valid length is limited from `1` to `128` characters.
	// The first and last letters of the name cannot be spaces.
	// The name can contain uppercase letters, lowercase letters, numbers, spaces, chinese, and special characters (-._).
	Name *string `pulumi:"name"`
	// Specifies the operating system type of the image. The value can be
	// **Windows** or **Linux**. Defaults to **Linux**. Changing this parameter will create a new resource.
	OsType *string `pulumi:"osType"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// The status of the image. The value can be **active**, **queued**, **saving**, **deleted**, or **killed*,
	// only image with a status of **active** can be used.
	Status *string `pulumi:"status"`
	// Specifies the key/value pairs to associate with the image.
	Tags map[string]string `pulumi:"tags"`
	// The last update time of the image, in RFC3339 format.
	UpdatedAt *string `pulumi:"updatedAt"`
	// Whether the image is visible to other tenants.
	Visibility *string `pulumi:"visibility"`
}

type ObsDataImageState struct {
	// The time when the image status changes to active, in RFC3339 format.
	ActiveAt pulumi.StringPtrInput
	// Specifies the custom key for creating encrypted image.
	// Changing this parameter will create a new resource.
	CmkId pulumi.StringPtrInput
	// The creation time of the image, in RFC3339 format.
	CreatedAt pulumi.StringPtrInput
	// The image source. The format is **file,image_url**.
	DataOrigin pulumi.StringPtrInput
	// Specifies the description of the image.
	Description pulumi.StringPtrInput
	// The image format. The value can be **zvhd2**, **vhd**, **zvhd**, **raw**, **qcow2**, or **iso**.
	DiskFormat pulumi.StringPtrInput
	// Specifies the enterprise project ID to which the IMS image belongs.
	// For enterprise users, if omitted, default enterprise project will be used.
	EnterpriseProjectId pulumi.StringPtrInput
	// The size of the image file, in bytes unit.
	ImageSize pulumi.StringPtrInput
	// Specifies the URL of the external image file in the OBS bucket, the format
	// is **OBS bucket name:image file name**. The storage category for OBS bucket and image file must be OBS standard
	// storage. Changing this parameter will create a new resource.
	ImageUrl pulumi.StringPtrInput
	// Specifies the minimum size of the system disk, in GB unit. The value ranges
	// from `40` to `2,048`. Changing this parameter will create a new resource.
	MinDisk pulumi.IntPtrInput
	// Specifies the name of the image.
	// The valid length is limited from `1` to `128` characters.
	// The first and last letters of the name cannot be spaces.
	// The name can contain uppercase letters, lowercase letters, numbers, spaces, chinese, and special characters (-._).
	Name pulumi.StringPtrInput
	// Specifies the operating system type of the image. The value can be
	// **Windows** or **Linux**. Defaults to **Linux**. Changing this parameter will create a new resource.
	OsType pulumi.StringPtrInput
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// The status of the image. The value can be **active**, **queued**, **saving**, **deleted**, or **killed*,
	// only image with a status of **active** can be used.
	Status pulumi.StringPtrInput
	// Specifies the key/value pairs to associate with the image.
	Tags pulumi.StringMapInput
	// The last update time of the image, in RFC3339 format.
	UpdatedAt pulumi.StringPtrInput
	// Whether the image is visible to other tenants.
	Visibility pulumi.StringPtrInput
}

func (ObsDataImageState) ElementType() reflect.Type {
	return reflect.TypeOf((*obsDataImageState)(nil)).Elem()
}

type obsDataImageArgs struct {
	// Specifies the custom key for creating encrypted image.
	// Changing this parameter will create a new resource.
	CmkId *string `pulumi:"cmkId"`
	// Specifies the description of the image.
	Description *string `pulumi:"description"`
	// Specifies the enterprise project ID to which the IMS image belongs.
	// For enterprise users, if omitted, default enterprise project will be used.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies the URL of the external image file in the OBS bucket, the format
	// is **OBS bucket name:image file name**. The storage category for OBS bucket and image file must be OBS standard
	// storage. Changing this parameter will create a new resource.
	ImageUrl string `pulumi:"imageUrl"`
	// Specifies the minimum size of the system disk, in GB unit. The value ranges
	// from `40` to `2,048`. Changing this parameter will create a new resource.
	MinDisk int `pulumi:"minDisk"`
	// Specifies the name of the image.
	// The valid length is limited from `1` to `128` characters.
	// The first and last letters of the name cannot be spaces.
	// The name can contain uppercase letters, lowercase letters, numbers, spaces, chinese, and special characters (-._).
	Name *string `pulumi:"name"`
	// Specifies the operating system type of the image. The value can be
	// **Windows** or **Linux**. Defaults to **Linux**. Changing this parameter will create a new resource.
	OsType *string `pulumi:"osType"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the key/value pairs to associate with the image.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a ObsDataImage resource.
type ObsDataImageArgs struct {
	// Specifies the custom key for creating encrypted image.
	// Changing this parameter will create a new resource.
	CmkId pulumi.StringPtrInput
	// Specifies the description of the image.
	Description pulumi.StringPtrInput
	// Specifies the enterprise project ID to which the IMS image belongs.
	// For enterprise users, if omitted, default enterprise project will be used.
	EnterpriseProjectId pulumi.StringPtrInput
	// Specifies the URL of the external image file in the OBS bucket, the format
	// is **OBS bucket name:image file name**. The storage category for OBS bucket and image file must be OBS standard
	// storage. Changing this parameter will create a new resource.
	ImageUrl pulumi.StringInput
	// Specifies the minimum size of the system disk, in GB unit. The value ranges
	// from `40` to `2,048`. Changing this parameter will create a new resource.
	MinDisk pulumi.IntInput
	// Specifies the name of the image.
	// The valid length is limited from `1` to `128` characters.
	// The first and last letters of the name cannot be spaces.
	// The name can contain uppercase letters, lowercase letters, numbers, spaces, chinese, and special characters (-._).
	Name pulumi.StringPtrInput
	// Specifies the operating system type of the image. The value can be
	// **Windows** or **Linux**. Defaults to **Linux**. Changing this parameter will create a new resource.
	OsType pulumi.StringPtrInput
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the key/value pairs to associate with the image.
	Tags pulumi.StringMapInput
}

func (ObsDataImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*obsDataImageArgs)(nil)).Elem()
}

type ObsDataImageInput interface {
	pulumi.Input

	ToObsDataImageOutput() ObsDataImageOutput
	ToObsDataImageOutputWithContext(ctx context.Context) ObsDataImageOutput
}

func (*ObsDataImage) ElementType() reflect.Type {
	return reflect.TypeOf((**ObsDataImage)(nil)).Elem()
}

func (i *ObsDataImage) ToObsDataImageOutput() ObsDataImageOutput {
	return i.ToObsDataImageOutputWithContext(context.Background())
}

func (i *ObsDataImage) ToObsDataImageOutputWithContext(ctx context.Context) ObsDataImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObsDataImageOutput)
}

// ObsDataImageArrayInput is an input type that accepts ObsDataImageArray and ObsDataImageArrayOutput values.
// You can construct a concrete instance of `ObsDataImageArrayInput` via:
//
//	ObsDataImageArray{ ObsDataImageArgs{...} }
type ObsDataImageArrayInput interface {
	pulumi.Input

	ToObsDataImageArrayOutput() ObsDataImageArrayOutput
	ToObsDataImageArrayOutputWithContext(context.Context) ObsDataImageArrayOutput
}

type ObsDataImageArray []ObsDataImageInput

func (ObsDataImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ObsDataImage)(nil)).Elem()
}

func (i ObsDataImageArray) ToObsDataImageArrayOutput() ObsDataImageArrayOutput {
	return i.ToObsDataImageArrayOutputWithContext(context.Background())
}

func (i ObsDataImageArray) ToObsDataImageArrayOutputWithContext(ctx context.Context) ObsDataImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObsDataImageArrayOutput)
}

// ObsDataImageMapInput is an input type that accepts ObsDataImageMap and ObsDataImageMapOutput values.
// You can construct a concrete instance of `ObsDataImageMapInput` via:
//
//	ObsDataImageMap{ "key": ObsDataImageArgs{...} }
type ObsDataImageMapInput interface {
	pulumi.Input

	ToObsDataImageMapOutput() ObsDataImageMapOutput
	ToObsDataImageMapOutputWithContext(context.Context) ObsDataImageMapOutput
}

type ObsDataImageMap map[string]ObsDataImageInput

func (ObsDataImageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ObsDataImage)(nil)).Elem()
}

func (i ObsDataImageMap) ToObsDataImageMapOutput() ObsDataImageMapOutput {
	return i.ToObsDataImageMapOutputWithContext(context.Background())
}

func (i ObsDataImageMap) ToObsDataImageMapOutputWithContext(ctx context.Context) ObsDataImageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObsDataImageMapOutput)
}

type ObsDataImageOutput struct{ *pulumi.OutputState }

func (ObsDataImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObsDataImage)(nil)).Elem()
}

func (o ObsDataImageOutput) ToObsDataImageOutput() ObsDataImageOutput {
	return o
}

func (o ObsDataImageOutput) ToObsDataImageOutputWithContext(ctx context.Context) ObsDataImageOutput {
	return o
}

// The time when the image status changes to active, in RFC3339 format.
func (o ObsDataImageOutput) ActiveAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ObsDataImage) pulumi.StringOutput { return v.ActiveAt }).(pulumi.StringOutput)
}

// Specifies the custom key for creating encrypted image.
// Changing this parameter will create a new resource.
func (o ObsDataImageOutput) CmkId() pulumi.StringOutput {
	return o.ApplyT(func(v *ObsDataImage) pulumi.StringOutput { return v.CmkId }).(pulumi.StringOutput)
}

// The creation time of the image, in RFC3339 format.
func (o ObsDataImageOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ObsDataImage) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The image source. The format is **file,image_url**.
func (o ObsDataImageOutput) DataOrigin() pulumi.StringOutput {
	return o.ApplyT(func(v *ObsDataImage) pulumi.StringOutput { return v.DataOrigin }).(pulumi.StringOutput)
}

// Specifies the description of the image.
func (o ObsDataImageOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObsDataImage) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The image format. The value can be **zvhd2**, **vhd**, **zvhd**, **raw**, **qcow2**, or **iso**.
func (o ObsDataImageOutput) DiskFormat() pulumi.StringOutput {
	return o.ApplyT(func(v *ObsDataImage) pulumi.StringOutput { return v.DiskFormat }).(pulumi.StringOutput)
}

// Specifies the enterprise project ID to which the IMS image belongs.
// For enterprise users, if omitted, default enterprise project will be used.
func (o ObsDataImageOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ObsDataImage) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// The size of the image file, in bytes unit.
func (o ObsDataImageOutput) ImageSize() pulumi.StringOutput {
	return o.ApplyT(func(v *ObsDataImage) pulumi.StringOutput { return v.ImageSize }).(pulumi.StringOutput)
}

// Specifies the URL of the external image file in the OBS bucket, the format
// is **OBS bucket name:image file name**. The storage category for OBS bucket and image file must be OBS standard
// storage. Changing this parameter will create a new resource.
func (o ObsDataImageOutput) ImageUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *ObsDataImage) pulumi.StringOutput { return v.ImageUrl }).(pulumi.StringOutput)
}

// Specifies the minimum size of the system disk, in GB unit. The value ranges
// from `40` to `2,048`. Changing this parameter will create a new resource.
func (o ObsDataImageOutput) MinDisk() pulumi.IntOutput {
	return o.ApplyT(func(v *ObsDataImage) pulumi.IntOutput { return v.MinDisk }).(pulumi.IntOutput)
}

// Specifies the name of the image.
// The valid length is limited from `1` to `128` characters.
// The first and last letters of the name cannot be spaces.
// The name can contain uppercase letters, lowercase letters, numbers, spaces, chinese, and special characters (-._).
func (o ObsDataImageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ObsDataImage) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the operating system type of the image. The value can be
// **Windows** or **Linux**. Defaults to **Linux**. Changing this parameter will create a new resource.
func (o ObsDataImageOutput) OsType() pulumi.StringOutput {
	return o.ApplyT(func(v *ObsDataImage) pulumi.StringOutput { return v.OsType }).(pulumi.StringOutput)
}

// Specifies the region in which to create the resource.
// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
func (o ObsDataImageOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ObsDataImage) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The status of the image. The value can be **active**, **queued**, **saving**, **deleted**, or **killed*,
// only image with a status of **active** can be used.
func (o ObsDataImageOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *ObsDataImage) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specifies the key/value pairs to associate with the image.
func (o ObsDataImageOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ObsDataImage) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The last update time of the image, in RFC3339 format.
func (o ObsDataImageOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ObsDataImage) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// Whether the image is visible to other tenants.
func (o ObsDataImageOutput) Visibility() pulumi.StringOutput {
	return o.ApplyT(func(v *ObsDataImage) pulumi.StringOutput { return v.Visibility }).(pulumi.StringOutput)
}

type ObsDataImageArrayOutput struct{ *pulumi.OutputState }

func (ObsDataImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ObsDataImage)(nil)).Elem()
}

func (o ObsDataImageArrayOutput) ToObsDataImageArrayOutput() ObsDataImageArrayOutput {
	return o
}

func (o ObsDataImageArrayOutput) ToObsDataImageArrayOutputWithContext(ctx context.Context) ObsDataImageArrayOutput {
	return o
}

func (o ObsDataImageArrayOutput) Index(i pulumi.IntInput) ObsDataImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ObsDataImage {
		return vs[0].([]*ObsDataImage)[vs[1].(int)]
	}).(ObsDataImageOutput)
}

type ObsDataImageMapOutput struct{ *pulumi.OutputState }

func (ObsDataImageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ObsDataImage)(nil)).Elem()
}

func (o ObsDataImageMapOutput) ToObsDataImageMapOutput() ObsDataImageMapOutput {
	return o
}

func (o ObsDataImageMapOutput) ToObsDataImageMapOutputWithContext(ctx context.Context) ObsDataImageMapOutput {
	return o
}

func (o ObsDataImageMapOutput) MapIndex(k pulumi.StringInput) ObsDataImageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ObsDataImage {
		return vs[0].(map[string]*ObsDataImage)[vs[1].(string)]
	}).(ObsDataImageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ObsDataImageInput)(nil)).Elem(), &ObsDataImage{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObsDataImageArrayInput)(nil)).Elem(), ObsDataImageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObsDataImageMapInput)(nil)).Elem(), ObsDataImageMap{})
	pulumi.RegisterOutputType(ObsDataImageOutput{})
	pulumi.RegisterOutputType(ObsDataImageArrayOutput{})
	pulumi.RegisterOutputType(ObsDataImageMapOutput{})
}
