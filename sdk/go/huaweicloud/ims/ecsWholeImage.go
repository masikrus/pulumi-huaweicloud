// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ims

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an IMS whole image resource created from ECS instance within HuaweiCloud.
//
// > After deleting the image, the CBR backup that has not been deleted will be retained and continue to be charged.
//
//	If you need to delete it later, you can delete the corresponding CBR backup in the CBR backup console.
//
// ## Example Usage
// ### Creating an IMS whole image from an existing ECS instance
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Ims"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := cfg.RequireObject("name")
//			instanceId := cfg.RequireObject("instanceId")
//			vaultId := cfg.RequireObject("vaultId")
//			_, err := Ims.NewEcsWholeImage(ctx, "test", &Ims.EcsWholeImageArgs{
//				InstanceId: pulumi.Any(instanceId),
//				VaultId:    pulumi.Any(vaultId),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The IMS ECS whole image resource can be imported using the `id`, e.g. bash
//
// ```sh
//
//	$ pulumi import huaweicloud:Ims/ecsWholeImage:EcsWholeImage test <id>
//
// ```
//
//	Note that the imported state may not be identical to your resource definition, due to some attributes missing from the API response, security or some other reason. The missing attributes include`is_delete_backup`. It is generally recommended running `terraform plan` after importing the resource. You can then decide if changes should be applied to the resource, or the resource definition should be updated to align with the image. Also, you can ignore changes as below. resource "huaweicloud_ims_ecs_whole_image" "test" {
//
//	...
//
//	lifecycle {
//
//	ignore_changes = [
//
//	is_delete_backup,
//
//	]
//
//	} }
type EcsWholeImage struct {
	pulumi.CustomResourceState

	// The time when the image status changes to active, in RFC3339 format.
	ActiveAt pulumi.StringOutput `pulumi:"activeAt"`
	// The ID of CBR backup.
	BackupId pulumi.StringOutput `pulumi:"backupId"`
	// The creation time of the image, in RFC3339 format.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The image resource. The format is **server_backup,vault_id**.
	DataOrigin pulumi.StringOutput `pulumi:"dataOrigin"`
	// Specifies the description of the image.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The image format. The value can be **zvhd2**, **vhd**, **zvhd**, **raw**, or **qcow2**.
	DiskFormat pulumi.StringOutput `pulumi:"diskFormat"`
	// Specifies the enterprise project ID to which the IMS image belongs.
	// For enterprise users, if omitted, default enterprise project will be used.
	EnterpriseProjectId pulumi.StringOutput `pulumi:"enterpriseProjectId"`
	// Specifies the source ECS instance ID used to create the image.
	// Changing this parameter will create a new resource.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Specifies whether to delete the associated CBR backup when deleting image.
	// The value can be **true** or **false**.
	IsDeleteBackup pulumi.BoolPtrOutput `pulumi:"isDeleteBackup"`
	// Specifies the maximum memory of the image, in MB unit.
	MaxRam pulumi.IntOutput `pulumi:"maxRam"`
	// The minimum disk space required to run an image, in GB unit.
	MinDisk pulumi.IntOutput `pulumi:"minDisk"`
	// Specifies the minimum memory of the image, in MB unit.
	// The default value is `0`, indicating that the memory is not restricted.
	MinRam pulumi.IntOutput `pulumi:"minRam"`
	// Specifies the name of the image.
	// The valid length is limited from `1` to `128` characters.
	// The first and last letters of the name cannot be spaces.
	// The name can contain uppercase letters, lowercase letters, numbers, spaces, chinese, and special characters (-._).
	Name pulumi.StringOutput `pulumi:"name"`
	// The operating system version of the image.
	OsVersion pulumi.StringOutput `pulumi:"osVersion"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// The status of the image. The value can be **active**, **queued**, **saving**, **deleted**, or **killed*,
	// only image with a status of **active** can be used.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the key/value pairs to associate with the image.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The last update time of the image, in RFC3339 format.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// Specifies the ID of the vault to which an ECS instance is to be added or has
	// been added. Changing this parameter will create a new resource.
	VaultId pulumi.StringOutput `pulumi:"vaultId"`
	// Whether the image is visible to other tenants.
	Visibility pulumi.StringOutput `pulumi:"visibility"`
}

// NewEcsWholeImage registers a new resource with the given unique name, arguments, and options.
func NewEcsWholeImage(ctx *pulumi.Context,
	name string, args *EcsWholeImageArgs, opts ...pulumi.ResourceOption) (*EcsWholeImage, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.VaultId == nil {
		return nil, errors.New("invalid value for required argument 'VaultId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource EcsWholeImage
	err := ctx.RegisterResource("huaweicloud:Ims/ecsWholeImage:EcsWholeImage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEcsWholeImage gets an existing EcsWholeImage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEcsWholeImage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EcsWholeImageState, opts ...pulumi.ResourceOption) (*EcsWholeImage, error) {
	var resource EcsWholeImage
	err := ctx.ReadResource("huaweicloud:Ims/ecsWholeImage:EcsWholeImage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EcsWholeImage resources.
type ecsWholeImageState struct {
	// The time when the image status changes to active, in RFC3339 format.
	ActiveAt *string `pulumi:"activeAt"`
	// The ID of CBR backup.
	BackupId *string `pulumi:"backupId"`
	// The creation time of the image, in RFC3339 format.
	CreatedAt *string `pulumi:"createdAt"`
	// The image resource. The format is **server_backup,vault_id**.
	DataOrigin *string `pulumi:"dataOrigin"`
	// Specifies the description of the image.
	Description *string `pulumi:"description"`
	// The image format. The value can be **zvhd2**, **vhd**, **zvhd**, **raw**, or **qcow2**.
	DiskFormat *string `pulumi:"diskFormat"`
	// Specifies the enterprise project ID to which the IMS image belongs.
	// For enterprise users, if omitted, default enterprise project will be used.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies the source ECS instance ID used to create the image.
	// Changing this parameter will create a new resource.
	InstanceId *string `pulumi:"instanceId"`
	// Specifies whether to delete the associated CBR backup when deleting image.
	// The value can be **true** or **false**.
	IsDeleteBackup *bool `pulumi:"isDeleteBackup"`
	// Specifies the maximum memory of the image, in MB unit.
	MaxRam *int `pulumi:"maxRam"`
	// The minimum disk space required to run an image, in GB unit.
	MinDisk *int `pulumi:"minDisk"`
	// Specifies the minimum memory of the image, in MB unit.
	// The default value is `0`, indicating that the memory is not restricted.
	MinRam *int `pulumi:"minRam"`
	// Specifies the name of the image.
	// The valid length is limited from `1` to `128` characters.
	// The first and last letters of the name cannot be spaces.
	// The name can contain uppercase letters, lowercase letters, numbers, spaces, chinese, and special characters (-._).
	Name *string `pulumi:"name"`
	// The operating system version of the image.
	OsVersion *string `pulumi:"osVersion"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// The status of the image. The value can be **active**, **queued**, **saving**, **deleted**, or **killed*,
	// only image with a status of **active** can be used.
	Status *string `pulumi:"status"`
	// Specifies the key/value pairs to associate with the image.
	Tags map[string]string `pulumi:"tags"`
	// The last update time of the image, in RFC3339 format.
	UpdatedAt *string `pulumi:"updatedAt"`
	// Specifies the ID of the vault to which an ECS instance is to be added or has
	// been added. Changing this parameter will create a new resource.
	VaultId *string `pulumi:"vaultId"`
	// Whether the image is visible to other tenants.
	Visibility *string `pulumi:"visibility"`
}

type EcsWholeImageState struct {
	// The time when the image status changes to active, in RFC3339 format.
	ActiveAt pulumi.StringPtrInput
	// The ID of CBR backup.
	BackupId pulumi.StringPtrInput
	// The creation time of the image, in RFC3339 format.
	CreatedAt pulumi.StringPtrInput
	// The image resource. The format is **server_backup,vault_id**.
	DataOrigin pulumi.StringPtrInput
	// Specifies the description of the image.
	Description pulumi.StringPtrInput
	// The image format. The value can be **zvhd2**, **vhd**, **zvhd**, **raw**, or **qcow2**.
	DiskFormat pulumi.StringPtrInput
	// Specifies the enterprise project ID to which the IMS image belongs.
	// For enterprise users, if omitted, default enterprise project will be used.
	EnterpriseProjectId pulumi.StringPtrInput
	// Specifies the source ECS instance ID used to create the image.
	// Changing this parameter will create a new resource.
	InstanceId pulumi.StringPtrInput
	// Specifies whether to delete the associated CBR backup when deleting image.
	// The value can be **true** or **false**.
	IsDeleteBackup pulumi.BoolPtrInput
	// Specifies the maximum memory of the image, in MB unit.
	MaxRam pulumi.IntPtrInput
	// The minimum disk space required to run an image, in GB unit.
	MinDisk pulumi.IntPtrInput
	// Specifies the minimum memory of the image, in MB unit.
	// The default value is `0`, indicating that the memory is not restricted.
	MinRam pulumi.IntPtrInput
	// Specifies the name of the image.
	// The valid length is limited from `1` to `128` characters.
	// The first and last letters of the name cannot be spaces.
	// The name can contain uppercase letters, lowercase letters, numbers, spaces, chinese, and special characters (-._).
	Name pulumi.StringPtrInput
	// The operating system version of the image.
	OsVersion pulumi.StringPtrInput
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// The status of the image. The value can be **active**, **queued**, **saving**, **deleted**, or **killed*,
	// only image with a status of **active** can be used.
	Status pulumi.StringPtrInput
	// Specifies the key/value pairs to associate with the image.
	Tags pulumi.StringMapInput
	// The last update time of the image, in RFC3339 format.
	UpdatedAt pulumi.StringPtrInput
	// Specifies the ID of the vault to which an ECS instance is to be added or has
	// been added. Changing this parameter will create a new resource.
	VaultId pulumi.StringPtrInput
	// Whether the image is visible to other tenants.
	Visibility pulumi.StringPtrInput
}

func (EcsWholeImageState) ElementType() reflect.Type {
	return reflect.TypeOf((*ecsWholeImageState)(nil)).Elem()
}

type ecsWholeImageArgs struct {
	// Specifies the description of the image.
	Description *string `pulumi:"description"`
	// Specifies the enterprise project ID to which the IMS image belongs.
	// For enterprise users, if omitted, default enterprise project will be used.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies the source ECS instance ID used to create the image.
	// Changing this parameter will create a new resource.
	InstanceId string `pulumi:"instanceId"`
	// Specifies whether to delete the associated CBR backup when deleting image.
	// The value can be **true** or **false**.
	IsDeleteBackup *bool `pulumi:"isDeleteBackup"`
	// Specifies the maximum memory of the image, in MB unit.
	MaxRam *int `pulumi:"maxRam"`
	// Specifies the minimum memory of the image, in MB unit.
	// The default value is `0`, indicating that the memory is not restricted.
	MinRam *int `pulumi:"minRam"`
	// Specifies the name of the image.
	// The valid length is limited from `1` to `128` characters.
	// The first and last letters of the name cannot be spaces.
	// The name can contain uppercase letters, lowercase letters, numbers, spaces, chinese, and special characters (-._).
	Name *string `pulumi:"name"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the key/value pairs to associate with the image.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the ID of the vault to which an ECS instance is to be added or has
	// been added. Changing this parameter will create a new resource.
	VaultId string `pulumi:"vaultId"`
}

// The set of arguments for constructing a EcsWholeImage resource.
type EcsWholeImageArgs struct {
	// Specifies the description of the image.
	Description pulumi.StringPtrInput
	// Specifies the enterprise project ID to which the IMS image belongs.
	// For enterprise users, if omitted, default enterprise project will be used.
	EnterpriseProjectId pulumi.StringPtrInput
	// Specifies the source ECS instance ID used to create the image.
	// Changing this parameter will create a new resource.
	InstanceId pulumi.StringInput
	// Specifies whether to delete the associated CBR backup when deleting image.
	// The value can be **true** or **false**.
	IsDeleteBackup pulumi.BoolPtrInput
	// Specifies the maximum memory of the image, in MB unit.
	MaxRam pulumi.IntPtrInput
	// Specifies the minimum memory of the image, in MB unit.
	// The default value is `0`, indicating that the memory is not restricted.
	MinRam pulumi.IntPtrInput
	// Specifies the name of the image.
	// The valid length is limited from `1` to `128` characters.
	// The first and last letters of the name cannot be spaces.
	// The name can contain uppercase letters, lowercase letters, numbers, spaces, chinese, and special characters (-._).
	Name pulumi.StringPtrInput
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the key/value pairs to associate with the image.
	Tags pulumi.StringMapInput
	// Specifies the ID of the vault to which an ECS instance is to be added or has
	// been added. Changing this parameter will create a new resource.
	VaultId pulumi.StringInput
}

func (EcsWholeImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ecsWholeImageArgs)(nil)).Elem()
}

type EcsWholeImageInput interface {
	pulumi.Input

	ToEcsWholeImageOutput() EcsWholeImageOutput
	ToEcsWholeImageOutputWithContext(ctx context.Context) EcsWholeImageOutput
}

func (*EcsWholeImage) ElementType() reflect.Type {
	return reflect.TypeOf((**EcsWholeImage)(nil)).Elem()
}

func (i *EcsWholeImage) ToEcsWholeImageOutput() EcsWholeImageOutput {
	return i.ToEcsWholeImageOutputWithContext(context.Background())
}

func (i *EcsWholeImage) ToEcsWholeImageOutputWithContext(ctx context.Context) EcsWholeImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcsWholeImageOutput)
}

// EcsWholeImageArrayInput is an input type that accepts EcsWholeImageArray and EcsWholeImageArrayOutput values.
// You can construct a concrete instance of `EcsWholeImageArrayInput` via:
//
//	EcsWholeImageArray{ EcsWholeImageArgs{...} }
type EcsWholeImageArrayInput interface {
	pulumi.Input

	ToEcsWholeImageArrayOutput() EcsWholeImageArrayOutput
	ToEcsWholeImageArrayOutputWithContext(context.Context) EcsWholeImageArrayOutput
}

type EcsWholeImageArray []EcsWholeImageInput

func (EcsWholeImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EcsWholeImage)(nil)).Elem()
}

func (i EcsWholeImageArray) ToEcsWholeImageArrayOutput() EcsWholeImageArrayOutput {
	return i.ToEcsWholeImageArrayOutputWithContext(context.Background())
}

func (i EcsWholeImageArray) ToEcsWholeImageArrayOutputWithContext(ctx context.Context) EcsWholeImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcsWholeImageArrayOutput)
}

// EcsWholeImageMapInput is an input type that accepts EcsWholeImageMap and EcsWholeImageMapOutput values.
// You can construct a concrete instance of `EcsWholeImageMapInput` via:
//
//	EcsWholeImageMap{ "key": EcsWholeImageArgs{...} }
type EcsWholeImageMapInput interface {
	pulumi.Input

	ToEcsWholeImageMapOutput() EcsWholeImageMapOutput
	ToEcsWholeImageMapOutputWithContext(context.Context) EcsWholeImageMapOutput
}

type EcsWholeImageMap map[string]EcsWholeImageInput

func (EcsWholeImageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EcsWholeImage)(nil)).Elem()
}

func (i EcsWholeImageMap) ToEcsWholeImageMapOutput() EcsWholeImageMapOutput {
	return i.ToEcsWholeImageMapOutputWithContext(context.Background())
}

func (i EcsWholeImageMap) ToEcsWholeImageMapOutputWithContext(ctx context.Context) EcsWholeImageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcsWholeImageMapOutput)
}

type EcsWholeImageOutput struct{ *pulumi.OutputState }

func (EcsWholeImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EcsWholeImage)(nil)).Elem()
}

func (o EcsWholeImageOutput) ToEcsWholeImageOutput() EcsWholeImageOutput {
	return o
}

func (o EcsWholeImageOutput) ToEcsWholeImageOutputWithContext(ctx context.Context) EcsWholeImageOutput {
	return o
}

// The time when the image status changes to active, in RFC3339 format.
func (o EcsWholeImageOutput) ActiveAt() pulumi.StringOutput {
	return o.ApplyT(func(v *EcsWholeImage) pulumi.StringOutput { return v.ActiveAt }).(pulumi.StringOutput)
}

// The ID of CBR backup.
func (o EcsWholeImageOutput) BackupId() pulumi.StringOutput {
	return o.ApplyT(func(v *EcsWholeImage) pulumi.StringOutput { return v.BackupId }).(pulumi.StringOutput)
}

// The creation time of the image, in RFC3339 format.
func (o EcsWholeImageOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *EcsWholeImage) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The image resource. The format is **server_backup,vault_id**.
func (o EcsWholeImageOutput) DataOrigin() pulumi.StringOutput {
	return o.ApplyT(func(v *EcsWholeImage) pulumi.StringOutput { return v.DataOrigin }).(pulumi.StringOutput)
}

// Specifies the description of the image.
func (o EcsWholeImageOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EcsWholeImage) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The image format. The value can be **zvhd2**, **vhd**, **zvhd**, **raw**, or **qcow2**.
func (o EcsWholeImageOutput) DiskFormat() pulumi.StringOutput {
	return o.ApplyT(func(v *EcsWholeImage) pulumi.StringOutput { return v.DiskFormat }).(pulumi.StringOutput)
}

// Specifies the enterprise project ID to which the IMS image belongs.
// For enterprise users, if omitted, default enterprise project will be used.
func (o EcsWholeImageOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *EcsWholeImage) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// Specifies the source ECS instance ID used to create the image.
// Changing this parameter will create a new resource.
func (o EcsWholeImageOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *EcsWholeImage) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Specifies whether to delete the associated CBR backup when deleting image.
// The value can be **true** or **false**.
func (o EcsWholeImageOutput) IsDeleteBackup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EcsWholeImage) pulumi.BoolPtrOutput { return v.IsDeleteBackup }).(pulumi.BoolPtrOutput)
}

// Specifies the maximum memory of the image, in MB unit.
func (o EcsWholeImageOutput) MaxRam() pulumi.IntOutput {
	return o.ApplyT(func(v *EcsWholeImage) pulumi.IntOutput { return v.MaxRam }).(pulumi.IntOutput)
}

// The minimum disk space required to run an image, in GB unit.
func (o EcsWholeImageOutput) MinDisk() pulumi.IntOutput {
	return o.ApplyT(func(v *EcsWholeImage) pulumi.IntOutput { return v.MinDisk }).(pulumi.IntOutput)
}

// Specifies the minimum memory of the image, in MB unit.
// The default value is `0`, indicating that the memory is not restricted.
func (o EcsWholeImageOutput) MinRam() pulumi.IntOutput {
	return o.ApplyT(func(v *EcsWholeImage) pulumi.IntOutput { return v.MinRam }).(pulumi.IntOutput)
}

// Specifies the name of the image.
// The valid length is limited from `1` to `128` characters.
// The first and last letters of the name cannot be spaces.
// The name can contain uppercase letters, lowercase letters, numbers, spaces, chinese, and special characters (-._).
func (o EcsWholeImageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EcsWholeImage) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The operating system version of the image.
func (o EcsWholeImageOutput) OsVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *EcsWholeImage) pulumi.StringOutput { return v.OsVersion }).(pulumi.StringOutput)
}

// Specifies the region in which to create the resource.
// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
func (o EcsWholeImageOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *EcsWholeImage) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The status of the image. The value can be **active**, **queued**, **saving**, **deleted**, or **killed*,
// only image with a status of **active** can be used.
func (o EcsWholeImageOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *EcsWholeImage) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specifies the key/value pairs to associate with the image.
func (o EcsWholeImageOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EcsWholeImage) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The last update time of the image, in RFC3339 format.
func (o EcsWholeImageOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *EcsWholeImage) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// Specifies the ID of the vault to which an ECS instance is to be added or has
// been added. Changing this parameter will create a new resource.
func (o EcsWholeImageOutput) VaultId() pulumi.StringOutput {
	return o.ApplyT(func(v *EcsWholeImage) pulumi.StringOutput { return v.VaultId }).(pulumi.StringOutput)
}

// Whether the image is visible to other tenants.
func (o EcsWholeImageOutput) Visibility() pulumi.StringOutput {
	return o.ApplyT(func(v *EcsWholeImage) pulumi.StringOutput { return v.Visibility }).(pulumi.StringOutput)
}

type EcsWholeImageArrayOutput struct{ *pulumi.OutputState }

func (EcsWholeImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EcsWholeImage)(nil)).Elem()
}

func (o EcsWholeImageArrayOutput) ToEcsWholeImageArrayOutput() EcsWholeImageArrayOutput {
	return o
}

func (o EcsWholeImageArrayOutput) ToEcsWholeImageArrayOutputWithContext(ctx context.Context) EcsWholeImageArrayOutput {
	return o
}

func (o EcsWholeImageArrayOutput) Index(i pulumi.IntInput) EcsWholeImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EcsWholeImage {
		return vs[0].([]*EcsWholeImage)[vs[1].(int)]
	}).(EcsWholeImageOutput)
}

type EcsWholeImageMapOutput struct{ *pulumi.OutputState }

func (EcsWholeImageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EcsWholeImage)(nil)).Elem()
}

func (o EcsWholeImageMapOutput) ToEcsWholeImageMapOutput() EcsWholeImageMapOutput {
	return o
}

func (o EcsWholeImageMapOutput) ToEcsWholeImageMapOutputWithContext(ctx context.Context) EcsWholeImageMapOutput {
	return o
}

func (o EcsWholeImageMapOutput) MapIndex(k pulumi.StringInput) EcsWholeImageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EcsWholeImage {
		return vs[0].(map[string]*EcsWholeImage)[vs[1].(string)]
	}).(EcsWholeImageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EcsWholeImageInput)(nil)).Elem(), &EcsWholeImage{})
	pulumi.RegisterInputType(reflect.TypeOf((*EcsWholeImageArrayInput)(nil)).Elem(), EcsWholeImageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EcsWholeImageMapInput)(nil)).Elem(), EcsWholeImageMap{})
	pulumi.RegisterOutputType(EcsWholeImageOutput{})
	pulumi.RegisterOutputType(EcsWholeImageArrayOutput{})
	pulumi.RegisterOutputType(EcsWholeImageMapOutput{})
}
