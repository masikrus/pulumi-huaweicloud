// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ims

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an IMS image share resource within HuaweiCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Ims"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			sourceImageId := cfg.RequireObject("sourceImageId")
//			targetProjectIds := cfg.RequireObject("targetProjectIds")
//			_, err := Ims.NewImageShare(ctx, "test", &Ims.ImageShareArgs{
//				SourceImageId:    pulumi.Any(sourceImageId),
//				TargetProjectIds: pulumi.Any(targetProjectIds),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ImageShare struct {
	pulumi.CustomResourceState

	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the ID of the source image. The source image must be in the
	// same region as the current resource.
	SourceImageId pulumi.StringOutput `pulumi:"sourceImageId"`
	// Specifies the IDs of the target projects.
	TargetProjectIds pulumi.StringArrayOutput `pulumi:"targetProjectIds"`
}

// NewImageShare registers a new resource with the given unique name, arguments, and options.
func NewImageShare(ctx *pulumi.Context,
	name string, args *ImageShareArgs, opts ...pulumi.ResourceOption) (*ImageShare, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SourceImageId == nil {
		return nil, errors.New("invalid value for required argument 'SourceImageId'")
	}
	if args.TargetProjectIds == nil {
		return nil, errors.New("invalid value for required argument 'TargetProjectIds'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ImageShare
	err := ctx.RegisterResource("huaweicloud:Ims/imageShare:ImageShare", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImageShare gets an existing ImageShare resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImageShare(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImageShareState, opts ...pulumi.ResourceOption) (*ImageShare, error) {
	var resource ImageShare
	err := ctx.ReadResource("huaweicloud:Ims/imageShare:ImageShare", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ImageShare resources.
type imageShareState struct {
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the ID of the source image. The source image must be in the
	// same region as the current resource.
	SourceImageId *string `pulumi:"sourceImageId"`
	// Specifies the IDs of the target projects.
	TargetProjectIds []string `pulumi:"targetProjectIds"`
}

type ImageShareState struct {
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the ID of the source image. The source image must be in the
	// same region as the current resource.
	SourceImageId pulumi.StringPtrInput
	// Specifies the IDs of the target projects.
	TargetProjectIds pulumi.StringArrayInput
}

func (ImageShareState) ElementType() reflect.Type {
	return reflect.TypeOf((*imageShareState)(nil)).Elem()
}

type imageShareArgs struct {
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the ID of the source image. The source image must be in the
	// same region as the current resource.
	SourceImageId string `pulumi:"sourceImageId"`
	// Specifies the IDs of the target projects.
	TargetProjectIds []string `pulumi:"targetProjectIds"`
}

// The set of arguments for constructing a ImageShare resource.
type ImageShareArgs struct {
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the ID of the source image. The source image must be in the
	// same region as the current resource.
	SourceImageId pulumi.StringInput
	// Specifies the IDs of the target projects.
	TargetProjectIds pulumi.StringArrayInput
}

func (ImageShareArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*imageShareArgs)(nil)).Elem()
}

type ImageShareInput interface {
	pulumi.Input

	ToImageShareOutput() ImageShareOutput
	ToImageShareOutputWithContext(ctx context.Context) ImageShareOutput
}

func (*ImageShare) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageShare)(nil)).Elem()
}

func (i *ImageShare) ToImageShareOutput() ImageShareOutput {
	return i.ToImageShareOutputWithContext(context.Background())
}

func (i *ImageShare) ToImageShareOutputWithContext(ctx context.Context) ImageShareOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageShareOutput)
}

// ImageShareArrayInput is an input type that accepts ImageShareArray and ImageShareArrayOutput values.
// You can construct a concrete instance of `ImageShareArrayInput` via:
//
//	ImageShareArray{ ImageShareArgs{...} }
type ImageShareArrayInput interface {
	pulumi.Input

	ToImageShareArrayOutput() ImageShareArrayOutput
	ToImageShareArrayOutputWithContext(context.Context) ImageShareArrayOutput
}

type ImageShareArray []ImageShareInput

func (ImageShareArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImageShare)(nil)).Elem()
}

func (i ImageShareArray) ToImageShareArrayOutput() ImageShareArrayOutput {
	return i.ToImageShareArrayOutputWithContext(context.Background())
}

func (i ImageShareArray) ToImageShareArrayOutputWithContext(ctx context.Context) ImageShareArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageShareArrayOutput)
}

// ImageShareMapInput is an input type that accepts ImageShareMap and ImageShareMapOutput values.
// You can construct a concrete instance of `ImageShareMapInput` via:
//
//	ImageShareMap{ "key": ImageShareArgs{...} }
type ImageShareMapInput interface {
	pulumi.Input

	ToImageShareMapOutput() ImageShareMapOutput
	ToImageShareMapOutputWithContext(context.Context) ImageShareMapOutput
}

type ImageShareMap map[string]ImageShareInput

func (ImageShareMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImageShare)(nil)).Elem()
}

func (i ImageShareMap) ToImageShareMapOutput() ImageShareMapOutput {
	return i.ToImageShareMapOutputWithContext(context.Background())
}

func (i ImageShareMap) ToImageShareMapOutputWithContext(ctx context.Context) ImageShareMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageShareMapOutput)
}

type ImageShareOutput struct{ *pulumi.OutputState }

func (ImageShareOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageShare)(nil)).Elem()
}

func (o ImageShareOutput) ToImageShareOutput() ImageShareOutput {
	return o
}

func (o ImageShareOutput) ToImageShareOutputWithContext(ctx context.Context) ImageShareOutput {
	return o
}

// Specifies the region in which to create the resource.
// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
func (o ImageShareOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageShare) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the ID of the source image. The source image must be in the
// same region as the current resource.
func (o ImageShareOutput) SourceImageId() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageShare) pulumi.StringOutput { return v.SourceImageId }).(pulumi.StringOutput)
}

// Specifies the IDs of the target projects.
func (o ImageShareOutput) TargetProjectIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ImageShare) pulumi.StringArrayOutput { return v.TargetProjectIds }).(pulumi.StringArrayOutput)
}

type ImageShareArrayOutput struct{ *pulumi.OutputState }

func (ImageShareArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImageShare)(nil)).Elem()
}

func (o ImageShareArrayOutput) ToImageShareArrayOutput() ImageShareArrayOutput {
	return o
}

func (o ImageShareArrayOutput) ToImageShareArrayOutputWithContext(ctx context.Context) ImageShareArrayOutput {
	return o
}

func (o ImageShareArrayOutput) Index(i pulumi.IntInput) ImageShareOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ImageShare {
		return vs[0].([]*ImageShare)[vs[1].(int)]
	}).(ImageShareOutput)
}

type ImageShareMapOutput struct{ *pulumi.OutputState }

func (ImageShareMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImageShare)(nil)).Elem()
}

func (o ImageShareMapOutput) ToImageShareMapOutput() ImageShareMapOutput {
	return o
}

func (o ImageShareMapOutput) ToImageShareMapOutputWithContext(ctx context.Context) ImageShareMapOutput {
	return o
}

func (o ImageShareMapOutput) MapIndex(k pulumi.StringInput) ImageShareOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ImageShare {
		return vs[0].(map[string]*ImageShare)[vs[1].(string)]
	}).(ImageShareOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ImageShareInput)(nil)).Elem(), &ImageShare{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageShareArrayInput)(nil)).Elem(), ImageShareArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageShareMapInput)(nil)).Elem(), ImageShareMap{})
	pulumi.RegisterOutputType(ImageShareOutput{})
	pulumi.RegisterOutputType(ImageShareArrayOutput{})
	pulumi.RegisterOutputType(ImageShareMapOutput{})
}
