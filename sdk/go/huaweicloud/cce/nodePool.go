// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cce

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Add a node pool to a container cluster.
//
// ## Example Usage
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Cce"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Cce"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			clusterId := cfg.RequireObject("clusterId")
//			keyPair := cfg.RequireObject("keyPair")
//			availabilityZone := cfg.RequireObject("availabilityZone")
//			_, err := Cce.NewNodePool(ctx, "nodePool", &Cce.NodePoolArgs{
//				ClusterId:             pulumi.Any(clusterId),
//				Os:                    pulumi.String("EulerOS 2.5"),
//				InitialNodeCount:      pulumi.Int(2),
//				FlavorId:              pulumi.String("s3.large.4"),
//				AvailabilityZone:      pulumi.Any(availabilityZone),
//				KeyPair:               pulumi.Any(_var.Keypair),
//				ScallEnable:           pulumi.Bool(true),
//				MinNodeCount:          pulumi.Int(1),
//				MaxNodeCount:          pulumi.Int(10),
//				ScaleDownCooldownTime: pulumi.Int(100),
//				Priority:              pulumi.Int(1),
//				Type:                  pulumi.String("vm"),
//				RootVolume: &cce.NodePoolRootVolumeArgs{
//					Size:       pulumi.Int(40),
//					Volumetype: pulumi.String("SAS"),
//				},
//				DataVolumes: cce.NodePoolDataVolumeArray{
//					&cce.NodePoolDataVolumeArgs{
//						Size:       pulumi.Int(100),
//						Volumetype: pulumi.String("SAS"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## Node pool with storage configuration
// ### PrePaid node pool
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Cce"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Cce"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			clusterId := cfg.RequireObject("clusterId")
//			keyPair := cfg.RequireObject("keyPair")
//			availabilityZone := cfg.RequireObject("availabilityZone")
//			_, err := Cce.NewNodePool(ctx, "nodePool", &Cce.NodePoolArgs{
//				ClusterId:             pulumi.Any(clusterId),
//				Os:                    pulumi.String("EulerOS 2.5"),
//				InitialNodeCount:      pulumi.Int(2),
//				FlavorId:              pulumi.String("s3.large.4"),
//				AvailabilityZone:      pulumi.Any(availabilityZone),
//				KeyPair:               pulumi.Any(_var.Keypair),
//				ScallEnable:           pulumi.Bool(true),
//				MinNodeCount:          pulumi.Int(1),
//				MaxNodeCount:          pulumi.Int(10),
//				ScaleDownCooldownTime: pulumi.Int(100),
//				Priority:              pulumi.Int(1),
//				Type:                  pulumi.String("vm"),
//				ChargingMode:          pulumi.String("prePaid"),
//				PeriodUnit:            pulumi.String("month"),
//				Period:                pulumi.Int(1),
//				RootVolume: &cce.NodePoolRootVolumeArgs{
//					Size:       pulumi.Int(40),
//					Volumetype: pulumi.String("SAS"),
//				},
//				DataVolumes: cce.NodePoolDataVolumeArray{
//					&cce.NodePoolDataVolumeArgs{
//						Size:       pulumi.Int(100),
//						Volumetype: pulumi.String("SAS"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
//	> You need to remove all nodes in the node pool on the console, before deleting a prepaid node pool.
//
// ## Node pool with extension scale groups
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Cce"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Cce"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			clusterId := cfg.RequireObject("clusterId")
//			keyPair := cfg.RequireObject("keyPair")
//			availabilityZone1 := cfg.RequireObject("availabilityZone1")
//			availabilityZone2 := cfg.RequireObject("availabilityZone2")
//			_, err := Cce.NewNodePool(ctx, "nodePool", &Cce.NodePoolArgs{
//				ClusterId:             pulumi.Any(clusterId),
//				Os:                    pulumi.String("EulerOS 2.5"),
//				InitialNodeCount:      pulumi.Int(2),
//				FlavorId:              pulumi.String("s3.large.4"),
//				AvailabilityZone:      pulumi.Any(availabilityZone1),
//				KeyPair:               pulumi.Any(_var.Keypair),
//				ScallEnable:           pulumi.Bool(true),
//				MinNodeCount:          pulumi.Int(1),
//				MaxNodeCount:          pulumi.Int(10),
//				ScaleDownCooldownTime: pulumi.Int(100),
//				Priority:              pulumi.Int(1),
//				Type:                  pulumi.String("vm"),
//				RootVolume: &cce.NodePoolRootVolumeArgs{
//					Size:       pulumi.Int(40),
//					Volumetype: pulumi.String("SAS"),
//				},
//				DataVolumes: cce.NodePoolDataVolumeArray{
//					&cce.NodePoolDataVolumeArgs{
//						Size:       pulumi.Int(100),
//						Volumetype: pulumi.String("SAS"),
//					},
//				},
//				ExtensionScaleGroups: cce.NodePoolExtensionScaleGroupArray{
//					&cce.NodePoolExtensionScaleGroupArgs{
//						Metadata: &cce.NodePoolExtensionScaleGroupMetadataArgs{
//							Name: pulumi.String("group1"),
//						},
//						Spec: &cce.NodePoolExtensionScaleGroupSpecArgs{
//							Flavor: pulumi.String("s3.large.4"),
//							Az:     pulumi.Any(availabilityZone1),
//							Autoscaling: &cce.NodePoolExtensionScaleGroupSpecAutoscalingArgs{
//								ExtensionPriority: pulumi.Int(1),
//								Enable:            pulumi.Bool(true),
//							},
//						},
//					},
//					&cce.NodePoolExtensionScaleGroupArgs{
//						Metadata: &cce.NodePoolExtensionScaleGroupMetadataArgs{
//							Name: pulumi.String("group2"),
//						},
//						Spec: &cce.NodePoolExtensionScaleGroupSpecArgs{
//							Flavor: pulumi.String("s3.xlarge.4"),
//							Az:     pulumi.Any(availabilityZone1),
//							Autoscaling: &cce.NodePoolExtensionScaleGroupSpecAutoscalingArgs{
//								ExtensionPriority: pulumi.Int(1),
//								Enable:            pulumi.Bool(true),
//							},
//						},
//					},
//					&cce.NodePoolExtensionScaleGroupArgs{
//						Metadata: &cce.NodePoolExtensionScaleGroupMetadataArgs{
//							Name: pulumi.String("group3"),
//						},
//						Spec: &cce.NodePoolExtensionScaleGroupSpecArgs{
//							Flavor: pulumi.String("s3.xlarge.4"),
//							Az:     pulumi.Any(availabilityZone2),
//							Autoscaling: &cce.NodePoolExtensionScaleGroupSpecAutoscalingArgs{
//								ExtensionPriority: pulumi.Int(1),
//								Enable:            pulumi.Bool(true),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// CCE node pool can be imported using the cluster ID and node pool ID separated by a slash, e.g. bash
//
// ```sh
//
//	$ pulumi import huaweicloud:Cce/nodePool:NodePool my_node_pool <cluster_id>/<id>
//
// ```
//
//	Note that the imported state may not be identical to your resource definition, due to some attributes missing from the API response, security or some other reason. The missing attributes include`password`, `extend_params`, `taints`, `initial_node_count`, `pod_security_groups` and `extension_scale_groups`. It is generally recommended running `terraform plan` after importing a node pool. You can then decide if changes should be applied to the node pool, or the resource definition should be updated to align with the node pool. Also you can ignore changes as below. hcl resource "huaweicloud_cce_node_pool" "my_node_pool" {
//
//	...
//
//	lifecycle {
//
//	ignore_changes = [
//
//	password, extend_params,
//
//	]
//
//	} }
type NodePool struct {
	pulumi.CustomResourceState

	// Specifies whether auto renew is enabled. Valid values are "true" and "false".
	AutoRenew pulumi.StringOutput `pulumi:"autoRenew"`
	// Specifies the name of the available partition (AZ). Default value
	// is random to create nodes in a random AZ in the node pool.
	AvailabilityZone pulumi.StringPtrOutput `pulumi:"availabilityZone"`
	// Billing mode of a node.
	BillingMode pulumi.IntOutput `pulumi:"billingMode"`
	// Specifies the charging mode of the CCE node pool. Valid values are
	// *prePaid* and *postPaid*, defaults to *postPaid*.
	ChargingMode pulumi.StringOutput `pulumi:"chargingMode"`
	// Specifies the cluster ID.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// The current number of the nodes.
	CurrentNodeCount pulumi.IntOutput `pulumi:"currentNodeCount"`
	// Specifies the configuration of the data disks.
	// The structure is described below.
	DataVolumes NodePoolDataVolumeArrayOutput `pulumi:"dataVolumes"`
	// Specifies the ECS group ID. If specified, the node will be created under
	// the cloud server group.
	EcsGroupId     pulumi.StringPtrOutput `pulumi:"ecsGroupId"`
	EnableForceNew pulumi.StringPtrOutput `pulumi:"enableForceNew"`
	// Specifies the enterprise project ID of the node pool.
	// If updated, the new value will apply only to new nodes.
	EnterpriseProjectId pulumi.StringOutput `pulumi:"enterpriseProjectId"`
	// schema: Deprecated; This parameter has been replaced by the 'extend_params' parameter.
	ExtendParam pulumi.StringMapOutput `pulumi:"extendParam"`
	// Specifies the disk expansion parameters.
	ExtendParams NodePoolExtendParamsOutput `pulumi:"extendParams"`
	// Specifies the configurations of extended scaling groups in the node pool.
	// The object structure is documented below.
	ExtensionScaleGroups NodePoolExtensionScaleGroupArrayOutput `pulumi:"extensionScaleGroups"`
	// Specifies the flavor ID.
	FlavorId pulumi.StringOutput `pulumi:"flavorId"`
	// Specifies the hostname config of the kubernetes node,
	// which is supported by clusters of v1.23.6-r0 to v1.25 or clusters of v1.25.2-r0 or later versions.
	// The object structure is documented below.
	HostnameConfig NodePoolHostnameConfigOutput `pulumi:"hostnameConfig"`
	// Specifies the initial number of expected nodes in the node pool.
	// This parameter can be also used to manually scale the node count afterwards.
	InitialNodeCount pulumi.IntOutput `pulumi:"initialNodeCount"`
	// Specifies the custom initialization flags.
	InitializedConditions pulumi.StringArrayOutput `pulumi:"initializedConditions"`
	// Specifies the key pair name when logging in to select the key pair mode.
	// This parameter and `password` are alternative.
	KeyPair pulumi.StringPtrOutput `pulumi:"keyPair"`
	// Specifies the label policy on existing nodes.
	// The value can be **ignore** and **refresh**, defaults to **refresh**.
	LabelPolicyOnExistingNodes pulumi.StringOutput `pulumi:"labelPolicyOnExistingNodes"`
	// Specifies the tags of a Kubernetes node, key/value pair format.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Specifies the maximum number of nodes that can be retained in the scaling group
	// during auto scaling. The value must be greater than or equal to that of `minNodeCount`, and can neither be greater
	// than the maximum number of nodes allowed by the cluster nor the maximum number of nodes in the node pool.
	MaxNodeCount pulumi.IntPtrOutput `pulumi:"maxNodeCount"`
	// Specifies the maximum number of instances a node is allowed to create.
	MaxPods pulumi.IntOutput `pulumi:"maxPods"`
	// Specifies the minimum number of nodes in the scaling group during auto scaling.
	// The value must be greater than **0**.
	MinNodeCount pulumi.IntPtrOutput `pulumi:"minNodeCount"`
	// Specifies the name of an extended scaling group.
	// The value cannot be default and can contain a maximum of 55 characters.
	// Only digits, lowercase letters, and hyphens (-) are allowed.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the operating system of the node.
	// The value can be **EulerOS 2.9** and **CentOS 7.6** e.g. For more details,
	// please see [documentation](https://support.huaweicloud.com/intl/en-us/api-cce/node-os.html).
	// This parameter is required when the `nodeImageId` in `extendParams` is not specified.
	Os pulumi.StringOutput `pulumi:"os"`
	// Specifies the root password when logging in to select the password mode.
	// The password consists of 8 to 26 characters and must contain at least three of following: uppercase letters,
	// lowercase letters, digits, special characters(!@$%^-_=+[{}]:,./?~#*).
	// This parameter can be plain or salted and is alternative to `keyPair`.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// Specifies the charging period of the CCE node pool. If `periodUnit` is set to
	// *month*, the value ranges from 1 to 9. If `periodUnit` is set to *year*, the value ranges from 1 to 3. This parameter
	// is mandatory if `chargingMode` is set to *prePaid*.
	Period pulumi.IntPtrOutput `pulumi:"period"`
	// Specifies the charging period unit of the CCE node pool.
	// Valid values are *month* and *year*. This parameter is mandatory if `chargingMode` is set to *prePaid*.
	PeriodUnit pulumi.StringPtrOutput `pulumi:"periodUnit"`
	// Specifies the list of security group IDs for the pod.
	// Only supported in CCE Turbo clusters of v1.19 and above.
	PodSecurityGroups pulumi.StringArrayOutput `pulumi:"podSecurityGroups"`
	// Specifies the script to be executed after installation.
	// The input value can be a Base64 encoded string or not.
	Postinstall pulumi.StringPtrOutput `pulumi:"postinstall"`
	// Specifies the script to be executed before installation.
	// The input value can be a Base64 encoded string or not.
	Preinstall pulumi.StringPtrOutput `pulumi:"preinstall"`
	// Specifies the weight of the node pool.
	// A node pool with a higher weight has a higher priority during scaling.
	Priority pulumi.IntPtrOutput `pulumi:"priority"`
	// The region in which to create the CCE pool resource. If omitted, the
	// provider-level region will be used. Changing this creates a new CCE node pool resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the configuration of the system disk.
	// The structure is described below.
	RootVolume NodePoolRootVolumeOutput `pulumi:"rootVolume"`
	// Specifies the runtime of the CCE node pool. Valid values are *docker* and
	// *containerd*.
	Runtime pulumi.StringOutput `pulumi:"runtime"`
	// Specifies the time interval between two scaling operations, in minutes.
	ScaleDownCooldownTime pulumi.IntPtrOutput `pulumi:"scaleDownCooldownTime"`
	// Specifies whether to enable auto scaling.
	// If Autoscaler is enabled, install the autoscaler add-on to use the auto scaling feature.
	ScallEnable pulumi.BoolPtrOutput `pulumi:"scallEnable"`
	// Specifies the list of custom security group IDs for the node pool.
	// If specified, the nodes will be put in these security groups. When specifying a security group, do not modify
	// the rules of the port on which CCE running depends. For details, see
	// [documentation](https://support.huaweicloud.com/intl/en-us/cce_faq/cce_faq_00265.html).
	SecurityGroups pulumi.StringArrayOutput `pulumi:"securityGroups"`
	// Node status information.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the disk initialization management parameter.
	// If omitted, disks are managed based on the DockerLVMConfigOverride parameter in extendParam.
	// This parameter is supported for clusters of v1.15.11 and later.
	// If the node has both local and EVS disks attached,
	// this parameter must be specified, or it may result in unexpected disk partitions.
	// If you want to change the value range of a data disk to **20** to **32768**, this parameter must be specified.
	// If you want to use the shared disk space (with the runtime and Kubernetes partitions cancelled),
	// this parameter must be specified.
	// If you want to store system components in the system disk, this parameter must be specified.
	Storage NodePoolStoragePtrOutput `pulumi:"storage"`
	// Specifies the ID of the subnet to which the NIC belongs.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// Specifies the ID list of the subnet to which the NIC belongs.
	SubnetLists pulumi.StringArrayOutput `pulumi:"subnetLists"`
	// Specifies the tag policy on existing nodes.
	// The value can be **ignore** and **refresh**, defaults to **ignore**.
	TagPolicyOnExistingNodes pulumi.StringOutput `pulumi:"tagPolicyOnExistingNodes"`
	// Specifies the tags of a VM node, key/value pair format.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Specifies the taint policy on existing nodes.
	// The value can be **ignore** and **refresh**, defaults to **refresh**.
	TaintPolicyOnExistingNodes pulumi.StringOutput `pulumi:"taintPolicyOnExistingNodes"`
	// Specifies the taints configuration of the nodes to set anti-affinity.
	// The structure is described below.
	Taints NodePoolTaintArrayOutput `pulumi:"taints"`
	// Specifies the hostname type of the kubernetes node.
	// The value can be:
	// + **privateIp**: The Kubernetes node is named after its IP address.
	// + **cceNodeName**: The Kubernetes node is named after the CCE node.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewNodePool registers a new resource with the given unique name, arguments, and options.
func NewNodePool(ctx *pulumi.Context,
	name string, args *NodePoolArgs, opts ...pulumi.ResourceOption) (*NodePool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.FlavorId == nil {
		return nil, errors.New("invalid value for required argument 'FlavorId'")
	}
	if args.InitialNodeCount == nil {
		return nil, errors.New("invalid value for required argument 'InitialNodeCount'")
	}
	if args.RootVolume == nil {
		return nil, errors.New("invalid value for required argument 'RootVolume'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource NodePool
	err := ctx.RegisterResource("huaweicloud:Cce/nodePool:NodePool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNodePool gets an existing NodePool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNodePool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NodePoolState, opts ...pulumi.ResourceOption) (*NodePool, error) {
	var resource NodePool
	err := ctx.ReadResource("huaweicloud:Cce/nodePool:NodePool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NodePool resources.
type nodePoolState struct {
	// Specifies whether auto renew is enabled. Valid values are "true" and "false".
	AutoRenew *string `pulumi:"autoRenew"`
	// Specifies the name of the available partition (AZ). Default value
	// is random to create nodes in a random AZ in the node pool.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// Billing mode of a node.
	BillingMode *int `pulumi:"billingMode"`
	// Specifies the charging mode of the CCE node pool. Valid values are
	// *prePaid* and *postPaid*, defaults to *postPaid*.
	ChargingMode *string `pulumi:"chargingMode"`
	// Specifies the cluster ID.
	ClusterId *string `pulumi:"clusterId"`
	// The current number of the nodes.
	CurrentNodeCount *int `pulumi:"currentNodeCount"`
	// Specifies the configuration of the data disks.
	// The structure is described below.
	DataVolumes []NodePoolDataVolume `pulumi:"dataVolumes"`
	// Specifies the ECS group ID. If specified, the node will be created under
	// the cloud server group.
	EcsGroupId     *string `pulumi:"ecsGroupId"`
	EnableForceNew *string `pulumi:"enableForceNew"`
	// Specifies the enterprise project ID of the node pool.
	// If updated, the new value will apply only to new nodes.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// schema: Deprecated; This parameter has been replaced by the 'extend_params' parameter.
	ExtendParam map[string]string `pulumi:"extendParam"`
	// Specifies the disk expansion parameters.
	ExtendParams *NodePoolExtendParams `pulumi:"extendParams"`
	// Specifies the configurations of extended scaling groups in the node pool.
	// The object structure is documented below.
	ExtensionScaleGroups []NodePoolExtensionScaleGroup `pulumi:"extensionScaleGroups"`
	// Specifies the flavor ID.
	FlavorId *string `pulumi:"flavorId"`
	// Specifies the hostname config of the kubernetes node,
	// which is supported by clusters of v1.23.6-r0 to v1.25 or clusters of v1.25.2-r0 or later versions.
	// The object structure is documented below.
	HostnameConfig *NodePoolHostnameConfig `pulumi:"hostnameConfig"`
	// Specifies the initial number of expected nodes in the node pool.
	// This parameter can be also used to manually scale the node count afterwards.
	InitialNodeCount *int `pulumi:"initialNodeCount"`
	// Specifies the custom initialization flags.
	InitializedConditions []string `pulumi:"initializedConditions"`
	// Specifies the key pair name when logging in to select the key pair mode.
	// This parameter and `password` are alternative.
	KeyPair *string `pulumi:"keyPair"`
	// Specifies the label policy on existing nodes.
	// The value can be **ignore** and **refresh**, defaults to **refresh**.
	LabelPolicyOnExistingNodes *string `pulumi:"labelPolicyOnExistingNodes"`
	// Specifies the tags of a Kubernetes node, key/value pair format.
	Labels map[string]string `pulumi:"labels"`
	// Specifies the maximum number of nodes that can be retained in the scaling group
	// during auto scaling. The value must be greater than or equal to that of `minNodeCount`, and can neither be greater
	// than the maximum number of nodes allowed by the cluster nor the maximum number of nodes in the node pool.
	MaxNodeCount *int `pulumi:"maxNodeCount"`
	// Specifies the maximum number of instances a node is allowed to create.
	MaxPods *int `pulumi:"maxPods"`
	// Specifies the minimum number of nodes in the scaling group during auto scaling.
	// The value must be greater than **0**.
	MinNodeCount *int `pulumi:"minNodeCount"`
	// Specifies the name of an extended scaling group.
	// The value cannot be default and can contain a maximum of 55 characters.
	// Only digits, lowercase letters, and hyphens (-) are allowed.
	Name *string `pulumi:"name"`
	// Specifies the operating system of the node.
	// The value can be **EulerOS 2.9** and **CentOS 7.6** e.g. For more details,
	// please see [documentation](https://support.huaweicloud.com/intl/en-us/api-cce/node-os.html).
	// This parameter is required when the `nodeImageId` in `extendParams` is not specified.
	Os *string `pulumi:"os"`
	// Specifies the root password when logging in to select the password mode.
	// The password consists of 8 to 26 characters and must contain at least three of following: uppercase letters,
	// lowercase letters, digits, special characters(!@$%^-_=+[{}]:,./?~#*).
	// This parameter can be plain or salted and is alternative to `keyPair`.
	Password *string `pulumi:"password"`
	// Specifies the charging period of the CCE node pool. If `periodUnit` is set to
	// *month*, the value ranges from 1 to 9. If `periodUnit` is set to *year*, the value ranges from 1 to 3. This parameter
	// is mandatory if `chargingMode` is set to *prePaid*.
	Period *int `pulumi:"period"`
	// Specifies the charging period unit of the CCE node pool.
	// Valid values are *month* and *year*. This parameter is mandatory if `chargingMode` is set to *prePaid*.
	PeriodUnit *string `pulumi:"periodUnit"`
	// Specifies the list of security group IDs for the pod.
	// Only supported in CCE Turbo clusters of v1.19 and above.
	PodSecurityGroups []string `pulumi:"podSecurityGroups"`
	// Specifies the script to be executed after installation.
	// The input value can be a Base64 encoded string or not.
	Postinstall *string `pulumi:"postinstall"`
	// Specifies the script to be executed before installation.
	// The input value can be a Base64 encoded string or not.
	Preinstall *string `pulumi:"preinstall"`
	// Specifies the weight of the node pool.
	// A node pool with a higher weight has a higher priority during scaling.
	Priority *int `pulumi:"priority"`
	// The region in which to create the CCE pool resource. If omitted, the
	// provider-level region will be used. Changing this creates a new CCE node pool resource.
	Region *string `pulumi:"region"`
	// Specifies the configuration of the system disk.
	// The structure is described below.
	RootVolume *NodePoolRootVolume `pulumi:"rootVolume"`
	// Specifies the runtime of the CCE node pool. Valid values are *docker* and
	// *containerd*.
	Runtime *string `pulumi:"runtime"`
	// Specifies the time interval between two scaling operations, in minutes.
	ScaleDownCooldownTime *int `pulumi:"scaleDownCooldownTime"`
	// Specifies whether to enable auto scaling.
	// If Autoscaler is enabled, install the autoscaler add-on to use the auto scaling feature.
	ScallEnable *bool `pulumi:"scallEnable"`
	// Specifies the list of custom security group IDs for the node pool.
	// If specified, the nodes will be put in these security groups. When specifying a security group, do not modify
	// the rules of the port on which CCE running depends. For details, see
	// [documentation](https://support.huaweicloud.com/intl/en-us/cce_faq/cce_faq_00265.html).
	SecurityGroups []string `pulumi:"securityGroups"`
	// Node status information.
	Status *string `pulumi:"status"`
	// Specifies the disk initialization management parameter.
	// If omitted, disks are managed based on the DockerLVMConfigOverride parameter in extendParam.
	// This parameter is supported for clusters of v1.15.11 and later.
	// If the node has both local and EVS disks attached,
	// this parameter must be specified, or it may result in unexpected disk partitions.
	// If you want to change the value range of a data disk to **20** to **32768**, this parameter must be specified.
	// If you want to use the shared disk space (with the runtime and Kubernetes partitions cancelled),
	// this parameter must be specified.
	// If you want to store system components in the system disk, this parameter must be specified.
	Storage *NodePoolStorage `pulumi:"storage"`
	// Specifies the ID of the subnet to which the NIC belongs.
	SubnetId *string `pulumi:"subnetId"`
	// Specifies the ID list of the subnet to which the NIC belongs.
	SubnetLists []string `pulumi:"subnetLists"`
	// Specifies the tag policy on existing nodes.
	// The value can be **ignore** and **refresh**, defaults to **ignore**.
	TagPolicyOnExistingNodes *string `pulumi:"tagPolicyOnExistingNodes"`
	// Specifies the tags of a VM node, key/value pair format.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the taint policy on existing nodes.
	// The value can be **ignore** and **refresh**, defaults to **refresh**.
	TaintPolicyOnExistingNodes *string `pulumi:"taintPolicyOnExistingNodes"`
	// Specifies the taints configuration of the nodes to set anti-affinity.
	// The structure is described below.
	Taints []NodePoolTaint `pulumi:"taints"`
	// Specifies the hostname type of the kubernetes node.
	// The value can be:
	// + **privateIp**: The Kubernetes node is named after its IP address.
	// + **cceNodeName**: The Kubernetes node is named after the CCE node.
	Type *string `pulumi:"type"`
}

type NodePoolState struct {
	// Specifies whether auto renew is enabled. Valid values are "true" and "false".
	AutoRenew pulumi.StringPtrInput
	// Specifies the name of the available partition (AZ). Default value
	// is random to create nodes in a random AZ in the node pool.
	AvailabilityZone pulumi.StringPtrInput
	// Billing mode of a node.
	BillingMode pulumi.IntPtrInput
	// Specifies the charging mode of the CCE node pool. Valid values are
	// *prePaid* and *postPaid*, defaults to *postPaid*.
	ChargingMode pulumi.StringPtrInput
	// Specifies the cluster ID.
	ClusterId pulumi.StringPtrInput
	// The current number of the nodes.
	CurrentNodeCount pulumi.IntPtrInput
	// Specifies the configuration of the data disks.
	// The structure is described below.
	DataVolumes NodePoolDataVolumeArrayInput
	// Specifies the ECS group ID. If specified, the node will be created under
	// the cloud server group.
	EcsGroupId     pulumi.StringPtrInput
	EnableForceNew pulumi.StringPtrInput
	// Specifies the enterprise project ID of the node pool.
	// If updated, the new value will apply only to new nodes.
	EnterpriseProjectId pulumi.StringPtrInput
	// schema: Deprecated; This parameter has been replaced by the 'extend_params' parameter.
	ExtendParam pulumi.StringMapInput
	// Specifies the disk expansion parameters.
	ExtendParams NodePoolExtendParamsPtrInput
	// Specifies the configurations of extended scaling groups in the node pool.
	// The object structure is documented below.
	ExtensionScaleGroups NodePoolExtensionScaleGroupArrayInput
	// Specifies the flavor ID.
	FlavorId pulumi.StringPtrInput
	// Specifies the hostname config of the kubernetes node,
	// which is supported by clusters of v1.23.6-r0 to v1.25 or clusters of v1.25.2-r0 or later versions.
	// The object structure is documented below.
	HostnameConfig NodePoolHostnameConfigPtrInput
	// Specifies the initial number of expected nodes in the node pool.
	// This parameter can be also used to manually scale the node count afterwards.
	InitialNodeCount pulumi.IntPtrInput
	// Specifies the custom initialization flags.
	InitializedConditions pulumi.StringArrayInput
	// Specifies the key pair name when logging in to select the key pair mode.
	// This parameter and `password` are alternative.
	KeyPair pulumi.StringPtrInput
	// Specifies the label policy on existing nodes.
	// The value can be **ignore** and **refresh**, defaults to **refresh**.
	LabelPolicyOnExistingNodes pulumi.StringPtrInput
	// Specifies the tags of a Kubernetes node, key/value pair format.
	Labels pulumi.StringMapInput
	// Specifies the maximum number of nodes that can be retained in the scaling group
	// during auto scaling. The value must be greater than or equal to that of `minNodeCount`, and can neither be greater
	// than the maximum number of nodes allowed by the cluster nor the maximum number of nodes in the node pool.
	MaxNodeCount pulumi.IntPtrInput
	// Specifies the maximum number of instances a node is allowed to create.
	MaxPods pulumi.IntPtrInput
	// Specifies the minimum number of nodes in the scaling group during auto scaling.
	// The value must be greater than **0**.
	MinNodeCount pulumi.IntPtrInput
	// Specifies the name of an extended scaling group.
	// The value cannot be default and can contain a maximum of 55 characters.
	// Only digits, lowercase letters, and hyphens (-) are allowed.
	Name pulumi.StringPtrInput
	// Specifies the operating system of the node.
	// The value can be **EulerOS 2.9** and **CentOS 7.6** e.g. For more details,
	// please see [documentation](https://support.huaweicloud.com/intl/en-us/api-cce/node-os.html).
	// This parameter is required when the `nodeImageId` in `extendParams` is not specified.
	Os pulumi.StringPtrInput
	// Specifies the root password when logging in to select the password mode.
	// The password consists of 8 to 26 characters and must contain at least three of following: uppercase letters,
	// lowercase letters, digits, special characters(!@$%^-_=+[{}]:,./?~#*).
	// This parameter can be plain or salted and is alternative to `keyPair`.
	Password pulumi.StringPtrInput
	// Specifies the charging period of the CCE node pool. If `periodUnit` is set to
	// *month*, the value ranges from 1 to 9. If `periodUnit` is set to *year*, the value ranges from 1 to 3. This parameter
	// is mandatory if `chargingMode` is set to *prePaid*.
	Period pulumi.IntPtrInput
	// Specifies the charging period unit of the CCE node pool.
	// Valid values are *month* and *year*. This parameter is mandatory if `chargingMode` is set to *prePaid*.
	PeriodUnit pulumi.StringPtrInput
	// Specifies the list of security group IDs for the pod.
	// Only supported in CCE Turbo clusters of v1.19 and above.
	PodSecurityGroups pulumi.StringArrayInput
	// Specifies the script to be executed after installation.
	// The input value can be a Base64 encoded string or not.
	Postinstall pulumi.StringPtrInput
	// Specifies the script to be executed before installation.
	// The input value can be a Base64 encoded string or not.
	Preinstall pulumi.StringPtrInput
	// Specifies the weight of the node pool.
	// A node pool with a higher weight has a higher priority during scaling.
	Priority pulumi.IntPtrInput
	// The region in which to create the CCE pool resource. If omitted, the
	// provider-level region will be used. Changing this creates a new CCE node pool resource.
	Region pulumi.StringPtrInput
	// Specifies the configuration of the system disk.
	// The structure is described below.
	RootVolume NodePoolRootVolumePtrInput
	// Specifies the runtime of the CCE node pool. Valid values are *docker* and
	// *containerd*.
	Runtime pulumi.StringPtrInput
	// Specifies the time interval between two scaling operations, in minutes.
	ScaleDownCooldownTime pulumi.IntPtrInput
	// Specifies whether to enable auto scaling.
	// If Autoscaler is enabled, install the autoscaler add-on to use the auto scaling feature.
	ScallEnable pulumi.BoolPtrInput
	// Specifies the list of custom security group IDs for the node pool.
	// If specified, the nodes will be put in these security groups. When specifying a security group, do not modify
	// the rules of the port on which CCE running depends. For details, see
	// [documentation](https://support.huaweicloud.com/intl/en-us/cce_faq/cce_faq_00265.html).
	SecurityGroups pulumi.StringArrayInput
	// Node status information.
	Status pulumi.StringPtrInput
	// Specifies the disk initialization management parameter.
	// If omitted, disks are managed based on the DockerLVMConfigOverride parameter in extendParam.
	// This parameter is supported for clusters of v1.15.11 and later.
	// If the node has both local and EVS disks attached,
	// this parameter must be specified, or it may result in unexpected disk partitions.
	// If you want to change the value range of a data disk to **20** to **32768**, this parameter must be specified.
	// If you want to use the shared disk space (with the runtime and Kubernetes partitions cancelled),
	// this parameter must be specified.
	// If you want to store system components in the system disk, this parameter must be specified.
	Storage NodePoolStoragePtrInput
	// Specifies the ID of the subnet to which the NIC belongs.
	SubnetId pulumi.StringPtrInput
	// Specifies the ID list of the subnet to which the NIC belongs.
	SubnetLists pulumi.StringArrayInput
	// Specifies the tag policy on existing nodes.
	// The value can be **ignore** and **refresh**, defaults to **ignore**.
	TagPolicyOnExistingNodes pulumi.StringPtrInput
	// Specifies the tags of a VM node, key/value pair format.
	Tags pulumi.StringMapInput
	// Specifies the taint policy on existing nodes.
	// The value can be **ignore** and **refresh**, defaults to **refresh**.
	TaintPolicyOnExistingNodes pulumi.StringPtrInput
	// Specifies the taints configuration of the nodes to set anti-affinity.
	// The structure is described below.
	Taints NodePoolTaintArrayInput
	// Specifies the hostname type of the kubernetes node.
	// The value can be:
	// + **privateIp**: The Kubernetes node is named after its IP address.
	// + **cceNodeName**: The Kubernetes node is named after the CCE node.
	Type pulumi.StringPtrInput
}

func (NodePoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*nodePoolState)(nil)).Elem()
}

type nodePoolArgs struct {
	// Specifies whether auto renew is enabled. Valid values are "true" and "false".
	AutoRenew *string `pulumi:"autoRenew"`
	// Specifies the name of the available partition (AZ). Default value
	// is random to create nodes in a random AZ in the node pool.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// Specifies the charging mode of the CCE node pool. Valid values are
	// *prePaid* and *postPaid*, defaults to *postPaid*.
	ChargingMode *string `pulumi:"chargingMode"`
	// Specifies the cluster ID.
	ClusterId string `pulumi:"clusterId"`
	// Specifies the configuration of the data disks.
	// The structure is described below.
	DataVolumes []NodePoolDataVolume `pulumi:"dataVolumes"`
	// Specifies the ECS group ID. If specified, the node will be created under
	// the cloud server group.
	EcsGroupId     *string `pulumi:"ecsGroupId"`
	EnableForceNew *string `pulumi:"enableForceNew"`
	// Specifies the enterprise project ID of the node pool.
	// If updated, the new value will apply only to new nodes.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// schema: Deprecated; This parameter has been replaced by the 'extend_params' parameter.
	ExtendParam map[string]string `pulumi:"extendParam"`
	// Specifies the disk expansion parameters.
	ExtendParams *NodePoolExtendParams `pulumi:"extendParams"`
	// Specifies the configurations of extended scaling groups in the node pool.
	// The object structure is documented below.
	ExtensionScaleGroups []NodePoolExtensionScaleGroup `pulumi:"extensionScaleGroups"`
	// Specifies the flavor ID.
	FlavorId string `pulumi:"flavorId"`
	// Specifies the hostname config of the kubernetes node,
	// which is supported by clusters of v1.23.6-r0 to v1.25 or clusters of v1.25.2-r0 or later versions.
	// The object structure is documented below.
	HostnameConfig *NodePoolHostnameConfig `pulumi:"hostnameConfig"`
	// Specifies the initial number of expected nodes in the node pool.
	// This parameter can be also used to manually scale the node count afterwards.
	InitialNodeCount int `pulumi:"initialNodeCount"`
	// Specifies the custom initialization flags.
	InitializedConditions []string `pulumi:"initializedConditions"`
	// Specifies the key pair name when logging in to select the key pair mode.
	// This parameter and `password` are alternative.
	KeyPair *string `pulumi:"keyPair"`
	// Specifies the label policy on existing nodes.
	// The value can be **ignore** and **refresh**, defaults to **refresh**.
	LabelPolicyOnExistingNodes *string `pulumi:"labelPolicyOnExistingNodes"`
	// Specifies the tags of a Kubernetes node, key/value pair format.
	Labels map[string]string `pulumi:"labels"`
	// Specifies the maximum number of nodes that can be retained in the scaling group
	// during auto scaling. The value must be greater than or equal to that of `minNodeCount`, and can neither be greater
	// than the maximum number of nodes allowed by the cluster nor the maximum number of nodes in the node pool.
	MaxNodeCount *int `pulumi:"maxNodeCount"`
	// Specifies the maximum number of instances a node is allowed to create.
	MaxPods *int `pulumi:"maxPods"`
	// Specifies the minimum number of nodes in the scaling group during auto scaling.
	// The value must be greater than **0**.
	MinNodeCount *int `pulumi:"minNodeCount"`
	// Specifies the name of an extended scaling group.
	// The value cannot be default and can contain a maximum of 55 characters.
	// Only digits, lowercase letters, and hyphens (-) are allowed.
	Name *string `pulumi:"name"`
	// Specifies the operating system of the node.
	// The value can be **EulerOS 2.9** and **CentOS 7.6** e.g. For more details,
	// please see [documentation](https://support.huaweicloud.com/intl/en-us/api-cce/node-os.html).
	// This parameter is required when the `nodeImageId` in `extendParams` is not specified.
	Os *string `pulumi:"os"`
	// Specifies the root password when logging in to select the password mode.
	// The password consists of 8 to 26 characters and must contain at least three of following: uppercase letters,
	// lowercase letters, digits, special characters(!@$%^-_=+[{}]:,./?~#*).
	// This parameter can be plain or salted and is alternative to `keyPair`.
	Password *string `pulumi:"password"`
	// Specifies the charging period of the CCE node pool. If `periodUnit` is set to
	// *month*, the value ranges from 1 to 9. If `periodUnit` is set to *year*, the value ranges from 1 to 3. This parameter
	// is mandatory if `chargingMode` is set to *prePaid*.
	Period *int `pulumi:"period"`
	// Specifies the charging period unit of the CCE node pool.
	// Valid values are *month* and *year*. This parameter is mandatory if `chargingMode` is set to *prePaid*.
	PeriodUnit *string `pulumi:"periodUnit"`
	// Specifies the list of security group IDs for the pod.
	// Only supported in CCE Turbo clusters of v1.19 and above.
	PodSecurityGroups []string `pulumi:"podSecurityGroups"`
	// Specifies the script to be executed after installation.
	// The input value can be a Base64 encoded string or not.
	Postinstall *string `pulumi:"postinstall"`
	// Specifies the script to be executed before installation.
	// The input value can be a Base64 encoded string or not.
	Preinstall *string `pulumi:"preinstall"`
	// Specifies the weight of the node pool.
	// A node pool with a higher weight has a higher priority during scaling.
	Priority *int `pulumi:"priority"`
	// The region in which to create the CCE pool resource. If omitted, the
	// provider-level region will be used. Changing this creates a new CCE node pool resource.
	Region *string `pulumi:"region"`
	// Specifies the configuration of the system disk.
	// The structure is described below.
	RootVolume NodePoolRootVolume `pulumi:"rootVolume"`
	// Specifies the runtime of the CCE node pool. Valid values are *docker* and
	// *containerd*.
	Runtime *string `pulumi:"runtime"`
	// Specifies the time interval between two scaling operations, in minutes.
	ScaleDownCooldownTime *int `pulumi:"scaleDownCooldownTime"`
	// Specifies whether to enable auto scaling.
	// If Autoscaler is enabled, install the autoscaler add-on to use the auto scaling feature.
	ScallEnable *bool `pulumi:"scallEnable"`
	// Specifies the list of custom security group IDs for the node pool.
	// If specified, the nodes will be put in these security groups. When specifying a security group, do not modify
	// the rules of the port on which CCE running depends. For details, see
	// [documentation](https://support.huaweicloud.com/intl/en-us/cce_faq/cce_faq_00265.html).
	SecurityGroups []string `pulumi:"securityGroups"`
	// Specifies the disk initialization management parameter.
	// If omitted, disks are managed based on the DockerLVMConfigOverride parameter in extendParam.
	// This parameter is supported for clusters of v1.15.11 and later.
	// If the node has both local and EVS disks attached,
	// this parameter must be specified, or it may result in unexpected disk partitions.
	// If you want to change the value range of a data disk to **20** to **32768**, this parameter must be specified.
	// If you want to use the shared disk space (with the runtime and Kubernetes partitions cancelled),
	// this parameter must be specified.
	// If you want to store system components in the system disk, this parameter must be specified.
	Storage *NodePoolStorage `pulumi:"storage"`
	// Specifies the ID of the subnet to which the NIC belongs.
	SubnetId *string `pulumi:"subnetId"`
	// Specifies the ID list of the subnet to which the NIC belongs.
	SubnetLists []string `pulumi:"subnetLists"`
	// Specifies the tag policy on existing nodes.
	// The value can be **ignore** and **refresh**, defaults to **ignore**.
	TagPolicyOnExistingNodes *string `pulumi:"tagPolicyOnExistingNodes"`
	// Specifies the tags of a VM node, key/value pair format.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the taint policy on existing nodes.
	// The value can be **ignore** and **refresh**, defaults to **refresh**.
	TaintPolicyOnExistingNodes *string `pulumi:"taintPolicyOnExistingNodes"`
	// Specifies the taints configuration of the nodes to set anti-affinity.
	// The structure is described below.
	Taints []NodePoolTaint `pulumi:"taints"`
	// Specifies the hostname type of the kubernetes node.
	// The value can be:
	// + **privateIp**: The Kubernetes node is named after its IP address.
	// + **cceNodeName**: The Kubernetes node is named after the CCE node.
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a NodePool resource.
type NodePoolArgs struct {
	// Specifies whether auto renew is enabled. Valid values are "true" and "false".
	AutoRenew pulumi.StringPtrInput
	// Specifies the name of the available partition (AZ). Default value
	// is random to create nodes in a random AZ in the node pool.
	AvailabilityZone pulumi.StringPtrInput
	// Specifies the charging mode of the CCE node pool. Valid values are
	// *prePaid* and *postPaid*, defaults to *postPaid*.
	ChargingMode pulumi.StringPtrInput
	// Specifies the cluster ID.
	ClusterId pulumi.StringInput
	// Specifies the configuration of the data disks.
	// The structure is described below.
	DataVolumes NodePoolDataVolumeArrayInput
	// Specifies the ECS group ID. If specified, the node will be created under
	// the cloud server group.
	EcsGroupId     pulumi.StringPtrInput
	EnableForceNew pulumi.StringPtrInput
	// Specifies the enterprise project ID of the node pool.
	// If updated, the new value will apply only to new nodes.
	EnterpriseProjectId pulumi.StringPtrInput
	// schema: Deprecated; This parameter has been replaced by the 'extend_params' parameter.
	ExtendParam pulumi.StringMapInput
	// Specifies the disk expansion parameters.
	ExtendParams NodePoolExtendParamsPtrInput
	// Specifies the configurations of extended scaling groups in the node pool.
	// The object structure is documented below.
	ExtensionScaleGroups NodePoolExtensionScaleGroupArrayInput
	// Specifies the flavor ID.
	FlavorId pulumi.StringInput
	// Specifies the hostname config of the kubernetes node,
	// which is supported by clusters of v1.23.6-r0 to v1.25 or clusters of v1.25.2-r0 or later versions.
	// The object structure is documented below.
	HostnameConfig NodePoolHostnameConfigPtrInput
	// Specifies the initial number of expected nodes in the node pool.
	// This parameter can be also used to manually scale the node count afterwards.
	InitialNodeCount pulumi.IntInput
	// Specifies the custom initialization flags.
	InitializedConditions pulumi.StringArrayInput
	// Specifies the key pair name when logging in to select the key pair mode.
	// This parameter and `password` are alternative.
	KeyPair pulumi.StringPtrInput
	// Specifies the label policy on existing nodes.
	// The value can be **ignore** and **refresh**, defaults to **refresh**.
	LabelPolicyOnExistingNodes pulumi.StringPtrInput
	// Specifies the tags of a Kubernetes node, key/value pair format.
	Labels pulumi.StringMapInput
	// Specifies the maximum number of nodes that can be retained in the scaling group
	// during auto scaling. The value must be greater than or equal to that of `minNodeCount`, and can neither be greater
	// than the maximum number of nodes allowed by the cluster nor the maximum number of nodes in the node pool.
	MaxNodeCount pulumi.IntPtrInput
	// Specifies the maximum number of instances a node is allowed to create.
	MaxPods pulumi.IntPtrInput
	// Specifies the minimum number of nodes in the scaling group during auto scaling.
	// The value must be greater than **0**.
	MinNodeCount pulumi.IntPtrInput
	// Specifies the name of an extended scaling group.
	// The value cannot be default and can contain a maximum of 55 characters.
	// Only digits, lowercase letters, and hyphens (-) are allowed.
	Name pulumi.StringPtrInput
	// Specifies the operating system of the node.
	// The value can be **EulerOS 2.9** and **CentOS 7.6** e.g. For more details,
	// please see [documentation](https://support.huaweicloud.com/intl/en-us/api-cce/node-os.html).
	// This parameter is required when the `nodeImageId` in `extendParams` is not specified.
	Os pulumi.StringPtrInput
	// Specifies the root password when logging in to select the password mode.
	// The password consists of 8 to 26 characters and must contain at least three of following: uppercase letters,
	// lowercase letters, digits, special characters(!@$%^-_=+[{}]:,./?~#*).
	// This parameter can be plain or salted and is alternative to `keyPair`.
	Password pulumi.StringPtrInput
	// Specifies the charging period of the CCE node pool. If `periodUnit` is set to
	// *month*, the value ranges from 1 to 9. If `periodUnit` is set to *year*, the value ranges from 1 to 3. This parameter
	// is mandatory if `chargingMode` is set to *prePaid*.
	Period pulumi.IntPtrInput
	// Specifies the charging period unit of the CCE node pool.
	// Valid values are *month* and *year*. This parameter is mandatory if `chargingMode` is set to *prePaid*.
	PeriodUnit pulumi.StringPtrInput
	// Specifies the list of security group IDs for the pod.
	// Only supported in CCE Turbo clusters of v1.19 and above.
	PodSecurityGroups pulumi.StringArrayInput
	// Specifies the script to be executed after installation.
	// The input value can be a Base64 encoded string or not.
	Postinstall pulumi.StringPtrInput
	// Specifies the script to be executed before installation.
	// The input value can be a Base64 encoded string or not.
	Preinstall pulumi.StringPtrInput
	// Specifies the weight of the node pool.
	// A node pool with a higher weight has a higher priority during scaling.
	Priority pulumi.IntPtrInput
	// The region in which to create the CCE pool resource. If omitted, the
	// provider-level region will be used. Changing this creates a new CCE node pool resource.
	Region pulumi.StringPtrInput
	// Specifies the configuration of the system disk.
	// The structure is described below.
	RootVolume NodePoolRootVolumeInput
	// Specifies the runtime of the CCE node pool. Valid values are *docker* and
	// *containerd*.
	Runtime pulumi.StringPtrInput
	// Specifies the time interval between two scaling operations, in minutes.
	ScaleDownCooldownTime pulumi.IntPtrInput
	// Specifies whether to enable auto scaling.
	// If Autoscaler is enabled, install the autoscaler add-on to use the auto scaling feature.
	ScallEnable pulumi.BoolPtrInput
	// Specifies the list of custom security group IDs for the node pool.
	// If specified, the nodes will be put in these security groups. When specifying a security group, do not modify
	// the rules of the port on which CCE running depends. For details, see
	// [documentation](https://support.huaweicloud.com/intl/en-us/cce_faq/cce_faq_00265.html).
	SecurityGroups pulumi.StringArrayInput
	// Specifies the disk initialization management parameter.
	// If omitted, disks are managed based on the DockerLVMConfigOverride parameter in extendParam.
	// This parameter is supported for clusters of v1.15.11 and later.
	// If the node has both local and EVS disks attached,
	// this parameter must be specified, or it may result in unexpected disk partitions.
	// If you want to change the value range of a data disk to **20** to **32768**, this parameter must be specified.
	// If you want to use the shared disk space (with the runtime and Kubernetes partitions cancelled),
	// this parameter must be specified.
	// If you want to store system components in the system disk, this parameter must be specified.
	Storage NodePoolStoragePtrInput
	// Specifies the ID of the subnet to which the NIC belongs.
	SubnetId pulumi.StringPtrInput
	// Specifies the ID list of the subnet to which the NIC belongs.
	SubnetLists pulumi.StringArrayInput
	// Specifies the tag policy on existing nodes.
	// The value can be **ignore** and **refresh**, defaults to **ignore**.
	TagPolicyOnExistingNodes pulumi.StringPtrInput
	// Specifies the tags of a VM node, key/value pair format.
	Tags pulumi.StringMapInput
	// Specifies the taint policy on existing nodes.
	// The value can be **ignore** and **refresh**, defaults to **refresh**.
	TaintPolicyOnExistingNodes pulumi.StringPtrInput
	// Specifies the taints configuration of the nodes to set anti-affinity.
	// The structure is described below.
	Taints NodePoolTaintArrayInput
	// Specifies the hostname type of the kubernetes node.
	// The value can be:
	// + **privateIp**: The Kubernetes node is named after its IP address.
	// + **cceNodeName**: The Kubernetes node is named after the CCE node.
	Type pulumi.StringPtrInput
}

func (NodePoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nodePoolArgs)(nil)).Elem()
}

type NodePoolInput interface {
	pulumi.Input

	ToNodePoolOutput() NodePoolOutput
	ToNodePoolOutputWithContext(ctx context.Context) NodePoolOutput
}

func (*NodePool) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePool)(nil)).Elem()
}

func (i *NodePool) ToNodePoolOutput() NodePoolOutput {
	return i.ToNodePoolOutputWithContext(context.Background())
}

func (i *NodePool) ToNodePoolOutputWithContext(ctx context.Context) NodePoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolOutput)
}

// NodePoolArrayInput is an input type that accepts NodePoolArray and NodePoolArrayOutput values.
// You can construct a concrete instance of `NodePoolArrayInput` via:
//
//	NodePoolArray{ NodePoolArgs{...} }
type NodePoolArrayInput interface {
	pulumi.Input

	ToNodePoolArrayOutput() NodePoolArrayOutput
	ToNodePoolArrayOutputWithContext(context.Context) NodePoolArrayOutput
}

type NodePoolArray []NodePoolInput

func (NodePoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NodePool)(nil)).Elem()
}

func (i NodePoolArray) ToNodePoolArrayOutput() NodePoolArrayOutput {
	return i.ToNodePoolArrayOutputWithContext(context.Background())
}

func (i NodePoolArray) ToNodePoolArrayOutputWithContext(ctx context.Context) NodePoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolArrayOutput)
}

// NodePoolMapInput is an input type that accepts NodePoolMap and NodePoolMapOutput values.
// You can construct a concrete instance of `NodePoolMapInput` via:
//
//	NodePoolMap{ "key": NodePoolArgs{...} }
type NodePoolMapInput interface {
	pulumi.Input

	ToNodePoolMapOutput() NodePoolMapOutput
	ToNodePoolMapOutputWithContext(context.Context) NodePoolMapOutput
}

type NodePoolMap map[string]NodePoolInput

func (NodePoolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NodePool)(nil)).Elem()
}

func (i NodePoolMap) ToNodePoolMapOutput() NodePoolMapOutput {
	return i.ToNodePoolMapOutputWithContext(context.Background())
}

func (i NodePoolMap) ToNodePoolMapOutputWithContext(ctx context.Context) NodePoolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolMapOutput)
}

type NodePoolOutput struct{ *pulumi.OutputState }

func (NodePoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePool)(nil)).Elem()
}

func (o NodePoolOutput) ToNodePoolOutput() NodePoolOutput {
	return o
}

func (o NodePoolOutput) ToNodePoolOutputWithContext(ctx context.Context) NodePoolOutput {
	return o
}

// Specifies whether auto renew is enabled. Valid values are "true" and "false".
func (o NodePoolOutput) AutoRenew() pulumi.StringOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringOutput { return v.AutoRenew }).(pulumi.StringOutput)
}

// Specifies the name of the available partition (AZ). Default value
// is random to create nodes in a random AZ in the node pool.
func (o NodePoolOutput) AvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringPtrOutput { return v.AvailabilityZone }).(pulumi.StringPtrOutput)
}

// Billing mode of a node.
func (o NodePoolOutput) BillingMode() pulumi.IntOutput {
	return o.ApplyT(func(v *NodePool) pulumi.IntOutput { return v.BillingMode }).(pulumi.IntOutput)
}

// Specifies the charging mode of the CCE node pool. Valid values are
// *prePaid* and *postPaid*, defaults to *postPaid*.
func (o NodePoolOutput) ChargingMode() pulumi.StringOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringOutput { return v.ChargingMode }).(pulumi.StringOutput)
}

// Specifies the cluster ID.
func (o NodePoolOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// The current number of the nodes.
func (o NodePoolOutput) CurrentNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v *NodePool) pulumi.IntOutput { return v.CurrentNodeCount }).(pulumi.IntOutput)
}

// Specifies the configuration of the data disks.
// The structure is described below.
func (o NodePoolOutput) DataVolumes() NodePoolDataVolumeArrayOutput {
	return o.ApplyT(func(v *NodePool) NodePoolDataVolumeArrayOutput { return v.DataVolumes }).(NodePoolDataVolumeArrayOutput)
}

// Specifies the ECS group ID. If specified, the node will be created under
// the cloud server group.
func (o NodePoolOutput) EcsGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringPtrOutput { return v.EcsGroupId }).(pulumi.StringPtrOutput)
}

func (o NodePoolOutput) EnableForceNew() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringPtrOutput { return v.EnableForceNew }).(pulumi.StringPtrOutput)
}

// Specifies the enterprise project ID of the node pool.
// If updated, the new value will apply only to new nodes.
func (o NodePoolOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// schema: Deprecated; This parameter has been replaced by the 'extend_params' parameter.
func (o NodePoolOutput) ExtendParam() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringMapOutput { return v.ExtendParam }).(pulumi.StringMapOutput)
}

// Specifies the disk expansion parameters.
func (o NodePoolOutput) ExtendParams() NodePoolExtendParamsOutput {
	return o.ApplyT(func(v *NodePool) NodePoolExtendParamsOutput { return v.ExtendParams }).(NodePoolExtendParamsOutput)
}

// Specifies the configurations of extended scaling groups in the node pool.
// The object structure is documented below.
func (o NodePoolOutput) ExtensionScaleGroups() NodePoolExtensionScaleGroupArrayOutput {
	return o.ApplyT(func(v *NodePool) NodePoolExtensionScaleGroupArrayOutput { return v.ExtensionScaleGroups }).(NodePoolExtensionScaleGroupArrayOutput)
}

// Specifies the flavor ID.
func (o NodePoolOutput) FlavorId() pulumi.StringOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringOutput { return v.FlavorId }).(pulumi.StringOutput)
}

// Specifies the hostname config of the kubernetes node,
// which is supported by clusters of v1.23.6-r0 to v1.25 or clusters of v1.25.2-r0 or later versions.
// The object structure is documented below.
func (o NodePoolOutput) HostnameConfig() NodePoolHostnameConfigOutput {
	return o.ApplyT(func(v *NodePool) NodePoolHostnameConfigOutput { return v.HostnameConfig }).(NodePoolHostnameConfigOutput)
}

// Specifies the initial number of expected nodes in the node pool.
// This parameter can be also used to manually scale the node count afterwards.
func (o NodePoolOutput) InitialNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v *NodePool) pulumi.IntOutput { return v.InitialNodeCount }).(pulumi.IntOutput)
}

// Specifies the custom initialization flags.
func (o NodePoolOutput) InitializedConditions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringArrayOutput { return v.InitializedConditions }).(pulumi.StringArrayOutput)
}

// Specifies the key pair name when logging in to select the key pair mode.
// This parameter and `password` are alternative.
func (o NodePoolOutput) KeyPair() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringPtrOutput { return v.KeyPair }).(pulumi.StringPtrOutput)
}

// Specifies the label policy on existing nodes.
// The value can be **ignore** and **refresh**, defaults to **refresh**.
func (o NodePoolOutput) LabelPolicyOnExistingNodes() pulumi.StringOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringOutput { return v.LabelPolicyOnExistingNodes }).(pulumi.StringOutput)
}

// Specifies the tags of a Kubernetes node, key/value pair format.
func (o NodePoolOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Specifies the maximum number of nodes that can be retained in the scaling group
// during auto scaling. The value must be greater than or equal to that of `minNodeCount`, and can neither be greater
// than the maximum number of nodes allowed by the cluster nor the maximum number of nodes in the node pool.
func (o NodePoolOutput) MaxNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodePool) pulumi.IntPtrOutput { return v.MaxNodeCount }).(pulumi.IntPtrOutput)
}

// Specifies the maximum number of instances a node is allowed to create.
func (o NodePoolOutput) MaxPods() pulumi.IntOutput {
	return o.ApplyT(func(v *NodePool) pulumi.IntOutput { return v.MaxPods }).(pulumi.IntOutput)
}

// Specifies the minimum number of nodes in the scaling group during auto scaling.
// The value must be greater than **0**.
func (o NodePoolOutput) MinNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodePool) pulumi.IntPtrOutput { return v.MinNodeCount }).(pulumi.IntPtrOutput)
}

// Specifies the name of an extended scaling group.
// The value cannot be default and can contain a maximum of 55 characters.
// Only digits, lowercase letters, and hyphens (-) are allowed.
func (o NodePoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the operating system of the node.
// The value can be **EulerOS 2.9** and **CentOS 7.6** e.g. For more details,
// please see [documentation](https://support.huaweicloud.com/intl/en-us/api-cce/node-os.html).
// This parameter is required when the `nodeImageId` in `extendParams` is not specified.
func (o NodePoolOutput) Os() pulumi.StringOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringOutput { return v.Os }).(pulumi.StringOutput)
}

// Specifies the root password when logging in to select the password mode.
// The password consists of 8 to 26 characters and must contain at least three of following: uppercase letters,
// lowercase letters, digits, special characters(!@$%^-_=+[{}]:,./?~#*).
// This parameter can be plain or salted and is alternative to `keyPair`.
func (o NodePoolOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// Specifies the charging period of the CCE node pool. If `periodUnit` is set to
// *month*, the value ranges from 1 to 9. If `periodUnit` is set to *year*, the value ranges from 1 to 3. This parameter
// is mandatory if `chargingMode` is set to *prePaid*.
func (o NodePoolOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodePool) pulumi.IntPtrOutput { return v.Period }).(pulumi.IntPtrOutput)
}

// Specifies the charging period unit of the CCE node pool.
// Valid values are *month* and *year*. This parameter is mandatory if `chargingMode` is set to *prePaid*.
func (o NodePoolOutput) PeriodUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringPtrOutput { return v.PeriodUnit }).(pulumi.StringPtrOutput)
}

// Specifies the list of security group IDs for the pod.
// Only supported in CCE Turbo clusters of v1.19 and above.
func (o NodePoolOutput) PodSecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringArrayOutput { return v.PodSecurityGroups }).(pulumi.StringArrayOutput)
}

// Specifies the script to be executed after installation.
// The input value can be a Base64 encoded string or not.
func (o NodePoolOutput) Postinstall() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringPtrOutput { return v.Postinstall }).(pulumi.StringPtrOutput)
}

// Specifies the script to be executed before installation.
// The input value can be a Base64 encoded string or not.
func (o NodePoolOutput) Preinstall() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringPtrOutput { return v.Preinstall }).(pulumi.StringPtrOutput)
}

// Specifies the weight of the node pool.
// A node pool with a higher weight has a higher priority during scaling.
func (o NodePoolOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodePool) pulumi.IntPtrOutput { return v.Priority }).(pulumi.IntPtrOutput)
}

// The region in which to create the CCE pool resource. If omitted, the
// provider-level region will be used. Changing this creates a new CCE node pool resource.
func (o NodePoolOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the configuration of the system disk.
// The structure is described below.
func (o NodePoolOutput) RootVolume() NodePoolRootVolumeOutput {
	return o.ApplyT(func(v *NodePool) NodePoolRootVolumeOutput { return v.RootVolume }).(NodePoolRootVolumeOutput)
}

// Specifies the runtime of the CCE node pool. Valid values are *docker* and
// *containerd*.
func (o NodePoolOutput) Runtime() pulumi.StringOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringOutput { return v.Runtime }).(pulumi.StringOutput)
}

// Specifies the time interval between two scaling operations, in minutes.
func (o NodePoolOutput) ScaleDownCooldownTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodePool) pulumi.IntPtrOutput { return v.ScaleDownCooldownTime }).(pulumi.IntPtrOutput)
}

// Specifies whether to enable auto scaling.
// If Autoscaler is enabled, install the autoscaler add-on to use the auto scaling feature.
func (o NodePoolOutput) ScallEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NodePool) pulumi.BoolPtrOutput { return v.ScallEnable }).(pulumi.BoolPtrOutput)
}

// Specifies the list of custom security group IDs for the node pool.
// If specified, the nodes will be put in these security groups. When specifying a security group, do not modify
// the rules of the port on which CCE running depends. For details, see
// [documentation](https://support.huaweicloud.com/intl/en-us/cce_faq/cce_faq_00265.html).
func (o NodePoolOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringArrayOutput { return v.SecurityGroups }).(pulumi.StringArrayOutput)
}

// Node status information.
func (o NodePoolOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specifies the disk initialization management parameter.
// If omitted, disks are managed based on the DockerLVMConfigOverride parameter in extendParam.
// This parameter is supported for clusters of v1.15.11 and later.
// If the node has both local and EVS disks attached,
// this parameter must be specified, or it may result in unexpected disk partitions.
// If you want to change the value range of a data disk to **20** to **32768**, this parameter must be specified.
// If you want to use the shared disk space (with the runtime and Kubernetes partitions cancelled),
// this parameter must be specified.
// If you want to store system components in the system disk, this parameter must be specified.
func (o NodePoolOutput) Storage() NodePoolStoragePtrOutput {
	return o.ApplyT(func(v *NodePool) NodePoolStoragePtrOutput { return v.Storage }).(NodePoolStoragePtrOutput)
}

// Specifies the ID of the subnet to which the NIC belongs.
func (o NodePoolOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// Specifies the ID list of the subnet to which the NIC belongs.
func (o NodePoolOutput) SubnetLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringArrayOutput { return v.SubnetLists }).(pulumi.StringArrayOutput)
}

// Specifies the tag policy on existing nodes.
// The value can be **ignore** and **refresh**, defaults to **ignore**.
func (o NodePoolOutput) TagPolicyOnExistingNodes() pulumi.StringOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringOutput { return v.TagPolicyOnExistingNodes }).(pulumi.StringOutput)
}

// Specifies the tags of a VM node, key/value pair format.
func (o NodePoolOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Specifies the taint policy on existing nodes.
// The value can be **ignore** and **refresh**, defaults to **refresh**.
func (o NodePoolOutput) TaintPolicyOnExistingNodes() pulumi.StringOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringOutput { return v.TaintPolicyOnExistingNodes }).(pulumi.StringOutput)
}

// Specifies the taints configuration of the nodes to set anti-affinity.
// The structure is described below.
func (o NodePoolOutput) Taints() NodePoolTaintArrayOutput {
	return o.ApplyT(func(v *NodePool) NodePoolTaintArrayOutput { return v.Taints }).(NodePoolTaintArrayOutput)
}

// Specifies the hostname type of the kubernetes node.
// The value can be:
// + **privateIp**: The Kubernetes node is named after its IP address.
// + **cceNodeName**: The Kubernetes node is named after the CCE node.
func (o NodePoolOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type NodePoolArrayOutput struct{ *pulumi.OutputState }

func (NodePoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NodePool)(nil)).Elem()
}

func (o NodePoolArrayOutput) ToNodePoolArrayOutput() NodePoolArrayOutput {
	return o
}

func (o NodePoolArrayOutput) ToNodePoolArrayOutputWithContext(ctx context.Context) NodePoolArrayOutput {
	return o
}

func (o NodePoolArrayOutput) Index(i pulumi.IntInput) NodePoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NodePool {
		return vs[0].([]*NodePool)[vs[1].(int)]
	}).(NodePoolOutput)
}

type NodePoolMapOutput struct{ *pulumi.OutputState }

func (NodePoolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NodePool)(nil)).Elem()
}

func (o NodePoolMapOutput) ToNodePoolMapOutput() NodePoolMapOutput {
	return o
}

func (o NodePoolMapOutput) ToNodePoolMapOutputWithContext(ctx context.Context) NodePoolMapOutput {
	return o
}

func (o NodePoolMapOutput) MapIndex(k pulumi.StringInput) NodePoolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NodePool {
		return vs[0].(map[string]*NodePool)[vs[1].(string)]
	}).(NodePoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolInput)(nil)).Elem(), &NodePool{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolArrayInput)(nil)).Elem(), NodePoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolMapInput)(nil)).Elem(), NodePoolMap{})
	pulumi.RegisterOutputType(NodePoolOutput{})
	pulumi.RegisterOutputType(NodePoolArrayOutput{})
	pulumi.RegisterOutputType(NodePoolMapOutput{})
}
