// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cce

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Add a node to a CCE cluster.
//
// ## Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud"
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Cce"
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Dew"
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Ecs"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Cce"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Ecs"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			clusterId := cfg.RequireObject("clusterId")
//			nodeName := cfg.RequireObject("nodeName")
//			keypairName := cfg.RequireObject("keypairName")
//			myaz, err := huaweicloud.GetAvailabilityZones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			myflavors, err := Ecs.GetFlavors(ctx, &ecs.GetFlavorsArgs{
//				AvailabilityZone: pulumi.StringRef(myaz.Names[0]),
//				PerformanceType:  pulumi.StringRef("normal"),
//				CpuCoreCount:     pulumi.IntRef(2),
//				MemorySize:       pulumi.IntRef(4),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			mykp, err := Dew.NewKeypair(ctx, "mykp", &Dew.KeypairArgs{
//				PublicKey: pulumi.String("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDAjpC1hwiOCCmKEWxJ4qzTTsJbKzndLo1BCz5PcwtUnflmU+gHJtWMZKpuEGVi29h0A/+ydKek1O18k10Ff+4tyFjiHDQAT9+OfgWf7+b1yK+qDip3X1C0UPMbwHlTfSGWLGZquwhvEFx9k3h/M+VtMvwR1lJ9LUyTAImnNjWG7TAIPmui30HvM2UiFEmqkr4ijq45MyX2+fLIePLRIFuu1p4whjHAQYufqyno3BS48icQb4p6iVEZPo4AE2o9oIyQvj2mx4dk5Y8CgSETOZTYDOR3rU2fZTRDRgPJDH9FWvQjF5tA0p3d9CoWWd2s6GKKbfoUIi8R/Db1BSPJwkqB jrp-hp-pc"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Cce.NewNode(ctx, "node", &Cce.NodeArgs{
//				ClusterId:        pulumi.Any(clusterId),
//				FlavorId:         pulumi.String(myflavors.Ids[0]),
//				AvailabilityZone: pulumi.String(myaz.Names[0]),
//				KeyPair:          mykp.Name,
//				RootVolume: &cce.NodeRootVolumeArgs{
//					Size:       pulumi.Int(40),
//					Volumetype: pulumi.String("SATA"),
//				},
//				DataVolumes: cce.NodeDataVolumeArray{
//					&cce.NodeDataVolumeArgs{
//						Size:       pulumi.Int(100),
//						Volumetype: pulumi.String("SATA"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Node with Eip
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud"
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Cce"
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Dew"
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Ecs"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Cce"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Ecs"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			clusterId := cfg.RequireObject("clusterId")
//			nodeName := cfg.RequireObject("nodeName")
//			keypairName := cfg.RequireObject("keypairName")
//			myaz, err := huaweicloud.GetAvailabilityZones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = Ecs.GetFlavors(ctx, &ecs.GetFlavorsArgs{
//				AvailabilityZone: pulumi.StringRef(myaz.Names[0]),
//				PerformanceType:  pulumi.StringRef("normal"),
//				CpuCoreCount:     pulumi.IntRef(2),
//				MemorySize:       pulumi.IntRef(4),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			mykp, err := Dew.NewKeypair(ctx, "mykp", &Dew.KeypairArgs{
//				PublicKey: pulumi.String("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDAjpC1hwiOCCmKEWxJ4qzTTsJbKzndLo1BCz5PcwtUnflmU+gHJtWMZKpuEGVi29h0A/+ydKek1O18k10Ff+4tyFjiHDQAT9+OfgWf7+b1yK+qDip3X1C0UPMbwHlTfSGWLGZquwhvEFx9k3h/M+VtMvwR1lJ9LUyTAImnNjWG7TAIPmui30HvM2UiFEmqkr4ijq45MyX2+fLIePLRIFuu1p4whjHAQYufqyno3BS48icQb4p6iVEZPo4AE2o9oIyQvj2mx4dk5Y8CgSETOZTYDOR3rU2fZTRDRgPJDH9FWvQjF5tA0p3d9CoWWd2s6GKKbfoUIi8R/Db1BSPJwkqB jrp-hp-pc"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Cce.NewNode(ctx, "mynode", &Cce.NodeArgs{
//				ClusterId:        pulumi.Any(clusterId),
//				FlavorId:         pulumi.Any(data.Huaweicloud_compute_flavors.Myflavors.Ids[0]),
//				AvailabilityZone: pulumi.String(myaz.Names[0]),
//				KeyPair:          mykp.Name,
//				RootVolume: &cce.NodeRootVolumeArgs{
//					Size:       pulumi.Int(40),
//					Volumetype: pulumi.String("SATA"),
//				},
//				DataVolumes: cce.NodeDataVolumeArray{
//					&cce.NodeDataVolumeArgs{
//						Size:       pulumi.Int(100),
//						Volumetype: pulumi.String("SATA"),
//					},
//				},
//				Iptype:              pulumi.String("5_bgp"),
//				BandwidthChargeMode: pulumi.String("traffic"),
//				Sharetype:           pulumi.String("PER"),
//				BandwidthSize:       pulumi.Int(100),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Node with Existing Eip
//
// ```go
// package main
//
// import (
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud"
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Cce"
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Dew"
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Ecs"
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Vpc"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Cce"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Ecs"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			clusterId := cfg.RequireObject("clusterId")
//			nodeName := cfg.RequireObject("nodeName")
//			keypairName := cfg.RequireObject("keypairName")
//			myaz, err := huaweicloud.GetAvailabilityZones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = Ecs.GetFlavors(ctx, &ecs.GetFlavorsArgs{
//				AvailabilityZone: pulumi.StringRef(myaz.Names[0]),
//				PerformanceType:  pulumi.StringRef("normal"),
//				CpuCoreCount:     pulumi.IntRef(2),
//				MemorySize:       pulumi.IntRef(4),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			mykp, err := Dew.NewKeypair(ctx, "mykp", &Dew.KeypairArgs{
//				PublicKey: pulumi.String("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDAjpC1hwiOCCmKEWxJ4qzTTsJbKzndLo1BCz5PcwtUnflmU+gHJtWMZKpuEGVi29h0A/+ydKek1O18k10Ff+4tyFjiHDQAT9+OfgWf7+b1yK+qDip3X1C0UPMbwHlTfSGWLGZquwhvEFx9k3h/M+VtMvwR1lJ9LUyTAImnNjWG7TAIPmui30HvM2UiFEmqkr4ijq45MyX2+fLIePLRIFuu1p4whjHAQYufqyno3BS48icQb4p6iVEZPo4AE2o9oIyQvj2mx4dk5Y8CgSETOZTYDOR3rU2fZTRDRgPJDH9FWvQjF5tA0p3d9CoWWd2s6GKKbfoUIi8R/Db1BSPJwkqB jrp-hp-pc"),
//			})
//			if err != nil {
//				return err
//			}
//			myeip, err := Vpc.NewEip(ctx, "myeip", &Vpc.EipArgs{
//				Publicip: &vpc.EipPublicipArgs{
//					Type: pulumi.String("5_bgp"),
//				},
//				Bandwidth: &vpc.EipBandwidthArgs{
//					Name:       pulumi.String("test"),
//					Size:       pulumi.Int(8),
//					ShareType:  pulumi.String("PER"),
//					ChargeMode: pulumi.String("traffic"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Cce.NewNode(ctx, "mynode", &Cce.NodeArgs{
//				ClusterId:        pulumi.Any(clusterId),
//				FlavorId:         pulumi.Any(data.Huaweicloud_compute_flavors.Myflavors.Ids[0]),
//				AvailabilityZone: pulumi.String(myaz.Names[0]),
//				KeyPair:          mykp.Name,
//				RootVolume: &cce.NodeRootVolumeArgs{
//					Size:       pulumi.Int(40),
//					Volumetype: pulumi.String("SATA"),
//				},
//				DataVolumes: cce.NodeDataVolumeArray{
//					&cce.NodeDataVolumeArgs{
//						Size:       pulumi.Int(100),
//						Volumetype: pulumi.String("SATA"),
//					},
//				},
//				EipId: myeip.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Node with storage configuration
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud"
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Cce"
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Dew"
//	"github.com/huaweicloud/pulumi-huaweicloud/sdk/go/huaweicloud/Ecs"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Cce"
//	"github.com/pulumi/pulumi-huaweicloud/sdk/go/huaweicloud/Ecs"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			clusterId := cfg.RequireObject("clusterId")
//			nodeName := cfg.RequireObject("nodeName")
//			keypairName := cfg.RequireObject("keypairName")
//			kmsKeyName := cfg.RequireObject("kmsKeyName")
//			myaz, err := huaweicloud.GetAvailabilityZones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = Ecs.GetFlavors(ctx, &ecs.GetFlavorsArgs{
//				AvailabilityZone: pulumi.StringRef(myaz.Names[0]),
//				PerformanceType:  pulumi.StringRef("normal"),
//				CpuCoreCount:     pulumi.IntRef(2),
//				MemorySize:       pulumi.IntRef(4),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			mykp, err := Dew.NewKeypair(ctx, "mykp", &Dew.KeypairArgs{
//				PublicKey: pulumi.String("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDAjpC1hwiOCCmKEWxJ4qzTTsJbKzndLo1BCz5PcwtUnflmU+gHJtWMZKpuEGVi29h0A/+ydKek1O18k10Ff+4tyFjiHDQAT9+OfgWf7+b1yK+qDip3X1C0UPMbwHlTfSGWLGZquwhvEFx9k3h/M+VtMvwR1lJ9LUyTAImnNjWG7TAIPmui30HvM2UiFEmqkr4ijq45MyX2+fLIePLRIFuu1p4whjHAQYufqyno3BS48icQb4p6iVEZPo4AE2o9oIyQvj2mx4dk5Y8CgSETOZTYDOR3rU2fZTRDRgPJDH9FWvQjF5tA0p3d9CoWWd2s6GKKbfoUIi8R/Db1BSPJwkqB jrp-hp-pc"),
//			})
//			if err != nil {
//				return err
//			}
//			mykey, err := Dew.NewKey(ctx, "mykey", &Dew.KeyArgs{
//				KeyAlias:    pulumi.Any(kmsKeyName),
//				PendingDays: pulumi.String("7"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Cce.NewNode(ctx, "mynode", &Cce.NodeArgs{
//				ClusterId:        pulumi.Any(clusterId),
//				FlavorId:         pulumi.Any(data.Huaweicloud_compute_flavors.Myflavors.Ids[0]),
//				AvailabilityZone: pulumi.String(myaz.Names[0]),
//				KeyPair:          mykp.Name,
//				RootVolume: &cce.NodeRootVolumeArgs{
//					Size:       pulumi.Int(40),
//					Volumetype: pulumi.String("SSD"),
//				},
//				DataVolumes: cce.NodeDataVolumeArray{
//					&cce.NodeDataVolumeArgs{
//						Size:       pulumi.Int(100),
//						Volumetype: pulumi.String("SSD"),
//					},
//					&cce.NodeDataVolumeArgs{
//						Size:       pulumi.Int(100),
//						Volumetype: pulumi.String("SSD"),
//						KmsKeyId:   mykey.ID(),
//					},
//				},
//				Storage: &cce.NodeStorageArgs{
//					Selectors: cce.NodeStorageSelectorArray{
//						&cce.NodeStorageSelectorArgs{
//							Name:            pulumi.String("cceUse"),
//							Type:            pulumi.String("evs"),
//							MatchLabelSize:  pulumi.String("100"),
//							MatchLabelCount: pulumi.String("1"),
//						},
//						&cce.NodeStorageSelectorArgs{
//							Name:                        pulumi.String("user"),
//							Type:                        pulumi.String("evs"),
//							MatchLabelSize:              pulumi.String("100"),
//							MatchLabelMetadataEncrypted: pulumi.String("1"),
//							MatchLabelMetadataCmkid:     mykey.ID(),
//							MatchLabelCount:             pulumi.String("1"),
//						},
//					},
//					Groups: cce.NodeStorageGroupArray{
//						&cce.NodeStorageGroupArgs{
//							Name: pulumi.String("vgpaas"),
//							SelectorNames: pulumi.StringArray{
//								pulumi.String("cceUse"),
//							},
//							CceManaged: pulumi.Bool(true),
//							VirtualSpaces: cce.NodeStorageGroupVirtualSpaceArray{
//								&cce.NodeStorageGroupVirtualSpaceArgs{
//									Name:      pulumi.String("kubernetes"),
//									Size:      pulumi.String(fmt.Sprintf("10%v", "%")),
//									LvmLvType: pulumi.String("linear"),
//								},
//								&cce.NodeStorageGroupVirtualSpaceArgs{
//									Name: pulumi.String("runtime"),
//									Size: pulumi.String(fmt.Sprintf("90%v", "%")),
//								},
//							},
//						},
//						&cce.NodeStorageGroupArgs{
//							Name: pulumi.String("vguser"),
//							SelectorNames: pulumi.StringArray{
//								pulumi.String("user"),
//							},
//							VirtualSpaces: cce.NodeStorageGroupVirtualSpaceArray{
//								&cce.NodeStorageGroupVirtualSpaceArgs{
//									Name:      pulumi.String("user"),
//									Size:      pulumi.String(fmt.Sprintf("100%v", "%")),
//									LvmLvType: pulumi.String("linear"),
//									LvmPath:   pulumi.String("/workspace"),
//								},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # CCE node can be imported using the cluster ID and node ID separated by a slash, e.g.bash
//
// ```sh
//
//	$ pulumi import huaweicloud:Cce/node:Node my_node 5c20fdad-7288-11eb-b817-0255ac10158b/e9287dff-7288-11eb-b817-0255ac10158b
//
// ```
//
//	Note that the imported state may not be identical to your resource definition, due to some attributes missing from the API response, security or some other reason. The missing attributes include`password`, `private_key`, `storage`, `fixed_ip`, `extension_nics`, `eip_id`, `iptype`, `bandwidth_charge_mode`, `bandwidth_size`, `share_type`, `extend_params`, `dedicated_host_id`, `initialized_conditions`, `labels`, `taints` and arguments for pre-paid. It is generally recommended running `terraform plan` after importing a node. You can then decide if changes should be applied to the node, or the resource definition should be updated to align with the node. Also you can ignore changes as below. hcl resource "huaweicloud_cce_node" "my_node" {
//
//	...
//
//	lifecycle {
//
//	ignore_changes = [
//
//	extend_params, labels,
//
//	]
//
//	} }
type Node struct {
	pulumi.CustomResourceState

	// schema: Internal
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// Deprecated: Deprecated
	AutoPay pulumi.StringPtrOutput `pulumi:"autoPay"`
	// Specifies whether auto renew is enabled. Valid values are "true" and "false".
	AutoRenew pulumi.StringPtrOutput `pulumi:"autoRenew"`
	// Specifies the name of the available partition (AZ).
	AvailabilityZone pulumi.StringOutput `pulumi:"availabilityZone"`
	// Specifies the bandwidth billing type.
	BandwidthChargeMode pulumi.StringPtrOutput `pulumi:"bandwidthChargeMode"`
	// Specifies the bandwidth size.
	BandwidthSize pulumi.IntPtrOutput `pulumi:"bandwidthSize"`
	// Deprecated: use charging_mode instead
	BillingMode pulumi.IntOutput `pulumi:"billingMode"`
	// Specifies the charging mode of the CCE node. Valid values are *prePaid*
	// and *postPaid*, defaults to *postPaid*.
	ChargingMode pulumi.StringOutput `pulumi:"chargingMode"`
	// Specifies the ID of the cluster.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// Specifies the configurations of the data disk.
	DataVolumes NodeDataVolumeArrayOutput `pulumi:"dataVolumes"`
	// Specifies the ID of the DeH to which the node is scheduled.
	DedicatedHostId pulumi.StringPtrOutput `pulumi:"dedicatedHostId"`
	// Specifies the ECS group ID. If specified, the node will be created under
	// the cloud server group.
	EcsGroupId pulumi.StringPtrOutput `pulumi:"ecsGroupId"`
	// schema: Deprecated
	EcsPerformanceType pulumi.StringPtrOutput `pulumi:"ecsPerformanceType"`
	// Specifies the ID of the EIP.
	EipId pulumi.StringPtrOutput `pulumi:"eipId"`
	// Deprecated: use eip_id instead
	EipIds         pulumi.StringArrayOutput `pulumi:"eipIds"`
	EnableForceNew pulumi.StringPtrOutput   `pulumi:"enableForceNew"`
	// Specifies the enterprise project ID of the CCE node.
	EnterpriseProjectId pulumi.StringOutput `pulumi:"enterpriseProjectId"`
	// schema: Deprecated
	ExtendParam pulumi.StringMapOutput `pulumi:"extendParam"`
	// Deprecated: use charging_mode instead
	ExtendParamChargingMode pulumi.IntPtrOutput `pulumi:"extendParamChargingMode"`
	// Specifies the extended parameters.
	// The object structure is documented below.
	ExtendParams NodeExtendParamsPtrOutput `pulumi:"extendParams"`
	// Specifies extension NICs of the node.
	// The object structure is documented below.
	ExtensionNics NodeExtensionNicArrayOutput `pulumi:"extensionNics"`
	// Specifies the fixed IP of the NIC.
	FixedIp pulumi.StringPtrOutput `pulumi:"fixedIp"`
	// Specifies the flavor ID.
	// resource.
	FlavorId pulumi.StringOutput `pulumi:"flavorId"`
	// Specifies the hostname config of the kubernetes node,
	// which is supported by clusters of v1.23.6-r0 to v1.25 or clusters of v1.25.2-r0 or later versions.
	// The object structure is documented below.
	HostnameConfig NodeHostnameConfigOutput `pulumi:"hostnameConfig"`
	// Specifies the custom initialization flags.
	InitializedConditions pulumi.StringArrayOutput `pulumi:"initializedConditions"`
	// Specifies the elastic IP type.
	Iptype pulumi.StringPtrOutput `pulumi:"iptype"`
	// schema: Internal
	KeepEcs pulumi.BoolPtrOutput `pulumi:"keepEcs"`
	// Specifies the key pair name when logging in to select the key pair mode.
	// This parameter and `password` are alternative.
	KeyPair pulumi.StringPtrOutput `pulumi:"keyPair"`
	// Specifies the tags of a Kubernetes node, key/value pair format.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Specifies the maximum number of instances a node is allowed to create.
	MaxPods pulumi.IntPtrOutput `pulumi:"maxPods"`
	// Specifies the virtual space name. Currently, only **kubernetes**, **runtime**,
	// and **user** are supported.
	Name pulumi.StringOutput `pulumi:"name"`
	// Deprecated: will be removed after v1.26.0
	OrderId pulumi.StringPtrOutput `pulumi:"orderId"`
	// Specifies the operating system of the node.
	// The value can be **EulerOS 2.9** and **CentOS 7.6** e.g. For more details,
	// please see [documentation](https://support.huaweicloud.com/intl/en-us/api-cce/node-os.html).
	// This parameter is required when the `nodeImageId` in `extendParams` is not specified.
	Os pulumi.StringOutput `pulumi:"os"`
	// schema: Internal
	Partition pulumi.StringPtrOutput `pulumi:"partition"`
	// Specifies the root password when logging in to select the password mode.
	// The password consists of 8 to 26 characters and must contain at least three of following: uppercase letters,
	// lowercase letters, digits, special characters(!@$%^-_=+[{}]:,./?~#*).
	// This parameter can be plain or salted and is alternative to `keyPair`.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// Specifies the charging period of the CCE node. If `periodUnit` is set to *month*
	// , the value ranges from 1 to 9. If `periodUnit` is set to *year*, the value ranges from 1 to 3. This parameter is
	// mandatory if `chargingMode` is set to *prePaid*.
	Period pulumi.IntPtrOutput `pulumi:"period"`
	// Specifies the charging period unit of the CCE node.
	// Valid values are *month* and *year*. This parameter is mandatory if `chargingMode` is set to *prePaid*.
	PeriodUnit pulumi.StringPtrOutput `pulumi:"periodUnit"`
	// Specifies the script to be executed after installation.
	// The input value can be a Base64 encoded string or not.
	Postinstall pulumi.StringPtrOutput `pulumi:"postinstall"`
	// Specifies the script to be executed before installation.
	// The input value can be a Base64 encoded string or not.
	Preinstall pulumi.StringPtrOutput `pulumi:"preinstall"`
	// Private IP of the CCE node.
	PrivateIp pulumi.StringOutput `pulumi:"privateIp"`
	// Specifies the private key of the in used `keyPair`. This parameter is mandatory
	// when replacing or unbinding a keypair if the CCE node is in **Active** state.
	PrivateKey pulumi.StringPtrOutput `pulumi:"privateKey"`
	// schema: Deprecated
	ProductId pulumi.StringPtrOutput `pulumi:"productId"`
	// Public IP of the CCE node.
	PublicIp pulumi.StringOutput `pulumi:"publicIp"`
	// schema: Deprecated
	PublicKey pulumi.StringPtrOutput `pulumi:"publicKey"`
	// Specifies the region in which to create the CCE node resource.
	// If omitted, the provider-level region will be used. Changing this creates a new CCE node resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the configuration of the system disk.
	RootVolume NodeRootVolumeOutput `pulumi:"rootVolume"`
	// Specifies the runtime of the CCE node. Valid values are *docker* and
	// *containerd*.
	Runtime pulumi.StringOutput `pulumi:"runtime"`
	// ID of the ECS instance associated with the node.
	ServerId pulumi.StringOutput `pulumi:"serverId"`
	// Specifies the bandwidth sharing type.
	Sharetype pulumi.StringPtrOutput `pulumi:"sharetype"`
	// The status of the CCE node.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the disk initialization management parameter.
	// If omitted, disks are managed based on the DockerLVMConfigOverride parameter in extendParam.
	// This parameter is supported for clusters of v1.15.11 and later.
	// If the node has both local and EVS disks attached,
	// this parameter must be specified, or it may result in unexpected disk partitions.
	// If you want to change the value range of a data disk to **20** to **32768**, this parameter must be specified.
	// If you want to use the shared disk space (with the runtime and Kubernetes partitions cancelled),
	// this parameter must be specified.
	// If you want to store system components in the system disk, this parameter must be specified.
	Storage NodeStoragePtrOutput `pulumi:"storage"`
	// Specifies the ID of the subnet to which the NIC belongs.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// Specifies the tags of a VM node, key/value pair format.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Specifies the taints configuration of the nodes to set anti-affinity.
	// Each taint contains the following parameters:
	Taints NodeTaintArrayOutput `pulumi:"taints"`
}

// NewNode registers a new resource with the given unique name, arguments, and options.
func NewNode(ctx *pulumi.Context,
	name string, args *NodeArgs, opts ...pulumi.ResourceOption) (*Node, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AvailabilityZone == nil {
		return nil, errors.New("invalid value for required argument 'AvailabilityZone'")
	}
	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.FlavorId == nil {
		return nil, errors.New("invalid value for required argument 'FlavorId'")
	}
	if args.RootVolume == nil {
		return nil, errors.New("invalid value for required argument 'RootVolume'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Node
	err := ctx.RegisterResource("huaweicloud:Cce/node:Node", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNode gets an existing Node resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNode(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NodeState, opts ...pulumi.ResourceOption) (*Node, error) {
	var resource Node
	err := ctx.ReadResource("huaweicloud:Cce/node:Node", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Node resources.
type nodeState struct {
	// schema: Internal
	Annotations map[string]string `pulumi:"annotations"`
	// Deprecated: Deprecated
	AutoPay *string `pulumi:"autoPay"`
	// Specifies whether auto renew is enabled. Valid values are "true" and "false".
	AutoRenew *string `pulumi:"autoRenew"`
	// Specifies the name of the available partition (AZ).
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// Specifies the bandwidth billing type.
	BandwidthChargeMode *string `pulumi:"bandwidthChargeMode"`
	// Specifies the bandwidth size.
	BandwidthSize *int `pulumi:"bandwidthSize"`
	// Deprecated: use charging_mode instead
	BillingMode *int `pulumi:"billingMode"`
	// Specifies the charging mode of the CCE node. Valid values are *prePaid*
	// and *postPaid*, defaults to *postPaid*.
	ChargingMode *string `pulumi:"chargingMode"`
	// Specifies the ID of the cluster.
	ClusterId *string `pulumi:"clusterId"`
	// Specifies the configurations of the data disk.
	DataVolumes []NodeDataVolume `pulumi:"dataVolumes"`
	// Specifies the ID of the DeH to which the node is scheduled.
	DedicatedHostId *string `pulumi:"dedicatedHostId"`
	// Specifies the ECS group ID. If specified, the node will be created under
	// the cloud server group.
	EcsGroupId *string `pulumi:"ecsGroupId"`
	// schema: Deprecated
	EcsPerformanceType *string `pulumi:"ecsPerformanceType"`
	// Specifies the ID of the EIP.
	EipId *string `pulumi:"eipId"`
	// Deprecated: use eip_id instead
	EipIds         []string `pulumi:"eipIds"`
	EnableForceNew *string  `pulumi:"enableForceNew"`
	// Specifies the enterprise project ID of the CCE node.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// schema: Deprecated
	ExtendParam map[string]string `pulumi:"extendParam"`
	// Deprecated: use charging_mode instead
	ExtendParamChargingMode *int `pulumi:"extendParamChargingMode"`
	// Specifies the extended parameters.
	// The object structure is documented below.
	ExtendParams *NodeExtendParams `pulumi:"extendParams"`
	// Specifies extension NICs of the node.
	// The object structure is documented below.
	ExtensionNics []NodeExtensionNic `pulumi:"extensionNics"`
	// Specifies the fixed IP of the NIC.
	FixedIp *string `pulumi:"fixedIp"`
	// Specifies the flavor ID.
	// resource.
	FlavorId *string `pulumi:"flavorId"`
	// Specifies the hostname config of the kubernetes node,
	// which is supported by clusters of v1.23.6-r0 to v1.25 or clusters of v1.25.2-r0 or later versions.
	// The object structure is documented below.
	HostnameConfig *NodeHostnameConfig `pulumi:"hostnameConfig"`
	// Specifies the custom initialization flags.
	InitializedConditions []string `pulumi:"initializedConditions"`
	// Specifies the elastic IP type.
	Iptype *string `pulumi:"iptype"`
	// schema: Internal
	KeepEcs *bool `pulumi:"keepEcs"`
	// Specifies the key pair name when logging in to select the key pair mode.
	// This parameter and `password` are alternative.
	KeyPair *string `pulumi:"keyPair"`
	// Specifies the tags of a Kubernetes node, key/value pair format.
	Labels map[string]string `pulumi:"labels"`
	// Specifies the maximum number of instances a node is allowed to create.
	MaxPods *int `pulumi:"maxPods"`
	// Specifies the virtual space name. Currently, only **kubernetes**, **runtime**,
	// and **user** are supported.
	Name *string `pulumi:"name"`
	// Deprecated: will be removed after v1.26.0
	OrderId *string `pulumi:"orderId"`
	// Specifies the operating system of the node.
	// The value can be **EulerOS 2.9** and **CentOS 7.6** e.g. For more details,
	// please see [documentation](https://support.huaweicloud.com/intl/en-us/api-cce/node-os.html).
	// This parameter is required when the `nodeImageId` in `extendParams` is not specified.
	Os *string `pulumi:"os"`
	// schema: Internal
	Partition *string `pulumi:"partition"`
	// Specifies the root password when logging in to select the password mode.
	// The password consists of 8 to 26 characters and must contain at least three of following: uppercase letters,
	// lowercase letters, digits, special characters(!@$%^-_=+[{}]:,./?~#*).
	// This parameter can be plain or salted and is alternative to `keyPair`.
	Password *string `pulumi:"password"`
	// Specifies the charging period of the CCE node. If `periodUnit` is set to *month*
	// , the value ranges from 1 to 9. If `periodUnit` is set to *year*, the value ranges from 1 to 3. This parameter is
	// mandatory if `chargingMode` is set to *prePaid*.
	Period *int `pulumi:"period"`
	// Specifies the charging period unit of the CCE node.
	// Valid values are *month* and *year*. This parameter is mandatory if `chargingMode` is set to *prePaid*.
	PeriodUnit *string `pulumi:"periodUnit"`
	// Specifies the script to be executed after installation.
	// The input value can be a Base64 encoded string or not.
	Postinstall *string `pulumi:"postinstall"`
	// Specifies the script to be executed before installation.
	// The input value can be a Base64 encoded string or not.
	Preinstall *string `pulumi:"preinstall"`
	// Private IP of the CCE node.
	PrivateIp *string `pulumi:"privateIp"`
	// Specifies the private key of the in used `keyPair`. This parameter is mandatory
	// when replacing or unbinding a keypair if the CCE node is in **Active** state.
	PrivateKey *string `pulumi:"privateKey"`
	// schema: Deprecated
	ProductId *string `pulumi:"productId"`
	// Public IP of the CCE node.
	PublicIp *string `pulumi:"publicIp"`
	// schema: Deprecated
	PublicKey *string `pulumi:"publicKey"`
	// Specifies the region in which to create the CCE node resource.
	// If omitted, the provider-level region will be used. Changing this creates a new CCE node resource.
	Region *string `pulumi:"region"`
	// Specifies the configuration of the system disk.
	RootVolume *NodeRootVolume `pulumi:"rootVolume"`
	// Specifies the runtime of the CCE node. Valid values are *docker* and
	// *containerd*.
	Runtime *string `pulumi:"runtime"`
	// ID of the ECS instance associated with the node.
	ServerId *string `pulumi:"serverId"`
	// Specifies the bandwidth sharing type.
	Sharetype *string `pulumi:"sharetype"`
	// The status of the CCE node.
	Status *string `pulumi:"status"`
	// Specifies the disk initialization management parameter.
	// If omitted, disks are managed based on the DockerLVMConfigOverride parameter in extendParam.
	// This parameter is supported for clusters of v1.15.11 and later.
	// If the node has both local and EVS disks attached,
	// this parameter must be specified, or it may result in unexpected disk partitions.
	// If you want to change the value range of a data disk to **20** to **32768**, this parameter must be specified.
	// If you want to use the shared disk space (with the runtime and Kubernetes partitions cancelled),
	// this parameter must be specified.
	// If you want to store system components in the system disk, this parameter must be specified.
	Storage *NodeStorage `pulumi:"storage"`
	// Specifies the ID of the subnet to which the NIC belongs.
	SubnetId *string `pulumi:"subnetId"`
	// Specifies the tags of a VM node, key/value pair format.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the taints configuration of the nodes to set anti-affinity.
	// Each taint contains the following parameters:
	Taints []NodeTaint `pulumi:"taints"`
}

type NodeState struct {
	// schema: Internal
	Annotations pulumi.StringMapInput
	// Deprecated: Deprecated
	AutoPay pulumi.StringPtrInput
	// Specifies whether auto renew is enabled. Valid values are "true" and "false".
	AutoRenew pulumi.StringPtrInput
	// Specifies the name of the available partition (AZ).
	AvailabilityZone pulumi.StringPtrInput
	// Specifies the bandwidth billing type.
	BandwidthChargeMode pulumi.StringPtrInput
	// Specifies the bandwidth size.
	BandwidthSize pulumi.IntPtrInput
	// Deprecated: use charging_mode instead
	BillingMode pulumi.IntPtrInput
	// Specifies the charging mode of the CCE node. Valid values are *prePaid*
	// and *postPaid*, defaults to *postPaid*.
	ChargingMode pulumi.StringPtrInput
	// Specifies the ID of the cluster.
	ClusterId pulumi.StringPtrInput
	// Specifies the configurations of the data disk.
	DataVolumes NodeDataVolumeArrayInput
	// Specifies the ID of the DeH to which the node is scheduled.
	DedicatedHostId pulumi.StringPtrInput
	// Specifies the ECS group ID. If specified, the node will be created under
	// the cloud server group.
	EcsGroupId pulumi.StringPtrInput
	// schema: Deprecated
	EcsPerformanceType pulumi.StringPtrInput
	// Specifies the ID of the EIP.
	EipId pulumi.StringPtrInput
	// Deprecated: use eip_id instead
	EipIds         pulumi.StringArrayInput
	EnableForceNew pulumi.StringPtrInput
	// Specifies the enterprise project ID of the CCE node.
	EnterpriseProjectId pulumi.StringPtrInput
	// schema: Deprecated
	ExtendParam pulumi.StringMapInput
	// Deprecated: use charging_mode instead
	ExtendParamChargingMode pulumi.IntPtrInput
	// Specifies the extended parameters.
	// The object structure is documented below.
	ExtendParams NodeExtendParamsPtrInput
	// Specifies extension NICs of the node.
	// The object structure is documented below.
	ExtensionNics NodeExtensionNicArrayInput
	// Specifies the fixed IP of the NIC.
	FixedIp pulumi.StringPtrInput
	// Specifies the flavor ID.
	// resource.
	FlavorId pulumi.StringPtrInput
	// Specifies the hostname config of the kubernetes node,
	// which is supported by clusters of v1.23.6-r0 to v1.25 or clusters of v1.25.2-r0 or later versions.
	// The object structure is documented below.
	HostnameConfig NodeHostnameConfigPtrInput
	// Specifies the custom initialization flags.
	InitializedConditions pulumi.StringArrayInput
	// Specifies the elastic IP type.
	Iptype pulumi.StringPtrInput
	// schema: Internal
	KeepEcs pulumi.BoolPtrInput
	// Specifies the key pair name when logging in to select the key pair mode.
	// This parameter and `password` are alternative.
	KeyPair pulumi.StringPtrInput
	// Specifies the tags of a Kubernetes node, key/value pair format.
	Labels pulumi.StringMapInput
	// Specifies the maximum number of instances a node is allowed to create.
	MaxPods pulumi.IntPtrInput
	// Specifies the virtual space name. Currently, only **kubernetes**, **runtime**,
	// and **user** are supported.
	Name pulumi.StringPtrInput
	// Deprecated: will be removed after v1.26.0
	OrderId pulumi.StringPtrInput
	// Specifies the operating system of the node.
	// The value can be **EulerOS 2.9** and **CentOS 7.6** e.g. For more details,
	// please see [documentation](https://support.huaweicloud.com/intl/en-us/api-cce/node-os.html).
	// This parameter is required when the `nodeImageId` in `extendParams` is not specified.
	Os pulumi.StringPtrInput
	// schema: Internal
	Partition pulumi.StringPtrInput
	// Specifies the root password when logging in to select the password mode.
	// The password consists of 8 to 26 characters and must contain at least three of following: uppercase letters,
	// lowercase letters, digits, special characters(!@$%^-_=+[{}]:,./?~#*).
	// This parameter can be plain or salted and is alternative to `keyPair`.
	Password pulumi.StringPtrInput
	// Specifies the charging period of the CCE node. If `periodUnit` is set to *month*
	// , the value ranges from 1 to 9. If `periodUnit` is set to *year*, the value ranges from 1 to 3. This parameter is
	// mandatory if `chargingMode` is set to *prePaid*.
	Period pulumi.IntPtrInput
	// Specifies the charging period unit of the CCE node.
	// Valid values are *month* and *year*. This parameter is mandatory if `chargingMode` is set to *prePaid*.
	PeriodUnit pulumi.StringPtrInput
	// Specifies the script to be executed after installation.
	// The input value can be a Base64 encoded string or not.
	Postinstall pulumi.StringPtrInput
	// Specifies the script to be executed before installation.
	// The input value can be a Base64 encoded string or not.
	Preinstall pulumi.StringPtrInput
	// Private IP of the CCE node.
	PrivateIp pulumi.StringPtrInput
	// Specifies the private key of the in used `keyPair`. This parameter is mandatory
	// when replacing or unbinding a keypair if the CCE node is in **Active** state.
	PrivateKey pulumi.StringPtrInput
	// schema: Deprecated
	ProductId pulumi.StringPtrInput
	// Public IP of the CCE node.
	PublicIp pulumi.StringPtrInput
	// schema: Deprecated
	PublicKey pulumi.StringPtrInput
	// Specifies the region in which to create the CCE node resource.
	// If omitted, the provider-level region will be used. Changing this creates a new CCE node resource.
	Region pulumi.StringPtrInput
	// Specifies the configuration of the system disk.
	RootVolume NodeRootVolumePtrInput
	// Specifies the runtime of the CCE node. Valid values are *docker* and
	// *containerd*.
	Runtime pulumi.StringPtrInput
	// ID of the ECS instance associated with the node.
	ServerId pulumi.StringPtrInput
	// Specifies the bandwidth sharing type.
	Sharetype pulumi.StringPtrInput
	// The status of the CCE node.
	Status pulumi.StringPtrInput
	// Specifies the disk initialization management parameter.
	// If omitted, disks are managed based on the DockerLVMConfigOverride parameter in extendParam.
	// This parameter is supported for clusters of v1.15.11 and later.
	// If the node has both local and EVS disks attached,
	// this parameter must be specified, or it may result in unexpected disk partitions.
	// If you want to change the value range of a data disk to **20** to **32768**, this parameter must be specified.
	// If you want to use the shared disk space (with the runtime and Kubernetes partitions cancelled),
	// this parameter must be specified.
	// If you want to store system components in the system disk, this parameter must be specified.
	Storage NodeStoragePtrInput
	// Specifies the ID of the subnet to which the NIC belongs.
	SubnetId pulumi.StringPtrInput
	// Specifies the tags of a VM node, key/value pair format.
	Tags pulumi.StringMapInput
	// Specifies the taints configuration of the nodes to set anti-affinity.
	// Each taint contains the following parameters:
	Taints NodeTaintArrayInput
}

func (NodeState) ElementType() reflect.Type {
	return reflect.TypeOf((*nodeState)(nil)).Elem()
}

type nodeArgs struct {
	// schema: Internal
	Annotations map[string]string `pulumi:"annotations"`
	// Deprecated: Deprecated
	AutoPay *string `pulumi:"autoPay"`
	// Specifies whether auto renew is enabled. Valid values are "true" and "false".
	AutoRenew *string `pulumi:"autoRenew"`
	// Specifies the name of the available partition (AZ).
	AvailabilityZone string `pulumi:"availabilityZone"`
	// Specifies the bandwidth billing type.
	BandwidthChargeMode *string `pulumi:"bandwidthChargeMode"`
	// Specifies the bandwidth size.
	BandwidthSize *int `pulumi:"bandwidthSize"`
	// Deprecated: use charging_mode instead
	BillingMode *int `pulumi:"billingMode"`
	// Specifies the charging mode of the CCE node. Valid values are *prePaid*
	// and *postPaid*, defaults to *postPaid*.
	ChargingMode *string `pulumi:"chargingMode"`
	// Specifies the ID of the cluster.
	ClusterId string `pulumi:"clusterId"`
	// Specifies the configurations of the data disk.
	DataVolumes []NodeDataVolume `pulumi:"dataVolumes"`
	// Specifies the ID of the DeH to which the node is scheduled.
	DedicatedHostId *string `pulumi:"dedicatedHostId"`
	// Specifies the ECS group ID. If specified, the node will be created under
	// the cloud server group.
	EcsGroupId *string `pulumi:"ecsGroupId"`
	// schema: Deprecated
	EcsPerformanceType *string `pulumi:"ecsPerformanceType"`
	// Specifies the ID of the EIP.
	EipId *string `pulumi:"eipId"`
	// Deprecated: use eip_id instead
	EipIds         []string `pulumi:"eipIds"`
	EnableForceNew *string  `pulumi:"enableForceNew"`
	// Specifies the enterprise project ID of the CCE node.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// schema: Deprecated
	ExtendParam map[string]string `pulumi:"extendParam"`
	// Deprecated: use charging_mode instead
	ExtendParamChargingMode *int `pulumi:"extendParamChargingMode"`
	// Specifies the extended parameters.
	// The object structure is documented below.
	ExtendParams *NodeExtendParams `pulumi:"extendParams"`
	// Specifies extension NICs of the node.
	// The object structure is documented below.
	ExtensionNics []NodeExtensionNic `pulumi:"extensionNics"`
	// Specifies the fixed IP of the NIC.
	FixedIp *string `pulumi:"fixedIp"`
	// Specifies the flavor ID.
	// resource.
	FlavorId string `pulumi:"flavorId"`
	// Specifies the hostname config of the kubernetes node,
	// which is supported by clusters of v1.23.6-r0 to v1.25 or clusters of v1.25.2-r0 or later versions.
	// The object structure is documented below.
	HostnameConfig *NodeHostnameConfig `pulumi:"hostnameConfig"`
	// Specifies the custom initialization flags.
	InitializedConditions []string `pulumi:"initializedConditions"`
	// Specifies the elastic IP type.
	Iptype *string `pulumi:"iptype"`
	// schema: Internal
	KeepEcs *bool `pulumi:"keepEcs"`
	// Specifies the key pair name when logging in to select the key pair mode.
	// This parameter and `password` are alternative.
	KeyPair *string `pulumi:"keyPair"`
	// Specifies the tags of a Kubernetes node, key/value pair format.
	Labels map[string]string `pulumi:"labels"`
	// Specifies the maximum number of instances a node is allowed to create.
	MaxPods *int `pulumi:"maxPods"`
	// Specifies the virtual space name. Currently, only **kubernetes**, **runtime**,
	// and **user** are supported.
	Name *string `pulumi:"name"`
	// Deprecated: will be removed after v1.26.0
	OrderId *string `pulumi:"orderId"`
	// Specifies the operating system of the node.
	// The value can be **EulerOS 2.9** and **CentOS 7.6** e.g. For more details,
	// please see [documentation](https://support.huaweicloud.com/intl/en-us/api-cce/node-os.html).
	// This parameter is required when the `nodeImageId` in `extendParams` is not specified.
	Os *string `pulumi:"os"`
	// schema: Internal
	Partition *string `pulumi:"partition"`
	// Specifies the root password when logging in to select the password mode.
	// The password consists of 8 to 26 characters and must contain at least three of following: uppercase letters,
	// lowercase letters, digits, special characters(!@$%^-_=+[{}]:,./?~#*).
	// This parameter can be plain or salted and is alternative to `keyPair`.
	Password *string `pulumi:"password"`
	// Specifies the charging period of the CCE node. If `periodUnit` is set to *month*
	// , the value ranges from 1 to 9. If `periodUnit` is set to *year*, the value ranges from 1 to 3. This parameter is
	// mandatory if `chargingMode` is set to *prePaid*.
	Period *int `pulumi:"period"`
	// Specifies the charging period unit of the CCE node.
	// Valid values are *month* and *year*. This parameter is mandatory if `chargingMode` is set to *prePaid*.
	PeriodUnit *string `pulumi:"periodUnit"`
	// Specifies the script to be executed after installation.
	// The input value can be a Base64 encoded string or not.
	Postinstall *string `pulumi:"postinstall"`
	// Specifies the script to be executed before installation.
	// The input value can be a Base64 encoded string or not.
	Preinstall *string `pulumi:"preinstall"`
	// Specifies the private key of the in used `keyPair`. This parameter is mandatory
	// when replacing or unbinding a keypair if the CCE node is in **Active** state.
	PrivateKey *string `pulumi:"privateKey"`
	// schema: Deprecated
	ProductId *string `pulumi:"productId"`
	// schema: Deprecated
	PublicKey *string `pulumi:"publicKey"`
	// Specifies the region in which to create the CCE node resource.
	// If omitted, the provider-level region will be used. Changing this creates a new CCE node resource.
	Region *string `pulumi:"region"`
	// Specifies the configuration of the system disk.
	RootVolume NodeRootVolume `pulumi:"rootVolume"`
	// Specifies the runtime of the CCE node. Valid values are *docker* and
	// *containerd*.
	Runtime *string `pulumi:"runtime"`
	// Specifies the bandwidth sharing type.
	Sharetype *string `pulumi:"sharetype"`
	// Specifies the disk initialization management parameter.
	// If omitted, disks are managed based on the DockerLVMConfigOverride parameter in extendParam.
	// This parameter is supported for clusters of v1.15.11 and later.
	// If the node has both local and EVS disks attached,
	// this parameter must be specified, or it may result in unexpected disk partitions.
	// If you want to change the value range of a data disk to **20** to **32768**, this parameter must be specified.
	// If you want to use the shared disk space (with the runtime and Kubernetes partitions cancelled),
	// this parameter must be specified.
	// If you want to store system components in the system disk, this parameter must be specified.
	Storage *NodeStorage `pulumi:"storage"`
	// Specifies the ID of the subnet to which the NIC belongs.
	SubnetId *string `pulumi:"subnetId"`
	// Specifies the tags of a VM node, key/value pair format.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the taints configuration of the nodes to set anti-affinity.
	// Each taint contains the following parameters:
	Taints []NodeTaint `pulumi:"taints"`
}

// The set of arguments for constructing a Node resource.
type NodeArgs struct {
	// schema: Internal
	Annotations pulumi.StringMapInput
	// Deprecated: Deprecated
	AutoPay pulumi.StringPtrInput
	// Specifies whether auto renew is enabled. Valid values are "true" and "false".
	AutoRenew pulumi.StringPtrInput
	// Specifies the name of the available partition (AZ).
	AvailabilityZone pulumi.StringInput
	// Specifies the bandwidth billing type.
	BandwidthChargeMode pulumi.StringPtrInput
	// Specifies the bandwidth size.
	BandwidthSize pulumi.IntPtrInput
	// Deprecated: use charging_mode instead
	BillingMode pulumi.IntPtrInput
	// Specifies the charging mode of the CCE node. Valid values are *prePaid*
	// and *postPaid*, defaults to *postPaid*.
	ChargingMode pulumi.StringPtrInput
	// Specifies the ID of the cluster.
	ClusterId pulumi.StringInput
	// Specifies the configurations of the data disk.
	DataVolumes NodeDataVolumeArrayInput
	// Specifies the ID of the DeH to which the node is scheduled.
	DedicatedHostId pulumi.StringPtrInput
	// Specifies the ECS group ID. If specified, the node will be created under
	// the cloud server group.
	EcsGroupId pulumi.StringPtrInput
	// schema: Deprecated
	EcsPerformanceType pulumi.StringPtrInput
	// Specifies the ID of the EIP.
	EipId pulumi.StringPtrInput
	// Deprecated: use eip_id instead
	EipIds         pulumi.StringArrayInput
	EnableForceNew pulumi.StringPtrInput
	// Specifies the enterprise project ID of the CCE node.
	EnterpriseProjectId pulumi.StringPtrInput
	// schema: Deprecated
	ExtendParam pulumi.StringMapInput
	// Deprecated: use charging_mode instead
	ExtendParamChargingMode pulumi.IntPtrInput
	// Specifies the extended parameters.
	// The object structure is documented below.
	ExtendParams NodeExtendParamsPtrInput
	// Specifies extension NICs of the node.
	// The object structure is documented below.
	ExtensionNics NodeExtensionNicArrayInput
	// Specifies the fixed IP of the NIC.
	FixedIp pulumi.StringPtrInput
	// Specifies the flavor ID.
	// resource.
	FlavorId pulumi.StringInput
	// Specifies the hostname config of the kubernetes node,
	// which is supported by clusters of v1.23.6-r0 to v1.25 or clusters of v1.25.2-r0 or later versions.
	// The object structure is documented below.
	HostnameConfig NodeHostnameConfigPtrInput
	// Specifies the custom initialization flags.
	InitializedConditions pulumi.StringArrayInput
	// Specifies the elastic IP type.
	Iptype pulumi.StringPtrInput
	// schema: Internal
	KeepEcs pulumi.BoolPtrInput
	// Specifies the key pair name when logging in to select the key pair mode.
	// This parameter and `password` are alternative.
	KeyPair pulumi.StringPtrInput
	// Specifies the tags of a Kubernetes node, key/value pair format.
	Labels pulumi.StringMapInput
	// Specifies the maximum number of instances a node is allowed to create.
	MaxPods pulumi.IntPtrInput
	// Specifies the virtual space name. Currently, only **kubernetes**, **runtime**,
	// and **user** are supported.
	Name pulumi.StringPtrInput
	// Deprecated: will be removed after v1.26.0
	OrderId pulumi.StringPtrInput
	// Specifies the operating system of the node.
	// The value can be **EulerOS 2.9** and **CentOS 7.6** e.g. For more details,
	// please see [documentation](https://support.huaweicloud.com/intl/en-us/api-cce/node-os.html).
	// This parameter is required when the `nodeImageId` in `extendParams` is not specified.
	Os pulumi.StringPtrInput
	// schema: Internal
	Partition pulumi.StringPtrInput
	// Specifies the root password when logging in to select the password mode.
	// The password consists of 8 to 26 characters and must contain at least three of following: uppercase letters,
	// lowercase letters, digits, special characters(!@$%^-_=+[{}]:,./?~#*).
	// This parameter can be plain or salted and is alternative to `keyPair`.
	Password pulumi.StringPtrInput
	// Specifies the charging period of the CCE node. If `periodUnit` is set to *month*
	// , the value ranges from 1 to 9. If `periodUnit` is set to *year*, the value ranges from 1 to 3. This parameter is
	// mandatory if `chargingMode` is set to *prePaid*.
	Period pulumi.IntPtrInput
	// Specifies the charging period unit of the CCE node.
	// Valid values are *month* and *year*. This parameter is mandatory if `chargingMode` is set to *prePaid*.
	PeriodUnit pulumi.StringPtrInput
	// Specifies the script to be executed after installation.
	// The input value can be a Base64 encoded string or not.
	Postinstall pulumi.StringPtrInput
	// Specifies the script to be executed before installation.
	// The input value can be a Base64 encoded string or not.
	Preinstall pulumi.StringPtrInput
	// Specifies the private key of the in used `keyPair`. This parameter is mandatory
	// when replacing or unbinding a keypair if the CCE node is in **Active** state.
	PrivateKey pulumi.StringPtrInput
	// schema: Deprecated
	ProductId pulumi.StringPtrInput
	// schema: Deprecated
	PublicKey pulumi.StringPtrInput
	// Specifies the region in which to create the CCE node resource.
	// If omitted, the provider-level region will be used. Changing this creates a new CCE node resource.
	Region pulumi.StringPtrInput
	// Specifies the configuration of the system disk.
	RootVolume NodeRootVolumeInput
	// Specifies the runtime of the CCE node. Valid values are *docker* and
	// *containerd*.
	Runtime pulumi.StringPtrInput
	// Specifies the bandwidth sharing type.
	Sharetype pulumi.StringPtrInput
	// Specifies the disk initialization management parameter.
	// If omitted, disks are managed based on the DockerLVMConfigOverride parameter in extendParam.
	// This parameter is supported for clusters of v1.15.11 and later.
	// If the node has both local and EVS disks attached,
	// this parameter must be specified, or it may result in unexpected disk partitions.
	// If you want to change the value range of a data disk to **20** to **32768**, this parameter must be specified.
	// If you want to use the shared disk space (with the runtime and Kubernetes partitions cancelled),
	// this parameter must be specified.
	// If you want to store system components in the system disk, this parameter must be specified.
	Storage NodeStoragePtrInput
	// Specifies the ID of the subnet to which the NIC belongs.
	SubnetId pulumi.StringPtrInput
	// Specifies the tags of a VM node, key/value pair format.
	Tags pulumi.StringMapInput
	// Specifies the taints configuration of the nodes to set anti-affinity.
	// Each taint contains the following parameters:
	Taints NodeTaintArrayInput
}

func (NodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nodeArgs)(nil)).Elem()
}

type NodeInput interface {
	pulumi.Input

	ToNodeOutput() NodeOutput
	ToNodeOutputWithContext(ctx context.Context) NodeOutput
}

func (*Node) ElementType() reflect.Type {
	return reflect.TypeOf((**Node)(nil)).Elem()
}

func (i *Node) ToNodeOutput() NodeOutput {
	return i.ToNodeOutputWithContext(context.Background())
}

func (i *Node) ToNodeOutputWithContext(ctx context.Context) NodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeOutput)
}

// NodeArrayInput is an input type that accepts NodeArray and NodeArrayOutput values.
// You can construct a concrete instance of `NodeArrayInput` via:
//
//	NodeArray{ NodeArgs{...} }
type NodeArrayInput interface {
	pulumi.Input

	ToNodeArrayOutput() NodeArrayOutput
	ToNodeArrayOutputWithContext(context.Context) NodeArrayOutput
}

type NodeArray []NodeInput

func (NodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Node)(nil)).Elem()
}

func (i NodeArray) ToNodeArrayOutput() NodeArrayOutput {
	return i.ToNodeArrayOutputWithContext(context.Background())
}

func (i NodeArray) ToNodeArrayOutputWithContext(ctx context.Context) NodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeArrayOutput)
}

// NodeMapInput is an input type that accepts NodeMap and NodeMapOutput values.
// You can construct a concrete instance of `NodeMapInput` via:
//
//	NodeMap{ "key": NodeArgs{...} }
type NodeMapInput interface {
	pulumi.Input

	ToNodeMapOutput() NodeMapOutput
	ToNodeMapOutputWithContext(context.Context) NodeMapOutput
}

type NodeMap map[string]NodeInput

func (NodeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Node)(nil)).Elem()
}

func (i NodeMap) ToNodeMapOutput() NodeMapOutput {
	return i.ToNodeMapOutputWithContext(context.Background())
}

func (i NodeMap) ToNodeMapOutputWithContext(ctx context.Context) NodeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeMapOutput)
}

type NodeOutput struct{ *pulumi.OutputState }

func (NodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Node)(nil)).Elem()
}

func (o NodeOutput) ToNodeOutput() NodeOutput {
	return o
}

func (o NodeOutput) ToNodeOutputWithContext(ctx context.Context) NodeOutput {
	return o
}

// schema: Internal
func (o NodeOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Node) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// Deprecated: Deprecated
func (o NodeOutput) AutoPay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Node) pulumi.StringPtrOutput { return v.AutoPay }).(pulumi.StringPtrOutput)
}

// Specifies whether auto renew is enabled. Valid values are "true" and "false".
func (o NodeOutput) AutoRenew() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Node) pulumi.StringPtrOutput { return v.AutoRenew }).(pulumi.StringPtrOutput)
}

// Specifies the name of the available partition (AZ).
func (o NodeOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v *Node) pulumi.StringOutput { return v.AvailabilityZone }).(pulumi.StringOutput)
}

// Specifies the bandwidth billing type.
func (o NodeOutput) BandwidthChargeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Node) pulumi.StringPtrOutput { return v.BandwidthChargeMode }).(pulumi.StringPtrOutput)
}

// Specifies the bandwidth size.
func (o NodeOutput) BandwidthSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Node) pulumi.IntPtrOutput { return v.BandwidthSize }).(pulumi.IntPtrOutput)
}

// Deprecated: use charging_mode instead
func (o NodeOutput) BillingMode() pulumi.IntOutput {
	return o.ApplyT(func(v *Node) pulumi.IntOutput { return v.BillingMode }).(pulumi.IntOutput)
}

// Specifies the charging mode of the CCE node. Valid values are *prePaid*
// and *postPaid*, defaults to *postPaid*.
func (o NodeOutput) ChargingMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Node) pulumi.StringOutput { return v.ChargingMode }).(pulumi.StringOutput)
}

// Specifies the ID of the cluster.
func (o NodeOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *Node) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// Specifies the configurations of the data disk.
func (o NodeOutput) DataVolumes() NodeDataVolumeArrayOutput {
	return o.ApplyT(func(v *Node) NodeDataVolumeArrayOutput { return v.DataVolumes }).(NodeDataVolumeArrayOutput)
}

// Specifies the ID of the DeH to which the node is scheduled.
func (o NodeOutput) DedicatedHostId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Node) pulumi.StringPtrOutput { return v.DedicatedHostId }).(pulumi.StringPtrOutput)
}

// Specifies the ECS group ID. If specified, the node will be created under
// the cloud server group.
func (o NodeOutput) EcsGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Node) pulumi.StringPtrOutput { return v.EcsGroupId }).(pulumi.StringPtrOutput)
}

// schema: Deprecated
func (o NodeOutput) EcsPerformanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Node) pulumi.StringPtrOutput { return v.EcsPerformanceType }).(pulumi.StringPtrOutput)
}

// Specifies the ID of the EIP.
func (o NodeOutput) EipId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Node) pulumi.StringPtrOutput { return v.EipId }).(pulumi.StringPtrOutput)
}

// Deprecated: use eip_id instead
func (o NodeOutput) EipIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Node) pulumi.StringArrayOutput { return v.EipIds }).(pulumi.StringArrayOutput)
}

func (o NodeOutput) EnableForceNew() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Node) pulumi.StringPtrOutput { return v.EnableForceNew }).(pulumi.StringPtrOutput)
}

// Specifies the enterprise project ID of the CCE node.
func (o NodeOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Node) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// schema: Deprecated
func (o NodeOutput) ExtendParam() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Node) pulumi.StringMapOutput { return v.ExtendParam }).(pulumi.StringMapOutput)
}

// Deprecated: use charging_mode instead
func (o NodeOutput) ExtendParamChargingMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Node) pulumi.IntPtrOutput { return v.ExtendParamChargingMode }).(pulumi.IntPtrOutput)
}

// Specifies the extended parameters.
// The object structure is documented below.
func (o NodeOutput) ExtendParams() NodeExtendParamsPtrOutput {
	return o.ApplyT(func(v *Node) NodeExtendParamsPtrOutput { return v.ExtendParams }).(NodeExtendParamsPtrOutput)
}

// Specifies extension NICs of the node.
// The object structure is documented below.
func (o NodeOutput) ExtensionNics() NodeExtensionNicArrayOutput {
	return o.ApplyT(func(v *Node) NodeExtensionNicArrayOutput { return v.ExtensionNics }).(NodeExtensionNicArrayOutput)
}

// Specifies the fixed IP of the NIC.
func (o NodeOutput) FixedIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Node) pulumi.StringPtrOutput { return v.FixedIp }).(pulumi.StringPtrOutput)
}

// Specifies the flavor ID.
// resource.
func (o NodeOutput) FlavorId() pulumi.StringOutput {
	return o.ApplyT(func(v *Node) pulumi.StringOutput { return v.FlavorId }).(pulumi.StringOutput)
}

// Specifies the hostname config of the kubernetes node,
// which is supported by clusters of v1.23.6-r0 to v1.25 or clusters of v1.25.2-r0 or later versions.
// The object structure is documented below.
func (o NodeOutput) HostnameConfig() NodeHostnameConfigOutput {
	return o.ApplyT(func(v *Node) NodeHostnameConfigOutput { return v.HostnameConfig }).(NodeHostnameConfigOutput)
}

// Specifies the custom initialization flags.
func (o NodeOutput) InitializedConditions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Node) pulumi.StringArrayOutput { return v.InitializedConditions }).(pulumi.StringArrayOutput)
}

// Specifies the elastic IP type.
func (o NodeOutput) Iptype() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Node) pulumi.StringPtrOutput { return v.Iptype }).(pulumi.StringPtrOutput)
}

// schema: Internal
func (o NodeOutput) KeepEcs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Node) pulumi.BoolPtrOutput { return v.KeepEcs }).(pulumi.BoolPtrOutput)
}

// Specifies the key pair name when logging in to select the key pair mode.
// This parameter and `password` are alternative.
func (o NodeOutput) KeyPair() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Node) pulumi.StringPtrOutput { return v.KeyPair }).(pulumi.StringPtrOutput)
}

// Specifies the tags of a Kubernetes node, key/value pair format.
func (o NodeOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Node) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Specifies the maximum number of instances a node is allowed to create.
func (o NodeOutput) MaxPods() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Node) pulumi.IntPtrOutput { return v.MaxPods }).(pulumi.IntPtrOutput)
}

// Specifies the virtual space name. Currently, only **kubernetes**, **runtime**,
// and **user** are supported.
func (o NodeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Node) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Deprecated: will be removed after v1.26.0
func (o NodeOutput) OrderId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Node) pulumi.StringPtrOutput { return v.OrderId }).(pulumi.StringPtrOutput)
}

// Specifies the operating system of the node.
// The value can be **EulerOS 2.9** and **CentOS 7.6** e.g. For more details,
// please see [documentation](https://support.huaweicloud.com/intl/en-us/api-cce/node-os.html).
// This parameter is required when the `nodeImageId` in `extendParams` is not specified.
func (o NodeOutput) Os() pulumi.StringOutput {
	return o.ApplyT(func(v *Node) pulumi.StringOutput { return v.Os }).(pulumi.StringOutput)
}

// schema: Internal
func (o NodeOutput) Partition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Node) pulumi.StringPtrOutput { return v.Partition }).(pulumi.StringPtrOutput)
}

// Specifies the root password when logging in to select the password mode.
// The password consists of 8 to 26 characters and must contain at least three of following: uppercase letters,
// lowercase letters, digits, special characters(!@$%^-_=+[{}]:,./?~#*).
// This parameter can be plain or salted and is alternative to `keyPair`.
func (o NodeOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Node) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// Specifies the charging period of the CCE node. If `periodUnit` is set to *month*
// , the value ranges from 1 to 9. If `periodUnit` is set to *year*, the value ranges from 1 to 3. This parameter is
// mandatory if `chargingMode` is set to *prePaid*.
func (o NodeOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Node) pulumi.IntPtrOutput { return v.Period }).(pulumi.IntPtrOutput)
}

// Specifies the charging period unit of the CCE node.
// Valid values are *month* and *year*. This parameter is mandatory if `chargingMode` is set to *prePaid*.
func (o NodeOutput) PeriodUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Node) pulumi.StringPtrOutput { return v.PeriodUnit }).(pulumi.StringPtrOutput)
}

// Specifies the script to be executed after installation.
// The input value can be a Base64 encoded string or not.
func (o NodeOutput) Postinstall() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Node) pulumi.StringPtrOutput { return v.Postinstall }).(pulumi.StringPtrOutput)
}

// Specifies the script to be executed before installation.
// The input value can be a Base64 encoded string or not.
func (o NodeOutput) Preinstall() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Node) pulumi.StringPtrOutput { return v.Preinstall }).(pulumi.StringPtrOutput)
}

// Private IP of the CCE node.
func (o NodeOutput) PrivateIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Node) pulumi.StringOutput { return v.PrivateIp }).(pulumi.StringOutput)
}

// Specifies the private key of the in used `keyPair`. This parameter is mandatory
// when replacing or unbinding a keypair if the CCE node is in **Active** state.
func (o NodeOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Node) pulumi.StringPtrOutput { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

// schema: Deprecated
func (o NodeOutput) ProductId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Node) pulumi.StringPtrOutput { return v.ProductId }).(pulumi.StringPtrOutput)
}

// Public IP of the CCE node.
func (o NodeOutput) PublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Node) pulumi.StringOutput { return v.PublicIp }).(pulumi.StringOutput)
}

// schema: Deprecated
func (o NodeOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Node) pulumi.StringPtrOutput { return v.PublicKey }).(pulumi.StringPtrOutput)
}

// Specifies the region in which to create the CCE node resource.
// If omitted, the provider-level region will be used. Changing this creates a new CCE node resource.
func (o NodeOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Node) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the configuration of the system disk.
func (o NodeOutput) RootVolume() NodeRootVolumeOutput {
	return o.ApplyT(func(v *Node) NodeRootVolumeOutput { return v.RootVolume }).(NodeRootVolumeOutput)
}

// Specifies the runtime of the CCE node. Valid values are *docker* and
// *containerd*.
func (o NodeOutput) Runtime() pulumi.StringOutput {
	return o.ApplyT(func(v *Node) pulumi.StringOutput { return v.Runtime }).(pulumi.StringOutput)
}

// ID of the ECS instance associated with the node.
func (o NodeOutput) ServerId() pulumi.StringOutput {
	return o.ApplyT(func(v *Node) pulumi.StringOutput { return v.ServerId }).(pulumi.StringOutput)
}

// Specifies the bandwidth sharing type.
func (o NodeOutput) Sharetype() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Node) pulumi.StringPtrOutput { return v.Sharetype }).(pulumi.StringPtrOutput)
}

// The status of the CCE node.
func (o NodeOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Node) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specifies the disk initialization management parameter.
// If omitted, disks are managed based on the DockerLVMConfigOverride parameter in extendParam.
// This parameter is supported for clusters of v1.15.11 and later.
// If the node has both local and EVS disks attached,
// this parameter must be specified, or it may result in unexpected disk partitions.
// If you want to change the value range of a data disk to **20** to **32768**, this parameter must be specified.
// If you want to use the shared disk space (with the runtime and Kubernetes partitions cancelled),
// this parameter must be specified.
// If you want to store system components in the system disk, this parameter must be specified.
func (o NodeOutput) Storage() NodeStoragePtrOutput {
	return o.ApplyT(func(v *Node) NodeStoragePtrOutput { return v.Storage }).(NodeStoragePtrOutput)
}

// Specifies the ID of the subnet to which the NIC belongs.
func (o NodeOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Node) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// Specifies the tags of a VM node, key/value pair format.
func (o NodeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Node) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Specifies the taints configuration of the nodes to set anti-affinity.
// Each taint contains the following parameters:
func (o NodeOutput) Taints() NodeTaintArrayOutput {
	return o.ApplyT(func(v *Node) NodeTaintArrayOutput { return v.Taints }).(NodeTaintArrayOutput)
}

type NodeArrayOutput struct{ *pulumi.OutputState }

func (NodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Node)(nil)).Elem()
}

func (o NodeArrayOutput) ToNodeArrayOutput() NodeArrayOutput {
	return o
}

func (o NodeArrayOutput) ToNodeArrayOutputWithContext(ctx context.Context) NodeArrayOutput {
	return o
}

func (o NodeArrayOutput) Index(i pulumi.IntInput) NodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Node {
		return vs[0].([]*Node)[vs[1].(int)]
	}).(NodeOutput)
}

type NodeMapOutput struct{ *pulumi.OutputState }

func (NodeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Node)(nil)).Elem()
}

func (o NodeMapOutput) ToNodeMapOutput() NodeMapOutput {
	return o
}

func (o NodeMapOutput) ToNodeMapOutputWithContext(ctx context.Context) NodeMapOutput {
	return o
}

func (o NodeMapOutput) MapIndex(k pulumi.StringInput) NodeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Node {
		return vs[0].(map[string]*Node)[vs[1].(string)]
	}).(NodeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NodeInput)(nil)).Elem(), &Node{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeArrayInput)(nil)).Elem(), NodeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeMapInput)(nil)).Elem(), NodeMap{})
	pulumi.RegisterOutputType(NodeOutput{})
	pulumi.RegisterOutputType(NodeArrayOutput{})
	pulumi.RegisterOutputType(NodeMapOutput{})
}
